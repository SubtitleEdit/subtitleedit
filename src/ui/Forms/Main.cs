using Nikse.SubtitleEdit.Controls;
using Nikse.SubtitleEdit.Core.AudioToText;
using Nikse.SubtitleEdit.Core.AutoTranslate;
using Nikse.SubtitleEdit.Core.BluRaySup;
using Nikse.SubtitleEdit.Core.Common;
using Nikse.SubtitleEdit.Core.ContainerFormats;
using Nikse.SubtitleEdit.Core.ContainerFormats.MaterialExchangeFormat;
using Nikse.SubtitleEdit.Core.ContainerFormats.Matroska;
using Nikse.SubtitleEdit.Core.ContainerFormats.Mp4;
using Nikse.SubtitleEdit.Core.ContainerFormats.Mp4.Boxes;
using Nikse.SubtitleEdit.Core.ContainerFormats.TransportStream;
using Nikse.SubtitleEdit.Core.Enums;
using Nikse.SubtitleEdit.Core.Forms;
using Nikse.SubtitleEdit.Core.Interfaces;
using Nikse.SubtitleEdit.Core.NetflixQualityCheck;
using Nikse.SubtitleEdit.Core.SpellCheck;
using Nikse.SubtitleEdit.Core.SubtitleFormats;
using Nikse.SubtitleEdit.Core.VobSub;
using Nikse.SubtitleEdit.Forms.Assa;
using Nikse.SubtitleEdit.Forms.AudioToText;
using Nikse.SubtitleEdit.Forms.FormatProperties;
using Nikse.SubtitleEdit.Forms.Networking;
using Nikse.SubtitleEdit.Forms.Ocr;
using Nikse.SubtitleEdit.Forms.Options;
using Nikse.SubtitleEdit.Forms.SeJobs;
using Nikse.SubtitleEdit.Forms.ShotChanges;
using Nikse.SubtitleEdit.Forms.Styles;
using Nikse.SubtitleEdit.Forms.Translate;
using Nikse.SubtitleEdit.Forms.VTT;
using Nikse.SubtitleEdit.Logic;
using Nikse.SubtitleEdit.Logic.CommandLineConvert;
using Nikse.SubtitleEdit.Logic.Networking;
using Nikse.SubtitleEdit.Logic.SeJob;
using Nikse.SubtitleEdit.Logic.VideoPlayers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Nikse.SubtitleEdit.Forms.Tts;
using CheckForUpdatesHelper = Nikse.SubtitleEdit.Logic.CheckForUpdatesHelper;
using MessageBox = Nikse.SubtitleEdit.Forms.SeMsgBox.MessageBox;
using Timer = System.Windows.Forms.Timer;

namespace Nikse.SubtitleEdit.Forms
{
    public sealed partial class Main : Form, IReloadSubtitle, IFindAndReplace
    {
        private class ComboBoxZoomItem
        {
            public string Text { get; set; }
            public double ZoomFactor { get; set; }

            public override string ToString()
            {
                return Text;
            }
        }

        public static string MainTextBox => nameof(textBoxListViewText);

        private Control ListView => splitContainerListViewAndText;
        private Control SourceView => textBoxSource;
        private bool InListView => !textBoxSource.Visible;
        private bool InSourceView => textBoxSource.Visible;
        private int MinGapBetweenLines => Configuration.Settings.General.MinimumMillisecondsBetweenLines;
        private bool _isOriginalActive;
        private bool IsOriginalEditable => _isOriginalActive && Configuration.Settings.General.AllowEditOfOriginalSubtitle;
        private bool IsVideoVisible => _layout != LayoutManager.LayoutNoVideo;

        private Subtitle _subtitle = new Subtitle();
        private Subtitle _subtitleOriginal = new Subtitle();
        private string _fileName;
        private string _subtitleOriginalFileName;
        private int _undoIndex = -1;
        private string _listViewTextUndoLast;
        private int _listViewTextUndoIndex = -1;
        private long _listViewTextTicks = -1;
        private string _listViewOriginalTextUndoLast;
        private long _listViewOriginalTextTicks = -1;
        private bool _listViewMouseDown;
        private long _sourceTextTicks = -1;

        private int _videoAudioTrackNumber = -1;

        public int VideoAudioTrackNumber
        {
            get => _videoAudioTrackNumber;
            set
            {
                if (_videoAudioTrackNumber != value)
                {
                    if (value >= 0 && _videoAudioTrackNumber != -1)
                    {
                        ReloadWaveform(_videoFileName, value);
                    }

                    _videoAudioTrackNumber = value;
                }
            }
        }

        private string _videoFileName;
        private bool VideoFileNameIsUrl => _videoFileName != null &&
                                          (_videoFileName.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
                                           _videoFileName.StartsWith("https://", StringComparison.OrdinalIgnoreCase));

        private DateTime _fileDateTime;
        private string _title;
        private FindReplaceDialogHelper _findHelper;
        private FindDialog _findDialog;
        private ReplaceDialog _replaceDialog;
        private Form _dialog;
        private bool _sourceViewChange;
        private int _changeSubtitleHash = -1;
        private int _changeOriginalSubtitleHash = -1;
        private int _changeSubtitleTextHash = -1;
        private Timer _liveSpellCheckTimer;
        private int _subtitleListViewIndex = -1;
        private Paragraph _oldSelectedParagraph;
        private bool _converted;
        private bool _formatManuallyChanged;
        private SubtitleFormat _oldSubtitleFormat;
        private SubtitleFormat _currentSubtitleFormat;
        private List<int> _selectedIndices;
        private LanguageStructure.Main _language;
        private LanguageStructure.General _languageGeneral;
        private SpellCheck _spellCheckForm;
        private bool _loading = true;
        private bool _exitWhenLoaded;
        private bool _forceClose = false;
        private int _repeatCount = -1;
        private double _endSeconds = -1;
        private int _playSelectionIndex = -1;
        private int _playSelectionIndexLoopStart = -1;
        private double _endSecondsNewPosition = -1;
        private long _endSecondsNewPositionTicks;
        private const double EndDelay = 0.05;
        private int _autoContinueDelayCount = -1;
        private long _lastTextKeyDownTicks;
        private long _lastHistoryTicks;
        private long _lastWaveformMenuCloseTicks;
        private double? _audioWaveformRightClickSeconds;
        private readonly Timer _timerDoSyntaxColoring = new Timer();
        private Timer _timerAutoBackup;
        private readonly Timer _timerClearStatus = new Timer();
        private string _textAutoBackup;
        private string _textAutoBackupOriginal;
        private readonly List<string> _statusLog = new List<string>();
        private bool _disableShowStatus;
        private StatusLog _statusLogForm;
        private bool _makeHistoryPaused;
        private bool _saveAsCalled;
        private string _imageSubFileName;
        private readonly Timer _timerSlow = new Timer();
        private readonly ContextMenuStrip _contextMenuStripPlayRate;

        private CheckForUpdatesHelper _checkForUpdatesHelper;
        private Timer _timerCheckForUpdates;

        private NikseWebServiceSession _networkSession;
        private NetworkChat _networkChat;

        private ShowEarlierLater _showEarlierOrLater;
        private MeasurementConverter _measurementConverter;

        private bool _isVideoControlsUndocked;
        private VideoPlayerUndocked _videoPlayerUndocked;
        private WaveformUndocked _waveformUndocked;
        private VideoControlsUndocked _videoControlsUndocked;

        private GoogleOrMicrosoftTranslate _googleOrMicrosoftTranslate;

        private bool _cleanupHasRun;
        private bool _cancelWordSpellCheck = true;

        private bool IsLiveSpellCheckEnabled => Configuration.Settings.Tools.LiveSpellCheck &&
                                                Configuration.Settings.General.SubtitleTextBoxSyntaxColor;

        private bool _clearLastFind;
        private FindType _clearLastFindType = FindType.Normal;
        private string _clearLastFindText = string.Empty;
        private bool _videoLoadedGoToSubPosAndPause;
        private string _cutText = string.Empty;
        private Paragraph _mainCreateStartDownEndUpParagraph;
        private Paragraph _mainAdjustStartDownEndUpAndGoToNextParagraph;
        private int _lastDoNotPrompt = -1;
        private VideoInfo _videoInfo;
        private bool _splitDualSami;
        private bool _openFileDialogOn;
        private bool _resetVideo = true;
        private bool _doAutoBreakOnTextChanged = true;
        private readonly static object _syncUndo = new object();
        private string[] _dragAndDropFiles;
        private readonly Timer _dragAndDropTimer = new Timer(); // to prevent locking windows explorer
        private readonly Timer _dragAndDropVideoTimer = new Timer(); // to prevent locking windows explorer
        private long _labelNextTicks = -1;
        private bool _showBookmarkLabel = true;
        private ContextMenuStrip _bookmarkContextMenu;
        private readonly MainShortcuts _shortcuts = new MainShortcuts();
        private long _winLeftDownTicks = -1;
        private long _winRightDownTicks = -1;
        private FormWindowState _lastFormWindowState = FormWindowState.Normal;
        private readonly List<string> _filesToDelete = new List<string>();
        private bool _restorePreviewAfterSecondSubtitle;
        private ListBox _intellisenceList;
        private ListBox _intellisenceListOriginal;
        private bool _updateSelectedCountStatusBar;
        private VoskDictate _dictateForm;
        private object _dictateTextBox;
        private bool _hasCurrentVosk;
        private int _openSaveCounter;

        public bool IsMenuOpen { get; private set; }

        private bool AutoRepeatContinueOn => tabControlModes.SelectedIndex == 0 && checkBoxAutoContinue.Checked;

        private bool AutoRepeatOn => tabControlModes.SelectedIndex == 0 && checkBoxAutoRepeatOn.Checked;

        public string Title
        {
            get
            {
                if (_title == null)
                {
                    var versionInfo = Utilities.AssemblyVersion.Split('.');
                    _title = $"{_languageGeneral.Title} {versionInfo[0]}.{versionInfo[1]}.{versionInfo[2]}";
                }

                return _title;
            }
        }

        private void SetCurrentFormat(string formatName)
        {
            SetCurrentFormat(SubtitleFormat.FromName(formatName, new SubRip()));
        }

        private void SetCurrentFormat(SubtitleFormat format)
        {
            if (format.IsVobSubIndexFile)
            {
                UiUtil.InitializeSubtitleFormatComboBox(comboBoxSubtitleFormats.ComboBox, format);
                SubtitleListview1.HideNonVobSubColumns();
            }
            else if (comboBoxSubtitleFormats.Items.Count == 1)
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
                SetFormatTo(format);
            }
            else
            {
                int index = 0;
                foreach (string name in comboBoxSubtitleFormats.Items)
                {
                    if (name == format.FriendlyName)
                    {
                        var oldIdx = comboBoxSubtitleFormats.SelectedIndex;
                        comboBoxSubtitleFormats.SelectedIndex = index;
                        if (oldIdx != index)
                        {
                            var oldFormat = _currentSubtitleFormat;
                            _makeHistoryPaused = true;
                            _currentSubtitleFormat = format;
                            MakeFormatChange(_currentSubtitleFormat, oldFormat);
                            _makeHistoryPaused = false;
                        }

                        return;
                    }

                    index++;
                }
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            FixFonts();

            using (var graphics = CreateGraphics())
            {
                // avoid weird looking layout for high DPI
                if (graphics.DpiX > 120)
                {
                    Font = new Font(Font.FontFamily, (float)(Font.Size * graphics.DpiX / 96.0));

                    numericUpDownDuration.Left = timeUpDownStartTime.Right + 15;
                    numericUpDownDuration.Width += 5;
                }

                labelSingleLine.Left = textBoxListViewText.Left;
                labelTextLineLengths.Left = textBoxListViewText.Left;
                labelSingleLinePixels.Left = textBoxListViewText.Left;

                labelDuration.Left = numericUpDownDuration.Left;

                var xDiff = timeUpDownStartTime.Top - (labelStartTime.Top + labelStartTime.Height);
                if (xDiff < 0) // DPI auto-size fixes: see https://github.com/SubtitleEdit/subtitleedit/issues/3981
                {
                    xDiff *= -1;
                    timeUpDownStartTime.Top += xDiff;
                    numericUpDownDuration.Top += xDiff;
                    pictureBoxBookmark.Top += xDiff;
                    textBoxListViewText.Top += xDiff;
                    textBoxListViewText.Height -= xDiff;
                    textBoxListViewTextOriginal.Top += xDiff;
                    textBoxListViewTextOriginal.Height -= xDiff;
                    comboBoxAutoRepeat.Top += xDiff;
                    comboBoxAutoContinue.Top += xDiff;
                }
            }

            labelAutoDuration.Left = labelDuration.Left - (labelAutoDuration.Width - 5);

            buttonSplitLine.ForeColor = Color.Red;

            textBoxListViewText.BackColor = !IsSubtitleLoaded ? SystemColors.ActiveBorder : SystemColors.WindowFrame;
            textBoxListViewTextOriginal.BackColor = !IsSubtitleLoaded ? SystemColors.ActiveBorder : SystemColors.WindowFrame;

            if (Application.RenderWithVisualStyles && !Configuration.Settings.General.UseDarkTheme)
            {
                ListView.BackColor = SystemColors.Window;
            }

            base.OnLoad(e);
        }

        private void FixFonts()
        {
            UiUtil.FixFonts(this, 10000);
            UiUtil.FixLargeFonts(tabControlModes, buttonAutoBreak);
            UiUtil.FixLargeFonts(groupBoxEdit, buttonAutoBreak);
            textBoxListViewTextOriginal.Top = textBoxListViewText.Top;
            UiUtil.InitializeSubtitleFont(textBoxListViewText);
            UiUtil.InitializeSubtitleFont(textBoxListViewTextOriginal);
            UiUtil.InitializeSubtitleFont(SubtitleListview1);
            UiUtil.InitializeSubtitleFont(textBoxSource);
        }

        private static string GetArgumentAfterColon(IEnumerable<string> commandLineArguments, string requestedArgumentName)
        {
            foreach (var argument in commandLineArguments)
            {
                if (argument.StartsWith(requestedArgumentName, StringComparison.OrdinalIgnoreCase))
                {
                    if (requestedArgumentName.EndsWith(':'))
                    {
                        return argument.Substring(requestedArgumentName.Length);
                    }

                    return argument;
                }
            }

            return null;
        }

        public Main()
        {
            if (Configuration.IsRunningOnLinux)
            {
                NativeMethods.setlocale(NativeMethods.LC_NUMERIC, "C");
            }

            try
            {
                UiUtil.PreInitialize(this);
                InitializeComponent();

                comboBoxSubtitleFormats.Padding = new Padding(2, 7, 2, 7);
                comboBoxEncoding.Padding = new Padding(2, 7, 2, 7);

                Icon = Properties.Resources.SEIcon;

                textBoxListViewTextOriginal.Visible = false;
                labelOriginalText.Visible = false;
                labelOriginalCharactersPerSecond.Visible = false;
                labelTextOriginalLineLengths.Visible = false;
                labelOriginalSingleLine.Visible = false;
                labelOriginalSingleLinePixels.Visible = false;
                labelTextOriginalLineTotal.Visible = false;
                labelNextWord.Visible = false;

                _contextMenuStripPlayRate = new ContextMenuStrip();
                SetLanguage(Configuration.Settings.General.Language);
                toolStripStatusNetworking.Visible = false;
                labelTextLineLengths.Text = string.Empty;
                labelCharactersPerSecond.Text = string.Empty;
                labelTextLineTotal.Text = string.Empty;
                labelStartTimeWarning.Text = string.Empty;
                labelVideoInfo.Text = string.Empty;
                labelSingleLine.Text = string.Empty;
                labelSingleLinePixels.Text = string.Empty;
                labelTextOriginalLineTotal.Text = string.Empty;
                Text = Title;
                timeUpDownStartTime.TimeCode = new TimeCode();
                timeUpDownStartTime.UseVideoOffset = true;
                timeUpDownVideoPosition.UseVideoOffset = true;
                timeUpDownVideoPositionAdjust.UseVideoOffset = true;
                checkBoxAutoRepeatOn.Checked = Configuration.Settings.General.AutoRepeatOn;
                comboBoxAutoRepeat.SelectedIndex = Configuration.Settings.General.AutoRepeatCount;
                checkBoxAutoContinue.Checked = Configuration.Settings.General.AutoContinueOn;
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = Configuration.Settings.General.SyncListViewWithVideoWhilePlaying;

                SetFormatTo(Configuration.Settings.General.DefaultSubtitleFormat);

                UiUtil.InitializeTextEncodingComboBox(comboBoxEncoding.ComboBox);

                // set up UI interfaces / injections
                YouTubeAnnotations.GetYouTubeAnnotationStyles = new UiGetYouTubeAnnotationStyles();
                Ebu.EbuUiHelper = new UiEbuSaveHelper();
                Pac.GetPacEncodingImplementation = new UiGetPacEncoding(this);
                RichTextToPlainText.NativeRtfTextConverter = new RtfTextConverterRichTextBox();

                toolStripComboBoxFrameRate.Items.Add(23.976.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(24.0.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(25.0.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(29.97.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(30.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(59.94.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(60.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();
                pictureBoxBookmark.Visible = false;

                labelLayer.Visible = false;
                numericUpDownLayer.Visible = false;

                UpdateRecentFilesUI();
                InitializeToolbarAndImages();

                if (Configuration.Settings.General.RightToLeftMode)
                {
                    SubtitleListview1.RightToLeft = RightToLeft.Yes;
                    SubtitleListview1.RightToLeftLayout = true;
                }

                if (Configuration.Settings.General.StartInSourceView)
                {
                    SwitchView(SourceView);
                }
                else
                {
                    SwitchView(ListView);
                }

                //audioVisualizer.Visible = Configuration.Settings.General.ShowAudioVisualizer;
                audioVisualizer.ShowWaveform = Configuration.Settings.General.ShowWaveform;
                audioVisualizer.ShowSpectrogram = Configuration.Settings.General.ShowSpectrogram;
                //panelWaveformControls.Visible = Configuration.Settings.General.ShowAudioVisualizer;
                //trackBarWaveformPosition.Visible = Configuration.Settings.General.ShowAudioVisualizer;

                if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                {
                    numericUpDownDuration.DecimalPlaces = 2;
                    numericUpDownDuration.Increment = (decimal)(0.01);
                    toolStripSeparatorFrameRate.Visible = true;
                    toolStripLabelFrameRate.Visible = true;
                    toolStripComboBoxFrameRate.Visible = true;
                    toolStripButtonGetFrameRate.Visible = true;
                }

                _timerClearStatus.Interval = Configuration.Settings.General.ClearStatusBarAfterSeconds * 1000;
                _timerClearStatus.Tick += TimerClearStatus_Tick;

                var commandLineArgs = Environment.GetCommandLineArgs();
                var fileName = string.Empty;
                int srcLineNumber = -1;
                if (commandLineArgs.Length > 1)
                {
                    // ConvertOrReturn() shall not return if a command line conversion has been requested
                    CommandLineConverter.ConvertOrReturn(Title, commandLineArgs);

                    fileName = commandLineArgs[1];

                    if (fileName.Equals("/batchconvertui", StringComparison.OrdinalIgnoreCase) || fileName.Equals("-batchconvertui", StringComparison.OrdinalIgnoreCase))
                    {
                        new BatchConvert(this.Icon).ShowDialog();
                        Opacity = 0;
                        Environment.Exit(0);
                    }

                    var sourceLineString = GetArgumentAfterColon(commandLineArgs, "/srcline:");
                    if (!int.TryParse(sourceLineString, out srcLineNumber))
                    {
                        srcLineNumber = -1;
                    }

                    _videoFileName = GetArgumentAfterColon(commandLineArgs, "/video:");
                }

                labelAutoDuration.Visible = false;
                mediaPlayer.SubtitleText = string.Empty;
                comboBoxAutoContinue.SelectedIndex = Configuration.Settings.General.AutoContinueDelay;

                timeUpDownVideoPosition.TimeCode = new TimeCode();
                timeUpDownVideoPositionAdjust.TimeCode = new TimeCode();
                timeUpDownVideoPosition.TimeCodeChanged += VideoPositionChanged;
                timeUpDownVideoPositionAdjust.TimeCodeChanged += VideoPositionChanged;
                timeUpDownVideoPosition.Enabled = false;
                timeUpDownVideoPositionAdjust.Enabled = false;

                switch (Configuration.Settings.VideoControls.LastActiveTab)
                {
                    case "Translate":
                        tabControlModes.SelectedIndex = 0;
                        break;
                    case "Create":
                        tabControlModes.SelectedIndex = 1;
                        break;
                    case "Adjust":
                        tabControlModes.SelectedIndex = 2;
                        break;
                }

                TabControlModes_SelectedIndexChanged(null, null);
                buttonCustomUrl1.Text = Configuration.Settings.VideoControls.CustomSearchText1;
                buttonCustomUrl1.Visible = Configuration.Settings.VideoControls.CustomSearchUrl1.Length > 1;
                buttonCustomUrl2.Text = Configuration.Settings.VideoControls.CustomSearchText2;
                buttonCustomUrl2.Visible = Configuration.Settings.VideoControls.CustomSearchUrl2.Length > 1;

                CheckAndGetNewlyDownloadedMpvDlls(string.Empty);

                if (fileName.Length > 0 && File.Exists(fileName))
                {
                    fileName = Path.GetFullPath(fileName);

                    if (srcLineNumber < 0)
                    {
                        if (!OpenFromRecentFiles(fileName))
                        {
                            OpenSubtitle(fileName, null, _videoFileName, VideoAudioTrackNumber, null, true);
                        }
                    }
                    else
                    {
                        OpenSubtitle(fileName, null, _videoFileName, VideoAudioTrackNumber, null, true);
                    }

                    if (srcLineNumber >= 0 && GetCurrentSubtitleFormat().GetType() == typeof(SubRip) && srcLineNumber < textBoxSource.Lines.Length)
                    {
                        int pos = 0;
                        for (int i = 0; i < srcLineNumber; i++)
                        {
                            pos += textBoxSource.Lines[i].Length;
                        }

                        if (pos + 35 < textBoxSource.TextLength)
                        {
                            pos += 35;
                        }

                        string s = textBoxSource.Text.Substring(0, pos);
                        int lastTimeCode = s.LastIndexOf(" --> ", StringComparison.Ordinal); // 00:02:26,407 --> 00:02:31,356
                        if (lastTimeCode > 14 && lastTimeCode + 16 >= s.Length)
                        {
                            s = s.Substring(0, lastTimeCode - 5);
                            lastTimeCode = s.LastIndexOf(" --> ", StringComparison.Ordinal);
                        }

                        if (lastTimeCode > 14 && lastTimeCode + 16 < s.Length)
                        {
                            string tc = s.Substring(lastTimeCode - 13, 30).Trim();
                            int index = 0;
                            foreach (var p in _subtitle.Paragraphs)
                            {
                                if (tc == p.StartTime + " --> " + p.EndTime)
                                {
                                    SubtitleListview1.SelectNone();
                                    SubtitleListview1.Items[0].Selected = false;
                                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                    break;
                                }

                                index++;
                            }
                        }
                    }
                }
                else if (Configuration.Settings.General.StartLoadLastFile && Configuration.Settings.RecentFiles.Files.Count > 0)
                {
                    fileName = Configuration.Settings.RecentFiles.Files[0].FileName;
                    if (!string.IsNullOrEmpty(fileName) && File.Exists(fileName) && !OpenFromRecentFiles(fileName))
                    {
                        OpenSubtitle(fileName, null);
                    }
                }

                if (string.IsNullOrEmpty(_fileName))
                {
                    EnableOrDisableEditControls();
                }

                groupBoxEdit.BackColor = DefaultBackColor;

                // Initialize events etc. for audio waveform
                audioVisualizer.OnDoubleClickNonParagraph += AudioWaveform_OnDoubleClickNonParagraph;
                audioVisualizer.OnPositionSelected += AudioWaveform_OnPositionSelected;
                audioVisualizer.OnTimeChanged += AudioWaveform_OnTimeChanged; // start and/or end position of paragraph changed
                audioVisualizer.MouseUp += (sender, args) =>
                {
                    _lastMultiMoveHash = -1;
                };
                audioVisualizer.OnStartTimeChanged += AudioWaveform_OnStartTimeChanged;
                audioVisualizer.OnNewSelectionRightClicked += AudioWaveform_OnNewSelectionRightClicked;
                audioVisualizer.OnParagraphRightClicked += AudioWaveform_OnParagraphRightClicked;
                audioVisualizer.OnNonParagraphRightClicked += AudioWaveform_OnNonParagraphRightClicked;
                audioVisualizer.OnSingleClick += AudioWaveform_OnSingleClick;
                audioVisualizer.OnPause += AudioWaveform_OnPause;
                audioVisualizer.OnTimeChangedAndOffsetRest += AudioWaveform_OnTimeChangedAndOffsetRest;
                audioVisualizer.OnZoomedChanged += AudioWaveform_OnZoomedChanged;
                audioVisualizer.OnInsertAtVideoPosition += AudioVisualizerInsertAtVideoPosition;
                audioVisualizer.OnPasteAtVideoPosition += AudioVisualizerPasteAtVideoPosition;
                audioVisualizer.OnSelectAll += (sender, args) =>
                {
                    SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                    SubtitleListview1.SelectAll();
                    SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                    RefreshSelectedParagraph();
                };
                audioVisualizer.KeyDown += AudioVisualizer_KeyDown;
                SetAudioVisualizerSettings();
                if (Configuration.Settings.General.WaveformUpdateIntervalMs > 0 && Configuration.Settings.General.WaveformUpdateIntervalMs < 200)
                {
                    timerWaveform.Interval = Configuration.Settings.General.WaveformUpdateIntervalMs;
                }

                InitializeWaveformZoomDropdown();
                toolStripComboBoxWaveform.SelectedIndexChanged += ToolStripComboBoxWaveformSelectedIndexChanged;

                FixLargeFonts();

                if (Configuration.Settings.General.RightToLeftMode)
                {
                    ToolStripMenuItemRightToLeftModeClick(null, null);
                }

                timeUpDownStartTime.SetAutoWidth();
                numericUpDownDuration.Left = timeUpDownStartTime.Right + 4;
                timeUpDownVideoPosition.SetAutoWidth();
                timeUpDownVideoPositionAdjust.SetAutoWidth();

                toolStripSelected.Text = string.Empty;

                ListViewHelper.RestoreListViewDisplayIndices(SubtitleListview1);
            }
            catch (Exception exception)
            {
                Cursor = Cursors.Default;
                MessageBox.Show(exception.Message + Environment.NewLine + exception.StackTrace);
                SeLogger.Error(exception, "Main constructor");
            }
        }

        private void AudioVisualizer_KeyDown(object sender, KeyEventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1 || e.Handled)
            {
                return;
            }

            if (e.KeyData == italicToolStripMenuItem.ShortcutKeys)
            {
                ListViewToggleTag(HtmlUtil.TagItalic);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == boldToolStripMenuItem.ShortcutKeys)
            {
                ListViewToggleTag(HtmlUtil.TagBold);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == underlineToolStripMenuItem.ShortcutKeys)
            {
                ListViewToggleTag(HtmlUtil.TagUnderline);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == boxToolStripMenuItem.ShortcutKeys)
            {
                ListViewToggleTag("box");
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == removeAllFormattingsToolStripMenuItem.ShortcutKeys)
            {
                RemoveAllFormattingsToolStripMenuItemClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN1)
            {
                SetAlignment("{\\an1}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN2)
            {
                SetAlignment("", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN3)
            {
                SetAlignment("{\\an3}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN4)
            {
                SetAlignment("{\\an4}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN5)
            {
                SetAlignment("{\\an5}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN6)
            {
                SetAlignment("{\\an6}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN7)
            {
                SetAlignment("{\\an7}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN8)
            {
                SetAlignment("{\\an8}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN9)
            {
                SetAlignment("{\\an9}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor1)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color1));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor2)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color2));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor3)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color3));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor4)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color4));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor5)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color5));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor6)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color6));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor7)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color7));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor8)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color8));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainAutoTranslateSelectedLines)
            {
                e.SuppressKeyPress = true;
                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(1), () =>
                {
                    var onlySelectedLines = true;
                    MakeAutoTranslate(onlySelectedLines);
                });
            }
        }

        private void InitializeWaveformZoomDropdown()
        {
            toolStripComboBoxWaveform.Items.Clear();
            for (double zoomCounter = AudioVisualizer.ZoomMinimum; zoomCounter <= AudioVisualizer.ZoomMaximum + (0.001); zoomCounter += 0.1)
            {
                int percent = (int)Math.Round(zoomCounter * 100);
                var item = new ComboBoxZoomItem { Text = percent + "%", ZoomFactor = zoomCounter };
                toolStripComboBoxWaveform.Items.Add(item);
                if (percent == 100)
                {
                    toolStripComboBoxWaveform.SelectedIndex = toolStripComboBoxWaveform.Items.Count - 1;
                }
            }
        }

        private void AudioVisualizerInsertAtVideoPosition(object sender, EventArgs e)
        {
            InsertNewTextAtVideoPosition(false, mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
        }

        private void AudioVisualizerPasteAtVideoPosition(object sender, EventArgs e)
        {
            double videoPositionInMilliseconds = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
            if (_subtitle.GetFirstParagraphOrDefaultByTime(videoPositionInMilliseconds) == null)
            {
                PasteFromClipboard(videoPositionInMilliseconds);
            }
        }

        private void PasteFromClipboard(double videoPositionInMilliseconds)
        {
            if (Clipboard.ContainsText())
            {
                var text = Clipboard.GetText();
                var tmp = new Subtitle();
                var format = new SubRip();
                var list = new List<string>(text.SplitToLines());
                format.LoadSubtitle(tmp, list, null);
                if (videoPositionInMilliseconds >= 0 && tmp.Paragraphs.Count > 0)
                {
                    if (tmp.Paragraphs[0].StartTime.TotalMilliseconds > videoPositionInMilliseconds)
                    {
                        var c = tmp.Paragraphs[0].StartTime.TotalMilliseconds - videoPositionInMilliseconds;
                        tmp.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-c));
                    }
                    else
                    {
                        var c = videoPositionInMilliseconds - tmp.Paragraphs[0].StartTime.TotalMilliseconds;
                        tmp.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(c));
                    }
                }
                else
                {
                    var start = videoPositionInMilliseconds;
                    foreach (var line in list)
                    {
                        if (!string.IsNullOrWhiteSpace(line))
                        {
                            var duration = Utilities.GetOptimalDisplayMilliseconds(line);
                            tmp.Paragraphs.Add(new Paragraph(line.Trim(), start, start + duration));
                            start += duration + MinGapBetweenLines;
                        }
                    }
                }

                if (tmp.Paragraphs.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeInsertLine);
                    var selectIndices = new List<int>();
                    for (int i = 0; i < tmp.Paragraphs.Count; i++)
                    {
                        var p = tmp.Paragraphs[i];
                        var idx = _subtitle.InsertParagraphInCorrectTimeOrder(p);

                        if (tmp.Paragraphs.Count == 1)
                        {
                            var next = _subtitle.GetParagraphOrDefault(idx + 1);
                            if (next != null && next.StartTime.TotalMilliseconds < p.EndTime.TotalMilliseconds)
                            {
                                var newDuration = next.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines - p.StartTime.TotalMilliseconds;
                                if (newDuration >= Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                                {
                                    var cps = Utilities.GetCharactersPerSecond(p);
                                    if (cps <= Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds)
                                    {
                                        p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + newDuration;
                                    }
                                }
                            }
                        }

                        selectIndices.Add(idx);
                        if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                        {
                            var original = Utilities.GetOriginalParagraph(idx + i + 1, p, _subtitleOriginal.Paragraphs);
                            if (original == null)
                            {
                                _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds));
                            }
                        }
                    }

                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(selectIndices[0], true);
                    foreach (var selectIndex in selectIndices)
                    {
                        SubtitleListview1.Items[selectIndex].Selected = true;
                    }

                    if (_subtitleListViewIndex >= 0)
                    {
                        UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[_subtitleListViewIndex], textBoxListViewText);
                    }
                    else
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(0);
                    }

                    RefreshSelectedParagraph();
                }
            }
        }

        private void TimerClearStatus_Tick(object sender, EventArgs e)
        {
            ShowStatus(string.Empty);
        }

        private void SetEncoding(Encoding encoding)
        {
            if (encoding == Encoding.UTF8 && Configuration.Settings.General.DefaultEncoding == TextEncoding.Utf8WithoutBom)
            {
                comboBoxEncoding.SelectedIndex = TextEncoding.Utf8WithoutBomIndex;
            }

            foreach (TextEncoding item in comboBoxEncoding.Items)
            {
                if (item.Equals(encoding))
                {
                    comboBoxEncoding.SelectedItem = item;
                    return;
                }
            }

            comboBoxEncoding.SelectedIndex = TextEncoding.Utf8WithBomIndex; // UTF-8 with BOM
        }

        private void SetEncoding(string encodingName)
        {
            UiUtil.SetTextEncoding(comboBoxEncoding.ComboBox, encodingName);
        }

        private Encoding GetCurrentEncoding()
        {
            return UiUtil.GetTextEncodingComboBoxCurrentEncoding(comboBoxEncoding.ComboBox).Encoding;
        }

        private void AudioWaveform_OnNonParagraphRightClicked(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            addParagraphHereToolStripMenuItem.Visible = false;
            addParagraphAndPasteToolStripMenuItem.Visible = false;
            toolStripMenuItemSetParagraphAsSelection.Visible = false;
            deleteParagraphToolStripMenuItem.Visible = false;
            toolStripMenuItemFocusTextbox.Visible = true;
            splitToolStripMenuItem1.Visible = false;
            runWhiperOnParagraphToolStripMenuItem.Visible = false;
            mergeWithPreviousToolStripMenuItem.Visible = false;
            mergeWithNextToolStripMenuItem.Visible = false;
            extendToPreviousToolStripMenuItem.Visible = false;
            extendToNextToolStripMenuItem.Visible = false;
            toolStripSeparator6.Visible = false;
            toolStripMenuItemWaveformPlaySelection.Visible = false;
            toolStripSeparator23.Visible = false;
            if (audioVisualizer.GetShotChangeIndex(e.Seconds) >= 0)
            {
                removeShotChangeToolStripMenuItem.Visible = true;
                addShotChangeToolStripMenuItem.Visible = false;
            }
            else
            {
                removeShotChangeToolStripMenuItem.Visible = false;
                addShotChangeToolStripMenuItem.Visible = true;
            }

            var ms = e.Seconds * 1000.0;
            var paragraphsHere = _subtitle.Paragraphs
                .Count(p => ms > p.StartTime.TotalMilliseconds - 250 && p.EndTime.TotalMilliseconds > ms);
            insertNewSubtitleHereToolStripMenuItem.Visible = paragraphsHere == 0 && mediaPlayer.IsPaused;

            _audioWaveformRightClickSeconds = e.Seconds;
            contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        private void ResetPlaySelection()
        {
            _endSeconds = -1;
            _playSelectionIndex = -1;
            _playSelectionIndexLoopStart = -1;
        }

        private void AudioWaveform_OnDoubleClickNonParagraph(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            if (mediaPlayer.VideoPlayer != null)
            {
                if (e.Paragraph == null)
                {
                    if (Configuration.Settings.VideoControls.WaveformDoubleClickOnNonParagraphAction == "PlayPause")
                    {
                        mediaPlayer.TogglePlayPause();
                    }
                }
                else
                {
                    var index = _subtitle.GetIndex(e.Paragraph);
                    SelectListViewIndexAndEnsureVisible(index);
                    if (InSourceView)
                    {
                        var p = _subtitle.GetParagraphOrDefault(index);
                        if (p != null)
                        {
                            string tc = p.StartTime + " --> " + p.EndTime;
                            int start = textBoxSource.Text.IndexOf(p.Number + Environment.NewLine + tc, StringComparison.Ordinal);
                            if (start < 0)
                            {
                                start = 0;
                            }

                            start = textBoxSource.Text.IndexOf(tc, start, StringComparison.Ordinal);
                            if (start > 0)
                            {
                                textBoxSource.SelectionStart = start + tc.Length + Environment.NewLine.Length;
                                textBoxSource.SelectionLength = 0;
                                textBoxSource.ScrollToCaret();
                            }
                        }
                    }
                }
            }
        }

        private void AudioWaveform_OnZoomedChanged(object sender, EventArgs e)
        {
            SelectZoomTextInComboBox();
        }

        private void AudioWaveform_OnTimeChangedAndOffsetRest(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            if (mediaPlayer.VideoPlayer == null)
            {
                return;
            }

            int index = _subtitle.Paragraphs.IndexOf(e.Paragraph);
            if (index < 0)
            {
                if (IsOriginalEditable)
                {
                    index = _subtitleOriginal.GetIndex(e.Paragraph);
                    if (index >= 0)
                    {
                        var current = Utilities.GetOriginalParagraph(index, e.Paragraph, _subtitle.Paragraphs);
                        if (current != null)
                        {
                            index = _subtitle.Paragraphs.IndexOf(current);
                        }
                    }
                }
                else if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible)
                {
                    index = _subtitle.GetIndex(e.Paragraph);
                }
            }

            if (index >= 0)
            {
                SelectListViewIndexAndEnsureVisible(index);
                mediaPlayer.CurrentPosition = e.Seconds;
                SetStartAndOffsetTheRest(e.Seconds);
            }

            audioVisualizer.Invalidate();
            UpdateSourceView();
        }

        private void AudioWaveform_OnPause(object sender, EventArgs e)
        {
            ResetPlaySelection();
            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.Pause();
            }
        }

        private void AudioWaveform_OnSingleClick(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            timerWaveform?.Stop();
            ResetPlaySelection();
            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.Pause();
            }

            mediaPlayer.CurrentPosition = e.Seconds;

            int index = -1;
            if (SubtitleListview1.SelectedIndices.Count > 0)
            {
                index = SubtitleListview1.SelectedIndices[0];
            }

            SetWaveformPosition(audioVisualizer.StartPositionSeconds, e.Seconds, index);

            if (Configuration.Settings.VideoControls.WaveformSingleClickSelect && e.Paragraph != null)
            {
                SelectListViewIndexAndEnsureVisible(_subtitle.GetIndex(e.Paragraph));
            }

            timerWaveform?.Start();
        }

        private void AudioWaveform_OnParagraphRightClicked(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            if (ModifierKeys == Keys.Control)
            {
                // toggle selection
                var idx = _subtitle.GetIndex(e.Paragraph);
                if (idx >= 0 && idx < SubtitleListview1.Items.Count)
                {
                    SubtitleListview1.Items[idx].Selected = !SubtitleListview1.Items[idx].Selected;
                }

                return;
            }

            if ((ModifierKeys & Keys.Shift) != 0)
            {
                // select range
                var start = FirstSelectedIndex;
                var idx = _subtitle.GetIndex(e.Paragraph);
                if (idx >= 0 && idx < SubtitleListview1.Items.Count && start != idx)
                {
                    SubtitleListview1.SelectNone();
                    var end = Math.Max(start, idx);
                    start = Math.Min(start, idx);
                    if (start >= 0)
                    {
                        for (int i = start; i <= end; i++)
                        {
                            SubtitleListview1.Items[i].Selected = true;
                        }
                    }
                }

                return;
            }

            SelectListViewIndexAndEnsureVisible(_subtitle.GetIndex(e.Paragraph));

            insertNewSubtitleHereToolStripMenuItem.Visible = false;
            addParagraphHereToolStripMenuItem.Visible = false;
            addParagraphAndPasteToolStripMenuItem.Visible = false;
            toolStripMenuItemSetParagraphAsSelection.Visible = false;
            deleteParagraphToolStripMenuItem.Visible = true;
            toolStripMenuItemFocusTextbox.Visible = true;
            splitToolStripMenuItem1.Visible = true;
            runWhiperOnParagraphToolStripMenuItem.Visible = true;
            mergeWithPreviousToolStripMenuItem.Visible = true;
            mergeWithNextToolStripMenuItem.Visible = true;
            toolStripSeparator11.Visible = true;
            extendToPreviousToolStripMenuItem.Visible = true;
            extendToNextToolStripMenuItem.Visible = true;
            toolStripSeparator6.Visible = true;
            toolStripMenuItemWaveformPlaySelection.Visible = true;
            toolStripSeparator23.Visible = true;
            if (audioVisualizer.GetShotChangeIndex(e.Seconds) >= 0)
            {
                removeShotChangeToolStripMenuItem.Visible = true;
                addShotChangeToolStripMenuItem.Visible = false;
            }
            else
            {
                removeShotChangeToolStripMenuItem.Visible = false;
                addShotChangeToolStripMenuItem.Visible = true;
            }

            _audioWaveformRightClickSeconds = e.Seconds;
            contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        private void RemoveShotChangeToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (audioVisualizer.NewSelectionParagraph != null)
            {
                var newP = audioVisualizer.NewSelectionParagraph;
                var shotChanges = audioVisualizer.ShotChanges?.Where(p => p >= newP.StartTime.TotalSeconds && p <= newP.EndTime.TotalSeconds).ToList();
                foreach (var shotChange in shotChanges)
                {
                    var deleteIdx = audioVisualizer.GetShotChangeIndex(shotChange);
                    RemoveShotChange(deleteIdx);
                }

                return;
            }

            if (!_audioWaveformRightClickSeconds.HasValue)
            {
                return;
            }

            var idx = audioVisualizer.GetShotChangeIndex(_audioWaveformRightClickSeconds.Value);
            RemoveShotChange(idx);
        }

        private void RemoveShotChange(int idx)
        {
            if (idx >= 0 && idx < audioVisualizer.ShotChanges.Count)
            {
                var temp = new List<double>(audioVisualizer.ShotChanges);
                temp.RemoveAt(idx);
                audioVisualizer.ShotChanges = temp;
                ShotChangeHelper.SaveShotChanges(_videoFileName, temp);
            }
        }

        private void AddShotChangeToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!_audioWaveformRightClickSeconds.HasValue)
            {
                return;
            }

            var list = audioVisualizer.ShotChanges.Where(p => p > 0).ToList();
            list.Add(_audioWaveformRightClickSeconds.Value);
            list.Sort();
            audioVisualizer.ShotChanges = list;
            ShotChangeHelper.SaveShotChanges(_videoFileName, list);
        }

        private void AudioWaveform_OnNewSelectionRightClicked(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            SelectListViewIndexAndEnsureVisible(_subtitle.GetIndex(e.Paragraph));

            addParagraphHereToolStripMenuItem.Visible = true;

            insertNewSubtitleHereToolStripMenuItem.Visible = false;

            try
            {
                addParagraphAndPasteToolStripMenuItem.Visible = Clipboard.ContainsText();
            }
            catch
            {
                addParagraphAndPasteToolStripMenuItem.Visible = false;
            }

            if (SubtitleListview1.SelectedIndices.Count == 1)
            {
                var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                toolStripMenuItemSetParagraphAsSelection.Visible = p.StartTime.IsMaxTime;
            }

            deleteParagraphToolStripMenuItem.Visible = false;
            toolStripMenuItemFocusTextbox.Visible = false;
            splitToolStripMenuItem1.Visible = false;
            mergeWithPreviousToolStripMenuItem.Visible = false;
            mergeWithNextToolStripMenuItem.Visible = false;
            extendToPreviousToolStripMenuItem.Visible = false;
            extendToNextToolStripMenuItem.Visible = false;
            toolStripSeparator6.Visible = false;
            runWhiperOnParagraphToolStripMenuItem.Visible = false;

            addShotChangeToolStripMenuItem.Visible = false;
            var shotChangeCount = audioVisualizer.ShotChanges?.Count(p => p >= e.Paragraph.StartTime.TotalSeconds && p <= e.Paragraph.EndTime.TotalSeconds);
            removeShotChangeToolStripMenuItem.Text = LanguageSettings.Current.Waveform.RemoveShotChange;
            if (shotChangeCount == 0)
            {
                removeShotChangeToolStripMenuItem.Visible = false;
            }
            else if (shotChangeCount >= 1)
            {
                removeShotChangeToolStripMenuItem.Visible = true;
                removeShotChangeToolStripMenuItem.Text = LanguageSettings.Current.Waveform.RemoveShotChangesFromSelection;
            }

            contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        private void AudioWaveform_OnStartTimeChanged(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            if (e.Paragraph == null || e.BeforeParagraph == null)
            {
                return;
            }

            int index = FirstSelectedIndex;
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null || index != _subtitle.Paragraphs.IndexOf(e.Paragraph))
            {
                return;
            }

            _subtitle.Paragraphs[index] = new Paragraph(e.BeforeParagraph);
            MakeHistoryForUndo(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));
            _subtitle.Paragraphs[index] = p;

            if (timerAutoDuration.Enabled)
            {
                StopAutoDuration();
            }

            p.StartTime.TotalMilliseconds = e.Paragraph.StartTime.TotalMilliseconds;
            if (IsOriginalEditable)
            {
                var original = Utilities.GetOriginalParagraph(index, e.BeforeParagraph, _subtitleOriginal.Paragraphs);
                if (original != null)
                {
                    original.StartTime.TotalMilliseconds = e.Paragraph.StartTime.TotalMilliseconds;
                }
            }

            InitializeListViewEditBoxTimeOnly(p);
            SubtitleListview1.SetStartTimeAndDurationBackground(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
            UpdateSourceView();
        }

        private void AudioWaveform_OnTimeChanged(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            var paragraph = e.Paragraph;
            var beforeParagraph = e.BeforeParagraph ?? paragraph;

            if (Math.Abs(beforeParagraph.StartTime.TotalMilliseconds - paragraph.StartTime.TotalMilliseconds) < 0.01 &&
                Math.Abs(beforeParagraph.EndTime.TotalMilliseconds - paragraph.EndTime.TotalMilliseconds) < 0.01)
            {
                _makeHistoryPaused = true;
            }

            if (timerAutoDuration.Enabled)
            {
                StopAutoDuration();
            }

            int selectedIndex = FirstSelectedIndex;
            int index = _subtitle.Paragraphs.IndexOf(paragraph);

            var selectedIndices = SubtitleListview1.GetSelectedIndices();
            if (index >= 0 && e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.Whole && selectedIndices.Length > 1 &&
                selectedIndices.Contains(index) && ModifierKeys.HasFlag(Keys.Control) && Utilities.HasNoGaps(selectedIndices))
            {
                MoveSelectedLines(e, paragraph, index, selectedIndices);
                return;
            }

            if (index == _subtitleListViewIndex && _subtitleListViewIndex != -1)
            {
                // Make history item for rollback (change paragraph back for history + change again)
                _subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                _subtitle.Paragraphs[index] = paragraph;
                _makeHistoryPaused = true;

                Paragraph original = null;
                if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible)
                {
                    original = Utilities.GetOriginalParagraph(index, beforeParagraph, _subtitleOriginal.Paragraphs);
                }

                if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                { // so we don't get weird rounds we'll use whole frames when moving start time
                    double fr = TimeCode.BaseUnit / Configuration.Settings.General.CurrentFrameRate;
                    if (e.BeforeParagraph != null && e.BeforeParagraph.StartTime.TotalMilliseconds != e.Paragraph.StartTime.TotalMilliseconds &&
                        e.BeforeParagraph.DurationTotalMilliseconds == e.Paragraph.DurationTotalMilliseconds)
                    {
                        // move paragraph
                        paragraph.StartTime.TotalMilliseconds = ((int)Math.Round(paragraph.StartTime.TotalMilliseconds / fr)) * fr;
                        paragraph.EndTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds + e.BeforeParagraph.DurationTotalMilliseconds;
                    }
                    else if (e.BeforeParagraph != null && e.BeforeParagraph.EndTime.TotalMilliseconds == e.Paragraph.EndTime.TotalMilliseconds)
                    {
                        paragraph.EndTime.TotalMilliseconds = ((int)Math.Round(paragraph.EndTime.TotalMilliseconds / fr)) * fr;
                        int end = SubtitleFormat.MillisecondsToFrames(paragraph.EndTime.TotalMilliseconds);
                        int dur = SubtitleFormat.MillisecondsToFrames(paragraph.DurationTotalMilliseconds);
                        paragraph.StartTime.TotalMilliseconds = SubtitleFormat.FramesToMilliseconds(end - dur);
                    }
                }

                timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                timeUpDownStartTime.TimeCode = paragraph.StartTime;
                timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                SubtitleListview1.SetStartTimeAndDurationBackground(index, paragraph, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));

                var durationInSeconds = (decimal)paragraph.DurationTotalSeconds;
                if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
                {
                    SetDurationInSeconds((double)durationInSeconds);
                    if (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.Start)
                    {
                        paragraph.EndTime.TotalMilliseconds = e.BeforeParagraph.EndTime.TotalMilliseconds;
                    }
                }

                MovePrevNext(e, beforeParagraph, index);

                if (original != null && IsOriginalEditable)
                {
                    original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                    original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                }
            }
            else if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                index = _subtitleOriginal.GetIndex(paragraph);
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    _subtitleOriginal.Paragraphs[index] = new Paragraph(beforeParagraph);
                    MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    _subtitleOriginal.Paragraphs[index] = paragraph;
                    _makeHistoryPaused = true;

                    var current = Utilities.GetOriginalParagraph(index, beforeParagraph, _subtitle.Paragraphs);
                    if (current != null)
                    {
                        current.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                        current.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;

                        index = _subtitle.GetIndex(current);

                        SubtitleListview1.SetStartTimeAndDurationBackground(index, paragraph, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));

                        if (index == selectedIndex)
                        {
                            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                            timeUpDownStartTime.TimeCode = paragraph.StartTime;
                            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                            var durationInSeconds = (decimal)(paragraph.DurationTotalSeconds);
                            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
                            {
                                SetDurationInSeconds((double)durationInSeconds);
                            }
                        }
                    }
                }
            }
            else if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible)
            {
                index = _subtitle.GetIndex(paragraph);
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    _subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                    MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    _subtitle.Paragraphs[index] = paragraph;
                    _makeHistoryPaused = true;

                    MovePrevNext(e, beforeParagraph, index);

                    var original = Utilities.GetOriginalParagraph(index, beforeParagraph, _subtitleOriginal.Paragraphs);
                    if (original != null && IsOriginalEditable)
                    {
                        original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                        original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                    }

                    SubtitleListview1.SetStartTimeAndDurationBackground(index, paragraph, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                }
            }
            else
            {
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    _subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                    MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    _subtitle.Paragraphs[index] = paragraph;
                    _makeHistoryPaused = true;

                    MovePrevNext(e, beforeParagraph, index);
                    if (_subtitleOriginal != null && IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(index, beforeParagraph, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                            original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                        }
                    }
                }

                SubtitleListview1.SetStartTimeAndDurationBackground(index, paragraph, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
            }

            beforeParagraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
            beforeParagraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
            _makeHistoryPaused = false;

            if (Configuration.Settings.VideoControls.WaveformSetVideoPositionOnMoveStartEnd &&
                (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.Start ||
                 e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.End))
            {
                mediaPlayer.CurrentPosition = e.Seconds;
            }

            SubtitleListview1.SyntaxColorLineBackground(_subtitle.Paragraphs, index, paragraph);
            SubtitleListview1.SyntaxColorLineBackground(_subtitle.Paragraphs, index + 1, _subtitle.GetParagraphOrDefault(index + 1));
            UpdateSourceView();
        }

        private int _lastMultiMoveHash = -1;
        private void MoveSelectedLines(AudioVisualizer.ParagraphEventArgs e, Paragraph paragraph, int index, int[] selectedIndices)
        {
            // calculate move min/max values related to current idx
            var newMultiMoveHash = paragraph.DurationTotalMilliseconds.GetHashCode() + index.GetHashCode() + selectedIndices.Length.GetHashCode();
            if (newMultiMoveHash != _lastMultiMoveHash)
            {
                var currentStart = _subtitle.Paragraphs[index].StartTime.TotalMilliseconds;
                var currentEnd = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                var min = selectedIndices.Min();
                var max = selectedIndices.Max();
                var minStart = _subtitle.Paragraphs[min].StartTime.TotalMilliseconds;
                var maxEnd = _subtitle.Paragraphs[max].EndTime.TotalMilliseconds;
                var minBefore = _subtitle.GetParagraphOrDefault(min - 1);
                var maxAfter = _subtitle.GetParagraphOrDefault(max + 1);
                var minDiff = currentStart - minStart;
                var maxDiff = maxEnd - currentEnd;
                audioVisualizer.SetMinAndMax(minBefore == null ? 0 : (minBefore.EndTime.TotalMilliseconds + minDiff + Configuration.Settings.General.MinimumMillisecondsBetweenLines),
                    maxAfter == null ? double.MaxValue : (maxAfter.StartTime.TotalMilliseconds - maxDiff - Configuration.Settings.General.MinimumMillisecondsBetweenLines));
                _lastMultiMoveHash = newMultiMoveHash;
            }

            MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));

            if (_subtitleListViewIndex != -1 && selectedIndices.Contains(_subtitleListViewIndex))
            {
                timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                timeUpDownStartTime.TimeCode = _subtitle.Paragraphs[_subtitleListViewIndex].StartTime;
                timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            }

            foreach (int idx in selectedIndices)
            {
                var p = _subtitle.Paragraphs[idx];
                if (p != paragraph)
                {
                    var oldParagraph = new Paragraph(p, false);
                    var dur = p.DurationTotalMilliseconds;
                    p.StartTime.TotalMilliseconds += e.AdjustMs;
                    p.EndTime.TotalMilliseconds += e.AdjustMs;
                    SubtitleListview1.SetStartTimeAndDurationBackground(idx, p, _subtitle.GetParagraphOrDefault(idx + 1), _subtitle.GetParagraphOrDefault(idx - 1));

                    if (_subtitleOriginal != null && IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, oldParagraph, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            original.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                            original.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                        }
                    }
                }
            }
        }

        private void MovePrevNext(AudioVisualizer.ParagraphEventArgs e, Paragraph beforeParagraph, int index)
        {
            int curIdx = FirstSelectedIndex;
            if (e.MovePreviousOrNext && curIdx >= 0)
            {
                if (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.Start)
                {
                    var prev = _subtitle.GetParagraphOrDefault(index - 1);
                    if (prev != null)
                    {
                        Paragraph originalPrev = null;
                        if (IsOriginalEditable)
                        {
                            originalPrev = Utilities.GetOriginalParagraph(index - 1, prev, _subtitleOriginal.Paragraphs);
                        }

                        prev.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + (e.Paragraph.StartTime.TotalMilliseconds - beforeParagraph.StartTime.TotalMilliseconds);
                        SubtitleListview1.SetStartTimeAndDuration(index - 1, prev, _subtitle.GetParagraphOrDefault(index), _subtitle.GetParagraphOrDefault(index - 2));
                        audioVisualizer.Invalidate();

                        if (originalPrev != null)
                        {
                            originalPrev.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                        }

                        if (curIdx == index - 1)
                        {
                            var durationInSeconds = (decimal)(prev.DurationTotalSeconds);
                            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
                            {
                                SetDurationInSeconds((double)durationInSeconds);
                            }
                        }
                    }
                }
                else if (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.End)
                {
                    var next = _subtitle.GetParagraphOrDefault(index + 1);
                    if (next != null)
                    {
                        Paragraph originalNext = null;
                        if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible)
                        {
                            originalNext = Utilities.GetOriginalParagraph(index + 1, next, _subtitleOriginal.Paragraphs);
                        }

                        next.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds + (e.Paragraph.EndTime.TotalMilliseconds - beforeParagraph.EndTime.TotalMilliseconds);
                        SubtitleListview1.SetStartTimeAndDuration(index + 1, next, _subtitle.GetParagraphOrDefault(index + 2), _subtitle.GetParagraphOrDefault(index));
                        audioVisualizer.Invalidate();

                        if (originalNext != null)
                        {
                            originalNext.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds;
                        }

                        if (curIdx == index + 1)
                        {
                            timeUpDownStartTime.TimeCode = next.StartTime;
                            var durationInSeconds = (decimal)(next.DurationTotalSeconds);
                            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
                            {
                                SetDurationInSeconds((double)durationInSeconds);
                            }
                        }
                    }
                }
            }
        }

        private void AudioWaveform_OnPositionSelected(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            mediaPlayer.CurrentPosition = e.Seconds;
            if (e.Paragraph != null)
            {
                SelectListViewIndexAndEnsureVisible(_subtitle.GetIndex(e.Paragraph));
            }
        }

        private void VideoPositionChanged(object sender, EventArgs e)
        {
            var tud = (NikseTimeUpDown)sender;
            if (tud.Enabled)
            {
                mediaPlayer.CurrentPosition = tud.TimeCode.TotalSeconds;
            }
        }

        private void Main_Load(object sender, EventArgs e)
        {
            splitContainer1.Panel1MinSize = 525;
            splitContainer1.Panel2MinSize = 250;
            splitContainerMain.Panel1MinSize = 200;
            splitContainerMain.Panel2MinSize = 220;

            if (Configuration.Settings.General.StartRememberPositionAndSize &&
                !string.IsNullOrEmpty(Configuration.Settings.General.StartPosition))
            {
                var parts = Configuration.Settings.General.StartPosition.Split(';');
                if (parts.Length == 2)
                {
                    if (int.TryParse(parts[0], out var x) && int.TryParse(parts[1], out var y))
                    {
                        if (x > -100 || y > -100)
                        {
                            Left = x;
                            Top = y;
                        }
                    }
                }

                if (Configuration.Settings.General.StartSize == "Maximized")
                {
                    CenterFormOnCurrentScreen();
                    WindowState = FormWindowState.Maximized;
                    return;
                }

                parts = Configuration.Settings.General.StartSize.Split(';');
                if (parts.Length == 2)
                {
                    if (int.TryParse(parts[0], out var x) && int.TryParse(parts[1], out var y))
                    {
                        Width = x;
                        Height = y;
                    }
                }

                var ctrlScreen = Screen.FromControl(this);

                if (ctrlScreen.Bounds.Width < Width)
                {
                    Width = ctrlScreen.Bounds.Width;
                }

                if (ctrlScreen.Bounds.Height < Height)
                {
                    Height = ctrlScreen.Bounds.Height;
                }

                // Fix main window coordinate (Multi-Monitor issue)
                if ((ctrlScreen.Bounds.Right < Left) || (ctrlScreen.Bounds.Bottom < Top) ||
                    (ctrlScreen.Bounds.X > Right) || (ctrlScreen.Bounds.Y > Top))
                {
                    CenterToScreen();
                }
            }
            else
            {
                CenterFormOnCurrentScreen();
            }
        }

        private void InitializeLanguage()
        {
            fileToolStripMenuItem.Text = _language.Menu.File.Title;
            newToolStripMenuItem.Text = _language.Menu.File.New;
            openToolStripMenuItem.Text = _language.Menu.File.Open;
            toolStripMenuItemOpenKeepVideo.Text = _language.Menu.File.OpenKeepVideo;
            reopenToolStripMenuItem.Text = _language.Menu.File.Reopen;
            saveToolStripMenuItem.Text = _language.Menu.File.Save;
            saveAsToolStripMenuItem.Text = _language.Menu.File.SaveAs;
            toolStripMenuItemRestoreAutoBackup.Text = _language.Menu.File.RestoreAutoBackup;
            openOriginalToolStripMenuItem.Text = _language.Menu.File.OpenOriginal;
            saveOriginalToolStripMenuItem.Text = _language.Menu.File.SaveOriginal;
            saveOriginalAstoolStripMenuItem.Text = _language.SaveOriginalSubtitleAs;
            removeOriginalToolStripMenuItem.Text = _language.Menu.File.CloseOriginal;
            removeTranslationToolStripMenuItem.Text = _language.Menu.File.CloseTranslation;

            toolStripMenuItemOpenContainingFolder.Text = _language.Menu.File.OpenContainingFolder;
            toolStripMenuItemCompare.Text = _language.Menu.File.Compare;
            toolStripMenuItemVerifyCompleteness.Text = _language.Menu.File.VerifyCompleteness;
            toolStripMenuItemStatistics.Text = _language.Menu.File.Statistics;
            toolStripMenuItemPlugins.Text = _language.Menu.File.Plugins;
            toolStripMenuItemImportDvdSubtitles.Text = _language.Menu.File.ImportOcrFromDvd;
            toolStripMenuItemImportSubIdx.Text = _language.Menu.File.ImportOcrVobSubSubtitle;
            toolStripButtonGetFrameRate.ToolTipText = _language.GetFrameRateFromVideoFile;
            toolStripMenuItemImportBluRaySup.Text = _language.Menu.File.ImportBluRaySupFile;
            toolStripMenuItemImportBluraySupFileForEdit.Text = _language.Menu.File.ImportBluRaySupFileEdit;
            toolStripMenuItemImportFromVideo.Text = _language.Menu.File.ImportSubtitleFromVideoFile;
            toolStripMenuItemImportManualAnsi.Text = _language.Menu.File.ImportSubtitleWithManualChosenEncoding;
            toolStripMenuItemImportText.Text = _language.Menu.File.ImportText;
            toolStripMenuItemImportImages.Text = _language.Menu.File.ImportImages;
            toolStripMenuItemImportTimeCodes.Text = _language.Menu.File.ImportTimecodes;
            toolStripMenuItemImport.Text = _language.Menu.File.Import;
            toolStripMenuItemExport.Text = _language.Menu.File.Export;
            toolStripMenuItemExportPngXml.Text = _language.Menu.File.ExportBdnXml;
            toolStripMenuItemExportBluraySup.Text = _language.Menu.File.ExportBluRaySup;
            toolStripMenuItemExportAdobeEncoreFABImageScript.Text = _language.Menu.File.ExportAdobeEncoreFabImageScript;
            toolStripMenuItemExportTextTimeCodePair.Text = _language.Menu.File.ExportKoreanAtsFilePair;
            toolStripMenuItemExportVobSubSubIdx.Text = _language.Menu.File.ExportVobSub;
            toolStripMenuItemExportCavena890.Text = _language.Menu.File.ExportCavena890;
            toolStripMenuItemExportEBUSTL.Text = _language.Menu.File.ExportEbu;
            toolStripMenuItemExportPACScreenElectronics.Text = _language.Menu.File.ExportPac;
            toolStripMenuItemExportPlainText.Text = _language.Menu.File.ExportPlainText;
            toolStripMenuItemExportAvidStl.Text = _language.Menu.File.ExportAvidStl;
            toolStripMenuItemExportCapMakerPlus.Text = _language.Menu.File.ExportCapMakerPlus;
            toolStripMenuItemExportCaptionInc.Text = _language.Menu.File.ExportCaptionsInc;
            toolStripMenuItemExportCheetahCap.Text = _language.Menu.File.ExportCheetahCap;
            toolStripMenuItemExportUltech130.Text = _language.Menu.File.ExportUltech130;
            toolStripMenuItemExportCustomTextFormat.Text = _language.Menu.File.ExportCustomTextFormat;
            exitToolStripMenuItem.Text = _language.Menu.File.Exit;

            editToolStripMenuItem.Text = _language.Menu.Edit.Title;
            showHistoryforUndoToolStripMenuItem.Text = _language.Menu.Edit.ShowUndoHistory;
            toolStripMenuItemUndo.Text = _language.Menu.Edit.Undo;
            toolStripMenuItemRedo.Text = _language.Menu.Edit.Redo;

            toolStripMenuItemInsertUnicodeCharacter.Text = _language.Menu.Edit.InsertUnicodeSymbol;

            findToolStripMenuItem.Text = _language.Menu.Edit.Find;
            findNextToolStripMenuItem.Text = _language.Menu.Edit.FindNext;
            replaceToolStripMenuItem.Text = _language.Menu.Edit.Replace;
            multipleReplaceToolStripMenuItem.Text = _language.Menu.Edit.MultipleReplace;
            gotoLineNumberToolStripMenuItem.Text = _language.Menu.Edit.GoToSubtitleNumber;
            toolStripMenuItemRightToLeftMode.Text = _language.Menu.Edit.RightToLeftMode;

            toolStripMenuItemRemoveUnicodeControlChars.Text = _language.Menu.Edit.RemoveUnicodeControlCharacters;
            toolStripMenuItemRtlUnicodeControlChars.Text = _language.Menu.Edit.FixRtlViaUnicodeControlCharacters;

            toolStripMenuItemReverseRightToLeftStartEnd.Text = _language.Menu.Edit.ReverseRightToLeftStartEnd;
            toolStripMenuItemModifySelection.Text = _language.Menu.Edit.ModifySelection;
            toolStripMenuItemInverseSelection.Text = _language.Menu.Edit.InverseSelection;
            editSelectAllToolStripMenuItem.Text = _language.Menu.ContextMenu.SelectAll;

            toolsToolStripMenuItem.Text = _language.Menu.Tools.Title;
            adjustDisplayTimeToolStripMenuItem.Text = _language.Menu.Tools.AdjustDisplayDuration;
            toolStripMenuItemApplyDurationLimits.Text = _language.Menu.Tools.ApplyDurationLimits;
            toolStripMenuItemSubtitlesBridgeGaps.Text = _language.Menu.Tools.SubtitlesBridgeGaps;
            fixToolStripMenuItem.Text = _language.Menu.Tools.FixCommonErrors;
            startNumberingFromToolStripMenuItem.Text = _language.Menu.Tools.StartNumberingFrom;
            removeTextForHearImpairedToolStripMenuItem.Text = _language.Menu.Tools.RemoveTextForHearingImpaired;
            convertColorsToDialogToolStripMenuItem.Text = _language.Menu.Tools.ConvertColorsToDialog;
            ChangeCasingToolStripMenuItem.Text = _language.Menu.Tools.ChangeCasing;
            toolStripMenuItemChangeFrameRate2.Text = _language.Menu.Tools.ChangeFrameRate;
            changeSpeedInPercentToolStripMenuItem.Text = _language.Menu.Tools.ChangeSpeedInPercent;
            toolStripMenuItemAutoMergeShortLines.Text = _language.Menu.Tools.MergeShortLines;
            toolStripMenuItemMergeDuplicateText.Text = _language.Menu.Tools.MergeDuplicateText;
            toolStripMenuItemMergeLinesWithSameTimeCodes.Text = _language.Menu.Tools.MergeSameTimeCodes;
            toolStripMenuItemAutoSplitLongLines.Text = _language.Menu.Tools.SplitLongLines;
            breaksplitLongLinesToolStripMenuItem.Text = _language.Menu.Tools.SplitLongLines;
            mergeSentencesToolStripMenuItem.Text = _language.MergeSentences;
            setMinimumDisplayTimeBetweenParagraphsToolStripMenuItem.Text = _language.Menu.Tools.MinimumDisplayTimeBetweenParagraphs;
            toolStripMenuItemSortBy.Text = _language.Menu.Tools.SortBy;
            listErrorsToolStripMenuItem.Text = _language.Menu.Tools.ListErrors;
            netflixQualityCheckToolStripMenuItem.Text = _language.Menu.Tools.NetflixQualityCheck;
            toolStripButtonNetflixQualityCheck.Text = _language.Menu.Tools.NetflixQualityCheck;
            toolStripMenuItemBeautifyTimeCodes.Text = _language.Menu.Tools.BeautifyTimeCodes;
            toolStripButtonBeautifyTimeCodes.Text = _language.Menu.Tools.BeautifyTimeCodes;

            sortNumberToolStripMenuItem.Text = _language.Menu.Tools.Number;
            sortStartTimeToolStripMenuItem.Text = _language.Menu.Tools.StartTime;
            sortEndTimeToolStripMenuItem.Text = _language.Menu.Tools.EndTime;
            sortDisplayTimeToolStripMenuItem.Text = _language.Menu.Tools.Duration;
            sortByGapToolStripMenuItem.Text = LanguageSettings.Current.General.Gap;

            descendingToolStripMenuItem.Text = _language.Menu.Tools.Descending;
            AscendingToolStripMenuItem.Text = _language.Menu.Tools.Ascending;

            sortTextAlphabeticallytoolStripMenuItem.Text = _language.Menu.Tools.TextAlphabetically;
            sortTextMaxLineLengthToolStripMenuItem.Text = _language.Menu.Tools.TextSingleLineMaximumLength;
            sortTextTotalLengthToolStripMenuItem.Text = _language.Menu.Tools.TextTotalLength;
            sortTextNumberOfLinesToolStripMenuItem.Text = _language.Menu.Tools.TextNumberOfLines;
            textCharssecToolStripMenuItem.Text = _language.Menu.Tools.TextNumberOfCharactersPerSeconds;
            textWordsPerMinutewpmToolStripMenuItem.Text = _language.Menu.Tools.WordsPerMinute;
            styleToolStripMenuItem.Text = _language.Menu.Tools.Style;
            actorToolStripMenuItem.Text = LanguageSettings.Current.General.Actor;

            toolStripMenuItemShowOriginalInPreview.Text = _language.Menu.Edit.ShowOriginalTextInAudioAndVideoPreview;
            toolStripMenuItemMakeEmptyFromCurrent.Text = _language.Menu.Tools.MakeNewEmptyTranslationFromCurrentSubtitle;
            toolStripMenuItemBatchConvert.Text = _language.Menu.Tools.BatchConvert;
            generateDatetimeInfoFromVideoToolStripMenuItem.Text = _language.Menu.Tools.GenerateTimeAsText;
            toolStripMenuItemMeasurementConverter.Text = _language.Menu.Tools.MeasurementConverter;
            splitToolStripMenuItem.Text = _language.Menu.Tools.SplitSubtitle;
            appendTextVisuallyToolStripMenuItem.Text = _language.Menu.Tools.AppendSubtitle;
            joinSubtitlesToolStripMenuItem.Text = _language.Menu.Tools.JoinSubtitles;

            toolStripMenuItemVideo.Text = _language.Menu.Video.Title;
            openVideoToolStripMenuItem.Text = _language.Menu.Video.OpenVideo;
            toolStripMenuItemOpenVideoFromUrl.Text = _language.Menu.Video.OpenVideoFromUrl;
            toolStripMenuItemOpenDvd.Text = _language.Menu.Video.OpenDvd;
            setVideoOffsetToolStripMenuItem.Text = _language.Menu.Video.SetVideoOffset;
            toolStripMenuItemSetAudioTrack.Text = _language.Menu.Video.ChooseAudioTrack;
            closeVideoToolStripMenuItem.Text = _language.Menu.Video.CloseVideo;
            openSecondSubtitleToolStripMenuItem.Text = _language.Menu.Video.OpenSecondSubtitle;
            generateBlankVideoToolStripMenuItem.Text = _language.Menu.Video.GenerateBlankVideo;
            generateVideoWithHardcodedSubtitleToolStripMenuItem.Text = _language.Menu.Video.GenerateVideoWithBurnedInSub;
            generateVideoWithSoftcodedSubtitlesToolStripMenuItem.Text = _language.Menu.Video.GenerateVideoWithEmbeddedSubs;
            videoaudioToTextToolStripMenuItem.Text = string.Format(_language.Menu.Video.VideoAudioToTextX, "Vosk/Kaldi");
            audioToTextWhisperTolStripMenuItem.Text = string.Format(_language.Menu.Video.VideoAudioToTextX, "Whisper");
            textToSpeechAndAddToVideoToolStripMenuItem.Text = _language.Menu.Video.TextToSpeechAndAddToVideo;

            smpteTimeModedropFrameToolStripMenuItem.Text = _language.Menu.Video.SmptTimeMode;
            toolStripMenuItemImportChapters.Text = _language.Menu.Video.ImportChaptersFromVideo;
            toolStripMenuItemImportShotChanges.Text = _language.Menu.Video.GenerateImportShotChanges;
            toolStripMenuItemListShotChanges.Text = _language.Menu.Video.RemoveOrExportShotChanges;

            toolStripMenuItemAddWaveformBatch.Text = _language.Menu.Video.WaveformBatchGenerate;

            undockVideoControlsToolStripMenuItem.Text = _language.Menu.Video.UnDockVideoControls;
            redockVideoControlsToolStripMenuItem.Text = _language.Menu.Video.ReDockVideoControls;

            toolStripMenuItemSpellCheckMain.Text = _language.Menu.SpellCheck.Title;
            spellCheckToolStripMenuItem.Text = _language.Menu.SpellCheck.SpellCheck;
            toolStripMenuItemSpellCheckFromCurrentLine.Text = _language.Menu.SpellCheck.SpellCheckFromCurrentLine;
            findDoubleWordsToolStripMenuItem.Text = _language.Menu.SpellCheck.FindDoubleWords;
            FindDoubleLinesToolStripMenuItem.Text = _language.Menu.SpellCheck.FindDoubleLines;
            GetDictionariesToolStripMenuItem.Text = _language.Menu.SpellCheck.GetDictionaries;
            addWordToNameListToolStripMenuItem.Text = _language.Menu.SpellCheck.AddToNameList;

            toolStripMenuItemSynchronization.Text = _language.Menu.Synchronization.Title;
            toolStripMenuItemAdjustAllTimes.Text = _language.Menu.Synchronization.AdjustAllTimes;
            visualSyncToolStripMenuItem.Text = _language.Menu.Synchronization.VisualSync;
            toolStripMenuItemPointSync.Text = _language.Menu.Synchronization.PointSync;
            pointSyncViaOtherSubtitleToolStripMenuItem.Text = _language.Menu.Synchronization.PointSyncViaOtherSubtitle;

            toolStripMenuItemAutoTranslate.Text = _language.Menu.AutoTranslate.Title;
            optionsToolStripMenuItem.Text = _language.Menu.Options.Title;
            wordListsToolStripMenuItem.Text = _language.Menu.Options.WordLists;
            settingsToolStripMenuItem.Text = _language.Menu.Options.Settings;

            changeLanguageToolStripMenuItem.Text = _language.Menu.Options.ChooseLanguage + " [" + LanguageSettings.Current.Name + "]";

            toolStripMenuItemNetworking.Text = _language.Menu.Networking.Title;
            startServerToolStripMenuItem.Text = _language.Menu.Networking.StartNewSession;
            joinSessionToolStripMenuItem.Text = _language.Menu.Networking.JoinSession;
            showSessionKeyLogToolStripMenuItem.Text = _language.Menu.Networking.ShowSessionInfoAndLog;
            chatToolStripMenuItem.Text = _language.Menu.Networking.Chat;
            leaveSessionToolStripMenuItem.Text = _language.Menu.Networking.LeaveSession;

            checkForUpdatesToolStripMenuItem.Text = _language.Menu.Help.CheckForUpdates;
            helpToolStripMenuItem.Text = _language.Menu.Help.Title;
            helpToolStripMenuItem1.Text = _language.Menu.Help.Help;
            aboutToolStripMenuItem.Text = _language.Menu.Help.About;

            toolStripButtonFileNew.ToolTipText = _language.Menu.ToolBar.New;
            toolStripButtonFileOpen.ToolTipText = _language.Menu.ToolBar.Open;
            toolStripButtonVideoOpen.ToolTipText = _language.Menu.Video.OpenVideo.Replace("&", string.Empty);
            toolStripButtonSave.ToolTipText = _language.Menu.ToolBar.Save;
            toolStripButtonSaveAs.ToolTipText = _language.Menu.ToolBar.SaveAs;
            toolStripButtonFind.ToolTipText = _language.Menu.ToolBar.Find;
            toolStripButtonReplace.ToolTipText = _language.Menu.ToolBar.Replace;
            toolStripButtonFixCommonErrors.ToolTipText = _language.Menu.ToolBar.FixCommonErrors;
            toolStripButtonRemoveTextForHi.ToolTipText = _language.Menu.ToolBar.RemoveTextForHi;
            toolStripButtonVisualSync.ToolTipText = _language.Menu.ToolBar.VisualSync;
            toolStripButtonBurnIn.ToolTipText = LanguageSettings.Current.GenerateVideoWithBurnedInSubs.Title;
            toolStripButtonSpellCheck.ToolTipText = _language.Menu.ToolBar.SpellCheck;
            toolStripButtonNetflixQualityCheck.ToolTipText = _language.Menu.ToolBar.NetflixQualityCheck;
            toolStripButtonAssStyleManager.ToolTipText = LanguageSettings.Current.SubStationAlphaStyles.Title;
            toolStripButtonAssProperties.ToolTipText = LanguageSettings.Current.SubStationAlphaProperties.Title;
            toolStripButtonAssAttachments.ToolTipText = LanguageSettings.Current.AssaAttachments.Title;
            toolStripButtonAssaDraw.ToolTipText = _language.Menu.ToolBar.AssaDraw;
            toolStripButtonSettings.ToolTipText = _language.Menu.ToolBar.Settings;
            toolStripButtonHelp.ToolTipText = _language.Menu.ToolBar.Help;
            toolStripButtonSourceView.ToolTipText = LanguageSettings.Current.Settings.ToggleView;
            toolStripButtonLayout.ToolTipText = _language.Menu.ToolBar.Layout;

            toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.SubStationAlphaStyles;
            toolStripMenuItemAssaStyles.Text = _language.Menu.ContextMenu.SubStationAlphaStyles;
            setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SetStyle;
            setActorForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SetActor;
            toolStripMenuItemSetLayer.Text = _language.Menu.ContextMenu.SetLayer;
            toolStripMenuItemAssaTools.Text = _language.Menu.ContextMenu.AssaTools;
            applyCustomStylesToolStripMenuItem.Text = _language.Menu.ContextMenu.ApplyCustomOverrideTag;
            setPositionToolStripMenuItem.Text = _language.Menu.ContextMenu.SetPosition;
            progressBarToolStripMenuItem.Text = _language.Menu.ContextMenu.GenerateProgressBar;
            videoResolutionResamplerToolStripMenuItem.Text = _language.Menu.ContextMenu.AssaResolutionChanger;
            generateBackgroundBoxToolStripMenuItem.Text = _language.Menu.ContextMenu.AssaGenerateBackgroundBox;
            colorPickerToolStripMenuItem.Text = _language.Menu.ContextMenu.ImageColorPicker;

            toolStripMenuItemDelete.Text = _language.Menu.ContextMenu.Delete;
            insertLineToolStripMenuItem.Text = _language.Menu.ContextMenu.InsertFirstLine;
            toolStripMenuItemEmptyGoToSourceView.Text = _language.Menu.ContextMenu.GoToSourceView;
            toolStripMenuItemInsertBefore.Text = _language.Menu.ContextMenu.InsertBefore;
            toolStripMenuItemInsertAfter.Text = _language.Menu.ContextMenu.InsertAfter;
            toolStripMenuItemInsertSubtitle.Text = _language.Menu.ContextMenu.InsertSubtitleAfter;

            toolStripMenuItemCopySourceText.Text = _language.Menu.ContextMenu.CopyToClipboard;

            toolStripMenuItemColumn.Text = _language.Menu.ContextMenu.Column;
            columnDeleteTextOnlyToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnDeleteText;
            toolStripMenuItemColumnDeleteText.Text = _language.Menu.ContextMenu.ColumnDeleteTextAndShiftCellsUp;
            ShiftTextCellsDownToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnInsertEmptyTextAndShiftCellsDown;
            toolStripMenuItemInsertTextFromSub.Text = _language.Menu.ContextMenu.ColumnInsertTextFromSubtitle;
            toolStripMenuItemColumnImportText.Text = _language.Menu.ContextMenu.ColumnImportTextAndShiftCellsDown;
            toolStripMenuItemPasteSpecial.Text = _language.Menu.ContextMenu.ColumnPasteFromClipboard;
            moveTextUpToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnTextUp;
            moveTextDownToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnTextDown;
            copyOriginalTextToCurrentToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnCopyOriginalTextToCurrent;
            toolStripMenuItemBookmark.Text = LanguageSettings.Current.Settings.ToggleBookmarksWithComment;
            toolStripMenuItemGoToSourceView.Text = _language.Menu.ContextMenu.GoToSourceView;
            toolStripMenuItemGoToListView.Text = _language.Menu.ContextMenu.GoToListView;

            toolStripMenuItemWebVttVoice.Text = _language.Menu.ContextMenu.WebVttSetVoice;
            toolStripMenuItemWebVttStyle.Text = _language.Menu.ContextMenu.WebVttSetStyle;
            toolStripMenuWebVttBrowserPreview.Text = _language.Menu.ContextMenu.WebVttBrowserPreview;

            splitLineToolStripMenuItem.Text = _language.Menu.ContextMenu.Split;
            toolStripMenuItemMergeLines.Text = _language.Menu.ContextMenu.MergeSelectedLines;
            toolStripMenuItemMergeDialog.Text = _language.Menu.ContextMenu.MergeSelectedLinesAsDialog;
            mergeBeforeToolStripMenuItem.Text = _language.Menu.ContextMenu.MergeWithLineBefore;
            mergeAfterToolStripMenuItem.Text = _language.Menu.ContextMenu.MergeWithLineAfter;
            extendBeforeToolStripMenuItem.Text = _language.Menu.ContextMenu.ExtendToLineBefore;
            extendAfterToolStripMenuItem.Text = _language.Menu.ContextMenu.ExtendToLineAfter;
            removeFormattinglToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormatting;
            removeAllFormattingsToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingAll;
            removeBoldToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingBold;
            removeItalicToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingItalic;
            removeUnderlineToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingUnderline;
            removeColorToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingColor;
            removeFontNameToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingFontName;
            removeAlignmentToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingAlignment;
            boldToolStripMenuItem.Text = _languageGeneral.Bold;
            underlineToolStripMenuItem.Text = _language.Menu.ContextMenu.Underline;
            italicToolStripMenuItem.Text = _languageGeneral.Italic;
            colorToolStripMenuItem.Text = _language.Menu.ContextMenu.Color;
            toolStripMenuItemFont.Text = _language.Menu.ContextMenu.FontName;
            toolStripMenuItemAlignment.Text = _language.Menu.ContextMenu.Alignment;
            toolStripMenuItemAutoBreakLines.Text = _language.Menu.ContextMenu.AutoBalanceSelectedLines;
            toolStripMenuItemEvenlyDistributeLines.Text = _language.Menu.ContextMenu.EvenlyDistributeSelectedLines;
            toolStripMenuItemUnbreakLines.Text = _language.Menu.ContextMenu.RemoveLineBreaksFromSelectedLines;
            typeEffectToolStripMenuItem.Text = _language.Menu.ContextMenu.TypewriterEffect;
            karaokeEffectToolStripMenuItem.Text = _language.Menu.ContextMenu.KaraokeEffect;
            showSelectedLinesEarlierlaterToolStripMenuItem.Text = _language.Menu.ContextMenu.ShowSelectedLinesEarlierLater;
            visualSyncSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.VisualSyncSelectedLines;
            beautifyTimeCodesOfSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.BeautifyTimeCodesOfSelectedLines;
            toolStripMenuItemGoogleMicrosoftTranslateSelLine.Text = _language.Menu.ContextMenu.GoogleAndMicrosoftTranslateSelectedLine;
            toolStripMenuItemSelectedLines.Text = _language.Menu.ContextMenu.SelectedLines;

            toolStripMenuItemAutoTranslate.Text = _language.Menu.AutoTranslate.Title;
            genericTranslateToolStripMenuItem.Text = _language.Menu.AutoTranslate.AutoTranslate;
            autotranslateNLLBToolStripMenuItem.Text = _language.Menu.AutoTranslate.AutoTranslate;
            autotranslateViaCopypasteToolStripMenuItem.Text = _language.Menu.AutoTranslate.AutoTranslateViaCopyPaste;
            translateToolStripMenuItem.Text = _language.Menu.AutoTranslate.AutoTranslate;
            translateToolStripMenuItem.Visible = false; //TODO: remove old generic tranlsate in SE 4.0.3 or newer
            toolStripMenuItemTranslateSelected.Text = _language.Menu.ContextMenu.TranslateSelectedLines;
            adjustDisplayTimeForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.AdjustDisplayDurationForSelectedLines;
            fixCommonErrorsInSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.FixCommonErrorsInSelectedLines;
            changeCasingForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.ChangeCasingForSelectedLines;
            toolStripMenuItemSaveSelectedLines.Text = _language.Menu.ContextMenu.SaveSelectedLines;

            hideVideoControlsToolStripMenuItem.Text = _language.HideVideoControls;
            toolStripMenuItemShowVideoControls.Text = _language.ShowVideoControls;

            // textbox context menu
            cutToolStripMenuItem.Text = _language.Menu.ContextMenu.Cut;
            copyToolStripMenuItem.Text = _language.Menu.ContextMenu.Copy;
            pasteToolStripMenuItem.Text = _language.Menu.ContextMenu.Paste;
            deleteToolStripMenuItem.Text = _language.Menu.ContextMenu.Delete;
            cutToolStripMenuItem1.Text = _language.Menu.ContextMenu.Cut;
            copyToolStripMenuItem1.Text = _language.Menu.ContextMenu.Copy;
            pasteToolStripMenuItem1.Text = _language.Menu.ContextMenu.Paste;
            deleteToolStripMenuItem1.Text = _language.Menu.ContextMenu.Delete;
            selectAllToolStripMenuItem1.Text = _language.Menu.ContextMenu.SelectAll;
            toolStripMenuItemSplitTextAtCursor.Text = _language.Menu.ContextMenu.SplitLineAtCursorPosition;
            toolStripMenuItemSpellCheckSkipOnce.Text = LanguageSettings.Current.SpellCheck.SkipOnce;
            toolStripMenuItemSpellCheckSkipAll.Text = LanguageSettings.Current.SpellCheck.SkipAll;
            toolStripMenuItemSpellCheckAddToDictionary.Text = LanguageSettings.Current.SpellCheck.AddToUserDictionary;
            toolStripMenuItemSpellCheckAddToNames.Text = LanguageSettings.Current.SpellCheck.AddToNamesAndIgnoreList;
            toolStripMenuItemSplitViaWaveform.Text = _language.Menu.ContextMenu.SplitLineAtCursorAndWaveformPosition;
            selectAllToolStripMenuItem.Text = _language.Menu.ContextMenu.SelectAll;
            normalToolStripMenuItem1.Text = _language.Menu.ContextMenu.RemoveFormattingAll;
            boldToolStripMenuItem1.Text = _languageGeneral.Bold;
            italicToolStripMenuItem1.Text = _languageGeneral.Italic;
            boxToolStripMenuItem.Text = _language.Menu.ContextMenu.Box;
            underlineToolStripMenuItem1.Text = _language.Menu.ContextMenu.Underline;
            colorToolStripMenuItem1.Text = _language.Menu.ContextMenu.Color;
            fontNameToolStripMenuItem.Text = _language.Menu.ContextMenu.FontName;
            toolStripMenuItemInsertUnicodeSymbol.Text = _language.Menu.Edit.InsertUnicodeSymbol;
            insertUnicodeCharactersToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeSymbol;
            toolStripMenuItemInsertUnicodeControlCharacters.Text = _language.Menu.Edit.InsertUnicodeControlCharacters;
            insertUnicodeControlCharactersToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharacters;
            superscriptToolStripMenuItem.Text = _language.Menu.ContextMenu.Superscript;
            subscriptToolStripMenuItem.Text = _language.Menu.ContextMenu.Subscript;
            leftToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRM;
            righttoleftMarkToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLM;
            startOfLefttorightEmbeddingLREToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRE;
            startOfRighttoleftEmbeddingRLEToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLE;
            startOfLefttorightOverrideLROToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRO;
            startOfRighttoleftOverrideRLOToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLO;
            lefttorightMarkLRMToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRM;
            righttoleftMarkRLMToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLM;
            startOfLefttorightEmbeddingLREToolStripMenuItem1.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRE;
            startOfRighttoleftEmbeddingRLEToolStripMenuItem1.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLE;
            startOfLefttorightOverrideLROToolStripMenuItem1.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRO;
            startOfRighttoleftOverrideRLOToolStripMenuItem1.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLO;

            // main controls
            SubtitleListview1.InitializeLanguage(_languageGeneral, Configuration.Settings);
            toolStripLabelSubtitleFormat.Text = _language.Controls.SubtitleFormat;
            toolStripLabelEncoding.Text = _language.Controls.FileEncoding;
            toolStripLabelFrameRate.Text = _languageGeneral.FrameRate;
            labelStartTime.Text = _languageGeneral.StartTime;
            labelDuration.Text = _languageGeneral.Duration;
            labelText.Text = _languageGeneral.Text;
            UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle?.GetParagraphOrDefault(_subtitleListViewIndex), textBoxListViewText);
            labelOriginalText.Text = _languageGeneral.OriginalText;
            UpdateListViewTextInfo(labelTextOriginalLineLengths, labelOriginalSingleLine, labelOriginalSingleLinePixels, labelTextOriginalLineTotal, labelOriginalCharactersPerSecond, _subtitleOriginal?.GetParagraphOrDefault(_subtitleListViewIndex), textBoxListViewTextOriginal);
            buttonPrevious.Text = _language.Controls.Previous;
            buttonNext.Text = _language.Controls.Next;
            buttonAutoBreak.Text = _language.Controls.AutoBreak;
            buttonUnBreak.Text = _language.Controls.Unbreak;
            buttonSplitLine.Text = _languageGeneral.SplitLine;
            ShowSourceLineNumber();

            // Video controls
            tabPageTranslate.Text = _language.VideoControls.Translate;
            tabPageCreate.Text = _language.VideoControls.Create;
            tabPageAdjust.Text = _language.VideoControls.Adjust;
            checkBoxSyncListViewWithVideoWhilePlaying.Text = _language.VideoControls.SelectCurrentElementWhilePlaying;
            if (_videoFileName == null)
            {
                labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
            }

            toolStripButtonLockCenter.Text = _language.VideoControls.Center;
            toolStripSplitButtonPlayRate.Text = _language.VideoControls.PlayRate;
            groupBoxAutoRepeat.Text = _language.VideoControls.AutoRepeat;
            checkBoxAutoRepeatOn.Text = _language.VideoControls.AutoRepeatOn;
            labelAutoRepeatCount.Text = _language.VideoControls.AutoRepeatCount;
            groupBoxAutoContinue.Text = _language.VideoControls.AutoContinue;
            checkBoxAutoContinue.Text = _language.VideoControls.AutoContinueOn;
            labelAutoContinueDelay.Text = _language.VideoControls.DelayInSeconds;
            buttonPlayPrevious.Text = _language.VideoControls.Previous;
            buttonPlayCurrent.Text = _language.VideoControls.PlayCurrent;
            buttonPlayNext.Text = _language.VideoControls.Next;
            buttonStop.Text = _language.VideoControls.Pause;
            groupBoxTranslateSearch.Text = _language.VideoControls.SearchTextOnline;
            buttonGoogleIt.Text = _language.VideoControls.GoogleIt;
            buttonGoogleTranslateIt.Text = _language.VideoControls.GoogleTranslate;
            labelTranslateTip.Text = _language.VideoControls.TranslateTip;
            contextMenuStripHideVideoControls.Text = _language.HideVideoControls;
            contextMenuStripShowVideoControls.Text = _language.ShowVideoControls;

            buttonInsertNewText.Text = _language.VideoControls.InsertNewSubtitleAtVideoPosition;
            buttonBeforeText.Text = _language.VideoControls.PlayFromJustBeforeText;
            buttonGotoSub.Text = _language.VideoControls.GoToSubtitlePositionAndPause;
            buttonSetStartTime.Text = _language.VideoControls.SetStartTime;
            buttonSetEnd.Text = _language.VideoControls.SetEndTime;
            buttonSecBack1.Text = _language.VideoControls.SecondsBackShort;
            buttonSecBack2.Text = _language.VideoControls.SecondsBackShort;
            buttonForward1.Text = _language.VideoControls.SecondsForwardShort;
            buttonForward2.Text = _language.VideoControls.SecondsForwardShort;
            labelVideoPosition.Text = _language.VideoControls.VideoPosition;
            labelVideoPosition2.Text = _language.VideoControls.VideoPosition;

            buttonSetStartAndOffsetRest.Text = _language.VideoControls.SetStartTimeAndOffsetTheRest;
            buttonSetEndAndGoToNext.Text = _language.VideoControls.SetEndTimeAndGoToNext;
            buttonAdjustSetStartTime.Text = _language.VideoControls.SetStartTime;
            buttonAdjustSetEndTime.Text = _language.VideoControls.SetEndTime;
            buttonAdjustPlayBefore.Text = _language.VideoControls.PlayFromJustBeforeText;
            buttonAdjustGoToPosAndPause.Text = _language.VideoControls.GoToSubtitlePositionAndPause;
            buttonAdjustSecBack1.Text = _language.VideoControls.SecondsBackShort;
            buttonAdjustSecBack2.Text = _language.VideoControls.SecondsBackShort;
            buttonAdjustSecForward1.Text = _language.VideoControls.SecondsForwardShort;
            buttonAdjustSecForward2.Text = _language.VideoControls.SecondsForwardShort;

            // waveform
            var languageWaveform = LanguageSettings.Current.Waveform;
            addParagraphHereToolStripMenuItem.Text = languageWaveform.AddParagraphHere;
            addParagraphAndPasteToolStripMenuItem.Text = languageWaveform.AddParagraphHereAndPasteText;
            toolStripMenuItemSetParagraphAsSelection.Text = languageWaveform.SetParagraphAsSelection;
            deleteParagraphToolStripMenuItem.Text = languageWaveform.DeleteParagraph;
            toolStripMenuItemFocusTextbox.Text = languageWaveform.FocusTextBox;
            goToPreviousSubtitleStripMenuItem.Text = languageWaveform.GoToPrevious;
            goToNextSubtitleStripMenuItem.Text = languageWaveform.GoToNext;
            splitToolStripMenuItem1.Text = languageWaveform.Split;
            runWhiperOnParagraphToolStripMenuItem.Text = languageWaveform.RunWhisperSelectedParagraph;
            mergeWithPreviousToolStripMenuItem.Text = languageWaveform.MergeWithPrevious;
            mergeWithNextToolStripMenuItem.Text = languageWaveform.MergeWithNext;
            extendToPreviousToolStripMenuItem.Text = languageWaveform.ExtendToPrevious;
            extendToNextToolStripMenuItem.Text = languageWaveform.ExtendToNext;
            toolStripMenuItemWaveformPlaySelection.Text = languageWaveform.PlaySelection;
            showWaveformAndSpectrogramToolStripMenuItem.Text = languageWaveform.ShowWaveformAndSpectrogram;
            showOnlyWaveformToolStripMenuItem.Text = languageWaveform.ShowWaveformOnly;
            showOnlySpectrogramToolStripMenuItem.Text = languageWaveform.ShowSpectrogramOnly;
            seekSilenceToolStripMenuItem.Text = languageWaveform.SeekSilence;
            insertSubtitleHereToolStripMenuItem.Text = languageWaveform.InsertSubtitleFileHere;
            insertNewSubtitleHereToolStripMenuItem.Text = languageWaveform.InsertSubtitleHere;
            guessTimeCodesToolStripMenuItem.Text = languageWaveform.GuessTimeCodes;
            removeShotChangeToolStripMenuItem.Text = languageWaveform.RemoveShotChange;
            addShotChangeToolStripMenuItem.Text = languageWaveform.AddShotChange;

            toolStripButtonWaveformZoomOut.ToolTipText = languageWaveform.ZoomOut;
            toolStripButtonWaveformZoomIn.ToolTipText = languageWaveform.ZoomIn;

            SetWaveFormNotLoadedText(languageWaveform);

            FormatLanguage.LineNumberXErrorReadingFromSourceLineY = LanguageSettings.Current.Main.LineNumberXErrorReadingFromSourceLineY;
            FormatLanguage.LineNumberXErrorReadingTimeCodeFromSourceLineY = LanguageSettings.Current.Main.LineNumberXErrorReadingTimeCodeFromSourceLineY;
            FormatLanguage.LineNumberXExpectedEmptyLine = LanguageSettings.Current.Main.LineNumberXExpectedEmptyLine;
            FormatLanguage.LineNumberXExpectedNumberFromSourceLineY = LanguageSettings.Current.Main.LineNumberXExpectedNumberFromSourceLineY;

            NetflixLanguage.GlyphCheckReport = LanguageSettings.Current.NetflixQualityCheck.GlyphCheckReport;
            NetflixLanguage.WhiteSpaceCheckReport = LanguageSettings.Current.NetflixQualityCheck.WhiteSpaceCheckReport;

            DvdSubtitleLanguage.Language.NotSpecified = LanguageSettings.Current.LanguageNames.NotSpecified;
            DvdSubtitleLanguage.Language.UnknownCodeX = LanguageSettings.Current.LanguageNames.UnknownCodeX;
            DvdSubtitleLanguage.Language.CultureName = LanguageSettings.Current.General.CultureName;
            DvdSubtitleLanguage.Language.LanguageNames = DvdSubtitleLanguages.GetLanguages();
            DvdSubtitleLanguage.Initialize();
        }

        private void SetWaveFormNotLoadedText(LanguageStructure.Waveform languageWaveform)
        {
            if (Configuration.Settings.VideoControls.GenerateSpectrogram)
            {
                audioVisualizer.WaveformNotLoadedText = languageWaveform.ClickToAddWaveformAndSpectrogram;
            }
            else
            {
                audioVisualizer.WaveformNotLoadedText = languageWaveform.ClickToAddWaveform;
            }
        }

        private void SetFormatTo(string formatName)
        {
            SetFormatTo(SubtitleFormat.FromName(formatName, new SubRip()));
        }

        private void SetFormatTo(SubtitleFormat subtitleFormat)
        {
            var oldFormat = _currentSubtitleFormat;
            comboBoxSubtitleFormats.SelectedIndexChanged -= ComboBoxSubtitleFormatsSelectedIndexChanged;
            _currentSubtitleFormat = null;
            UiUtil.InitializeSubtitleFormatComboBox(comboBoxSubtitleFormats.ComboBox, subtitleFormat.FriendlyName);
            _currentSubtitleFormat = GetCurrentSubtitleFormat();
            MakeFormatChange(oldFormat, _currentSubtitleFormat);
            comboBoxSubtitleFormats.SelectedIndexChanged += ComboBoxSubtitleFormatsSelectedIndexChanged;
        }

        private void MakeFormatChange(SubtitleFormat currentSubtitleFormat, SubtitleFormat oldFormat)
        {
            var format = currentSubtitleFormat;
            _converted = format != _oldSubtitleFormat;
            if (format == null)
            {
                format = new SubRip();
            }

            var formatType = format.GetType();

            _oldSubtitleFormat = oldFormat;
            var oldParagraphCount = _subtitle.Paragraphs.Count;
            if (_oldSubtitleFormat == null)
            {
                if (!_loading && _lastChangedToFormat != format.FriendlyName)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeConvertingToX, format.FriendlyName));
                }

                if (formatType == typeof(AdvancedSubStationAlpha))
                {
                    SetAssaResolutionWithChecks();
                }
            }
            else
            {
                if (!_makeHistoryPaused && _lastChangedToFormat != format.FriendlyName)
                {
                    _subtitle.MakeHistoryForUndo(string.Format(_language.BeforeConvertingToX, format.FriendlyName), _lastChangedToFormat, _fileDateTime, _subtitleOriginal, _subtitleOriginalFileName, _subtitleListViewIndex, textBoxListViewText.SelectionStart, textBoxListViewTextOriginal.SelectionStart);
                    _undoIndex++;
                    if (_undoIndex > Subtitle.MaximumHistoryItems)
                    {
                        _undoIndex--;
                    }
                }

                if (formatType == typeof(AdvancedSubStationAlpha) && _oldSubtitleFormat.GetType() == typeof(NetflixImsc11Japanese))
                {
                    var raw = NetflixImsc11JapaneseToAss.Convert(_subtitle, _videoInfo?.Width ?? 1280, _videoInfo?.Height ?? 720);
                    var s = new Subtitle();
                    new AdvancedSubStationAlpha().LoadSubtitle(s, raw.SplitToLines(), null);
                    _subtitle.Paragraphs.Clear();
                    _subtitle.Paragraphs.AddRange(s.Paragraphs);
                    _subtitle.Header = s.Header;
                    _subtitle.Footer = s.Footer;

                    SaveSubtitleListviewIndices();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
                else if (_oldSubtitleFormat?.GetType() != format.GetType())
                {
                    _oldSubtitleFormat.RemoveNativeFormatting(_subtitle, format);
                }

                if (formatType == typeof(AdvancedSubStationAlpha) && _oldSubtitleFormat.GetType() != typeof(NetflixImsc11Japanese))
                {
                    if (_oldSubtitleFormat?.GetType() == typeof(WebVTT) ||
                        _oldSubtitleFormat?.GetType() == typeof(WebVTTFileWithLineNumber))
                    {
                        _subtitle = WebVttToAssa.Convert(_subtitle, new SsaStyle(), _videoInfo?.Width ?? 0, _videoInfo?.Height ?? 0);
                    }

                    foreach (var p in _subtitle.Paragraphs)
                    {
                        p.Text = AdvancedSubStationAlpha.FormatText(p.Text);
                    }
                }

                _subtitle.Renumber();
                if (oldParagraphCount == _subtitle.Paragraphs.Count)
                {
                    SaveSubtitleListviewIndices();
                }

                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);

                if (oldParagraphCount == _subtitle.Paragraphs.Count)
                {
                    RestoreSubtitleListviewIndices();
                }

                if (_oldSubtitleFormat.HasStyleSupport)
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
                }

                if (_networkSession == null)
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Network);
                }

                if (formatType == typeof(AdvancedSubStationAlpha))
                {
                    if (_oldSubtitleFormat.GetType() == typeof(SubStationAlpha))
                    {
                        if (_subtitle.Header != null && !_subtitle.Header.Contains("[V4+ Styles]"))
                        {
                            _subtitle.Header = AdvancedSubStationAlpha.GetHeaderAndStylesFromSubStationAlpha(_subtitle.Header);
                            foreach (var p in _subtitle.Paragraphs)
                            {
                                if (p.Extra != null)
                                {
                                    p.Extra = p.Extra.TrimStart('*');
                                }
                            }
                        }
                    }
                    else if (_oldSubtitleFormat.GetType() == typeof(AdvancedSubStationAlpha) && string.IsNullOrEmpty(_subtitle.Header))
                    {
                        _subtitle.Header = AdvancedSubStationAlpha.DefaultHeader;
                    }

                    SetAssaResolutionWithChecks();
                }
            }

            _lastChangedToFormat = format.FriendlyName;
            UpdateSourceView();
            if (_converted && _subtitle?.Paragraphs.Count > 0 && oldFormat != null)
            {
                ShowStatus(string.Format(_language.ConvertedToX, format.FriendlyName));
            }

            if (!string.IsNullOrEmpty(_fileName) && _oldSubtitleFormat != null)
            {
                if (_fileName.Contains('.'))
                {
                    _fileName = _fileName.Substring(0, _fileName.LastIndexOf('.')) + format.Extension;
                }
                else
                {
                    _fileName += format.Extension;
                }

                SetTitle();
            }

            if ((formatType == typeof(AdvancedSubStationAlpha) ||
                 formatType == typeof(SubStationAlpha) ||
                 formatType == typeof(CsvNuendo) ||
                 formatType == typeof(PodcastIndexer)) && (_subtitle.Paragraphs.Any(p => !string.IsNullOrEmpty(p.Actor)) ||
                                                      Configuration.Settings.Tools.ListViewShowColumnActor))
            {
                bool wasVisible = SubtitleListview1.ColumnIndexActor >= 0;
                if (formatType == typeof(CsvNuendo))
                {
                    SubtitleListview1.ShowActorColumn(LanguageSettings.Current.General.Character);
                }
                else
                {
                    SubtitleListview1.ShowActorColumn(LanguageSettings.Current.General.Actor);
                }

                if (!wasVisible)
                {
                    SaveSubtitleListviewIndices();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
            else
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Actor);
            }

            if (formatType == typeof(TimedText10) && Configuration.Settings.Tools.ListViewShowColumnRegion)
            {
                SubtitleListview1.ShowRegionColumn(LanguageSettings.Current.General.Region);
            }
            else
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Region);
            }

            if (format.HasStyleSupport)
            {
                var styles = new List<string>();
                if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
                {
                    styles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                    if (styles.Count == 0)
                    {
                        styles = AdvancedSubStationAlpha.GetStylesFromHeader(AdvancedSubStationAlpha.DefaultHeader);
                    }
                }
                else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText) || formatType == typeof(TimedTextImsc11))
                {
                    styles = TimedText10.GetStylesFromHeader(_subtitle.Header);
                }
                else if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
                {
                    styles = Sami.GetStylesFromHeader(_subtitle.Header);
                    if (string.IsNullOrEmpty(_subtitle.Header))
                    {
                        styles = Sami.GetStylesFromSubtitle(_subtitle);
                    }
                    else
                    {
                        styles = Sami.GetStylesFromHeader(_subtitle.Header);
                    }
                }
                else if (format.Name == "Nuendo")
                {
                    styles = GetNuendoStyles();
                }

                if (styles.Count > 0)
                {
                    foreach (var p in _subtitle.Paragraphs)
                    {
                        if (string.IsNullOrEmpty(p.Extra))
                        {
                            p.Extra = styles[0];
                        }
                    }
                }

                if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Class);
                }
                else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText) || formatType == typeof(TimedTextImsc11))
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.StyleLanguage);
                }
                else if (format.Name == "Nuendo")
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Character);
                }
                else
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Style);
                }

                SaveSubtitleListviewIndices();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                RestoreSubtitleListviewIndices();
            }
            else
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
            }

            ShowHideTextBasedFeatures(format);

            UpdateToolbarButtonsToCurrentFormat(currentSubtitleFormat);

            mediaPlayer.LastParagraph = null;
            UiUtil.ShowSubtitle(_subtitle, mediaPlayer, currentSubtitleFormat);

            _oldSubtitleFormat = oldFormat;
        }

        private int FirstSelectedIndex => SubtitleListview1.SelectedIndices.Count == 0 ? -1 : SubtitleListview1.SelectedIndices[0];

        private int FirstVisibleIndex =>
            SubtitleListview1.Items.Count == 0 || SubtitleListview1.TopItem == null ? -1 : SubtitleListview1.TopItem.Index;

        private long _lastAutoSave;

        private void AutoSave(bool force = false)
        {
            if (!Configuration.Settings.General.AutoSave ||
                DateTime.UtcNow.Ticks - _lastAutoSave < 10000 * 3000 && !force) // only check for auto save evety 3 seconds
            {
                return;
            }

            if (force)
            {
                DoAutoSave();
            }
            else
            {
                Interlocked.Increment(ref _openSaveCounter);
                DoAutoSave();
                Interlocked.Decrement(ref _openSaveCounter);

            }
        }

        private void DoAutoSave()
        {
            _lastAutoSave = DateTime.UtcNow.Ticks + 1009000;
            var currentSubtitleHash = GetFastSubtitleHash();
            if (_changeSubtitleHash != currentSubtitleHash && _lastDoNotPrompt != currentSubtitleHash && _subtitle?.Paragraphs.Count > 0)
            {
                if (string.IsNullOrEmpty(_fileName) || _converted)
                {
                    return;
                }

                SaveSubtitle(GetCurrentSubtitleFormat(), false, true);
            }

            if (!string.IsNullOrEmpty(_subtitleOriginalFileName) && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
            {
                SaveOriginalSubtitle(GetCurrentSubtitleFormat(), true);
            }

            _lastAutoSave = DateTime.UtcNow.Ticks;
        }

        private bool ContinueNewOrExit()
        {
            AutoSave(true);
            var currentSubtitleHash = GetFastSubtitleHash();
            if (_changeSubtitleHash != currentSubtitleHash && _lastDoNotPrompt != currentSubtitleHash && _subtitle?.Paragraphs.Count > 0)
            {
                string promptText = _language.SaveChangesToUntitled;
                if (!string.IsNullOrEmpty(_fileName))
                {
                    promptText = string.Format(_language.SaveChangesToX, _fileName);
                }

                var dr = MessageBox.Show(this, promptText, Title, MessageBoxButtons.YesNoCancel);

                if (dr == DialogResult.Cancel)
                {
                    return false;
                }

                if (dr == DialogResult.Yes)
                {
                    if (string.IsNullOrEmpty(_fileName))
                    {
                        if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
                        {
                            saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
                        }

                        saveFileDialog1.Title = _language.SaveSubtitleAs;
                        if (saveFileDialog1.ShowDialog(this) == DialogResult.OK)
                        {
                            openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                            _fileName = saveFileDialog1.FileName;
                            SetTitle();
                            Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                            Configuration.Settings.Save();
                        }
                        else
                        {
                            return false;
                        }
                    }

                    if (SaveSubtitle(GetCurrentSubtitleFormat()) != DialogResult.OK)
                    {
                        return false;
                    }
                }
            }

            return ContinueNewOrExitOriginal();
        }

        private bool ContinueNewOrExitOriginal()
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0 && _changeOriginalSubtitleHash != GetFastSubtitleOriginalHash())
            {
                string promptText = _language.SaveChangesToUntitledOriginal;
                if (!string.IsNullOrEmpty(_subtitleOriginalFileName))
                {
                    promptText = string.Format(_language.SaveChangesToOriginalX, _subtitleOriginalFileName);
                }

                var dr = MessageBox.Show(this, promptText, Title, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation);

                if (dr == DialogResult.Cancel)
                {
                    return false;
                }

                if (dr == DialogResult.Yes)
                {
                    if (string.IsNullOrEmpty(_subtitleOriginalFileName))
                    {
                        if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
                        {
                            saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
                        }

                        saveFileDialog1.Title = _language.SaveOriginalSubtitleAs;
                        if (saveFileDialog1.ShowDialog(this) == DialogResult.OK)
                        {
                            openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                            _subtitleOriginalFileName = saveFileDialog1.FileName;
                        }
                        else
                        {
                            return false;
                        }
                    }

                    if (SaveOriginalSubtitle(GetCurrentSubtitleFormat()) != DialogResult.OK)
                    {
                        return false;
                    }
                }
            }

            _lastDoNotPrompt = GetFastSubtitleHash();
            return true;
        }

        private void ExitToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Application.Exit();
        }

        private void AboutToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            using (var about = new About())
            {
                about.Initialize();
                about.ShowDialog(this);
            }
        }

        private void VisualSyncToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            ShowVisualSync(false);
        }

        public void MakeHistoryForUndo(string description, bool resetTextUndo)
        {
            if (_makeHistoryPaused)
            {
                return;
            }

            if (resetTextUndo)
            {
                _listViewTextUndoLast = null;
                _listViewOriginalTextUndoLast = null;
            }

            if (_undoIndex == -1)
            {
                _subtitle.HistoryItems.Clear();
            }
            else
            {
                // remove items for redo
                while (_subtitle.HistoryItems.Count > _undoIndex + 1)
                {
                    _subtitle.HistoryItems.RemoveAt(_subtitle.HistoryItems.Count - 1);
                }
            }

            _subtitle.FileName = _fileName;
            _subtitle.MakeHistoryForUndo(description, GetCurrentSubtitleFormat().FriendlyName, _fileDateTime, _subtitleOriginal, _subtitleOriginalFileName, _subtitleListViewIndex, textBoxListViewText.SelectionStart, textBoxListViewTextOriginal.SelectionStart);
            _undoIndex++;

            if (_undoIndex > Subtitle.MaximumHistoryItems)
            {
                _undoIndex--;
            }
        }

        public void MakeHistoryForUndo(string description)
        {
            MakeHistoryForUndo(description, true);
        }

        /// <summary>
        /// Add undo history - but only if last entry is older than 500 ms
        /// </summary>
        /// <param name="description">Undo description</param>
        public void MakeHistoryForUndoOnlyIfNotRecent(string description)
        {
            if (_makeHistoryPaused)
            {
                return;
            }

            if ((DateTime.UtcNow.Ticks - _lastHistoryTicks) > 10000 * 500) // only if last change was longer ago than 500 milliseconds
            {
                MakeHistoryForUndo(description);
                _lastHistoryTicks = DateTime.UtcNow.Ticks;
            }
        }

        private bool IsSubtitleLoaded =>
            _subtitle != null && (_subtitle.Paragraphs.Count > 1 || (_subtitle.Paragraphs.Count == 1 && !string.IsNullOrWhiteSpace(_subtitle.Paragraphs[0].Text)));

        private void ShowVisualSync(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var visualSync = new VisualSync(this))
            {
                visualSync.VideoFileName = _videoFileName;
                visualSync.AudioTrackNumber = VideoAudioTrackNumber;

                SaveSubtitleListviewIndices();
                if (onlySelectedLines)
                {
                    var selectedLines = new Subtitle();
                    Subtitle selectedLinesOriginal = null;
                    if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                    {
                        selectedLinesOriginal = new Subtitle();
                    }

                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        var p = _subtitle.Paragraphs[index];
                        selectedLines.Paragraphs.Add(p);
                        if (selectedLinesOriginal != null)
                        {
                            var original = Utilities.GetOriginalParagraph(index, p, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                selectedLinesOriginal.Paragraphs.Add(original);
                            }
                        }
                    }

                    visualSync.Initialize(toolStripButtonVisualSync.Image as Bitmap, selectedLines, selectedLinesOriginal, _fileName, _language.VisualSyncSelectedLines, CurrentFrameRate);
                }
                else
                {
                    visualSync.Initialize(toolStripButtonVisualSync.Image as Bitmap, _subtitle, _subtitleOriginal, _fileName, _language.VisualSyncTitle, CurrentFrameRate);
                }

                ResetPlaySelection();
                mediaPlayer.Pause();
                if (visualSync.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeVisualSync);

                    if (onlySelectedLines)
                    { // we only update selected lines
                        int i = 0;
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index] = visualSync.Paragraphs[i];
                            i++;
                        }

                        ShowStatus(_language.VisualSyncPerformedOnSelectedLines);
                    }
                    else
                    {
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in visualSync.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        if (_subtitleOriginal != null && visualSync.ParagraphsOriginal != null)
                        {
                            _subtitleOriginal.Paragraphs.Clear();
                            foreach (var p in visualSync.ParagraphsOriginal)
                            {
                                _subtitleOriginal.Paragraphs.Add(new Paragraph(p));
                            }
                        }

                        ShowStatus(_language.VisualSyncPerformed);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    if (onlySelectedLines && SubtitleListview1.SelectedItems.Count > 0)
                    {
                        SubtitleListview1.EnsureVisible(SubtitleListview1.SelectedItems[SubtitleListview1.SelectedItems.Count - 1].Index);
                    }
                }

                _videoFileName = visualSync.VideoFileName;
            }
        }

        private void OpenToolStripMenuItemClick(object sender, EventArgs e)
        {
            openToolStripMenuItem.Enabled = false;
            ReloadFromSourceView();
            OpenNewFile();
            openToolStripMenuItem.Enabled = true;
        }

        private void OpenNewFile()
        {
            if (_openFileDialogOn)
            {
                return;
            }

            _openFileDialogOn = true;
            _lastDoNotPrompt = -1;
            if (!ContinueNewOrExit())
            {
                _openFileDialogOn = false;
                return;
            }

            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                RemoveOriginal(true, false);

                // try to open via recent files
                if (OpenFromRecentFiles(openFileDialog1.FileName))
                {
                    return;
                }

                OpenSubtitle(openFileDialog1.FileName, null);
            }

            CheckSecondSubtitleReset();
            _openFileDialogOn = false;
        }

        private bool OpenFromRecentFiles(string fileName)
        {
            var rfe = Configuration.Settings.RecentFiles.Files.Find(p => !string.IsNullOrEmpty(p.FileName) && p.FileName.Equals(fileName, StringComparison.OrdinalIgnoreCase));
            if (rfe != null)
            {
                OpenRecentFile(rfe);
                GotoSubPosAndPause();
                SubtitleListview1.EndUpdate();
                SetRecentIndices(rfe);
                if (!string.IsNullOrEmpty(rfe.VideoFileName))
                {
                    var p = _subtitle.GetParagraphOrDefault(rfe.FirstSelectedIndex);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }

                _openFileDialogOn = false;
                return true;
            }

            return false;
        }

        public double CurrentFrameRate
        {
            get
            {
                if (double.TryParse(toolStripComboBoxFrameRate.Text, out var f))
                {
                    return f;
                }

                return Configuration.Settings.General.DefaultFrameRate;
            }
        }

        private void OpenSubtitle(string fileName, Encoding encoding)
        {
            OpenSubtitle(fileName, encoding, null, -1, null);
        }

        private void ResetHistory()
        {
            _undoIndex = -1;
            _subtitle.HistoryItems.Clear();
        }

        private void OpenSubtitle(string fileName, Encoding encoding, string videoFileName, int audioTrack, string originalFileName)
        {
            OpenSubtitle(fileName, encoding, videoFileName, audioTrack, originalFileName, false);
        }

        private void OpenSubtitle(string fileName, Encoding encoding, string videoFileName, int audioTrack, string originalFileName, bool updateRecentFile)
        {
            if (!File.Exists(fileName))
            {
                MessageBox.Show(string.Format(_language.FileNotFound, fileName));
                return;
            }

            if (FileUtil.IsFileLocked(fileName))
            {
                MessageBox.Show(string.Format(_language.FileLocked, fileName));
                return;
            }

            _lastAutoSave = DateTime.UtcNow.Ticks;
            bool videoFileLoaded = false;
            _formatManuallyChanged = false;
            var file = new FileInfo(fileName);
            var ext = file.Extension.ToLowerInvariant();

            // save last first visible index + first selected index from listview
            if (_fileName != null && updateRecentFile)
            {
                Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
            }

            Configuration.Settings.General.CurrentVideoOffsetInMs = 0;
            Configuration.Settings.General.CurrentVideoIsSmpte = false;

            openFileDialog1.InitialDirectory = file.DirectoryName;

            if (ext == ".idx")
            {
                var subFileName = fileName.Substring(0, fileName.Length - 3) + "sub";
                if (File.Exists(subFileName) && FileUtil.IsVobSub(subFileName))
                {
                    ext = ".sub";
                    fileName = subFileName;
                }
            }

            if (ext == ".sub" && IsVobSubFile(fileName, false))
            {
                ImportAndOcrVobSubSubtitleNew(fileName, _loading);
                return;
            }

            if (ext == ".sup")
            {
                if (FileUtil.IsBluRaySup(fileName))
                {
                    if (Configuration.Settings.Tools.BDOpenIn == "EDIT")
                    {
                        using (var form = new BinaryEdit.BinEdit(fileName, _loading))
                        {
                            form.ShowDialog(this);
                        }

                        if (_loading)
                        {
                            _exitWhenLoaded = _loading;
                            Opacity = 0;
                        }
                    }
                    else
                    {
                        ImportAndOcrBluRaySup(fileName, _loading);
                    }

                    return;
                }

                if (FileUtil.IsSpDvdSup(fileName))
                {
                    ImportAndOcrSpDvdSup(fileName, _loading);
                    return;
                }
            }

            if (ext == ".mkv" || ext == ".mks")
            {
                ImportSubtitleFromMatroskaFile(fileName);
                return;
            }

            if (ext == ".divx" || ext == ".avi")
            {
                ShowStatus(_languageGeneral.PleaseWait);
                if (ImportSubtitleFromDivX(fileName))
                {
                    ShowStatus(string.Format(_language.LoadedSubtitleX, fileName));
                }
                else
                {
                    ShowStatus(string.Empty);
                    MessageBox.Show(_language.NotAValidXSubFile);
                }

                return;
            }

            if ((ext == ".ts" || ext == ".tsv" || ext == ".tts" || ext == ".rec" || ext == ".mpeg" || ext == ".mpg") && file.Length > 10000 && FileUtil.IsTransportStream(fileName))
            {
                ImportSubtitleFromTransportStream(fileName);
                return;
            }

            if (FileUtil.IsManzanita(fileName))
            {
                var tsParser = new ManzanitaTransportStreamParser();
                tsParser.Parse(fileName);
                var subtitles = tsParser.GetDvbSup();
                if (subtitles.Count > 0)
                {
                    ImportSubtitleFromManzanitaTransportStream(fileName, subtitles);
                    return;
                }
            }

            if (((ext == ".m2ts" || ext == ".ts" || ext == ".tsv" || ext == ".tts" || ext == ".mts") && file.Length > 10000 && FileUtil.IsM2TransportStream(fileName)) ||
                (ext == ".textst" && FileUtil.IsMpeg2PrivateStream2(fileName)))
            {
                bool isTextSt = false;
                if (file.Length < 2000000)
                {
                    var textSt = new TextST();
                    isTextSt = textSt.IsMine(null, fileName);
                }

                if (!isTextSt)
                {
                    ImportSubtitleFromTransportStream(fileName);
                    return;
                }
            }

            if ((ext == ".mp4" || ext == ".m4v" || ext == ".3gp" || ext == ".mov" || ext == ".cmaf") && file.Length > 2000 || ext == ".m4s")
            {
                if (!new IsmtDfxp().IsMine(null, fileName))
                {
                    if (ImportSubtitleFromMp4(fileName) && !Configuration.Settings.General.DisableVideoAutoLoading)
                    {
                        OpenVideo(fileName, audioTrack);
                    }

                    return;
                }
            }

            if (ext == ".mxf" && FileUtil.IsMaterialExchangeFormat(fileName))
            {
                var parser = new MxfParser(fileName);
                if (parser.IsValid)
                {
                    var subtitles = parser.GetSubtitles();
                    if (subtitles.Count > 0)
                    {
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        var list = new List<string>(subtitles[0].SplitToLines());
                        _subtitle = new Subtitle();
                        var mxfFormat = _subtitle.ReloadLoadSubtitle(list, null, null);
                        SetCurrentFormat(mxfFormat);
                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                        SetTitle();
                        ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                        _sourceViewChange = false;
                        _changeSubtitleHash = GetFastSubtitleHash();
                        ResetHistory();
                        SetUndockedWindowsTitle();
                        _converted = true;
                        ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName) + " - " + string.Format(_language.ConvertedToX, mxfFormat.FriendlyName));

                        var images = parser.GetImages();
                        if (images.Count > 0 && images.Count == _subtitle.Paragraphs.Count && _subtitle.Paragraphs[0].Text.StartsWith("urn:uuid:", StringComparison.Ordinal))
                        {
                            for (var j = 0; j < images.Count; j++)
                            {
                                _subtitle.Paragraphs[j].Text = Convert.ToBase64String(images[j]);
                            }

                            ImportAndInlineBase64(_subtitle, _loading, fileName);
                            return;
                        }

                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        _subtitleListViewIndex = -1;
                        SubtitleListview1.FirstVisibleIndex = -1;
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                        return;
                    }

                    MessageBox.Show("No subtitles found!");
                    return;
                }
            }

            if (ext == ".prproj")
            {
                var f = new AdobePremierePrProj();
                var tempFileName = AdobePremierePrProj.LoadFromZipFile(fileName);
                if (!string.IsNullOrEmpty(fileName))
                {
                    var list = new List<string>(File.ReadAllLines(tempFileName, LanguageAutoDetect.GetEncodingFromFile(tempFileName)));
                    try
                    {
                        File.Delete(tempFileName);
                    }
                    catch
                    {
                        // ignored
                    }

                    if (f.IsMine(list, tempFileName))
                    {
                        f.LoadSubtitle(_subtitle, list, fileName);
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        SubtitleListview1.Fill(_subtitle);
                        _subtitleListViewIndex = -1;
                        SubtitleListview1.FirstVisibleIndex = -1;
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                        SetTitle();
                        ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                        _converted = true;
                        return;
                    }
                }
            }

            if (ext == ".ismt" || ext == ".mp4" || ext == ".m4v" || ext == ".mov" || ext == ".3gp" || ext == ".cmaf" || ext == ".m4s")
            {
                var f = new IsmtDfxp();
                if (f.IsMine(null, fileName))
                {
                    f.LoadSubtitle(_subtitle, null, fileName);

                    if (_subtitle.OriginalFormat?.Name == new TimedTextBase64Image().Name)
                    {
                        ImportAndInlineBase64(_subtitle, _loading, fileName);
                        return;
                    }

                    if (_subtitle.OriginalFormat?.Name == new TimedTextImage().Name)
                    {
                        ImportAndOcrDost(fileName, _subtitle);
                        return;
                    }

                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    SubtitleListview1.Fill(_subtitle);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                    SetTitle();
                    ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                    _converted = true;
                    return;
                }
            }

            if (ext == ".ttml" || ext == ".xml" || ext == ".dfxp")
            {
                var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                var f = new TimedTextBase64Image();
                if (f.IsMine(list, fileName))
                {
                    var sub = new Subtitle();
                    f.LoadSubtitle(sub, list, fileName);
                    ImportAndInlineBase64(sub, _loading, fileName);
                    return;
                }
            }

            if (ext == ".se-job")
            {
                if (LoadSeJob(FileUtil.ReadAllBytesShared(fileName)))
                {
                    return;
                }
            }

            if (ext == ".mcc")
            {
                var lines = FileUtil.ReadAllTextShared(fileName, Encoding.ASCII).SplitToLines();
                var f = new MacCaption10();
                if (f.IsMine(lines, fileName))
                {
                    f.LoadSubtitle(_subtitle, lines, fileName);
                    _oldSubtitleFormat = f;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    SubtitleListview1.Fill(_subtitle);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                    SetTitle();
                    ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                    _converted = true;
                    return;
                }
            }

            if (file.Length > Subtitle.MaxFileSize)
            {
                // retry Blu-ray sup (file with wrong extension)
                if (FileUtil.IsBluRaySup(fileName))
                {
                    ImportAndOcrBluRaySup(fileName, _loading);
                    return;
                }

                // retry vobsub (file with wrong extension)
                if (IsVobSubFile(fileName, false))
                {
                    ImportAndOcrVobSubSubtitleNew(fileName, _loading);
                    return;
                }

                var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, fileName);
                if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return;
                }
            }

            if (_subtitle.HistoryItems.Count > 0 || _subtitle.Paragraphs.Count > 0)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeLoadOf, Path.GetFileName(fileName)));
            }

            var subtitleHash = GetFastSubtitleHash();
            bool hasChanged = (_changeSubtitleHash != subtitleHash) && (_lastDoNotPrompt != subtitleHash);
            var newSubtitle = new Subtitle();
            SubtitleFormat format = newSubtitle.LoadSubtitle(fileName, out encoding, encoding);

            if (!hasChanged)
            {
                _changeSubtitleHash = GetFastSubtitleHash();
            }

            ShowHideTextBasedFeatures(format);

            bool justConverted = false;

            if (ext == ".m2ts" || ext == ".textst")
            {
                var textST = new TextST();
                if (textST.IsMine(null, fileName))
                {
                    textST.LoadSubtitle(newSubtitle, null, fileName);
                    _oldSubtitleFormat = textST;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    justConverted = true;
                    format = GetCurrentSubtitleFormat();
                }
            }

            var encodingFromFile = encoding;
            if (format == null)
            {
                encodingFromFile = LanguageAutoDetect.GetEncodingFromFile(fileName);
            }

            if (format == null)
            {
                var f = new TimeCodesOnly1();
                var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                if (f.IsMine(list, fileName))
                {
                    f.LoadSubtitle(newSubtitle, list, fileName);
                    _oldSubtitleFormat = f;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    justConverted = true;
                    format = GetCurrentSubtitleFormat();
                }
            }

            if (format == null)
            {
                var f = new TimeCodesOnly2();
                var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                if (f.IsMine(list, fileName))
                {
                    f.LoadSubtitle(newSubtitle, list, fileName);
                    _oldSubtitleFormat = f;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    justConverted = true;
                    format = GetCurrentSubtitleFormat();
                }
            }

            if (format == null)
            {
                try
                {
                    var bdnXml = new BdnXml();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (bdnXml.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrBdnXml(fileName, bdnXml, list);
                        }

                        return;
                    }
                }
                catch
                {
                    // ignore
                }
            }

            if (format == null)
            {
                try
                {
                    var rhozetHarmonicImage = new RhozetHarmonicImage();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (rhozetHarmonicImage.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, rhozetHarmonicImage, list);
                        }

                        return;
                    }
                }
                catch
                {
                    // ignore
                }
            }

            if (format == null)
            {
                try
                {
                    var fcpImage = new FinalCutProImage();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (fcpImage.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, fcpImage, list);
                        }

                        return;
                    }
                }
                catch
                {
                    // ignore
                }
            }

            if (format == null)
            {
                try
                {
                    var f = new DvdStudioProSpaceGraphic();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (f.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, f, list);
                        }

                        return;
                    }
                }
                catch
                {
                    // ignore
                }
            }

            if (format == null)
            {
                try
                {
                    var imageFormat = new SpuImage();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (imageFormat.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, imageFormat, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                var arib = new AribB36();
                if (arib.IsMine(null, fileName))
                {
                    arib.LoadSubtitle(newSubtitle, null, fileName);
                    _oldSubtitleFormat = arib;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    justConverted = true;
                    format = GetCurrentSubtitleFormat();
                }
            }

            if (ext == ".dost")
            {
                try
                {
                    var dost = new Dost();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (dost.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, dost, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (ext == ".edl")
            {
                try
                {
                    var f = new Edl();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (f.IsMine(list, fileName))
                    {
                        var edlSub = new Subtitle();
                        f.LoadSubtitle(edlSub, list, fileName);
                        var pngCount = edlSub.Paragraphs.Count(p => p.Text.EndsWith(".png", StringComparison.OrdinalIgnoreCase));
                        if (pngCount > 1 && pngCount > edlSub.Paragraphs.Count - 2 && ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, f, list);
                            return;
                        }
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                try
                {
                    var timedtextImage = new TimedTextImage();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (timedtextImage.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, timedtextImage, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                try
                {
                    var seImageHtmlIndex = new SeImageHtmlIndex();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (seImageHtmlIndex.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, seImageHtmlIndex, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null || format.Name == Scenarist.NameOfFormat)
            {
                try
                {
                    var son = new Son();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (son.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrSon(fileName, son, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null || format.Name == SubRip.NameOfFormat)
            {
                if (newSubtitle.Paragraphs.Count > 1)
                {
                    int imageCount = 0;
                    foreach (var p in newSubtitle.Paragraphs)
                    {
                        string s = p.Text.ToLowerInvariant();
                        if (s.EndsWith(".bmp", StringComparison.Ordinal) || s.EndsWith(".png", StringComparison.Ordinal) || s.EndsWith(".jpg", StringComparison.Ordinal) || s.EndsWith(".tif", StringComparison.Ordinal))
                        {
                            imageCount++;
                        }
                    }

                    if (imageCount > 2 && imageCount >= newSubtitle.Paragraphs.Count - 2)
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrSrt(newSubtitle);
                        }

                        return;
                    }
                }
            }

            if (format == null)
            {
                try
                {
                    var satBoxPng = new SatBoxPng();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (satBoxPng.IsMine(list, fileName))
                    {
                        var subtitle = new Subtitle();
                        satBoxPng.LoadSubtitle(subtitle, list, fileName);
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrSrt(subtitle);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null || format.Name == Scenarist.NameOfFormat)
            {
                try
                {
                    var sst = new SonicScenaristBitmaps();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (sst.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrSst(fileName, sst, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                try
                {
                    var htmlSamiArray = new HtmlSamiArray();
                    var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                    if (htmlSamiArray.IsMine(list, fileName))
                    {
                        htmlSamiArray.LoadSubtitle(newSubtitle, list, fileName);
                        _oldSubtitleFormat = htmlSamiArray;
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        justConverted = true;
                        format = GetCurrentSubtitleFormat();
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                foreach (var f in SubtitleFormat.GetBinaryFormats(false))
                {
                    if (f.IsMine(null, fileName))
                    {
                        f.LoadSubtitle(newSubtitle, null, fileName);
                        _oldSubtitleFormat = f;
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        justConverted = true;
                        format = GetCurrentSubtitleFormat();
                        break;
                    }
                }
            }

            if (format == null && ext == ".rtf")
            {
                var txt = FileUtil.ReadAllTextShared(fileName, encodingFromFile);
                if (txt.StartsWith("{\\rtf"))
                {
                    var lines = txt.FromRtf().SplitToLines();
                    foreach (var f in SubtitleFormat.AllSubtitleFormats.Where(p => p.Extension != ".rtf"))
                    {
                        if (f.IsMine(lines, fileName))
                        {
                            f.LoadSubtitle(newSubtitle, lines, fileName);
                            _oldSubtitleFormat = f;
                            SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                            SetEncoding(Configuration.Settings.General.DefaultEncoding);
                            encoding = GetCurrentEncoding();
                            justConverted = true;
                            format = GetCurrentSubtitleFormat();
                            break;
                        }
                    }
                }
            }

            if (format == null)
            {
                var lines = FileUtil.ReadAllTextShared(fileName, encodingFromFile).SplitToLines();
                foreach (var f in SubtitleFormat.GetTextOtherFormats())
                {
                    if (f.IsMine(lines, fileName))
                    {
                        f.LoadSubtitle(newSubtitle, lines, fileName);
                        _oldSubtitleFormat = f;
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        justConverted = true;
                        format = GetCurrentSubtitleFormat();
                        break;
                    }
                }
            }

            if (format == null && ext == ".cdg" && file.Length < 50_000_000)
            {
                using (var importCdg = new ImportCdg(fileName))
                {
                    importCdg.ShowDialog(this);
                    return;
                }
            }

            // retry vobsub (file with wrong extension)
            if (format == null && file.Length > 500 && IsVobSubFile(fileName, false))
            {
                ImportAndOcrVobSubSubtitleNew(fileName, _loading);
                return;
            }

            // retry Blu-ray (file with wrong extension)
            if (format == null && file.Length > 500 && FileUtil.IsBluRaySup(fileName))
            {
                ImportAndOcrBluRaySup(fileName, _loading);
                return;
            }

            // retry SP DVD (file with wrong extension)
            if (format == null && file.Length > 500 && FileUtil.IsSpDvdSup(fileName))
            {
                ImportAndOcrSpDvdSup(fileName, _loading);
                return;
            }

            // retry Matroska (file with wrong extension)
            if (format == null && !string.IsNullOrWhiteSpace(fileName))
            {
                using (var matroska = new MatroskaFile(fileName))
                {
                    if (matroska.IsValid)
                    {
                        var subtitleList = matroska.GetTracks(true);
                        if (subtitleList.Count > 0)
                        {
                            ImportSubtitleFromMatroskaFile(fileName);
                            return;
                        }
                    }
                }
            }

            // check for idx file
            if (format == null && file.Length > 100 && ext == ".idx")
            {
                MessageBox.Show(_language.ErrorLoadIdx);
                return;
            }

            // check for .rar file
            if (format == null && file.Length > 100 && FileUtil.IsRar(fileName))
            {
                MessageBox.Show(_language.ErrorLoadRar);
                return;
            }

            // check for .zip file
            if (format == null && file.Length > 100 && FileUtil.IsZip(fileName))
            {
                MessageBox.Show(_language.ErrorLoadZip);
                return;
            }

            // check for .7z file
            if (format == null && file.Length > 100 && FileUtil.Is7Zip(fileName))
            {
                MessageBox.Show(_language.ErrorLoad7Zip);
                return;
            }

            // check for .png file
            if (format == null && file.Length > 100 && FileUtil.IsPng(fileName))
            {
                MessageBox.Show(_language.ErrorLoadPng);
                return;
            }

            // check for .jpg file
            if (format == null && file.Length > 100 && FileUtil.IsJpg(fileName))
            {
                MessageBox.Show(_language.ErrorLoadJpg);
                return;
            }

            // check for .srr file
            if (format == null && file.Length > 100 && ext == ".srr" && FileUtil.IsSrr(fileName))
            {
                MessageBox.Show(_language.ErrorLoadSrr);
                return;
            }

            // check for Torrent file
            if (format == null && file.Length > 50 && FileUtil.IsTorrentFile(fileName))
            {
                MessageBox.Show(_language.ErrorLoadTorrent);
                return;
            }

            // check for all binary zeroes (I've heard about this a few times... perhaps related to crashes?)
            if (format == null && FileUtil.IsSubtitleFileAllBinaryZeroes(fileName))
            {
                MessageBox.Show(_language.ErrorLoadBinaryZeroes);
                return;
            }

            // check for mp3 file
            if (format == null && file.Length > 50 && FileUtil.IsMp3(fileName))
            {
                MessageBox.Show("This file seems to be an .mp3 audio file which does not contains subtitles." + Environment.NewLine +
                Environment.NewLine +
                "You can open media files via the Video menu.");
                return;
            }

            // check for wav file
            if (format == null && file.Length > 50 && FileUtil.IsWav(fileName))
            {
                MessageBox.Show("This file seems to be a .wav audio file which does not contains subtitles." + Environment.NewLine +
                                Environment.NewLine +
                                "You can open media files via the Video menu.");
                return;
            }

            if (format == null && file.Length < 100 * 1000000 && TransportStreamParser.IsDvbSup(fileName))
            {
                ImportSubtitleFromDvbSupFile(fileName);
                return;
            }

            if (format == null && file.Length < 1000000)
            {
                // check for valid timed text
                if (ext == ".xml" || ext == ".dfxp")
                {
                    var sb = new StringBuilder();
                    foreach (var line in File.ReadAllLines(fileName, encodingFromFile))
                    {
                        sb.AppendLine(line);
                    }

                    var xmlAsString = sb.ToString().Trim();

                    if (xmlAsString.Contains("http://www.w3.org/ns/ttml") && xmlAsString.Contains("<?xml version=") ||
                        xmlAsString.Contains("http://www.w3.org/") && xmlAsString.Contains("/ttaf1"))
                    {
                        var xml = new System.Xml.XmlDocument();
                        try
                        {
                            xml.LoadXml(xmlAsString);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Timed text is not valid (xml is not well-formed): " + ex.Message);
                            return;
                        }
                    }
                }

                // Try to use a generic subtitle format parser (guessing subtitle format)
                try
                {
                    var enc = encodingFromFile;
                    var s = File.ReadAllText(fileName, enc);

                    // check for RTF file
                    if (ext == ".rtf" && s.TrimStart().StartsWith("{\\rtf", StringComparison.Ordinal))
                    {
                        using (var rtb = new RichTextBox { Rtf = s })
                        {
                            s = rtb.Text;
                        }
                    }

                    var uknownFormatImporter = new UnknownFormatImporter { UseFrames = true };
                    var genericParseSubtitle = uknownFormatImporter.AutoGuessImport(s.SplitToLines());
                    if (genericParseSubtitle.Paragraphs.Count > 1)
                    {
                        newSubtitle = genericParseSubtitle;
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        justConverted = true;
                        format = GetCurrentSubtitleFormat();
                        ShowStatus("Guessed subtitle format via generic subtitle parser!");
                    }
                }
                catch
                {
                    // ignore
                }
            }

            if (format == null && file.Length < 1_000_000 && (FileUtil.IsPlainText(fileName) || new Tx3GTextOnly().IsMine(null, fileName)))
            {
                ImportPlainText(fileName);
                return;
            }

            if (format == null)
            {
                var fd = new FinalDraftTemplate2();
                var list = new List<string>(File.ReadAllLines(fileName, encodingFromFile));
                if (fd.IsMine(list, fileName))
                {
                    ImportPlainText(fileName);
                    return;
                }
            }

            _fileDateTime = File.GetLastWriteTime(fileName);

            if (format != null)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;

                RemoveOriginal(true, false);
                if (format.HasStyleSupport && format.GetType() == typeof(AdvancedSubStationAlpha))
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Style);
                }

                new BookmarkPersistence(newSubtitle, fileName).Load();

                if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                {
                    newSubtitle.RemoveEmptyLines();
                }

                if (Configuration.Settings.General.RemoveBadCharsWhenOpening)
                {
                    foreach (var p in newSubtitle.Paragraphs)
                    {
                        // Replace U+0456 (CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I) by U+0069 (LATIN SMALL LETTER I)
                        p.Text = p.Text.Replace("<і>", "<i>").Replace("</і>", "</i>");

                        // remove control characters (e.g. binary zero)
                        p.Text = p.Text.RemoveControlCharactersButWhiteSpace();
                    }
                }

                _subtitleListViewIndex = -1;
                Configuration.Settings.General.CurrentVideoOffsetInMs = 0;
                Configuration.Settings.General.CurrentVideoIsSmpte = false;

                if (_resetVideo && ModifierKeys != Keys.Shift)
                {
                    _videoFileName = null;
                    _videoInfo = null;
                    VideoAudioTrackNumber = -1;
                    labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
                    audioVisualizer.WavePeaks = null;
                    audioVisualizer.SetSpectrogram(null);
                    audioVisualizer.ShotChanges = new List<double>();
                    audioVisualizer.Chapters = Array.Empty<MatroskaChapter>();
                }

                var oldSaveFormat = Configuration.Settings.General.LastSaveAsFormat;
                _oldSubtitleFormat = format;
                SetCurrentFormat(format);
                Configuration.Settings.General.LastSaveAsFormat = oldSaveFormat;

                _subtitleOriginalFileName = null;
                if (LoadOriginalSubtitleFile(originalFileName))
                {
                    _subtitleOriginalFileName = originalFileName;
                }

                // Seungki begin
                _splitDualSami = false;
                if (Configuration.Settings.SubtitleSettings.SamiDisplayTwoClassesAsTwoSubtitles && format.GetType() == typeof(Sami) && Sami.GetStylesFromHeader(newSubtitle.Header).Count == 2)
                {
                    var classes = Sami.GetStylesFromHeader(newSubtitle.Header);
                    var s1 = new Subtitle(newSubtitle);
                    var s2 = new Subtitle(newSubtitle);
                    s1.Paragraphs.Clear();
                    s2.Paragraphs.Clear();
                    foreach (var p in newSubtitle.Paragraphs)
                    {
                        if (p.Extra != null && p.Extra.Equals(classes[0], StringComparison.OrdinalIgnoreCase))
                        {
                            s1.Paragraphs.Add(p);
                        }
                        else
                        {
                            s2.Paragraphs.Add(p);
                        }
                    }

                    if (s1.Paragraphs.Count == 0 || s2.Paragraphs.Count == 0)
                    {
                        return;
                    }

                    newSubtitle = s1;
                    _subtitleOriginal = s2;
                    _subtitleOriginalFileName = _fileName;
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
                    SubtitleListview1.ShowOriginalTextColumn(classes[1]);
                    _splitDualSami = true;
                }
                // Seungki end

                if (InSourceView || _loading && Configuration.Settings.General.StartInSourceView)
                {
                    textBoxSource.Text = newSubtitle.ToText(format);
                }

                _subtitleListViewIndex = -1;
                SubtitleListview1.Fill(newSubtitle, _subtitleOriginal);
                _subtitle = newSubtitle;


                _findHelper = null;
                _spellCheckForm = null;

                if (IsVideoVisible)
                {
                    if (!Configuration.Settings.General.DisableVideoAutoLoading)
                    {
                        if (!string.IsNullOrEmpty(videoFileName) && File.Exists(videoFileName))
                        {
                            OpenVideo(videoFileName, audioTrack);
                        }
                        else if (!string.IsNullOrEmpty(fileName))
                        {
                            TryToFindAndOpenVideoFile(Utilities.GetPathAndFileNameWithoutExtension(fileName));
                        }

                        if (_videoFileName == null)
                        {
                            CloseVideoToolStripMenuItemClick(this, null);
                        }
                    }
                }


                videoFileLoaded = _videoFileName != null;

                VideoAudioTrackNumber = audioTrack;

                Configuration.Settings.RecentFiles.Add(fileName, videoFileName, audioTrack, originalFileName);
                UpdateRecentFilesUI();

                _fileName = fileName;
                SetTitle();
                ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                _sourceViewChange = false;

                if (Configuration.Settings.General.AutoConvertToUtf8)
                {
                    if (Configuration.Settings.General.DefaultEncoding == TextEncoding.Utf8WithoutBom)
                    {
                        SetEncoding(TextEncoding.Utf8WithoutBom);
                    }
                    else
                    {
                        SetEncoding(TextEncoding.Utf8WithBom);
                    }
                }
                else if (encoding == Encoding.UTF8)
                {
                    if (File.Exists(_fileName) && FileUtil.HasUtf8Bom(fileName))
                    {
                        SetEncoding(TextEncoding.Utf8WithBom);
                    }
                    else
                    {
                        SetEncoding(TextEncoding.Utf8WithoutBom);
                    }
                }
                else
                {
                    SetEncoding(encoding);
                }

                _changeSubtitleHash = GetFastSubtitleHash();
                _converted = false;
                ResetHistory();
                SetListViewStateImages();
                SetUndockedWindowsTitle();

                if (justConverted)
                {
                    _converted = true;
                    ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName) + " - " + string.Format(_language.ConvertedToX, format.FriendlyName));
                }

                var formatType = format.GetType();
                if (formatType == typeof(SubStationAlpha))
                {
                    string errors = AdvancedSubStationAlpha.CheckForErrors(_subtitle.Header);
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }

                    errors = (format as SubStationAlpha).Errors;
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(AdvancedSubStationAlpha))
                {
                    string errors = AdvancedSubStationAlpha.CheckForErrors(_subtitle.Header);
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }

                    errors = (format as AdvancedSubStationAlpha).Errors;
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(SubRip))
                {
                    string errors = (format as SubRip).Errors;
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(MicroDvd))
                {
                    string errors = (format as MicroDvd).Errors;
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(DCinemaSmpte2007))
                {
                    format.ToText(_subtitle, string.Empty);
                    string errors = (format as DCinemaSmpte2007).Errors;
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(DCinemaSmpte2010))
                {
                    format.ToText(_subtitle, string.Empty);
                    string errors = (format as DCinemaSmpte2010).Errors;
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(DCinemaSmpte2014))
                {
                    format.ToText(_subtitle, string.Empty);
                    string errors = (format as DCinemaSmpte2014).Errors;
                    if (!Configuration.Settings.General.DisableShowingLoadErrors && !string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(CsvNuendo))
                {
                    if (_subtitle.Paragraphs.Any(p => !string.IsNullOrEmpty(p.Actor)))
                    {
                        bool wasVisible = SubtitleListview1.ColumnIndexActor >= 0;
                        SubtitleListview1.ShowActorColumn(LanguageSettings.Current.General.Character);
                        if (!wasVisible)
                        {
                            SaveSubtitleListviewIndices();
                            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                            RestoreSubtitleListviewIndices();
                        }
                    }
                }
                else if (formatType == typeof(PodcastIndexer))
                {
                    if (_subtitle.Paragraphs.Any(p => !string.IsNullOrEmpty(p.Actor)))
                    {
                        bool wasVisible = SubtitleListview1.ColumnIndexActor >= 0;
                        SubtitleListview1.ShowActorColumn(LanguageSettings.Current.General.Actor);
                        if (!wasVisible)
                        {
                            SaveSubtitleListviewIndices();
                            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                            RestoreSubtitleListviewIndices();
                        }
                    }
                }

                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;

                _subtitleListViewIndex = -1;
                if (SubtitleListview1.Items.Count > 0)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(0);
                }
            }
            else
            {
                if (file.Length < 50)
                {
                    _findHelper = null;
                    _spellCheckForm = null;
                    _videoFileName = null;
                    _videoInfo = null;
                    VideoAudioTrackNumber = -1;
                    labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
                    audioVisualizer.WavePeaks = null;
                    audioVisualizer.SetSpectrogram(null);
                    audioVisualizer.ShotChanges = new List<double>();
                    audioVisualizer.Chapters = Array.Empty<MatroskaChapter>();

                    Configuration.Settings.RecentFiles.Add(fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                    Configuration.Settings.Save();
                    UpdateRecentFilesUI();
                    _fileName = fileName;
                    SetTitle();
                    ShowStatus(string.Format(_language.LoadedEmptyOrShort, _fileName));
                    _sourceViewChange = false;
                    _converted = false;

                    MessageBox.Show(_language.FileIsEmptyOrShort);
                }
                else
                {
                    if (ShowUnknownSubtitle(fileName, true))
                    {
                        ImportPlainText(fileName);
                    }

                    return;
                }
            }

            if (!videoFileLoaded && mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.PauseAndDisposePlayer();
            }

            ResetShowEarlierOrLater();
            FixRightToLeftDependingOnLanguage();
            textBoxSource.SelectionLength = 0;
            toolStripMenuItemOpenContainingFolder.Enabled = !string.IsNullOrEmpty(_fileName) && File.Exists(_fileName);
        }

        private bool LoadSeJob(byte[] bytes)
        {
            var seJob = SeJobHandler.LoadSeJob(bytes);
            if (seJob == null)
            {
                return false;
            }

            if (!string.IsNullOrEmpty(seJob.Message))
            {
                var infoFileName = Path.Combine(Path.GetTempPath(), Guid.NewGuid() + ".html");
                var msgHtml = seJob.Message.Replace("\n", "<br />").RemoveChar('\r');
                var html = "<html><head><style> body { font-size: 2rem; color: #9f9f9f; background-color: #333333; margin: 50px; }</style><title>" + seJob.JobName + "</title></head><body>" + msgHtml + "</body></html>";
                File.WriteAllText(infoFileName, html);
                _filesToDelete.Add(infoFileName);
                var url = new Uri(infoFileName).AbsoluteUri;
                UiUtil.OpenUrl(url);
            }

            _subtitle = new Subtitle();
            if (!string.IsNullOrEmpty(seJob.SubtitleFileFormat) && !string.IsNullOrEmpty(seJob.SubtitleContent))
            {
                var format = SubtitleFormat.AllSubtitleFormats.FirstOrDefault(p => p.Name == seJob.SubtitleFileFormat);
                format?.LoadSubtitle(_subtitle, seJob.SubtitleContent.SplitToLines(), string.Empty);
                SetCurrentFormat(format);
            }

            if (!string.IsNullOrEmpty(seJob.SubtitleFileFormat) && !string.IsNullOrEmpty(seJob.SubtitleContentOriginal))
            {
                _subtitleOriginal = new Subtitle();
                var format = SubtitleFormat.AllSubtitleFormats.FirstOrDefault(p => p.Name == seJob.SubtitleFileFormat);
                format?.LoadSubtitle(_subtitleOriginal, seJob.SubtitleContentOriginal.SplitToLines(), string.Empty);
            }

            if (seJob.Bookmarks?.Count > 0)
            {
                foreach (var bookmark in seJob.Bookmarks)
                {
                    var p = _subtitle.GetParagraphOrDefault(bookmark.Idx);
                    if (p != null)
                    {
                        p.Bookmark = bookmark.Txt;
                    }
                }
            }

            if (!string.IsNullOrEmpty(seJob.VideoStreamingUrl))
            {
                if (Configuration.IsRunningOnWindows)
                {
                    var isMpvAvailable = LibMpvDynamic.IsInstalled;
                    var isYouTubeDlInstalled = File.Exists(Path.Combine(Configuration.DataDirectory, "yt-dlp.exe"));
                    var allOk = isYouTubeDlInstalled && isMpvAvailable;

                    if (!allOk)
                    {
                        if (MessageBox.Show(_language.VideoFromUrlRequirements, "Subtitle Edit", MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                        {
                            return false;
                        }

                        if (!isMpvAvailable)
                        {
                            using (var form = new SettingsMpv())
                            {
                                if (form.ShowDialog(this) != DialogResult.OK)
                                {
                                    return false;
                                }

                                Configuration.Settings.General.VideoPlayer = "MPV";
                            }
                        }

                        if (!isYouTubeDlInstalled)
                        {
                            using (var form = new DownloadYouTubeDl())
                            {
                                if (form.ShowDialog(this) != DialogResult.OK)
                                {
                                    return false;
                                }
                            }
                        }
                    }
                }

                OpenVideoFromUrl(seJob.VideoStreamingUrl);
            }

            if (seJob.Waveform?.PeakMins.Count > 0)
            {
                var max = Math.Min(seJob.Waveform.PeakMins.Count, seJob.Waveform.PeakMaxs.Count);
                var list = new List<WavePeak>();
                for (int i = 0; i < max; i++)
                {
                    list.Add(new WavePeak(seJob.Waveform.PeakMaxs[i], seJob.Waveform.PeakMins[i]));
                }

                audioVisualizer.WavePeaks = new WavePeakData((int)Math.Round(seJob.Waveform.SampleRate, MidpointRounding.AwayFromZero), list);

                var dir = Configuration.WaveformsDirectory.TrimEnd(Path.DirectorySeparatorChar);
                var peakWaveFileName = Path.Combine(dir, $"{seJob.VideoHash}.wav");
                if (!File.Exists(peakWaveFileName))
                {
                    using (var stream = File.Create(peakWaveFileName))
                    {
                        WavePeakGenerator.WriteWaveformData(stream, audioVisualizer.WavePeaks.SampleRate, audioVisualizer.WavePeaks.Peaks.ToList());
                    }
                }
            }

            if (seJob.ShotChanges?.Count > 0)
            {
                audioVisualizer.ShotChanges = seJob.ShotChanges;
                var dir = Configuration.ShotChangesDirectory.TrimEnd(Path.DirectorySeparatorChar);
                var shotChangesFileName = Path.Combine(dir, $"{seJob.VideoHash}.shotchanges");
                ShotChangeHelper.SaveShotChanges(shotChangesFileName, audioVisualizer.ShotChanges);
            }

            if (seJob.Rules != null)
            {
                var profile = Configuration.Settings.General.Profiles.FirstOrDefault(p =>
                    p.MaxNumberOfLines == seJob.Rules.MaxNumberOfLines &&
                    p.SubtitleLineMaximumLength == seJob.Rules.SubtitleLineMaximumLength &&
                    p.SubtitleMaximumCharactersPerSeconds == seJob.Rules.SubtitleMaximumCharactersPerSeconds &&
                    p.SubtitleMinimumDisplayMilliseconds == seJob.Rules.SubtitleMinimumDisplayMilliseconds &&
                    p.SubtitleMaximumDisplayMilliseconds == seJob.Rules.SubtitleMaximumDisplayMilliseconds &&
                    p.MinimumMillisecondsBetweenLines == seJob.Rules.MinimumMillisecondsBetweenLines &&
                    p.SubtitleMaximumWordsPerMinute == seJob.Rules.SubtitleMaximumWordsPerMinute &&
                    p.SubtitleOptimalCharactersPerSeconds == seJob.Rules.SubtitleOptimalCharactersPerSeconds);
                if (profile == null)
                {
                    var profileName = "SeJob " + seJob.JobName;
                    if (string.IsNullOrWhiteSpace(seJob.JobName) || Configuration.Settings.General.Profiles.Any(p => p.Name.Equals(profileName, StringComparison.OrdinalIgnoreCase)))
                    {
                        profileName = "SeJob " + seJob.JobId;
                    }

                    profile = new RulesProfile(Configuration.Settings.General.Profiles.First())
                    {
                        Name = profileName,
                        MaxNumberOfLines = seJob.Rules.MaxNumberOfLines,
                        SubtitleLineMaximumLength = seJob.Rules.SubtitleLineMaximumLength,
                        SubtitleMaximumCharactersPerSeconds = seJob.Rules.SubtitleMaximumCharactersPerSeconds,
                        SubtitleMinimumDisplayMilliseconds = seJob.Rules.SubtitleMinimumDisplayMilliseconds,
                        SubtitleMaximumDisplayMilliseconds = seJob.Rules.SubtitleMaximumDisplayMilliseconds,
                        MinimumMillisecondsBetweenLines = seJob.Rules.MinimumMillisecondsBetweenLines,
                        SubtitleMaximumWordsPerMinute = seJob.Rules.SubtitleMaximumWordsPerMinute,
                        SubtitleOptimalCharactersPerSeconds = seJob.Rules.SubtitleOptimalCharactersPerSeconds
                    };

                    LoadProfile(profile.Name, seJob);
                }
                else
                {
                    LoadProfile(profile.Name, seJob);
                }
            }

            _subtitleListViewIndex = -1;
            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
            if (_subtitleOriginal.Paragraphs.Count > 0)
            {
                SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
                SubtitleListview1.AutoSizeAllColumns(this);
                SetupOriginalEdit();
            }

            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            _findHelper = null;
            _spellCheckForm = null;
            _converted = true;
            _fileName = seJob.SubtitleFileName;
            _subtitleOriginalFileName = seJob.SubtitleFileNameOriginal;
            SetTitle();
            SubtitleListview1.SelectIndexAndEnsureVisible(0);
            return true;
        }

        private void LoadProfile(string profileName, SeJobModel seJob)
        {
            var profile = Configuration.Settings.General.Profiles.FirstOrDefault(p => p.Name == profileName);
            if (profile == null)
            {
                return;
            }

            var g = Configuration.Settings.General;
            g.CurrentProfile = profileName;
            g.MaxNumberOfLines = seJob.Rules.MaxNumberOfLines;
            g.SubtitleLineMaximumLength = seJob.Rules.SubtitleLineMaximumLength;
            g.SubtitleMaximumCharactersPerSeconds = (double)seJob.Rules.SubtitleMaximumCharactersPerSeconds;
            g.SubtitleMinimumDisplayMilliseconds = seJob.Rules.SubtitleMinimumDisplayMilliseconds;
            g.SubtitleMaximumDisplayMilliseconds = seJob.Rules.SubtitleMaximumDisplayMilliseconds;
            g.MinimumMillisecondsBetweenLines = seJob.Rules.MinimumMillisecondsBetweenLines;
            g.SubtitleMaximumWordsPerMinute = (double)seJob.Rules.SubtitleMaximumWordsPerMinute;
            g.SubtitleOptimalCharactersPerSeconds = (double)seJob.Rules.SubtitleOptimalCharactersPerSeconds;
        }

        private void ShowHideTextBasedFeatures(SubtitleFormat format)
        {
            textBoxSource.ReadOnly = format?.IsTextBased == false;
        }

        private void SetUndockedWindowsTitle()
        {
            string title = _languageGeneral.NoVideoLoaded;
            if (!string.IsNullOrEmpty(_videoFileName))
            {
                title = Path.GetFileNameWithoutExtension(_videoFileName);
            }

            if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
            {
                _videoControlsUndocked.Text = string.Format(_languageGeneral.ControlsWindowTitle, title);
            }

            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                _videoPlayerUndocked.Text = string.Format(_languageGeneral.VideoWindowTitle, title);
            }

            if (_waveformUndocked != null && !_waveformUndocked.IsDisposed)
            {
                _waveformUndocked.Text = string.Format(_languageGeneral.AudioWindowTitle, title);
            }
        }

        private void ImportAndOcrBdnXml(string fileName, BdnXml bdnXml, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var bdnSubtitle = new Subtitle();
                bdnXml.LoadSubtitle(bdnSubtitle, list, fileName);
                bdnSubtitle.FileName = fileName;
                formSubOcr.Initialize(bdnSubtitle, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                    _imageSubFileName = fileName;
                }
            }
        }

        private void ImportAndOcrSon(string fileName, Son format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, true);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private void ImportAndOcrDost(string fileName, SubtitleFormat format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private void ImportAndOcrDost(string fileName, Subtitle sub)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private void ImportAndOcrSst(string fileName, SonicScenaristBitmaps format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, true);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private void ImportAndOcrSrt(Subtitle subtitle)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitle, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private bool ShowUnknownSubtitle(string fileName, bool allowImportPlainText = false)
        {
            using (var unknownSubtitle = new UnknownSubtitle())
            {
                unknownSubtitle.Initialize(Title, fileName, allowImportPlainText);
                unknownSubtitle.ShowDialog(this);
                return unknownSubtitle.ImportPlainText;
            }
        }

        private void UpdateRecentFilesUI()
        {
            var dropDownItems = new List<ToolStripMenuItem>();
            reopenToolStripMenuItem.DropDownItems.Clear();
            if (Configuration.Settings.General.ShowRecentFiles && Configuration.Settings.RecentFiles.Files.Count > 0)
            {
                reopenToolStripMenuItem.Visible = true;
                var lowerFileNameList = new List<string>();
                foreach (var file in Configuration.Settings.RecentFiles.Files)
                {
                    if (!string.IsNullOrEmpty(file.OriginalFileName) && File.Exists(file.OriginalFileName))
                    {
                        dropDownItems.Add(new ToolStripMenuItem(file.FileName + " + " + file.OriginalFileName, null, ReopenSubtitleToolStripMenuItemClick) { Tag = file.FileName });
                    }
                    else
                    {
                        if (!lowerFileNameList.Contains(file.FileName.ToLowerInvariant()))
                        {
                            dropDownItems.Add(new ToolStripMenuItem(file.FileName, null, ReopenSubtitleToolStripMenuItemClick) { Tag = file.FileName });
                            lowerFileNameList.Add(file.FileName.ToLowerInvariant());
                        }
                    }
                }

                reopenToolStripMenuItem.DropDownItems.AddRange(dropDownItems.ToArray());
                UiUtil.FixFonts(reopenToolStripMenuItem);

                var tss = new ToolStripSeparator();
                UiUtil.FixFonts(tss);
                reopenToolStripMenuItem.DropDownItems.Add(tss);

                var clearHistoryMenuItem = new ToolStripMenuItem(LanguageSettings.Current.DvdSubRip.Clear);
                clearHistoryMenuItem.Click += (sender, args) =>
                {
                    Configuration.Settings.RecentFiles.Files.RemoveAll(entry => entry.FileName != _fileName || entry.FileName == _fileName && entry.OriginalFileName != _subtitleOriginalFileName);
                    UpdateRecentFilesUI();
                };
                UiUtil.FixFonts(clearHistoryMenuItem);
                reopenToolStripMenuItem.DropDownItems.Add(clearHistoryMenuItem);
            }
            else
            {
                Configuration.Settings.RecentFiles.Files.Clear();
                reopenToolStripMenuItem.Visible = false;
            }

            reopenToolStripMenuItem.Visible = reopenToolStripMenuItem.DropDownItems.Count > 0;
        }

        private void RemoveNotExistingFilesFromRecentFilesUI()
        {
            if (!Configuration.Settings.General.ShowRecentFiles || Configuration.Settings.RecentFiles.Files.Count == 0)
            {
                return;
            }

            var bw = new BackgroundWorker();
            bw.DoWork += (sender, args) =>
            {
                var recentFilesList = (List<RecentFileEntry>)args.Argument;
                var notExistingFiles = new List<string>();
                foreach (var entry in recentFilesList)
                {
                    if (!File.Exists(entry.FileName))
                    {
                        notExistingFiles.Add(entry.FileName);
                    }
                }

                args.Result = notExistingFiles;
            };
            bw.RunWorkerCompleted += (sender, args) =>
            {
                var notExistingFiles = (List<string>)args.Result;
                if (notExistingFiles.Count == 0)
                {
                    return;
                }

                try
                {
                    Configuration.Settings.RecentFiles.Files = Configuration.Settings.RecentFiles.Files
                        .Where(p => !notExistingFiles.Contains(p.FileName)).ToList();
                    if (Configuration.Settings.RecentFiles.Files.Count == 0)
                    {
                        reopenToolStripMenuItem.DropDownItems.Clear();
                        reopenToolStripMenuItem.Visible = false;
                    }
                    else
                    {
                        for (var index = reopenToolStripMenuItem.DropDownItems.Count - 1; index >= 0; index--)
                        {
                            ToolStripItem item = reopenToolStripMenuItem.DropDownItems[index];
                            if (notExistingFiles.Contains((string)item.Tag))
                            {
                                reopenToolStripMenuItem.DropDownItems.RemoveAt(index);
                            }
                        }
                    }
                }
                catch
                {
                    // ignore
                }
            };
            bw.RunWorkerAsync(Configuration.Settings.RecentFiles.Files);
        }

        private void ReopenSubtitleToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            var item = sender as ToolStripItem;

            if (ContinueNewOrExit())
            {
                if (!string.IsNullOrEmpty(_fileName) && !_converted)
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                }

                RecentFileEntry rfe = null;
                foreach (var file in Configuration.Settings.RecentFiles.Files.Where(p => !string.IsNullOrEmpty(p.OriginalFileName)))
                {
                    if ((file.FileName + " + " + file.OriginalFileName).Equals(item.Text, StringComparison.OrdinalIgnoreCase))
                    {
                        rfe = file;
                        break;
                    }
                }

                if (rfe == null)
                {
                    foreach (var file in Configuration.Settings.RecentFiles.Files.Where(p => string.IsNullOrEmpty(p.OriginalFileName)))
                    {
                        if (file.FileName.Equals(item.Text, StringComparison.OrdinalIgnoreCase))
                        {
                            rfe = file;
                            RemoveOriginal(true, false);
                            break;
                        }
                    }
                }

                CheckSecondSubtitleReset();
                SubtitleListview1.BeginUpdate();
                if (rfe == null)
                {
                    Interlocked.Increment(ref _openSaveCounter);
                    OpenSubtitle(item.Text, null);
                    Interlocked.Decrement(ref _openSaveCounter);
                }
                else
                {
                    Interlocked.Increment(ref _openSaveCounter);
                    OpenRecentFile(rfe);
                    Interlocked.Decrement(ref _openSaveCounter);
                }

                GotoSubPosAndPause();
                SetRecentIndices(rfe);
                SubtitleListview1.EndUpdate();
                if (rfe != null && !string.IsNullOrEmpty(rfe.VideoFileName))
                {
                    var p = _subtitle.GetParagraphOrDefault(rfe.FirstSelectedIndex);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }
            }
        }

        private void OpenRecentFile(RecentFileEntry rfe)
        {
            OpenSubtitle(rfe.FileName, null, rfe.VideoFileName, rfe.AudioTrack, rfe.OriginalFileName, false);
            Configuration.Settings.General.CurrentVideoOffsetInMs = rfe.VideoOffsetInMs;
            if (rfe.VideoOffsetInMs != 0)
            {
                _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                _subtitleListViewIndex = -1;
                _changeSubtitleHash = GetFastSubtitleHash();
                if (IsOriginalEditable)
                {
                    _subtitleOriginal.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                    _changeOriginalSubtitleHash = GetFastSubtitleOriginalHash();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                }
                else
                {
                    SubtitleListview1.Fill(_subtitle);
                }
            }

            if (rfe.VideoIsSmpte)
            {
                if (!smpteTimeModedropFrameToolStripMenuItem.Checked)
                {
                    SmpteTimeModedropFrameToolStripMenuItem_Click(null, null);
                }
                else
                {
                    Configuration.Settings.General.CurrentVideoIsSmpte = true;
                }
            }

            if (!Configuration.Settings.General.DisableVideoAutoLoading &&
                rfe.VideoFileName != null && rfe.VideoFileName.StartsWith("http", StringComparison.OrdinalIgnoreCase) &&
                Configuration.IsRunningOnWindows)
            {
                var isMpvAvailable = LibMpvDynamic.IsInstalled;
                var isYouTubeDlInstalled = File.Exists(Path.Combine(Configuration.DataDirectory, "yt-dlp.exe"));
                var allOk = isYouTubeDlInstalled && isMpvAvailable;

                if (allOk)
                {
                    OpenVideoFromUrl(rfe.VideoFileName);
                }
            }
        }

        private void GotoSubPosAndPause()
        {
            if (!string.IsNullOrEmpty(_videoFileName))
            {
                _videoLoadedGoToSubPosAndPause = true;
            }
            else
            {
                mediaPlayer.SubtitleText = string.Empty;
            }
        }

        private void SetRecentIndices(RecentFileEntry rfe)
        {
            if (!Configuration.Settings.General.RememberSelectedLine)
            {
                return;
            }

            ShowSubtitleTimer.Stop();
            Application.DoEvents();
            if (rfe != null && !string.IsNullOrEmpty(rfe.FileName) &&
                rfe.FirstSelectedIndex >= 0 && rfe.FirstSelectedIndex < SubtitleListview1.Items.Count)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                SubtitleListview1.SelectIndexAndEnsureVisible(rfe.FirstSelectedIndex, true);
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }

            if (!_loading)
            {
                ShowSubtitleTimer.Start();
            }
        }

        private void SaveToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                ShowStatus(_language.CannotSaveEmptySubtitle);
                return;
            }

            Interlocked.Increment(ref _openSaveCounter);
            ReloadFromSourceView();
            _saveAsCalled = false;
            SaveSubtitle(GetCurrentSubtitleFormat());
            Interlocked.Decrement(ref _openSaveCounter);
        }

        private void SaveAsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (InputLanguage.CurrentInputLanguage.Culture.TwoLetterISOLanguageName == "pl" &&
                Configuration.Settings.Shortcuts.MainFileSaveAs == "Control+Alt+S")
            {
                // fix for Polish letter "ś"
                Configuration.Settings.Shortcuts.MainFileSaveAs = "Control+Shift+S";
                saveAsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveAs);
                return;
            }

            if (!IsSubtitleLoaded)
            {
                ShowStatus(_language.CannotSaveEmptySubtitle);
                return;
            }

            ReloadFromSourceView();

            Interlocked.Increment(ref _openSaveCounter);
            FileSaveAs(!_converted || !string.IsNullOrEmpty(Configuration.Settings.General.DefaultSaveAsFormat));
            Interlocked.Decrement(ref _openSaveCounter);
        }

        private DialogResult FileSaveAs(bool allowUsingDefaultOrLastSaveAsFormat)
        {
            var oldFormat = GetCurrentSubtitleFormat();
            SubtitleFormat currentFormat = null;
            if (allowUsingDefaultOrLastSaveAsFormat)
            {
                if (!string.IsNullOrEmpty(Configuration.Settings.General.DefaultSaveAsFormat))
                {
                    currentFormat = Utilities.GetSubtitleFormatByFriendlyName(Configuration.Settings.General.DefaultSaveAsFormat);
                }
                else if (!string.IsNullOrEmpty(Configuration.Settings.General.LastSaveAsFormat))
                {
                    currentFormat = Utilities.GetSubtitleFormatByFriendlyName(Configuration.Settings.General.LastSaveAsFormat);
                }
            }

            if (currentFormat == null)
            {
                currentFormat = GetCurrentSubtitleFormat();
            }

            UiUtil.SetSaveDialogFilter(saveFileDialog1, currentFormat);

            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            var suffix = string.Empty;
            if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible && !string.IsNullOrEmpty(Configuration.Settings.General.TranslationAutoSuffixDefault))
            {
                if (Configuration.Settings.General.TranslationAutoSuffixDefault.StartsWith('<'))
                {
                    var translationLangauge = LanguageAutoDetect.AutoDetectGoogleLanguageOrNull(_subtitle);
                    if (!string.IsNullOrEmpty(translationLangauge))
                    {
                        suffix = "." + translationLangauge;
                    }
                    else
                    {
                        var originalLanguage = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal);
                        suffix = "." + AutoTranslate.EvaluateDefaultTargetLanguageCode(originalLanguage);
                    }
                }
                else
                {
                    suffix = Configuration.Settings.General.TranslationAutoSuffixDefault;
                }
            }

            if (!string.IsNullOrWhiteSpace(_fileName) && Configuration.Settings.General.SaveAsUseFileNameFrom.Equals("file", StringComparison.OrdinalIgnoreCase))
            {
                saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_fileName) + suffix;
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_fileName);
            }
            else if (!string.IsNullOrWhiteSpace(_subtitleOriginalFileName) && Configuration.Settings.General.SaveAsUseFileNameFrom.Equals("file", StringComparison.OrdinalIgnoreCase))
            {
                var originalLanguage = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal);
                var fileNameNoExt = Utilities.GetFileNameWithoutExtension(_subtitleOriginalFileName);
                if (fileNameNoExt.EndsWith("." + originalLanguage, StringComparison.OrdinalIgnoreCase))
                {
                    fileNameNoExt = fileNameNoExt.Substring(0, fileNameNoExt.Length - ("." + originalLanguage).Length);
                }

                saveFileDialog1.FileName = fileNameNoExt + suffix;
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_subtitleOriginalFileName);
            }
            else if (!string.IsNullOrEmpty(_videoFileName) && Configuration.Settings.General.SaveAsUseFileNameFrom.Equals("video", StringComparison.OrdinalIgnoreCase))
            {
                saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_videoFileName) + suffix;
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_videoFileName);
            }
            else if (!string.IsNullOrWhiteSpace(_fileName))
            {
                saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_fileName);
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_fileName);
            }
            else if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_videoFileName);
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_videoFileName);
            }
            else if (!string.IsNullOrWhiteSpace(_subtitleOriginalFileName))
            {
                var originalLanguage = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal);
                var fileNameNoExt = Utilities.GetFileNameWithoutExtension(_subtitleOriginalFileName);
                if (fileNameNoExt.EndsWith("." + originalLanguage, StringComparison.OrdinalIgnoreCase))
                {
                    fileNameNoExt = fileNameNoExt.Substring(0, fileNameNoExt.Length - ("." + originalLanguage).Length);
                }

                saveFileDialog1.FileName = fileNameNoExt + suffix;
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_subtitleOriginalFileName);
            }
            else
            {
                saveFileDialog1.FileName = string.Empty;
            }

            if (!string.IsNullOrEmpty(saveFileDialog1.FileName) &&
                saveFileDialog1.FileName.Contains('.') &&
                !saveFileDialog1.FileName.EndsWith(currentFormat.Extension, StringComparison.OrdinalIgnoreCase))
            {
                saveFileDialog1.FileName += currentFormat.Extension;
            }

            if (saveFileDialog1.FileName != null &&
                (saveFileDialog1.FileName.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
                 saveFileDialog1.FileName.StartsWith("https://", StringComparison.OrdinalIgnoreCase)))
            {
                saveFileDialog1.FileName = string.Empty;
                saveFileDialog1.InitialDirectory = string.Empty;
            }

            var result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                _converted = false;
                _fileName = saveFileDialog1.FileName;
                _fileDateTime = File.GetLastWriteTime(_fileName);
                SetTitle();
                MakeHistoryForUndo(_language.Menu.File.SaveAs);

                int index = 0;
                foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                {
                    if (saveFileDialog1.FilterIndex == index + 1)
                    {
                        // only allow current extension or ".txt"
                        string ext = Path.GetExtension(_fileName).ToLowerInvariant();
                        bool extOk = ext.Equals(format.Extension, StringComparison.OrdinalIgnoreCase) || format.AlternateExtensions.Contains(ext) || ext == ".txt";
                        if (!extOk)
                        {
                            if (_fileName.EndsWith('.'))
                            {
                                _fileName = _fileName.Substring(0, _fileName.Length - 1);
                            }

                            _fileName += format.Extension;
                        }

                        if (oldFormat.GetType() != format.GetType())
                        {
                            SetCurrentFormat(format);
                        }

                        _saveAsCalled = true;
                        var oldConverted = _converted;
                        _converted = false;
                        if (SaveSubtitle(format) == DialogResult.OK)
                        {
                            Configuration.Settings.General.LastSaveAsFormat = format.Name;
                            SetCurrentFormat(format);
                            Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                            Configuration.Settings.Save();
                            UpdateRecentFilesUI();
                            _changeSubtitleHash = GetFastSubtitleHash();
                        }
                        else if (oldFormat != null)
                        {
                            SetCurrentFormat(oldFormat);
                        }

                        _converted = oldConverted;
                        break;
                    }

                    index++;
                }

                _converted = false;
            }

            return result;
        }

        private DialogResult SaveSubtitle(SubtitleFormat format, bool useNewLineWithOnly0A = false, bool skipPrompts = false)
        {
            if (string.IsNullOrEmpty(_fileName) || _converted)
            {
                return FileSaveAs(_converted && !_formatManuallyChanged);
            }

            try
            {
                var sub = GetSaveSubtitle(_subtitle);

                if (format != null && !format.IsTextBased)
                {
                    if (format is Ebu ebu)
                    {
                        var header = new Ebu.EbuGeneralSubtitleInformation();
                        if (_subtitle != null && _subtitle.Header != null && (_subtitle.Header.Contains("STL2") || _subtitle.Header.Contains("STL3")))
                        {
                            header = Ebu.ReadHeader(Encoding.UTF8.GetBytes(_subtitle.Header));
                        }

                        if (ebu.Save(_fileName, sub, !_saveAsCalled, header))
                        {
                            _changeSubtitleHash = GetFastSubtitleHash();
                            Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                            Configuration.Settings.Save();
                        }
                    }

                    _oldSubtitleFormat = format;
                    _formatManuallyChanged = false;
                    return DialogResult.OK;
                }

                string allText = sub.ToText(format);

                // Seungki begin
                if (_splitDualSami && _subtitleOriginal?.Paragraphs.Count > 0)
                {
                    var s = new Subtitle(_subtitle);
                    foreach (var p in _subtitleOriginal.Paragraphs)
                    {
                        s.Paragraphs.Add(p);
                    }

                    allText = s.ToText(format);
                }
                // Seungki end

                var currentEncoding = GetCurrentEncoding();
                bool isUnicode = currentEncoding.Equals(Encoding.Unicode) || currentEncoding.Equals(Encoding.UTF32) || currentEncoding.Equals(Encoding.GetEncoding(12001)) || currentEncoding.Equals(Encoding.UTF7) || currentEncoding.Equals(Encoding.UTF8);
                if (!isUnicode)
                {
                    if (!skipPrompts && currentEncoding.GetString(currentEncoding.GetBytes(allText)) != allText)
                    {
                        if (MessageBox.Show(string.Format(_language.UnicodeMusicSymbolsAnsiWarning), Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                        {
                            return DialogResult.No;
                        }
                    }

                    allText = allText.NormalizeUnicode(currentEncoding);
                }

                bool containsNegativeTime = false;
                var negativeTimeLines = new List<string>();
                foreach (var p in sub.Paragraphs)
                {
                    if (p.StartTime.TotalMilliseconds < 0 || p.EndTime.TotalMilliseconds < 0)
                    {
                        containsNegativeTime = true;
                        negativeTimeLines.Add(sub.Paragraphs.IndexOf(p).ToString(CultureInfo.InvariantCulture));
                        if (negativeTimeLines.Count > 10)
                        {
                            negativeTimeLines[negativeTimeLines.Count - 1] = negativeTimeLines[negativeTimeLines.Count - 1] + "...";
                            break;
                        }
                    }
                }

                if (containsNegativeTime && !skipPrompts)
                {
                    if (MessageBox.Show(_language.NegativeTimeWarning + Environment.NewLine +
                                        string.Format(LanguageSettings.Current.MultipleReplace.LinesFoundX, string.Join(", ", negativeTimeLines)),
                        Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return DialogResult.No;
                    }
                }

                if (!skipPrompts && File.Exists(_fileName))
                {
                    var fileInfo = new FileInfo(_fileName);
                    var fileOnDisk = fileInfo.LastWriteTime;
                    if (_fileDateTime != fileOnDisk && _fileDateTime != new DateTime())
                    {
                        if (MessageBox.Show(string.Format(_language.OverwriteModifiedFile,
                                _fileName, fileOnDisk.ToShortDateString(), fileOnDisk.ToString("HH:mm:ss"),
                                Environment.NewLine, _fileDateTime.ToShortDateString(), _fileDateTime.ToString("HH:mm:ss")),
                            Title + " - " + _language.FileOnDiskModified, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                        {
                            return DialogResult.No;
                        }
                    }

                    if (fileInfo.IsReadOnly)
                    {
                        MessageBox.Show(string.Format(_language.FileXIsReadOnly, _fileName));
                        return DialogResult.No;
                    }
                }

                // force encoding
                var formatType = format.GetType();
                if (formatType == typeof(WebVTT) || formatType == typeof(WebVTTFileWithLineNumber))
                {
                    SetEncoding(Encoding.UTF8);
                    currentEncoding = Encoding.UTF8;
                }
                else if (formatType == typeof(SwiftInterchange2))
                {
                    SetEncoding(Encoding.Unicode);
                    currentEncoding = Encoding.Unicode;
                }
                else if (formatType == typeof(Xif))
                {
                    SetEncoding(Encoding.Unicode);
                    currentEncoding = Encoding.Unicode;
                }

                if (Configuration.Settings.General.ShowFormatRequiresUtf8Warning && !currentEncoding.Equals(Encoding.UTF8) &&
                    (formatType == typeof(DCinemaInterop) || formatType == typeof(DCinemaSmpte2007) ||
                     formatType == typeof(DCinemaSmpte2010) || formatType == typeof(DCinemaSmpte2014)))
                {
                    using (var form = new DialogDoNotShowAgain(Title, string.Format(_language.FormatXShouldUseUft8, GetCurrentSubtitleFormat().FriendlyName)))
                    {
                        form.ShowDialog(this);
                        Configuration.Settings.General.ShowFormatRequiresUtf8Warning = !form.DoNoDisplayAgain;
                    }
                }

                if (format.Extension == ".rtf" || formatType == typeof(ProjectionSubtitleList))
                {
                    var enc = GetCurrentEncoding();
                    if (enc != Encoding.ASCII)
                    {
                        var oldDisableShowStatus = _disableShowStatus;
                        _disableShowStatus = false;
                        ShowStatus("ASCII encoding used for save");
                        _disableShowStatus = oldDisableShowStatus;
                        currentEncoding = Encoding.ASCII;
                    }
                }

                if (useNewLineWithOnly0A)
                {
                    allText = allText.Replace("\r\n", "\n");
                }

                if (formatType == typeof(ItunesTimedText) || formatType == typeof(ScenaristClosedCaptions) || formatType == typeof(ScenaristClosedCaptionsDropFrame))
                {
                    var outputEnc = new UTF8Encoding(false); // create encoding with no BOM
                    using (var file = new StreamWriter(_fileName, false, outputEnc)) // open file with encoding
                    {
                        file.Write(allText);
                    }
                }
                else if (Equals(currentEncoding, Encoding.UTF8) && (formatType == typeof(TmpegEncAW5) || formatType == typeof(TmpegEncXml)))
                {
                    var outputEnc = new UTF8Encoding(false); // create encoding with no BOM
                    using (var file = new StreamWriter(_fileName, false, outputEnc)) // open file with encoding
                    {
                        file.Write(allText);
                    }
                }
                else
                {
                    if (string.IsNullOrWhiteSpace(allText))
                    {
                        MessageBox.Show(string.Format(_language.UnableToSaveSubtitleX, _fileName), string.Empty, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return DialogResult.Cancel;
                    }

                    Retry.Do(() =>
                    {
                        if (comboBoxEncoding.SelectedIndex == TextEncoding.Utf8WithoutBomIndex)
                        {
                            var outputEnc = new UTF8Encoding(false); // create encoding with no BOM
                            using (var file = new StreamWriter(_fileName, false, outputEnc)) // open file with encoding
                            {
                                file.Write(allText);
                            }
                        }
                        else
                        {
                            // create file - includes BOM for Unicode formats
                            using (var fs = new FileStream(_fileName, FileMode.Create, FileAccess.Write, FileShare.Read))
                            using (var sw = new StreamWriter(fs, currentEncoding))
                            {
                                sw.Write(allText);
                            }
                        }
                    }, TimeSpan.FromSeconds(1), 4);
                }

                Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                Configuration.Settings.Save();
                new BookmarkPersistence(_subtitle, _fileName).Save();
                _fileDateTime = File.GetLastWriteTime(_fileName);
                _oldSubtitleFormat = format;
                _formatManuallyChanged = false;
                ShowStatus(string.Format(_language.SavedSubtitleX, _fileName));
                if (formatType == typeof(NetflixTimedText))
                {
                    NetflixGlyphCheck(true);
                }

                _changeSubtitleHash = GetFastSubtitleHash();
                return DialogResult.OK;
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
                return DialogResult.Cancel;
            }
            finally
            {
                toolStripMenuItemOpenContainingFolder.Enabled = !string.IsNullOrEmpty(_fileName) && File.Exists(_fileName);
            }
        }

        private DialogResult SaveOriginalSubtitle(SubtitleFormat format, bool skipPrompts = false)
        {
            try
            {
                var subAlt = GetSaveSubtitle(_subtitleOriginal);

                bool containsNegativeTime = false;
                foreach (var p in subAlt.Paragraphs)
                {
                    if (p.StartTime.TotalMilliseconds < 0 || p.EndTime.TotalMilliseconds < 0)
                    {
                        containsNegativeTime = true;
                        break;
                    }
                }

                if (!skipPrompts && containsNegativeTime)
                {
                    if (MessageBox.Show(_language.NegativeTimeWarning, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return DialogResult.No;
                    }
                }

                if (format != null && !format.IsTextBased)
                {
                    if (format is Ebu ebu)
                    {
                        if (ebu.Save(_subtitleOriginalFileName, subAlt))
                        {
                            Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                            Configuration.Settings.Save();
                            ShowStatus(string.Format(_language.SavedOriginalSubtitleX, _subtitleOriginalFileName));
                            _changeOriginalSubtitleHash = GetFastSubtitleOriginalHash();
                            return DialogResult.OK;
                        }

                        return DialogResult.No;
                    }

                    MessageBox.Show("Ups - save original does not support this format - please go to Github and create an issue!");
                }

                string allText = subAlt.ToText(format);
                var currentEncoding = GetCurrentEncoding();
                bool isUnicode = currentEncoding != null && (currentEncoding.Equals(Encoding.Unicode) || currentEncoding.Equals(Encoding.UTF32) || currentEncoding.Equals(Encoding.UTF7) || currentEncoding.Equals(Encoding.UTF8));
                if (!skipPrompts && !isUnicode && currentEncoding.GetString(currentEncoding.GetBytes(allText)) != allText)
                {
                    if (MessageBox.Show(string.Format(_language.UnicodeMusicSymbolsAnsiWarning), Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return DialogResult.No;
                    }
                }

                if (!isUnicode)
                {
                    allText = allText.NormalizeUnicode(currentEncoding);
                }

                File.WriteAllText(_subtitleOriginalFileName, allText, currentEncoding);
                ShowStatus(string.Format(_language.SavedOriginalSubtitleX, _subtitleOriginalFileName));
                _changeOriginalSubtitleHash = GetFastSubtitleOriginalHash();
                return DialogResult.OK;
            }
            catch
            {
                MessageBox.Show(string.Format(_language.UnableToSaveSubtitleX, _subtitleOriginalFileName));
                return DialogResult.Cancel;
            }
        }

        private void NewToolStripMenuItemClick(object sender, EventArgs e)
        {
            Interlocked.Increment(ref _openSaveCounter);
            ReloadFromSourceView();
            FileNew();
            Interlocked.Decrement(ref _openSaveCounter);
        }

        private void ResetSubtitle()
        {
            if (ModifierKeys != Keys.Shift)
            {
                _videoFileName = null;
                _videoInfo = null;
            }

            SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);

            labelStartTimeWarning.Text = string.Empty;

            _isOriginalActive = false;
            Configuration.Settings.General.CurrentVideoOffsetInMs = 0;
            Configuration.Settings.General.CurrentVideoIsSmpte = false;
            smpteTimeModedropFrameToolStripMenuItem.Checked = false;
            _subtitle = new Subtitle(_subtitle.HistoryItems);
            _changeOriginalSubtitleHash = -1;
            _changeSubtitleHash = -1;
            _changeSubtitleTextHash = -1;
            _subtitleOriginalFileName = null;
            textBoxSource.Text = string.Empty;
            SubtitleListview1.Items.Clear();
            _fileName = string.Empty;
            _fileDateTime = new DateTime();
            _oldSubtitleFormat = null;
            labelSingleLine.Text = string.Empty;
            buttonSplitLine.Visible = false;
            labelSingleLinePixels.Text = string.Empty;
            RemoveOriginal(true, false);
            _splitDualSami = false;
            _imageSubFileName = null;
            labelLayer.Visible = false;
            numericUpDownLayer.Visible = false;

            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);

            var oldDisableShowStatus = _disableShowStatus;
            _disableShowStatus = true;
            ComboBoxSubtitleFormatsSelectedIndexChanged(null, null);
            _disableShowStatus = oldDisableShowStatus;

            SetEncoding(Configuration.Settings.General.DefaultEncoding);

            _findHelper = null;
            _spellCheckForm = null;

            if (ModifierKeys != Keys.Shift)
            {
                _videoFileName = null;
                _videoInfo = null;
                VideoAudioTrackNumber = -1;
                toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();
                labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
                audioVisualizer.WavePeaks = null;
                audioVisualizer.SetSpectrogram(null);
                audioVisualizer.ShotChanges = new List<double>();
                audioVisualizer.Chapters = Array.Empty<MatroskaChapter>();
                if (mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.PauseAndDisposePlayer();
                }

                timeUpDownVideoPositionAdjust.TimeCode = new TimeCode();
                timeUpDownVideoPositionAdjust.Enabled = false;
                timeUpDownVideoPosition.TimeCode = new TimeCode();
                timeUpDownVideoPosition.Enabled = false;
                trackBarWaveformPosition.Value = 0;
                timeUpDownStartTime.TimeCode = new TimeCode();
                numericUpDownDuration.Value = 0;
                SetWaveFormNotLoadedText(LanguageSettings.Current.Waveform);
            }

            _sourceViewChange = false;
            EnableOrDisableEditControls();

            _listViewTextUndoLast = null;
            _listViewOriginalTextUndoLast = null;
            _listViewTextUndoIndex = -1;

            _changeSubtitleHash = GetFastSubtitleHash();
            _converted = false;

            SetTitle();
            SetUndockedWindowsTitle();
            mediaPlayer.SubtitleText = string.Empty;
            labelNextWord.Visible = false;
            ShowStatus(_language.New);

            ResetShowEarlierOrLater();

            // Set default RTL or LTR
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                textBoxListViewTextOriginal.RightToLeft = Configuration.Settings.General.RightToLeftMode ? RightToLeft.Yes : RightToLeft.No;
            }

            if (Configuration.Settings.General.RightToLeftMode)
            {
                textBoxListViewText.RightToLeft = RightToLeft.Yes;
                textBoxSource.RightToLeft = RightToLeft.Yes;
            }
            else
            {
                textBoxListViewText.RightToLeft = RightToLeft.No;
                textBoxSource.RightToLeft = RightToLeft.No;
            }

            SetListViewStateImages();
            pictureBoxBookmark.Visible = false;
            panelBookmark.Hide();
        }

        private void ResetShowEarlierOrLater()
        {
            try
            {
                if (_showEarlierOrLater != null && !_showEarlierOrLater.IsDisposed)
                {
                    _showEarlierOrLater.ResetTotalAdjustment();
                }
            }
            catch
            {
                // form closing or alike
            }
        }

        private void FileNew()
        {
            if (ContinueNewOrExit())
            {
                if (Configuration.Settings.General.ShowRecentFiles && File.Exists(_fileName))
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                }

                if (IsSubtitleLoaded)
                {
                    MakeHistoryForUndo(_language.BeforeNew);
                }

                toolStripStatusLabelProgress.Visible = false;
                ResetSubtitle();
                CheckSecondSubtitleReset();
            }
        }

        private string _lastChangedToFormat;

        private void ComboBoxSubtitleFormatsSelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxSubtitleFormats.SelectedIndex < 0 && comboBoxSubtitleFormats.Items.Count > 0)
            {
                comboBoxSubtitleFormats.SelectedIndex = 0;
            }

            var newFormat = Utilities.GetSubtitleFormatByFriendlyName(comboBoxSubtitleFormats.SelectedItem.ToString());
            if (newFormat.Name != _currentSubtitleFormat?.Name)
            {
                var oldFormat = _currentSubtitleFormat;
                _currentSubtitleFormat = newFormat;
                MakeFormatChange(newFormat, oldFormat);
                _converted = _currentSubtitleFormat != null;
                if (_converted && _subtitle.OriginalFormat == newFormat && File.Exists(_fileName))
                {
                    _converted = false;
                };

                _formatManuallyChanged = _converted;
            }
        }

        private static List<string> GetNuendoStyles()
        {
            if (!string.IsNullOrEmpty(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile) && File.Exists(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile))
            {
                return NuendoProperties.LoadCharacters(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile);
            }

            return new List<string>();
        }

        private SubtitleFormat GetCurrentSubtitleFormat()
        {
            if (_currentSubtitleFormat == null)
            {
                _currentSubtitleFormat = Utilities.GetSubtitleFormatByFriendlyName(comboBoxSubtitleFormats.SelectedItem.ToString());
                MakeFormatChange(_currentSubtitleFormat, _oldSubtitleFormat);
            }

            return _currentSubtitleFormat;
        }

        private void ShowSource()
        {
            if (_subtitle != null && _subtitle.Paragraphs.Count > 0)
            {
                SubtitleFormat format = GetCurrentSubtitleFormat();
                if (format != null)
                {
                    textBoxSource.TextChanged -= TextBoxSourceTextChanged;
                    textBoxSource.Text = GetSaveSubtitle(_subtitle).ToText(format);
                    textBoxSource.TextChanged += TextBoxSourceTextChanged;
                    return;
                }
            }

            textBoxSource.TextChanged -= TextBoxSourceTextChanged;
            textBoxSource.Text = string.Empty;
            textBoxSource.TextChanged += TextBoxSourceTextChanged;
        }

        private void SettingsToolStripMenuItemClick(object sender, EventArgs e)
        {
            ShowSettings();
        }

        private void ShowSettings()
        {
            SaveSubtitleListviewIndices();
            FixFfmpegWrongPath();

            var oldVideoPlayer = Configuration.Settings.General.VideoPlayer;
            var oldMpvVideoOutput = Configuration.Settings.General.MpvVideoOutputWindows;
            var oldUseCenterChannelOnly = Configuration.Settings.General.FFmpegUseCenterChannelOnly;
            var oldListViewLineSeparatorString = Configuration.Settings.General.ListViewLineSeparatorString;
            var oldCpsWhiteSpaceSetting = Configuration.Settings.General.CpsLineLengthStrategy;
            string oldSubtitleFontSettings = Configuration.Settings.General.SubtitleFontName +
                                             Configuration.Settings.General.SubtitleTextBoxFontBold +
                                             Configuration.Settings.General.CenterSubtitleInTextBox +
                                             Configuration.Settings.General.SubtitleTextBoxFontSize +
                                             Configuration.Settings.General.SubtitleFontColor.ToArgb() +
                                             Configuration.Settings.General.SubtitleBackgroundColor.ToArgb() +
                                             Configuration.Settings.General.SubtitleListViewFontBold.ToString() +
                                             Configuration.Settings.General.SubtitleListViewFontSize;

            bool oldUseTimeFormatHHMMSSFF = Configuration.Settings.General.UseTimeFormatHHMMSSFF;

            string oldSyntaxColoring = Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall.ToString() +
                                       Configuration.Settings.Tools.ListViewSyntaxColorDurationBig +
                                       Configuration.Settings.Tools.ListViewSyntaxColorLongLines +
                                       Configuration.Settings.Tools.ListViewSyntaxColorOverlap +
                                       Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines +
                                       Configuration.Settings.Tools.ListViewSyntaxColorGap +
                                       Configuration.Settings.Tools.ListViewSyntaxColorWideLines +
                                       Configuration.Settings.General.MaxNumberOfLines +
                                       Configuration.Settings.Tools.ListViewSyntaxErrorColor.ToArgb();

            var oldFavoriteFormats = Configuration.Settings.General.FavoriteSubtitleFormats;
            var oldAllowEditOfOriginalSubtitle = Configuration.Settings.General.AllowEditOfOriginalSubtitle;
            var oldShowColumnStartTime = Configuration.Settings.Tools.ListViewShowColumnStartTime;
            var oldShowColumnEndTime = Configuration.Settings.Tools.ListViewShowColumnEndTime;
            var oldShowcolumnDuration = Configuration.Settings.Tools.ListViewShowColumnDuration;
            var oldShowColumnCharsPerSec = Configuration.Settings.Tools.ListViewShowColumnCharsPerSec;
            var oldShowWordsMinColumn = Configuration.Settings.Tools.ListViewShowColumnWordsPerMin;
            var oldLiveSpellCheck = Configuration.Settings.Tools.LiveSpellCheck;
            var oldSubtitleTextBoxSyntaxColor = Configuration.Settings.General.SubtitleTextBoxSyntaxColor;
            var oldSubtitleFontSize = Configuration.Settings.General.SubtitleTextBoxFontSize;
            var oldSubtitleAlignment = Configuration.Settings.General.CenterSubtitleInTextBox;
            var oldSubtitleTextBoxHtmlColor = Configuration.Settings.General.SubtitleTextBoxHtmlColor.ToArgb().ToString();
            var oldSubtitleTextBoxAssaColor = Configuration.Settings.General.SubtitleTextBoxAssColor.ToArgb().ToString();
            var oldUseDarkTheme = Configuration.Settings.General.UseDarkTheme;
            var oldUseDarkForeColor = Configuration.Settings.General.DarkThemeForeColor;
            var oldUseDarkBackColor = Configuration.Settings.General.DarkThemeBackColor;
            var oldDarkThemeShowListViewGridLines = Configuration.Settings.General.DarkThemeShowListViewGridLines;
            var resetApplied = false;
            using (var settings = new Options.Settings())
            {
                settings.Initialize(Icon, toolStripButtonFileNew.Image, toolStripButtonFileOpen.Image, toolStripButtonVideoOpen.Image, toolStripButtonSave.Image, toolStripButtonSaveAs.Image, toolStripButtonFind.Image,
                    toolStripButtonReplace.Image, toolStripButtonFixCommonErrors.Image, toolStripButtonRemoveTextForHi.Image, toolStripButtonVisualSync.Image, toolStripButtonBurnIn.Image,
                    toolStripButtonSpellCheck.Image, toolStripButtonNetflixQualityCheck.Image, toolStripButtonBeautifyTimeCodes.Image, toolStripButtonSettings.Image, toolStripButtonHelp.Image,
                    toolStripButtonSourceView.Image);

                if (settings.ShowDialog(this) == DialogResult.Cancel)
                {
                    return; // settings update canceled
                }

                resetApplied = settings.ResetApplied;
            }

            try
            { // can have some problems with fonts...
                UiUtil.InitializeSubtitleFont(textBoxSource);
                UiUtil.InitializeSubtitleFont(textBoxListViewText);
                UiUtil.InitializeSubtitleFont(textBoxListViewTextOriginal);
                UiUtil.InitializeSubtitleFont(SubtitleListview1);
            }
            catch (Exception exception)
            {
                Debug.WriteLine(exception.Message + Environment.NewLine + exception.StackTrace);
            }

            UpdateRecentFilesUI();
            buttonCustomUrl1.Text = Configuration.Settings.VideoControls.CustomSearchText1;
            buttonCustomUrl1.Visible = Configuration.Settings.VideoControls.CustomSearchUrl1.Length > 1;
            buttonCustomUrl2.Text = Configuration.Settings.VideoControls.CustomSearchText2;
            buttonCustomUrl2.Visible = Configuration.Settings.VideoControls.CustomSearchUrl2.Length > 1;

            SetAudioVisualizerSettings();

            string newSyntaxColoring = Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall.ToString() +
                                       Configuration.Settings.Tools.ListViewSyntaxColorDurationBig +
                                       Configuration.Settings.Tools.ListViewSyntaxColorLongLines +
                                       Configuration.Settings.Tools.ListViewSyntaxColorOverlap +
                                       Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines +
                                       Configuration.Settings.General.MaxNumberOfLines +
                                       Configuration.Settings.Tools.ListViewSyntaxErrorColor.ToArgb();

            if (resetApplied ||
                oldSubtitleFontSettings != Configuration.Settings.General.SubtitleFontName +
                Configuration.Settings.General.SubtitleTextBoxFontBold +
                Configuration.Settings.General.CenterSubtitleInTextBox +
                Configuration.Settings.General.SubtitleTextBoxFontSize +
                Configuration.Settings.General.SubtitleFontColor.ToArgb() +
                Configuration.Settings.General.SubtitleBackgroundColor.ToArgb() +
                Configuration.Settings.General.SubtitleListViewFontBold.ToString() +
                Configuration.Settings.General.SubtitleListViewFontSize ||
                oldSyntaxColoring != newSyntaxColoring ||
                oldShowColumnStartTime != Configuration.Settings.Tools.ListViewShowColumnStartTime ||
                oldShowColumnEndTime != Configuration.Settings.Tools.ListViewShowColumnEndTime ||
                oldShowcolumnDuration != Configuration.Settings.Tools.ListViewShowColumnDuration ||
                oldShowColumnCharsPerSec != Configuration.Settings.Tools.ListViewShowColumnCharsPerSec ||
                oldShowWordsMinColumn != Configuration.Settings.Tools.ListViewShowColumnWordsPerMin)
            {
                if (Configuration.Settings.Tools.ListViewShowColumnStartTime)
                {
                    SubtitleListview1.ShowEndColumn(LanguageSettings.Current.General.StartTime);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Start);
                }

                if (Configuration.Settings.Tools.ListViewShowColumnEndTime)
                {
                    SubtitleListview1.ShowEndColumn(LanguageSettings.Current.General.EndTime);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.End);
                }

                if (Configuration.Settings.Tools.ListViewShowColumnDuration)
                {
                    SubtitleListview1.ShowDurationColumn(LanguageSettings.Current.General.Duration);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Duration);
                }

                if (Configuration.Settings.Tools.ListViewShowColumnCharsPerSec)
                {
                    SubtitleListview1.ShowCharsSecColumn(LanguageSettings.Current.General.CharsPerSec);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.CharactersPerSeconds);
                }

                if (Configuration.Settings.Tools.ListViewShowColumnWordsPerMin)
                {
                    SubtitleListview1.ShowWordsMinColumn(LanguageSettings.Current.General.WordsPerMin);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.WordsPerMinute);
                }

                try
                { // can have some problems with fonts...
                    textBoxListViewText.BackColor = Configuration.Settings.General.SubtitleBackgroundColor;
                    textBoxListViewTextOriginal.BackColor = Configuration.Settings.General.SubtitleBackgroundColor;
                    textBoxListViewText.ForeColor = Configuration.Settings.General.SubtitleBackgroundColor;
                    textBoxListViewTextOriginal.ForeColor = Configuration.Settings.General.SubtitleBackgroundColor;
                    textBoxListViewText.Initialize(Configuration.Settings.General.SubtitleTextBoxSyntaxColor, false);
                    textBoxListViewTextOriginal.Initialize(Configuration.Settings.General.SubtitleTextBoxSyntaxColor, false);

                    UiUtil.InitializeSubtitleFont(textBoxListViewText);
                    UiUtil.InitializeSubtitleFont(textBoxListViewTextOriginal);
                    UiUtil.InitializeSubtitleFont(textBoxSource);
                    SubtitleListview1.SubtitleFontName = Configuration.Settings.General.SubtitleFontName;
                    SubtitleListview1.SubtitleFontBold = Configuration.Settings.General.SubtitleListViewFontBold;
                    SubtitleListview1.SubtitleFontSize = Configuration.Settings.General.SubtitleListViewFontSize;
                }
                catch (Exception exception)
                {
                    Debug.WriteLine(exception.Message + Environment.NewLine + exception.StackTrace);
                }

                SubtitleListview1.ForeColor = Configuration.Settings.General.SubtitleFontColor;
                SubtitleListview1.BackColor = Configuration.Settings.General.SubtitleBackgroundColor;

                UiUtil.InitializeSubtitleFont(SubtitleListview1);
                UiUtil.InitializeSubtitleFont(textBoxSource);
                mediaPlayer.SetSubtitleFont();
                ShowSubtitle();
            }

            mediaPlayer.SetSubtitleFont();
            mediaPlayer.ShowStopButton = Configuration.Settings.General.VideoPlayerShowStopButton;
            mediaPlayer.ShowMuteButton = Configuration.Settings.General.VideoPlayerShowMuteButton;
            mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;

            if (oldListViewLineSeparatorString != Configuration.Settings.General.ListViewLineSeparatorString ||
                oldCpsWhiteSpaceSetting != Configuration.Settings.General.CpsLineLengthStrategy)
            {
                SubtitleListview1.InitializeLanguage(_languageGeneral, Configuration.Settings);
            }

            if (oldAllowEditOfOriginalSubtitle != Configuration.Settings.General.AllowEditOfOriginalSubtitle && _isOriginalActive)
            {
                textBoxListViewTextOriginal.Enabled = Configuration.Settings.General.AllowEditOfOriginalSubtitle;
                Main_ResizeEnd(null, null);
            }

            if (oldFavoriteFormats != Configuration.Settings.General.FavoriteSubtitleFormats)
            {
                UiUtil.InitializeSubtitleFormatComboBox(comboBoxSubtitleFormats.ComboBox, string.Empty);
            }

            SetLanguage(Configuration.Settings.General.Language);

            textBoxListViewTextOriginal.Enabled = Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleListViewIndex >= 0;

            SetShortcuts();

            CheckAndGetNewlyDownloadedMpvDlls("Please restart to use new libmpv dll");

            if (!string.IsNullOrEmpty(_videoFileName) && oldVideoPlayer != Configuration.Settings.General.VideoPlayer && mediaPlayer.VideoPlayer != null ||
                (oldMpvVideoOutput != Configuration.Settings.General.MpvVideoOutputWindows && Configuration.Settings.General.VideoPlayer.Equals("MPV", StringComparison.OrdinalIgnoreCase)))
            {
                string vfn = _videoFileName;
                CloseVideoToolStripMenuItemClick(null, null);
                OpenVideo(vfn);
            }

            if (mediaPlayer.VideoPlayer != null && mediaPlayer.VideoPlayer is LibMpvDynamic && Configuration.Settings.General.MpvHandlesPreviewText)
            {
                mediaPlayer.UpdateMpvStyle();
            }

            if (oldUseCenterChannelOnly != Configuration.Settings.General.FFmpegUseCenterChannelOnly &&
                !string.IsNullOrEmpty(_videoFileName) &&
                !VideoFileNameIsUrl &&
                mediaPlayer.VideoPlayer is LibMpvDynamic libmpvCenterChannel &&
                FfmpegMediaInfo.Parse(_videoFileName).HasFrontCenterAudio(_videoAudioTrackNumber))
            {
                if (Configuration.Settings.General.FFmpegUseCenterChannelOnly)
                {
                    mediaPlayer.UsingFrontCenterAudioChannelOnly = true;
                    libmpvCenterChannel.SetAudioChannelFrontCenter();
                }
                else
                {
                    libmpvCenterChannel.SetAudioChannelFrontReset();
                    mediaPlayer.UsingFrontCenterAudioChannelOnly = false;
                }
            }

            StartOrStopAutoBackup();

            SetTitle();
            if (Configuration.Settings.VideoControls.GenerateSpectrogram)
            {
                audioVisualizer.WaveformNotLoadedText = LanguageSettings.Current.Waveform.ClickToAddWaveformAndSpectrogram;
            }
            else
            {
                audioVisualizer.WaveformNotLoadedText = LanguageSettings.Current.Waveform.ClickToAddWaveform;
            }

            audioVisualizer.Invalidate();

            if (oldUseTimeFormatHHMMSSFF != Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                RefreshTimeCodeMode();
            }

            var darkThemeBackColor = Configuration.Settings.General.DarkThemeBackColor;
            var darkThemeForeColor = Configuration.Settings.General.DarkThemeForeColor;
            var darkModeListViewSyntaxErrorColor = Color.FromArgb(125, 21, 0);
            var defaultListViewSyntaxErrorColor = new ToolsSettings().ListViewSyntaxErrorColor;
            var darkModeWaveformSelectedColor = Color.FromArgb(150, 0, 0);
            var slightlyLighter = Color.FromArgb(Math.Min(byte.MaxValue, darkThemeBackColor.R + 10), Math.Min(byte.MaxValue, darkThemeBackColor.G + 10), Math.Min(byte.MaxValue, darkThemeBackColor.B + 10));
            var listViewDarkThemeUnfocusedBackColor = Color.FromArgb(Math.Min(byte.MaxValue, darkThemeBackColor.R + 20), Math.Min(byte.MaxValue, darkThemeBackColor.G + 20), Math.Min(byte.MaxValue, darkThemeBackColor.B + 50));

            if (resetApplied ||
                oldUseDarkTheme != Configuration.Settings.General.UseDarkTheme ||
                oldUseDarkForeColor != Configuration.Settings.General.DarkThemeForeColor ||
                oldUseDarkBackColor != Configuration.Settings.General.DarkThemeBackColor ||
                oldDarkThemeShowListViewGridLines != Configuration.Settings.General.DarkThemeShowListViewGridLines ||
                (oldUseDarkTheme && Configuration.Settings.General.UseDarkTheme && SubtitleListview1.BackColor == Color.White))
            {
                var defaultWaveformValues = new VideoControlsSettings();
                var darkModeWaveformColor = Color.FromArgb(7, 65, 152);

                if (Configuration.Settings.General.UseDarkTheme)
                {
                    FixFonts();

                    if (oldUseDarkTheme != Configuration.Settings.General.UseDarkTheme)
                    {
                        // override colors one time if the user didn't change them

                        if (Configuration.Settings.VideoControls.WaveformGridColor.ToArgb() == defaultWaveformValues.WaveformGridColor.ToArgb())
                        {
                            Configuration.Settings.VideoControls.WaveformGridColor = slightlyLighter;
                        }

                        if (Configuration.Settings.VideoControls.WaveformBackgroundColor.ToArgb() == defaultWaveformValues.WaveformBackgroundColor.ToArgb())
                        {
                            Configuration.Settings.VideoControls.WaveformBackgroundColor = darkThemeBackColor;
                        }

                        if (Configuration.Settings.VideoControls.WaveformColor.ToArgb() == defaultWaveformValues.WaveformColor.ToArgb())
                        {
                            Configuration.Settings.VideoControls.WaveformColor = darkModeWaveformColor;
                        }

                        if (Configuration.Settings.VideoControls.WaveformSelectedColor.ToArgb() == defaultWaveformValues.WaveformSelectedColor.ToArgb())
                        {
                            Configuration.Settings.VideoControls.WaveformSelectedColor = darkModeWaveformSelectedColor;
                        }

                        if (Configuration.Settings.Tools.ListViewSyntaxErrorColor.ToArgb() == defaultListViewSyntaxErrorColor.ToArgb())
                        {
                            Configuration.Settings.Tools.ListViewSyntaxErrorColor = darkModeListViewSyntaxErrorColor;
                        }

                        if (Configuration.Settings.Tools.ListViewUnfocusedSelectedColor == new ToolsSettings().ListViewUnfocusedSelectedColor)
                        {
                            Configuration.Settings.Tools.ListViewUnfocusedSelectedColor = listViewDarkThemeUnfocusedBackColor;
                        }

                        DarkTheme.SetDarkTheme(textBoxSource);
                    }

                    Configuration.Settings.General.SubtitleBackgroundColor = darkThemeBackColor;
                    Configuration.Settings.General.SubtitleFontColor = darkThemeForeColor;
                    textBoxListViewText.Initialize(Configuration.Settings.General.SubtitleTextBoxSyntaxColor, false);
                    textBoxListViewTextOriginal.Initialize(Configuration.Settings.General.SubtitleTextBoxSyntaxColor, false);
                    SubtitleListview1.BackColor = darkThemeBackColor;
                    SubtitleListview1.ForeColor = darkThemeForeColor;
                    SetAudioVisualizerSettings();
                }
                else
                {
                    darkThemeBackColor = SystemColors.Window;
                    darkThemeForeColor = DefaultForeColor;
                    Configuration.Settings.General.SubtitleBackgroundColor = darkThemeBackColor;
                    Configuration.Settings.General.SubtitleFontColor = darkThemeForeColor;
                    textBoxListViewText.Initialize(Configuration.Settings.General.SubtitleTextBoxSyntaxColor, false);
                    textBoxListViewTextOriginal.Initialize(Configuration.Settings.General.SubtitleTextBoxSyntaxColor, false);
                    SubtitleListview1.BackColor = darkThemeBackColor;
                    SubtitleListview1.ForeColor = darkThemeForeColor;

                    Configuration.Settings.VideoControls.WaveformGridColor = defaultWaveformValues.WaveformGridColor;
                    Configuration.Settings.VideoControls.WaveformBackgroundColor = defaultWaveformValues.WaveformBackgroundColor;
                    Configuration.Settings.VideoControls.WaveformColor = defaultWaveformValues.WaveformColor;
                    Configuration.Settings.VideoControls.WaveformSelectedColor = defaultWaveformValues.WaveformSelectedColor;

                    var newTools = new ToolsSettings();
                    Configuration.Settings.Tools.ListViewSyntaxErrorColor = newTools.ListViewSyntaxErrorColor;
                    Configuration.Settings.Tools.ListViewUnfocusedSelectedColor = newTools.ListViewUnfocusedSelectedColor;

                    SetAudioVisualizerSettings();

                    DarkTheme.UndoDarkTheme(this, 1500);
                    FixFonts();
                }
            }

            InitializeToolbarAndImages();

            if (oldSubtitleTextBoxSyntaxColor != Configuration.Settings.General.SubtitleTextBoxSyntaxColor ||
                oldSubtitleFontSize != Configuration.Settings.General.SubtitleTextBoxFontSize ||
                oldSubtitleAlignment != Configuration.Settings.General.CenterSubtitleInTextBox ||
                oldSubtitleTextBoxHtmlColor != Configuration.Settings.General.SubtitleTextBoxHtmlColor.ToArgb().ToString() ||
                oldSubtitleTextBoxAssaColor != Configuration.Settings.General.SubtitleTextBoxAssColor.ToArgb().ToString())
            {
                if (oldSubtitleTextBoxSyntaxColor && oldLiveSpellCheck)
                {
                    textBoxListViewText.DisposeHunspellAndDictionaries();
                }

                textBoxListViewText.Initialize(Configuration.Settings.General.SubtitleTextBoxSyntaxColor, false);
                textBoxListViewTextOriginal.Initialize(Configuration.Settings.General.SubtitleTextBoxSyntaxColor, false);
            }
            else if (oldLiveSpellCheck && oldLiveSpellCheck != Configuration.Settings.Tools.LiveSpellCheck)
            {
                textBoxListViewText.DisposeHunspellAndDictionaries();
            }

            if (Configuration.Settings.General.UseDarkTheme)
            {
                if (Configuration.Settings.Tools.ListViewSyntaxErrorColor == defaultListViewSyntaxErrorColor)
                {
                    Configuration.Settings.Tools.ListViewSyntaxErrorColor = darkModeListViewSyntaxErrorColor;
                }

                if (Configuration.Settings.Tools.ListViewUnfocusedSelectedColor == new ToolsSettings().ListViewUnfocusedSelectedColor)
                {
                    Configuration.Settings.Tools.ListViewUnfocusedSelectedColor = listViewDarkThemeUnfocusedBackColor;
                }
            }

            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            RestoreSubtitleListviewIndices();

            StartOrStopLiveSpellCheckTimer();

            textBoxListViewText.BackColor = !IsSubtitleLoaded ? SystemColors.ActiveBorder : SystemColors.WindowFrame;
            textBoxListViewTextOriginal.BackColor = !IsSubtitleLoaded ? SystemColors.ActiveBorder : SystemColors.WindowFrame;
            tabControlModes.Refresh();

            SubtitleListview1.SyntaxColorAllLines(_subtitle);
            mediaPlayer.LastParagraph = null;
            Refresh();
            Application.DoEvents();
            UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());
            mediaPlayer.VideoPlayerContainerResize(null, null);
            ShowLineInformationListView();
            ShowSourceLineNumber();
            LoadPlugins();
        }

        private void SetAudioVisualizerSettings()
        {
            audioVisualizer.ShowGridLines = Configuration.Settings.VideoControls.WaveformDrawGrid;
            audioVisualizer.GridColor = Configuration.Settings.VideoControls.WaveformGridColor;
            audioVisualizer.SelectedColor = Configuration.Settings.VideoControls.WaveformSelectedColor;
            audioVisualizer.Color = Configuration.Settings.VideoControls.WaveformColor;
            audioVisualizer.BackgroundColor = Configuration.Settings.VideoControls.WaveformBackgroundColor;
            audioVisualizer.TextColor = Configuration.Settings.VideoControls.WaveformTextColor;
            audioVisualizer.CursorColor = Configuration.Settings.VideoControls.WaveformCursorColor;
            audioVisualizer.ChaptersColor = Configuration.Settings.VideoControls.WaveformChaptersColor;
            audioVisualizer.TextSize = Configuration.Settings.VideoControls.WaveformTextSize;
            audioVisualizer.TextBold = Configuration.Settings.VideoControls.WaveformTextBold;
            audioVisualizer.MouseWheelScrollUpIsForward = Configuration.Settings.VideoControls.WaveformMouseWheelScrollUpIsForward;
            audioVisualizer.AllowOverlap = Configuration.Settings.VideoControls.WaveformAllowOverlap;
            audioVisualizer.ClosenessForBorderSelection = Configuration.Settings.VideoControls.WaveformBorderHitMs;
        }

        private void CheckAndGetNewlyDownloadedMpvDlls(string message)
        {
            if (Configuration.Settings.General.VideoPlayer != "MPV")
            {
                return;
            }

            var newMpvFiles = Directory.GetFiles(Configuration.DataDirectory, "*.dll.new-mpv");
            if (newMpvFiles.Length <= 0)
            {
                return;
            }

            if (mediaPlayer != null && mediaPlayer.VideoPlayer != null)
            {
                var mpv = mediaPlayer.VideoPlayer as LibMpvDynamic;
                mediaPlayer.VideoPlayer = null;
                mpv?.HardDispose();
            }

            foreach (string newDllFileName in newMpvFiles)
            {
                if (File.Exists(newDllFileName)) // dll was in use, so unload + copy new dll + load
                {
                    try
                    {
                        string targetFileName = newDllFileName.Replace(".dll.new-mpv", ".dll");
                        File.Copy(newDllFileName, targetFileName, true);
                        File.Delete(newDllFileName);
                        ShowStatus("libmpv updated");
                    }
                    catch
                    {
                        // ignore
                    }
                }
            }

            if (!string.IsNullOrEmpty(message))
            {
                MessageBox.Show(message);
            }
        }

        private void AddOriginal()
        {
            buttonUnBreak.Visible = false;
            buttonAutoBreak.Visible = false;
            buttonSplitLine.Visible = false;
            textBoxListViewTextOriginal.Visible = true;
            labelOriginalText.Visible = true;
            labelOriginalCharactersPerSecond.Visible = true;
            labelTextOriginalLineLengths.Visible = true;
            labelOriginalSingleLine.Visible = true;
            labelOriginalSingleLinePixels.Visible = true;
            labelTextOriginalLineTotal.Visible = true;
        }

        private int ShowSubtitle()
        {
            var format = GetCurrentSubtitleFormat();

            if (_splitDualSami)
            {
                return UiUtil.ShowSubtitle(_subtitle, _subtitleOriginal, mediaPlayer, format);
            }

            if (SubtitleListview1.IsOriginalTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                return UiUtil.ShowSubtitle(_subtitleOriginal, mediaPlayer, format);
            }

            return UiUtil.ShowSubtitle(_subtitle, mediaPlayer, format);
        }

        private static void TryLoadIcon(ToolStripItem button, string iconName)
        {
            button.BackColor = UiUtil.BackColor;

            var theme = Configuration.Settings.General.UseDarkTheme ? "DarkTheme" : "DefaultTheme";
            if (!string.IsNullOrEmpty(Configuration.Settings.General.ToolbarIconTheme) && !Configuration.Settings.General.ToolbarIconTheme.Equals("Auto", StringComparison.OrdinalIgnoreCase))
            {
                theme = Configuration.Settings.General.ToolbarIconTheme;
            }

            var themeFullPath = Path.Combine(Configuration.IconsDirectory, theme, iconName + ".png");
            if (File.Exists(themeFullPath))
            {
                button.Image?.Dispose();
                button.Image = new Bitmap(themeFullPath);
                return;
            }

            var fullPath = Path.Combine(Configuration.IconsDirectory, "DefaultTheme", iconName + ".png");
            if (File.Exists(fullPath))
            {
                button.Image?.Dispose();
                button.Image = new Bitmap(fullPath);
            }
        }

        private void InitializeToolbarAndImages()
        {
            imageListBookmarks.Images.Clear();
            if (Configuration.Settings.General.UseDarkTheme)
            {
                imageListBookmarks.Images.Add(Properties.Resources.bookmark22dark);
            }
            else
            {
                imageListBookmarks.Images.Add(Properties.Resources.bookmark22transparent);
            }

            var gs = Configuration.Settings.General;

            if (Directory.Exists(Configuration.IconsDirectory))
            {
                TryLoadIcon(toolStripButtonFileNew, "New");
                TryLoadIcon(toolStripButtonFileOpen, "Open");
                TryLoadIcon(toolStripButtonVideoOpen, "OpenVideo");
                TryLoadIcon(toolStripButtonSave, "Save");
                TryLoadIcon(toolStripButtonSaveAs, "SaveAs");
                TryLoadIcon(toolStripButtonFind, "Find");
                TryLoadIcon(toolStripButtonReplace, "Replace");
                TryLoadIcon(toolStripButtonFixCommonErrors, "FixCommonErrors");
                TryLoadIcon(toolStripButtonRemoveTextForHi, "RemoveTextForHi");
                TryLoadIcon(toolStripButtonVisualSync, "VisualSync");
                TryLoadIcon(toolStripButtonBurnIn, "BurnIn");
                TryLoadIcon(toolStripButtonSpellCheck, "SpellCheck");
                TryLoadIcon(toolStripButtonNetflixQualityCheck, "Netflix");
                TryLoadIcon(toolStripButtonBeautifyTimeCodes, "BeautifyTimeCodes");
                TryLoadIcon(toolStripButtonAssStyleManager, "AssaStyle");
                TryLoadIcon(toolStripButtonAssProperties, "AssaProperties");
                TryLoadIcon(toolStripButtonAssAttachments, "AssaAttachments");
                TryLoadIcon(toolStripButtonAssaDraw, "AssaDraw");
                TryLoadIcon(toolStripButtonSettings, "Settings");
                TryLoadIcon(toolStripButtonHelp, "Help");
                TryLoadIcon(toolStripButtonLayout, "Layout");
                TryLoadIcon(toolStripButtonSourceView, "SourceView");

                // wave form toolbar
                TryLoadIcon(toolStripButtonWaveformZoomOut, "WaveformZoomOut");
                TryLoadIcon(toolStripButtonWaveformZoomIn, "WaveformZoomIn");
                TryLoadIcon(toolStripButtonWaveformPause, "WaveformPause");
                TryLoadIcon(toolStripButtonWaveformPlay, "WaveformPlay");
                TryLoadIcon(toolStripButtonLockCenter, "WaveformCenter");
                TryLoadIcon(toolStripSplitButtonPlayRate, "WaveformPlaybackSpeed");

                // media player gfx
                mediaPlayer.TryLoadGfx();

                // Other images: IttProperties, WebVttProperties, WebVttStyle, EbuProperties
            }

            toolStripButtonFileNew.Visible = gs.ShowToolbarNew;
            toolStripButtonFileOpen.Visible = gs.ShowToolbarOpen;
            toolStripButtonVideoOpen.Visible = gs.ShowToolbarOpenVideo;
            toolStripButtonSave.Visible = gs.ShowToolbarSave;
            toolStripButtonSaveAs.Visible = gs.ShowToolbarSaveAs;
            toolStripButtonFind.Visible = gs.ShowToolbarFind;
            toolStripButtonReplace.Visible = gs.ShowToolbarReplace;
            toolStripButtonFixCommonErrors.Visible = gs.ShowToolbarFixCommonErrors;
            toolStripButtonRemoveTextForHi.Visible = gs.ShowToolbarRemoveTextForHi;

            toolStripButtonVisualSync.Visible = gs.ShowToolbarVisualSync;
            toolStripButtonBurnIn.Visible = gs.ShowToolbarBurnIn;
            toolStripButtonSpellCheck.Visible = gs.ShowToolbarSpellCheck;
            toolStripButtonNetflixQualityCheck.Visible = gs.ShowToolbarNetflixGlyphCheck;
            toolStripButtonBeautifyTimeCodes.Visible = gs.ShowToolbarBeautifyTimeCodes;
            toolStripButtonSettings.Visible = gs.ShowToolbarSettings;
            toolStripButtonHelp.Visible = gs.ShowToolbarHelp;
            toolStripButtonSourceView.Visible = gs.ShowToolbarToggleSourceView;

            toolStripSeparatorFrameRate.Visible = gs.ShowFrameRate;
            toolStripLabelFrameRate.Visible = gs.ShowFrameRate;
            toolStripComboBoxFrameRate.Visible = gs.ShowFrameRate;
            toolStripButtonGetFrameRate.Visible = gs.ShowFrameRate;

            toolStripSeparatorFindReplace.Visible = gs.ShowToolbarFind || gs.ShowToolbarReplace;
            toolStripSeparatorFixSyncSpell.Visible = gs.ShowToolbarFixCommonErrors || gs.ShowToolbarVisualSync || gs.ShowToolbarSpellCheck || gs.ShowToolbarSettings;
            toolStripSeparatorHelp.Visible = gs.ShowToolbarHelp;

            toolStrip1.Visible = gs.ShowToolbarNew || gs.ShowToolbarOpen || gs.ShowToolbarOpenVideo || gs.ShowToolbarSave || gs.ShowToolbarSaveAs || gs.ShowToolbarFind || gs.ShowToolbarReplace ||
                                 gs.ShowToolbarFixCommonErrors || gs.ShowToolbarVisualSync || gs.ShowToolbarSpellCheck || gs.ShowToolbarNetflixGlyphCheck ||
                                 gs.ShowToolbarBeautifyTimeCodes || gs.ShowToolbarSettings || gs.ShowToolbarHelp;

            UpdateToolbarButtonsToCurrentFormat(GetCurrentSubtitleFormat());
        }

        private void ToolStripButtonFileNewClick(object sender, EventArgs e)
        {
            _lastDoNotPrompt = -1;
            ReloadFromSourceView();
            FileNew();
            ShowHideTextBasedFeatures(GetCurrentSubtitleFormat());
        }

        private void ToolStripButtonFileOpenClick(object sender, EventArgs e)
        {
            Interlocked.Increment(ref _openSaveCounter);
            toolStripButtonFileOpen.Enabled = false;
            ReloadFromSourceView();
            OpenNewFile();
            toolStripButtonFileOpen.Enabled = true;
            Interlocked.Decrement(ref _openSaveCounter);
        }

        private void ToolStripButtonSaveClick(object sender, EventArgs e)
        {
            var useOnly0AForNewLine = ModifierKeys == (Keys.Control | Keys.Shift);
            SaveAll(useOnly0AForNewLine);
        }

        private void SaveAll(bool useOnly0AForNewLine = false)
        {
            if (_subtitle == null || _subtitle.Paragraphs.Count == 0)
            {
                ShowStatus(_language.CannotSaveEmptySubtitle);
                return;
            }

            ReloadFromSourceView();
            _disableShowStatus = true;
            _saveAsCalled = false;
            var result = SaveSubtitle(GetCurrentSubtitleFormat(), useOnly0AForNewLine);
            if (result != DialogResult.OK)
            {
                _disableShowStatus = false;
                return;
            }

            if (IsOriginalEditable && _subtitleOriginal.Paragraphs.Count > 0)
            {
                SaveOriginalToolStripMenuItemClick(null, null);
                _disableShowStatus = false;
                ShowStatus(string.Format(_language.SavedSubtitleX, Path.GetFileName(_fileName)) + " + " +
                           string.Format(_language.SavedOriginalSubtitleX, $"\"{_subtitleOriginalFileName}\""));
                return;
            }

            _disableShowStatus = false;
            ShowStatus(string.Format(_language.SavedSubtitleX, $"\"{_fileName}\""));

            if (Configuration.Settings.General.ShowNegativeDurationInfoOnSave)
            {
                var sb = new StringBuilder();
                for (var index = 0; index < _subtitle.Paragraphs.Count; index++)
                {
                    var p = _subtitle.Paragraphs[index];
                    if (p.DurationTotalMilliseconds < 0 && !p.StartTime.IsMaxTime && !p.EndTime.IsMaxTime)
                    {
                        if (sb.Length < 20)
                        {
                            if (sb.Length > 0)
                            {
                                sb.Append(", ");
                            }

                            sb.Append((index + 1).ToString(CultureInfo.InvariantCulture));
                        }
                        else
                        {
                            sb.Append("...");
                            break;
                        }
                    }
                }

                if (sb.Length > 0)
                {
                    using (var form = new DialogDoNotShowAgain(Title, string.Format(_language.SubtitleContainsNegativeDurationsX, sb.ToString())))
                    {
                        form.ShowDialog(this);
                        Configuration.Settings.General.ShowNegativeDurationInfoOnSave = !form.DoNoDisplayAgain;
                    }
                }
            }
        }

        private void ToolStripButtonSaveAsClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            FileSaveAs(true);
        }

        private void ToolStripButtonFindClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Find();
        }

        private void ToolStripButtonVisualSyncClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            ShowVisualSync(false);
        }

        private void ToolStripButtonBurnInClick(object sender, EventArgs e)
        {
            GenerateVideoWithHardcodedSubtitleToolStripMenuItemClick(null, null);
        }

        private void ToolStripButtonSettingsClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            ShowSettings();
        }

        private void TextBoxSourceClick(object sender, EventArgs e)
        {
            ShowSourceLineNumber();
        }

        private void TextBoxSourceKeyDown(object sender, KeyEventArgs e)
        {
            ShowSourceLineNumber();
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.A)
            {
                textBoxSource.SelectAll();
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                textBoxSource.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Control && e.KeyCode == Keys.I)
            {
                var start = textBoxSource.SelectionStart;
                string text;
                if (textBoxSource.SelectedText.StartsWith("<i>", StringComparison.OrdinalIgnoreCase))
                {
                    text = HtmlUtil.RemoveOpenCloseTags(textBoxSource.SelectedText, HtmlUtil.TagItalic);
                    textBoxSource.SelectedText = text;
                }
                else
                {
                    text = "<i>" + textBoxSource.SelectedText + "</i>";
                    textBoxSource.SelectedText = "<i>" + textBoxSource.SelectedText + "</i>";
                }

                e.SuppressKeyPress = true;
                textBoxSource.SelectionStart = start;
                textBoxSource.SelectionLength = text.Length;
            }
        }

        private void TextBoxSource_KeyUp(object sender, KeyEventArgs e)
        {
            ShowSourceLineNumber();
        }

        private void TextBoxSourceTextChanged(object sender, EventArgs e)
        {
            ShowSourceLineNumber();
            _sourceViewChange = true;
            labelStatus.Text = string.Empty;
            _sourceTextTicks = DateTime.UtcNow.Ticks;
        }

        private bool ShowProfileInStatusBar => Configuration.Settings.General.CurrentProfile != "Default";

        private void ShowSourceLineNumber()
        {
            if (InSourceView)
            {
                var profile = Configuration.Settings.General.CurrentProfile + "   ";
                if (!ShowProfileInStatusBar)
                {
                    profile = string.Empty;
                }

                toolStripSelected.Text = profile + string.Format(_language.LineNumberX, textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart) + 1);
            }
        }

        private void ButtonGetFrameRateClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _language.OpenVideoFile;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.GetVideoFileFilter(false);
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                _videoFileName = openFileDialog1.FileName;
                var info = UiUtil.GetVideoInfo(openFileDialog1.FileName);
                if (info != null && info.Success)
                {
                    string oldFrameRate = toolStripComboBoxFrameRate.Text;
                    toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", info.FramesPerSecond);

                    if (oldFrameRate != toolStripComboBoxFrameRate.Text)
                    {
                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    }
                }
            }
        }

        private void FindToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Find();
        }

        private void Find()
        {
            string selectedText;
            if (InSourceView)
            {
                selectedText = textBoxSource.SelectedText;
            }
            else
            {
                if (textBoxListViewTextOriginal.Focused)
                {
                    selectedText = textBoxListViewTextOriginal.SelectedText;
                }
                else
                {
                    selectedText = textBoxListViewText.SelectedText;
                }
            }

            if (selectedText.Length == 0 && _findHelper != null)
            {
                if (_clearLastFind)
                {
                    _clearLastFind = false;
                    _findHelper.FindReplaceType.FindType = _clearLastFindType;
                    selectedText = _clearLastFindText;
                }
                else
                {
                    selectedText = _findHelper.FindText;
                }
            }

            var left = 0;
            var top = 0;
            if (_findDialog != null)
            {
                left = _findDialog.Left;
                top = _findDialog.Top;
            }

            _findDialog?.Dispose();
            _findDialog = new FindDialog(_subtitle, this);
            _findDialog.SetIcon(toolStripButtonFind.Image as Bitmap);
            _findDialog.Initialize(selectedText, _findHelper);

            if (left <= 0 || top <= 0)
            {
                left = Left + Width / 2 - _findDialog.Width / 2;
                top = Top + Height / 2 - _findDialog.Height / 2;
            }

            _findDialog.Left = left;
            _findDialog.Top = top;

            _findDialog.Show(this);
        }

        public void FindDialogClose()
        {
            if (_findHelper != null)
            {
                _findHelper.InProgress = false;
                _findHelper.MatchInOriginal = false;
                _findHelper.SelectedPosition = -1;
            }

            Focus();
        }

        public void FindDialogFindPrevious(string findText)
        {
            _findHelper = _findHelper ?? _findDialog.GetFindDialogHelper(_subtitleListViewIndex);
            _findHelper.FindText = findText;
            _findHelper.FindTextLength = findText.Length;
            FindPrevious();
        }

        public void FindDialogFind(string findText, ReplaceType findReplaceType, Regex regex)
        {
            _findHelper = _findHelper ?? _findDialog.GetFindDialogHelper(_subtitleListViewIndex);
            _findHelper.FindText = findText;
            _findHelper.FindTextLength = findText.Length;
            _findHelper.FindReplaceType = findReplaceType;
            if (findReplaceType.FindType == FindType.RegEx)
            {
                _findHelper.SetRegex(regex);
            }

            DialogFind(_findHelper);
        }

        private void FindNextToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            FindNext();
        }

        private SETextBox GetFindReplaceTextBox()
        {
            return _findHelper.MatchInOriginal ? textBoxListViewTextOriginal : textBoxListViewText;
        }

        private void FindNext()
        {
            if (_findHelper != null)
            {
                _findHelper.InProgress = true;
                var tb = GetFindReplaceTextBox();
                if (InListView)
                {
                    int selectedIndex = -1;
                    if (SubtitleListview1.SelectedItems.Count > 0)
                    {
                        selectedIndex = SubtitleListview1.SelectedItems[0].Index;
                    }

                    int textBoxStart = tb.SelectionStart;
                    // Note: The logic in the following "else" clause is not valid for
                    // regex searches and may result in endlessly looping on the first
                    // found instance, but simply moving the start index up by 1. It is
                    // not uncommon for a regex to match string+0, string+1, string+2 ...
                    if (_findHelper.FindReplaceType.FindType == FindType.RegEx)
                    {
                        // Move beyond the first instance, not just 1 character beyond the start
                        // of the found instance,
                        textBoxStart += tb.SelectionLength;
                    }
                    else
                    {
                        if (_findHelper.SelectedPosition - 1 == tb.SelectionStart && tb.SelectionLength > 0 ||
                            _findHelper.FindText.Equals(tb.SelectedText, StringComparison.OrdinalIgnoreCase))
                        {
                            textBoxStart = tb.SelectionStart + 1;
                        }
                    }

                    if (_findHelper.FindNext(_subtitle, _subtitleOriginal, selectedIndex, textBoxStart, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                    {
                        tb = GetFindReplaceTextBox();

                        SelectListViewIndexAndEnsureVisible(_findHelper.SelectedLineIndex);
                        ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedLineIndex + 1));
                        tb.Focus();
                        tb.SelectionStart = _findHelper.SelectedPosition;
                        tb.SelectionLength = _findHelper.FindTextLength;
                        _findHelper.SelectedPosition++;
                    }
                    else
                    {
                        if (!(_subtitleListViewIndex == 0 && _findHelper.SelectedPosition <= 0))
                        {
                            if (MessageBox.Show(_language.FindContinue, _language.FindContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                            {
                                _findHelper.StartLineIndex = 0;
                                _findHelper.StartFindText = _findHelper.FindText;
                                if (_findHelper.Find(_subtitle, _subtitleOriginal, 0))
                                {
                                    SelectListViewIndexAndEnsureVisible(_findHelper.SelectedLineIndex);
                                    tb.Focus();
                                    tb.SelectionStart = _findHelper.SelectedPosition;
                                    tb.SelectionLength = _findHelper.FindTextLength;
                                    ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedLineIndex + 1));
                                    _findHelper.SelectedPosition++;
                                    return;
                                }
                            }
                        }

                        ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                    }
                }
                else if (InSourceView)
                {
                    if (_findHelper.FindNext(textBoxSource.Text, textBoxSource.SelectionStart))
                    {
                        textBoxSource.SelectionStart = _findHelper.SelectedLineIndex;
                        textBoxSource.SelectionLength = _findHelper.FindTextLength;
                        textBoxSource.ScrollToCaret();
                        ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart)));
                    }
                    else
                    {
                        ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                    }
                }
            }
            else
            {
                Find();
            }

            if (_findHelper != null)
            {
                _findHelper.InProgress = false;
            }
        }

        private void SelectListViewIndexAndEnsureVisible(int index)
        {
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private void SelectListViewIndexAndEnsureVisible(Paragraph p)
        {
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.SelectIndexAndEnsureVisible(p);
            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private void FindPrevious()
        {
            if (_findHelper == null)
            {
                return;
            }

            _findHelper.InProgress = true;
            var tb = GetFindReplaceTextBox();
            if (InListView)
            {
                int selectedIndex = -1;
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    selectedIndex = SubtitleListview1.SelectedItems[0].Index;
                }

                int textBoxStart = tb.SelectionStart;
                if (_findHelper.SelectedPosition - 1 == tb.SelectionStart && tb.SelectionLength > 0 ||
                    _findHelper.FindText.Equals(tb.SelectedText, StringComparison.OrdinalIgnoreCase))
                {
                    textBoxStart = tb.SelectionStart - 1;
                }

                if (_findHelper.FindPrevious(_subtitle, _subtitleOriginal, selectedIndex, textBoxStart, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                {
                    tb = GetFindReplaceTextBox();
                    SelectListViewIndexAndEnsureVisible(_findHelper.SelectedLineIndex);
                    ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedLineIndex + 1));
                    tb.Focus();
                    tb.SelectionStart = _findHelper.SelectedPosition;
                    tb.SelectionLength = _findHelper.FindTextLength;
                    _findHelper.SelectedPosition--;
                }
                else
                {
                    ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                }
            }
            else if (InSourceView)
            {
                if (_findHelper.FindPrevious(textBoxSource.Text, textBoxSource.SelectionStart))
                {
                    textBoxSource.SelectionStart = _findHelper.SelectedLineIndex;
                    textBoxSource.SelectionLength = _findHelper.FindTextLength;
                    textBoxSource.ScrollToCaret();
                    ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart)));
                }
                else
                {
                    ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                }
            }

            _findHelper.InProgress = false;
        }

        private void ToolStripButtonReplaceClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Replace();
        }

        private void ReplaceToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Replace();
        }

        private void ReplaceSourceViewStart()
        {
            string selectedText = textBoxSource.SelectedText;
            if (selectedText.Length == 0 && _findHelper != null)
            {
                selectedText = _findHelper.FindText;
            }

            if (_replaceDialog == null || _replaceDialog.IsDisposed)
            {
                _replaceDialog = new ReplaceDialog(this);
                _replaceDialog.SetIcon(toolStripButtonReplace.Image as Bitmap);
                _findHelper = _findHelper ?? _replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);

                _replaceDialog.Left = Left + Width / 2 - _replaceDialog.Width / 2;
                _replaceDialog.Top = Left + Height / 2 - _replaceDialog.Height / 2;
            }

            _replaceDialog.Initialize(selectedText, _findHelper, IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible);
            if (!_replaceDialog.Visible)
            {
                _replaceDialog.Show(this);
            }
        }

        public void ReplaceDialogFind(FindReplaceDialogHelper findReplaceDialogHelper)
        {
            _findHelper = findReplaceDialogHelper;

            if (_findHelper != null)
            {
                if (_findHelper.SelectedLineIndex != _subtitleListViewIndex)
                {
                    _findHelper.SelectedLineIndex = _subtitleListViewIndex;
                    _findHelper.SelectedPosition = -1;
                    _findHelper.MatchInOriginal = false;
                    _findHelper.ReplaceFromPosition = 0;
                }

                DialogFind(_findHelper);
                return;
            }

            DialogFind(_replaceDialog.GetFindDialogHelper(_subtitleListViewIndex));
        }

        public void DialogFind(FindReplaceDialogHelper findHelper)
        {
            _findHelper = findHelper;
            _findHelper.InProgress = true;
            if (!string.IsNullOrWhiteSpace(_findHelper.FindText))
            {
                if (Configuration.Settings.Tools.FindHistory.Count == 0 || Configuration.Settings.Tools.FindHistory[0] != _findHelper.FindText)
                {
                    Configuration.Settings.Tools.FindHistory.Insert(0, _findHelper.FindText);
                }
            }

            ShowStatus(string.Format(_language.SearchingForXFromLineY, _findHelper.FindText, _subtitleListViewIndex + 1));
            if (InListView)
            {
                var tb = GetFindReplaceTextBox();
                int startPos = tb.SelectedText.Length > 0 ? tb.SelectionStart + 1 : tb.SelectionStart;
                bool found = _findHelper.Find(_subtitle, _subtitleOriginal, _subtitleListViewIndex, startPos);
                // if we fail to find the text, we might want to start searching from the top of the file.
                if (!found && !(_subtitleListViewIndex == 0 && _findHelper.SelectedPosition <= 0))
                {
                    if (MessageBox.Show(_language.FindContinue, _language.FindContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                    {
                        _findHelper.StartLineIndex = 0;
                        _findHelper.StartFindText = _findHelper.FindText;
                        _findHelper.SelectedLineIndex = 0;
                        _findHelper.MatchInOriginal = false;
                        _findHelper.SelectedPosition = -1;
                        textBoxListViewText.SelectionStart = 0;
                        textBoxListViewText.SelectionLength = 0;
                        textBoxListViewTextOriginal.SelectionStart = 0;
                        textBoxListViewTextOriginal.SelectionLength = 0;
                        found = _findHelper.Find(_subtitle, _subtitleOriginal, -1);
                    }
                }

                if (found)
                {
                    SelectListViewIndexAndEnsureVisible(_findHelper.SelectedLineIndex);
                    textBoxListViewText.SelectionStart = 0;
                    textBoxListViewText.SelectionLength = 0;
                    textBoxListViewTextOriginal.SelectionStart = 0;
                    textBoxListViewTextOriginal.SelectionLength = 0;
                    tb = GetFindReplaceTextBox();
                    tb.SelectionLength = 0;
                    tb.Focus();
                    tb.SelectionStart = _findHelper.SelectedPosition;
                    tb.SelectionLength = _findHelper.FindTextLength;
                    ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedLineIndex + 1));
                    _findHelper.SelectedPosition++;
                }
                else
                {
                    ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                }
            }
            else if (InSourceView)
            {
                if (_findHelper.Find(textBoxSource, textBoxSource.SelectionStart))
                {
                    textBoxSource.SelectionStart = _findHelper.SelectedLineIndex;
                    textBoxSource.SelectionLength = _findHelper.FindTextLength;
                    textBoxSource.ScrollToCaret();
                    ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart)));
                }
                else
                {
                    ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                }
            }
        }

        public void ReplaceDialogReplace(FindReplaceDialogHelper findReplaceDialogHelper)
        {
            if (InListView)
            {
                ReplaceDialogReplaceListView();
            }
            else
            {
                ReplaceDialogReplaceSourceView();
            }
        }

        public void ReplaceDialogReplaceListView()
        {
            _findHelper.InProgress = true;
            var line = _findHelper.SelectedLineIndex;
            var pos = _findHelper.ReplaceFromPosition;
            var success = _findHelper.Success;
            var matchInOriginal = _findHelper.MatchInOriginal;
            _findHelper = _replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
            _findHelper.SelectedLineIndex = line;
            _findHelper.SelectedPosition = pos;
            _findHelper.Success = success;
            _findHelper.MatchInOriginal = matchInOriginal;
            _findHelper.InProgress = true;

            ShowStatus(string.Format(_language.SearchingForXFromLineY, _findHelper.FindText, _subtitleListViewIndex + 1));
            var tb = GetFindReplaceTextBox();
            string msg = string.Empty;
            if (_findHelper.FindReplaceType.FindType == FindType.RegEx)
            {
                if (_findHelper.Success)
                {
                    if (_findHelper.FindReplaceType.FindType == FindType.RegEx)
                    {
                        ReplaceViaRegularExpression(tb, _replaceDialog.ReplaceAll);
                    }
                    else
                    {
                        tb.SelectedText = _findHelper.ReplaceText;
                    }

                    msg = _language.OneReplacementMade + " ";
                }
            }
            else if (tb.SelectionLength == _findHelper.FindTextLength)
            {
                tb.SelectedText = _findHelper.ReplaceText;
                msg = _language.OneReplacementMade + " ";
                _findHelper.SelectedPosition += _findHelper.ReplaceText.Length;
            }

            if (_findHelper.FindNext(_subtitle, _subtitleOriginal, _findHelper.SelectedLineIndex, _findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
            {
                SelectListViewIndexAndEnsureVisible(_findHelper.SelectedLineIndex);
                textBoxListViewText.SelectionStart = 0;
                textBoxListViewText.SelectionLength = 0;
                textBoxListViewTextOriginal.SelectionStart = 0;
                textBoxListViewTextOriginal.SelectionLength = 0;
                tb = GetFindReplaceTextBox();
                tb.Focus();
                tb.SelectionStart = _findHelper.SelectedPosition;
                tb.SelectionLength = _findHelper.FindTextLength;
                if (_findHelper.FindReplaceType.FindType != FindType.RegEx)
                {
                    _findHelper.SelectedPosition += _findHelper.ReplaceText.Length;
                }

                ShowStatus(string.Format(msg + _language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedLineIndex + 1));
            }
            else
            {
                ShowStatus(msg + string.Format(_language.XNotFound, _findHelper.FindText));

                // Prompt for start over
                if (!(_subtitleListViewIndex == 0 && _findHelper.SelectedPosition <= 0))
                {
                    if (MessageBox.Show(_language.FindContinue, _language.FindContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                    {
                        SelectListViewIndexAndEnsureVisible(0);
                        _findHelper.StartLineIndex = 0;
                        _findHelper.StartFindText = _findHelper.FindText;
                        _findHelper.SelectedLineIndex = 0;
                        _findHelper.SelectedPosition = 0;
                        _findHelper.ReplaceFromPosition = 0;
                        if (_findHelper.FindNext(_subtitle, _subtitleOriginal, _findHelper.SelectedLineIndex, _findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                        {
                            SelectListViewIndexAndEnsureVisible(_findHelper.SelectedLineIndex);
                            tb = GetFindReplaceTextBox();
                            tb.Focus();
                            tb.SelectionStart = _findHelper.SelectedPosition;
                            tb.SelectionLength = _findHelper.FindTextLength;
                            _findHelper.SelectedPosition += _findHelper.ReplaceText.Length;
                            ShowStatus(string.Format(msg + _language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedLineIndex + 1));
                        }
                    }
                }
            }

            _findHelper.InProgress = false;
        }

        public void ReplaceDialogReplaceSourceView()
        {
            _findHelper = _replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
            ShowStatus(string.Format(_language.SearchingForXFromLineY, _findHelper.FindText, _subtitleListViewIndex + 1));

            int replaceCount = 0;
            var searchStringFound = false;
            int start = textBoxSource.SelectionStart;

            MakeHistoryForUndo(string.Format(_language.BeforeReplace, _findHelper.FindText));
            _makeHistoryPaused = true;
            if (start >= 0)
            {
                start--;
            }

            if (_findHelper.FindNext(textBoxSource.Text, start))
            {
                textBoxSource.SelectionStart = _findHelper.SelectedLineIndex;
                textBoxSource.SelectionLength = _findHelper.FindTextLength;
                if (!_replaceDialog.FindOnly)
                {
                    textBoxSource.SelectedText = _findHelper.ReplaceText;
                }

                textBoxSource.ScrollToCaret();

                replaceCount++;
                searchStringFound = true;

                if (!_replaceDialog.FindOnly)
                {
                    if (_findHelper.FindNext(textBoxSource.Text, start))
                    {
                        textBoxSource.SelectionStart = _findHelper.SelectedLineIndex;
                        textBoxSource.SelectionLength = _findHelper.FindTextLength;
                        textBoxSource.ScrollToCaret();
                    }

                    Replace();
                    return;
                }
            }

            if (_replaceDialog.FindOnly)
            {
                if (searchStringFound)
                {
                    ShowStatus(string.Format(_language.MatchFoundX, _findHelper.FindText));
                }
                else
                {
                    ShowStatus(string.Format(_language.NoMatchFoundX, _findHelper.FindText));
                }

                Replace();
                return;
            }

            ReloadFromSourceView();
            if (replaceCount == 0)
            {
                ShowStatus(_language.FoundNothingToReplace);
            }
            else
            {
                ShowStatus(string.Format(_language.ReplaceCountX, replaceCount));
            }
        }

        public void ReplaceDialogReplaceAll(FindReplaceDialogHelper findReplaceDialogHelper)
        {
            _findHelper = _replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
            ShowStatus(string.Format(_language.SearchingForXFromLineY, _findHelper.FindText, _subtitleListViewIndex + 1));

            if (InListView)
            {
                ListViewReplaceAll(_replaceDialog);
            }
            else
            {
                SourceListReplaceAll(_replaceDialog, _findHelper);
            }
        }

        public void ReplaceDialogClose()
        {
            if (_makeHistoryPaused)
            {
                RestartHistory();
            }

            if (_findHelper != null)
            {
                _findHelper.InProgress = false;
                _findHelper.MatchInOriginal = false;
                _findHelper.SelectedPosition = -1;
            }

            Focus();
        }

        public bool GetAllowReplaceInOriginal()
        {
            return IsOriginalEditable;
        }

        public void ListViewReplaceAll(ReplaceDialog replaceDialog)
        {
            if (_findHelper == null)
            {
                _findHelper = replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
                _findHelper.InProgress = true;
            }
            else
            {
                var line = _findHelper.SelectedLineIndex;
                var pos = _findHelper.ReplaceFromPosition;
                var success = _findHelper.Success;
                var matchInOriginal = _findHelper.MatchInOriginal;
                _findHelper = replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
                _findHelper.SelectedLineIndex = line;
                _findHelper.SelectedPosition = pos;
                _findHelper.Success = success;
                _findHelper.MatchInOriginal = matchInOriginal;
                _findHelper.InProgress = true;
            }

            var isFirst = true;
            var replaceCount = 0;
            var searchStringFound = true;
            var stopAtIndex = int.MaxValue;
            var firstIndex = FirstSelectedIndex;
            var searchedFromTop = firstIndex == 0 && _findHelper.ReplaceFromPosition == 0;
            while (searchStringFound)
            {
                searchStringFound = false;
                if (isFirst)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeReplace, _findHelper.FindText));
                    isFirst = false;
                    _makeHistoryPaused = true;
                }

                if (replaceDialog.ReplaceAll)
                {
                    replaceCount = ReplaceAllHelper.ReplaceAll(_findHelper, _subtitle, _subtitleOriginal, Configuration.Settings.General.AllowEditOfOriginalSubtitle, stopAtIndex);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();

                    string msgText = _language.ReplaceContinueNotFound;
                    if (replaceCount > 0)
                    {
                        msgText = string.Format(_language.ReplaceXContinue, replaceCount);
                    }

                    if (!searchedFromTop && MessageBox.Show(msgText, _language.ReplaceContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                    {
                        stopAtIndex = firstIndex;
                        _findHelper.StartLineIndex = 0;
                        _findHelper.StartFindText = _findHelper.FindText;
                        _findHelper.SelectedLineIndex = 0;
                        _findHelper.MatchInOriginal = false;
                        _findHelper.SelectedPosition = -1;
                        textBoxListViewText.SelectionStart = 0;
                        textBoxListViewText.SelectionLength = 0;
                        textBoxListViewTextOriginal.SelectionStart = 0;
                        textBoxListViewTextOriginal.SelectionLength = 0;
                        replaceCount = ReplaceAllHelper.ReplaceAll(_findHelper, _subtitle, _subtitleOriginal, Configuration.Settings.General.AllowEditOfOriginalSubtitle, stopAtIndex);
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    }
                }

                UpdateSourceView();
                if (replaceCount == 0)
                {
                    ShowStatus(_language.FoundNothingToReplace);
                }
                else
                {
                    ShowStatus(string.Format(_language.ReplaceCountX, replaceCount));
                    SubtitleListview1.SyntaxColorAllLines(_subtitle);
                }
            }

            RestoreSubtitleListviewIndices();
            if (_makeHistoryPaused)
            {
                RestartHistory();
            }

            _findHelper.InProgress = false;
        }

        private void SourceListReplaceAll(ReplaceDialog replaceDialog, FindReplaceDialogHelper findHelper)
        {
            _makeHistoryPaused = true;

            if (_findHelper.FindReplaceType.FindType == FindType.RegEx)
            {
                SourceListReplaceAllRegEx(replaceDialog);
                return;
            }

            var replaceCount = 0;
            var searchStringFound = true;
            var start = textBoxSource.SelectionStart;
            var originalSelectionStart = textBoxSource.SelectionStart;
            var isFirst = true;
            var text = textBoxSource.Text;
            while (searchStringFound)
            {
                searchStringFound = false;
                if (isFirst)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeReplace, _findHelper.FindText));
                    isFirst = false;
                    _makeHistoryPaused = true;
                    if (start >= 0)
                    {
                        start--;
                    }
                }
                else
                {
                    start--;
                }

                if (_findHelper.FindNext(text, start))
                {
                    text = text.Remove(findHelper.SelectedLineIndex, findHelper.FindTextLength).Insert(findHelper.SelectedLineIndex, findHelper.ReplaceText);
                    start = findHelper.SelectedLineIndex + findHelper.FindTextLength;
                    replaceCount++;
                    searchStringFound = true;
                }
            }

            textBoxSource.Text = text;
            ReloadFromSourceView();

            if (originalSelectionStart < text.Length)
            {
                textBoxSource.SelectionStart = originalSelectionStart;
            }
            textBoxSource.SelectionLength = 0;

            if (replaceCount == 0)
            {
                ShowStatus(_language.FoundNothingToReplace);
            }
            else
            {
                ShowStatus(string.Format(_language.ReplaceCountX, replaceCount));
            }

            if (_makeHistoryPaused)
            {
                RestartHistory();
            }

            replaceDialog.Dispose();
        }

        private void SourceListReplaceAllRegEx(ReplaceDialog replaceDialog)
        {
            var start = textBoxSource.SelectionStart;
            var s = textBoxSource.Text;
            var r = new Regex(_findHelper.FindText, RegexOptions.Multiline);
            var matches = r.Matches(s, start);

            if (matches.Count > 0)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeReplace, _findHelper.FindText));
            }

            var result = RegexUtils.ReplaceNewLineSafe(r, s, _findHelper.ReplaceText, int.MaxValue, start);

            // update UI
            textBoxSource.Text = result;
            ShowStatus(matches.Count == 0 ? _language.FoundNothingToReplace : string.Format(_language.ReplaceCountX, matches.Count));

            // replace again from beginning
            if (start > 1)
            {
                string msgText = _language.ReplaceContinueNotFound;
                if (matches.Count > 0)
                {
                    msgText = string.Format(_language.ReplaceXContinue, matches.Count);
                }

                if (MessageBox.Show(msgText, _language.ReplaceContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                {
                    s = result.Substring(0, start - 1);
                    var rest = result.Remove(0, start - 1);
                    if (s.EndsWith('\r') && rest.StartsWith('\n'))
                    { // don't split "\r\n"
                        s = s.Substring(0, s.Length - 1);
                        rest = '\r' + rest;
                    }

                    matches = r.Matches(s);
                    result = RegexUtils.ReplaceNewLineSafe(r, s, _findHelper.ReplaceText);

                    // update UI
                    textBoxSource.Text = result + rest;
                    ShowStatus(matches.Count == 0 ? _language.FoundNothingToReplace : string.Format(_language.ReplaceCountX, matches.Count));
                }
            }

            replaceDialog.Dispose();
            ReloadFromSourceView();
        }

        private void ReplaceListViewStart()
        {
            SaveSubtitleListviewIndices();
            string selectedText;
            if (textBoxListViewTextOriginal.Focused)
            {
                selectedText = textBoxListViewTextOriginal.SelectedText;
            }
            else
            {
                selectedText = textBoxListViewText.SelectedText;
            }

            if (selectedText.Length == 0 && _findHelper != null)
            {
                selectedText = _findHelper.FindText;
            }

            if (_replaceDialog == null || _replaceDialog.IsDisposed || _findHelper == null || !_replaceDialog.Visible)
            {
                _replaceDialog?.Dispose();
                _replaceDialog = new ReplaceDialog(this);
                _replaceDialog.Left = Left + Width / 2 - _replaceDialog.Width / 2;
                _replaceDialog.Top = Left + Height / 2 - _replaceDialog.Height / 2;
                _replaceDialog.SetIcon(toolStripButtonReplace.Image as Bitmap);
                _findHelper = _findHelper ?? _replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
                _findHelper.InProgress = true;
                int index = 0;

                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    index = SubtitleListview1.SelectedItems[0].Index;
                }

                _findHelper.SelectedLineIndex = index;
                if (textBoxListViewTextOriginal.Focused)
                {
                    _findHelper.SelectedPosition = textBoxListViewTextOriginal.SelectionStart;
                    _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                }
                else
                {
                    _findHelper.SelectedPosition = textBoxListViewText.SelectionStart;
                    _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                }
            }
            else
            {
                if (_findHelper != null)
                {
                    selectedText = _findHelper.FindText;
                    _findHelper.InProgress = true;
                }
            }

            _replaceDialog.Initialize(selectedText, _findHelper, IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible);
            if (!_replaceDialog.Visible)
            {
                _replaceDialog.Show(this);
            }

            _replaceDialog.Activate();
            _replaceDialog.Focus();
            var scr = Screen.FromControl(this);
            var x = _replaceDialog.Left + _replaceDialog.Width / 2;
            var y = _replaceDialog.Top + _replaceDialog.Height / 2;
            if (x < 0 || x > scr.Bounds.Right || y < 0 || y > scr.Bounds.Bottom)
            {
                _replaceDialog.Left = scr.Bounds.Left + scr.Bounds.Width / 2 - _replaceDialog.Width / 2;
                _replaceDialog.Top = scr.Bounds.Top + scr.Bounds.Height / 2 - _replaceDialog.Height / 2;
            }
        }

        private void ReplaceViaRegularExpression(SETextBox tb, bool replaceAll)
        {
            var r = new Regex(RegexUtils.FixNewLine(_findHelper.FindText), RegexOptions.Multiline);
            if (replaceAll)
            {
                string result = RegexUtils.ReplaceNewLineSafe(r, tb.Text, _findHelper.ReplaceText);
                if (result != tb.Text)
                {
                    tb.Text = result;
                }

                _findHelper.SelectedPosition = tb.Text.Length;
                _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
            }
            else
            {
                string result = RegexUtils.ReplaceNewLineSafe(r, tb.Text, _findHelper.ReplaceText, 1, _findHelper.SelectedPosition);
                if (result != tb.Text)
                {
                    var match = r.Match(string.Join(Environment.NewLine, tb.Text.SplitToLines()));
                    if (match != null && match.Success && !_findHelper.FindText.StartsWith('^') && _findHelper.ReplaceText.Length > 0)
                    {
                        var add = Math.Abs(match.Length - _findHelper.ReplaceText.Length);
                        _findHelper.SelectedPosition += add;
                        _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                    }

                    tb.Text = result;
                }

                if (_findHelper.FindText.StartsWith('^'))
                {
                    _findHelper.SelectedPosition++;
                }
            }
        }

        private void Replace()
        {
            if (InSourceView)
            {
                ReplaceSourceViewStart();
            }
            else
            {
                ReplaceListViewStart();
            }
        }

        public void ShowStatus(string message, bool log = true, int clearAfterSeconds = 0, bool isError = false)
        {
            if (_disableShowStatus)
            {
                return;
            }

            _timerClearStatus.Stop();
            labelStatus.Text = message.Replace("&", "&&");
            statusStrip1.Refresh();
            if (!string.IsNullOrEmpty(message))
            {
                labelStatus.ForeColor = isError ? Color.Red : UiUtil.ForeColor;
                if (log)
                {
                    _timerClearStatus.Interval = clearAfterSeconds > 0 ? clearAfterSeconds : (Configuration.Settings.General.ClearStatusBarAfterSeconds * 1000);
                    _statusLog.Add(string.Format("{0:0000}-{1:00}-{2:00} {3}: {4}", DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.ToLongTimeString(), message));
                }
                else
                {
                    _timerClearStatus.Interval = clearAfterSeconds > 0 ? (clearAfterSeconds * 1000) : 1500;
                }

                _timerClearStatus.Start();
            }
            else
            {
                _timerClearStatus.Stop();
            }

            ShowSourceLineNumber();
            ShowLineInformationListView();
        }

        private void ReloadFromSourceView()
        {
            if (_sourceViewChange)
            {
                SaveSubtitleListviewIndices();
                if (!string.IsNullOrWhiteSpace(textBoxSource.Text))
                {
                    var oldSubtitle = new Subtitle(_subtitle);
                    var format = GetCurrentSubtitleFormat();
                    var list = textBoxSource.Lines.ToList();
                    format = new Subtitle().ReloadLoadSubtitle(list, null, format);
                    if (format == null && !string.IsNullOrWhiteSpace(textBoxSource.Text))
                    {
                        MessageBox.Show(_language.UnableToParseSourceView);
                        return;
                    }

                    _sourceViewChange = false;
                    MakeHistoryForUndo(_language.BeforeChangesMadeInSourceView);
                    _subtitle.ReloadLoadSubtitle(list, null, format);

                    int index = 0;
                    foreach (string formatName in comboBoxSubtitleFormats.Items)
                    {
                        if (formatName == format.FriendlyName)
                        {
                            comboBoxSubtitleFormats.SelectedIndex = index;
                            break;
                        }

                        index++;
                    }

                    for (var i = 0; i < oldSubtitle.Paragraphs.Count; i++)
                    {
                        if (oldSubtitle.Paragraphs[i].Bookmark != null)
                        {
                            var newParagraph = _subtitle.GetFirstAlike(oldSubtitle.Paragraphs[i]);
                            if (newParagraph != null)
                            {
                                newParagraph.Bookmark = oldSubtitle.Paragraphs[i].Bookmark;
                            }
                        }
                    }

                    if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
                    {
                        _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                    }

                    var formatType = format.GetType();
                    if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
                    {
                        string errors = AdvancedSubStationAlpha.CheckForErrors(_subtitle.Header);
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(SubRip))
                    {
                        string errors = (format as SubRip).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(MicroDvd))
                    {
                        string errors = (format as MicroDvd).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(DCinemaSmpte2007))
                    {
                        format.ToText(_subtitle, string.Empty);
                        string errors = (format as DCinemaSmpte2007).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(DCinemaSmpte2010))
                    {
                        format.ToText(_subtitle, string.Empty);
                        string errors = (format as DCinemaSmpte2010).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(DCinemaSmpte2014))
                    {
                        format.ToText(_subtitle, string.Empty);
                        string errors = (format as DCinemaSmpte2014).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                }
                else
                {
                    _sourceViewChange = false;
                    MakeHistoryForUndo(_language.BeforeChangesMadeInSourceView);
                    _sourceViewChange = false;
                    _subtitle.Paragraphs.Clear();
                    EnableOrDisableEditControls();
                }

                _subtitleListViewIndex = -1;
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                RestoreSubtitleListviewIndices();
            }
        }

        private void ReloadFromSourceInSourceView()
        {
            if (!_sourceViewChange)
            {
                return;
            }

            var oldSubtitle = new Subtitle(_subtitle);

            if (string.IsNullOrWhiteSpace(textBoxSource.Text))
            {
                _sourceViewChange = false;
                MakeHistoryForUndo(_language.BeforeChangesMadeInSourceView);
                _subtitle.Paragraphs.Clear();
                SubtitleListview1.Items.Clear();
                EnableOrDisableEditControls();
                return;
            }

            SaveSubtitleListviewIndices();
            var format = GetCurrentSubtitleFormat();
            var list = textBoxSource.Lines.ToList();
            format = new Subtitle().ReloadLoadSubtitle(list, null, format);
            if (format == null)
            {
                return;
            }

            _sourceViewChange = false;
            MakeHistoryForUndo(_language.BeforeChangesMadeInSourceView);
            _subtitle.ReloadLoadSubtitle(list, null, format);

            if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
            {
                _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
            }

            for (var i = 0; i < oldSubtitle.Paragraphs.Count; i++)
            {
                if (oldSubtitle.Paragraphs[i].Bookmark != null)
                {
                    var newParagraph = _subtitle.GetFirstAlike(oldSubtitle.Paragraphs[i]);
                    if (newParagraph != null)
                    {
                        newParagraph.Bookmark = oldSubtitle.Paragraphs[i].Bookmark;
                    }
                }
            }

            _subtitleListViewIndex = -1;
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            RestoreSubtitleListviewIndices();
        }

        private void HelpToolStripMenuItem1Click(object sender, EventArgs e)
        {
            if (_intellisenceList != null && _intellisenceList.Focused)
            {
                if (_intellisenceList.Items[_intellisenceList.SelectedIndex] is AssaTagHelper.IntellisenseItem item && !string.IsNullOrEmpty(item.HelpLink))
                {
                    UiUtil.OpenUrl(item.HelpLink);
                }

                return;
            }

            if (_intellisenceListOriginal != null && _intellisenceListOriginal.Focused)
            {
                if (_intellisenceListOriginal.Items[_intellisenceListOriginal.SelectedIndex] is AssaTagHelper.IntellisenseItem item && !string.IsNullOrEmpty(item.HelpLink))
                {
                    UiUtil.OpenUrl(item.HelpLink);
                }

                return;
            }

            ReloadFromSourceView();
            UiUtil.ShowHelp(string.Empty);
        }

        private void ToolStripButtonHelpClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            UiUtil.ShowHelp(string.Empty);
        }

        private void GotoLineNumberToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var goToLine = new GoToLine())
            {
                if (InListView)
                {
                    goToLine.Initialize(1, SubtitleListview1.Items.Count);
                }
                else if (InSourceView)
                {
                    goToLine.Initialize(1, textBoxSource.Lines.Length);
                }

                if (goToLine.ShowDialog(this) == DialogResult.OK)
                {
                    if (InListView)
                    {
                        SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                        SubtitleListview1.SelectNone();
                        SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;

                        SubtitleListview1.Items[goToLine.LineNumber - 1].Selected = true;
                        SubtitleListview1.Items[goToLine.LineNumber - 1].EnsureVisible();
                        SubtitleListview1.Items[goToLine.LineNumber - 1].Focused = true;
                        ShowStatus(string.Format(_language.GoToLineNumberX, goToLine.LineNumber));
                    }
                    else if (InSourceView)
                    {
                        textBoxSource.SelectionStart = textBoxSource.GetFirstCharIndexFromLine(goToLine.LineNumber - 1);
                        textBoxSource.SelectionLength = textBoxSource.Lines[goToLine.LineNumber - 1].Length;
                        textBoxSource.ScrollToCaret();
                        ShowSourceLineNumber();
                    }
                }
            }
        }

        private void TextBoxSourceLeave(object sender, EventArgs e)
        {
            ReloadFromSourceView();
        }

        private void AdjustDisplayTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            AdjustDisplayTime(false);
        }

        private void RecalcCurrentDuration(bool onlyOptimal = false)
        {
            if (SubtitleListview1.SelectedItems.Count >= 1)
            {
                MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);
                _makeHistoryPaused = true;
                var idx = SubtitleListview1.SelectedItems[0].Index;
                _subtitle.RecalculateDisplayTime(Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds, idx, Configuration.Settings.General.SubtitleOptimalCharactersPerSeconds, onlyOptimal: onlyOptimal);
                SetDurationInSeconds(_subtitle.Paragraphs[idx].DurationTotalSeconds);
                _makeHistoryPaused = false;
            }
        }

        private void RecalcCurrentDurationMin()
        {
            if (SubtitleListview1.SelectedItems.Count >= 1)
            {
                MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);
                _makeHistoryPaused = true;
                var idx = SubtitleListview1.SelectedItems[0].Index;
                _subtitle.RecalculateDisplayTime(Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds, idx, Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds);
                SetDurationInSeconds(_subtitle.Paragraphs[idx].DurationTotalSeconds);
                _makeHistoryPaused = false;
            }
        }

        private void AdjustDisplayTime(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var adjustDisplayTime = new AdjustDisplayDuration())
            {
                List<int> selectedIndices = null;
                if (onlySelectedLines)
                {
                    adjustDisplayTime.Text += " - " + _language.SelectedLines;
                    selectedIndices = new List<int>();
                    foreach (int item in SubtitleListview1.SelectedIndices)
                    {
                        selectedIndices.Add(item);
                    }
                }

                if (adjustDisplayTime.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);
                    List<double> shotChanges = adjustDisplayTime.CheckShotChanges ? audioVisualizer.ShotChanges : new List<double>();

                    if (adjustDisplayTime.AdjustUsingPercent)
                    {
                        double percent = double.Parse(adjustDisplayTime.AdjustValue);
                        _subtitle.AdjustDisplayTimeUsingPercent(percent, selectedIndices, shotChanges, adjustDisplayTime.EnforceDurationLimits);
                        ShowStatus(string.Format(_language.DisplayTimesAdjustedX, double.Parse(adjustDisplayTime.AdjustValue, CultureInfo.InvariantCulture) + "%"));
                    }
                    else if (adjustDisplayTime.AdjustUsingSeconds)
                    {
                        double seconds = double.Parse(adjustDisplayTime.AdjustValue, CultureInfo.InvariantCulture);
                        _subtitle.AdjustDisplayTimeUsingSeconds(seconds, selectedIndices, shotChanges, adjustDisplayTime.EnforceDurationLimits);
                        ShowStatus(string.Format(_language.DisplayTimesAdjustedX, double.Parse(adjustDisplayTime.AdjustValue, CultureInfo.InvariantCulture)));
                    }
                    else if (adjustDisplayTime.AdjustUsingRecalc)
                    {
                        double maxCharSeconds = (double)(adjustDisplayTime.MaxCharactersPerSecond);
                        _subtitle.RecalculateDisplayTimes(maxCharSeconds, selectedIndices, (double)adjustDisplayTime.OptimalCharactersPerSecond, adjustDisplayTime.ExtendOnly, shotChanges, adjustDisplayTime.EnforceDurationLimits);
                        ShowStatus(string.Format(_language.DisplayTimesAdjustedX, adjustDisplayTime.AdjustValue));
                    }
                    else
                    { // fixed duration
                        _subtitle.SetFixedDuration(selectedIndices, adjustDisplayTime.FixedMilliseconds, shotChanges);
                        ShowStatus(string.Format(_language.DisplayTimesAdjustedX, adjustDisplayTime.FixedMilliseconds));
                    }

                    SaveSubtitleListviewIndices();
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void FixToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_networkSession == null)
            {
                FixCommonErrors(false);
            }
        }

        private void FixCommonErrors(bool onlySelectedLines)
        {
            if (IsSubtitleLoaded)
            {
                ReloadFromSourceView();
                SaveSubtitleListviewIndices();
                using (var fixErrors = new FixCommonErrors())
                {
                    if (onlySelectedLines)
                    {
                        var selectedLines = new Subtitle();
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                        }

                        fixErrors.Initialize(selectedLines, GetCurrentSubtitleFormat(), GetCurrentEncoding());
                    }
                    else
                    {
                        fixErrors.Initialize(_subtitle, GetCurrentSubtitleFormat(), GetCurrentEncoding());
                    }

                    // save original paragraphs
                    var oldSub = new Subtitle(_subtitle, false);
                    var listOldList = new Dictionary<string, Paragraph>();
                    if (_subtitleOriginal != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsOriginalTextColumnVisible)
                    {
                        var i = 0;
                        foreach (var x in _subtitle.Paragraphs)
                        {
                            var original = Utilities.GetOriginalParagraph(i, x, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                listOldList.Add(x.Id, original);
                            }

                            i++;
                        }
                    }

                    if (fixErrors.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeCommonErrorFixes);
                        _subtitle.Renumber();
                        if (onlySelectedLines)
                        {
                            // we only update selected lines
                            if (_networkSession != null)
                            {
                                var deletes = new List<int>();
                                _networkSession.TimerStop();
                                foreach (int index in SubtitleListview1.SelectedIndices)
                                {
                                    var pOld = _subtitle.Paragraphs[index];
                                    var p = fixErrors.FixedSubtitle.GetParagraphOrDefaultById(pOld.Id);
                                    if (p == null)
                                    {
                                        deletes.Add(index);
                                    }
                                    else
                                    {
                                        _subtitle.Paragraphs[index] = p;
                                        SubtitleListview1.SetTimeAndText(index, p, _subtitle.GetParagraphOrDefault(index + 1));
                                    }
                                }

                                NetworkGetSendUpdates(deletes, 0, null);
                            }
                            else
                            {
                                var selectedIndices = SubtitleListview1.GetSelectedIndices();
                                for (int index = selectedIndices.Length - 1; index >= 0; index--)
                                {
                                    var idx = selectedIndices[index];
                                    var pOld = _subtitle.Paragraphs[idx];
                                    var p = fixErrors.FixedSubtitle.GetParagraphOrDefaultById(pOld.Id);
                                    if (p == null)
                                    {
                                        _subtitle.Paragraphs.RemoveAt(idx);
                                    }
                                    else
                                    {
                                        _subtitle.Paragraphs[idx] = p;
                                    }
                                }
                            }

                            ShowStatus(_language.CommonErrorsFixedInSelectedLines);
                        }
                        else
                        {
                            _subtitle.Paragraphs.Clear();
                            foreach (var p in fixErrors.FixedSubtitle.Paragraphs)
                            {
                                _subtitle.Paragraphs.Add(p);
                            }

                            ShowStatus(_language.CommonErrorsFixed);
                        }

                        // make time codes changes in original
                        if (listOldList.Count > 0)
                        {
                            foreach (var x in fixErrors.FixedSubtitle.Paragraphs)
                            {
                                var oldP = oldSub.Paragraphs.FirstOrDefault(p => p.Id == x.Id);
                                if (oldP != null && listOldList.TryGetValue(x.Id, out var orgP))
                                {
                                    if (oldP.StartTime.TotalMilliseconds != x.StartTime.TotalMilliseconds ||
                                        oldP.EndTime.TotalMilliseconds != x.EndTime.TotalMilliseconds)
                                    {
                                        orgP.StartTime.TotalMilliseconds = x.StartTime.TotalMilliseconds;
                                        orgP.EndTime.TotalMilliseconds = x.EndTime.TotalMilliseconds;
                                    }
                                }
                            }
                        }

                        _subtitle.Renumber();
                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        RestoreSubtitleListviewIndices();
                    }

                    Configuration.Settings.CommonErrors.StartSize = fixErrors.Width + ";" + fixErrors.Height;
                    Configuration.Settings.CommonErrors.StartPosition = fixErrors.Left + ";" + fixErrors.Top;
                }
            }
            else
            {
                DisplaySubtitleNotLoadedMessage();
            }

            ShowInTaskbar = true;
        }

        private void StartNumberingFromToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var startNumberingFrom = new StartNumberingFrom())
            {
                if (startNumberingFrom.ShowDialog(this) == DialogResult.OK)
                {
                    SaveSubtitleListviewIndices();
                    MakeHistoryForUndo(_language.BeforeRenumbering);
                    ShowStatus(string.Format(_language.RenumberedStartingFromX, startNumberingFrom.StartFromNumber));
                    _subtitle.Renumber(startNumberingFrom.StartFromNumber);
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        internal void ReloadFromSubtitle(Subtitle subtitle, string messageForUndo)
        {
            MakeHistoryForUndo(messageForUndo);
            var firstSelected = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
            _subtitle.Paragraphs.Clear();
            _subtitle.Paragraphs.AddRange(subtitle.Paragraphs);
            UpdateSourceView();
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            _subtitleListViewIndex = -1;
            if (firstSelected != null)
            {
                var newSelected = _subtitle.GetNearestAlike(firstSelected);
                if (newSelected != null)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(newSelected), true);
                    return;
                }
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
        }

        private void RemoveTextForHearImpairedToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var removeTextFromHearImpaired = new FormRemoveTextForHearImpaired(this, _subtitle))
            {
                removeTextFromHearImpaired.Initialize(_subtitle);
                if (removeTextFromHearImpaired.ShowDialog(this) == DialogResult.OK)
                {
                    int count = removeTextFromHearImpaired.TotalFixes;
                    if (count == 1)
                    {
                        ShowStatus(_language.TextingForHearingImpairedRemovedOneLine);
                    }
                    else if (count > 1)
                    {
                        ShowStatus(string.Format(_language.TextingForHearingImpairedRemovedXLines, count));
                    }
                }
            }
        }

        private void SplitToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            double lengthInSeconds = 0;
            if (mediaPlayer.VideoPlayer != null)
            {
                lengthInSeconds = mediaPlayer.Duration;
            }

            if (Configuration.Settings.Tools.SplitAdvanced)
            {
                using (var split = new Split())
                {
                    split.Initialize(_subtitle, _fileName, GetCurrentSubtitleFormat());
                    if (split.ShowDialog(this) == DialogResult.OK)
                    {
                        ShowStatus(_language.SubtitleSplitted);
                    }
                    else if (split.ShowBasic)
                    {
                        Configuration.Settings.Tools.SplitAdvanced = false;
                        SplitToolStripMenuItemClick(null, null);
                    }
                }
            }
            else
            {
                using (var splitSubtitle = new SplitSubtitle())
                {
                    splitSubtitle.Initialize(_subtitle, _fileName, GetCurrentSubtitleFormat(), GetCurrentEncoding(), lengthInSeconds);
                    if (splitSubtitle.ShowDialog(this) == DialogResult.OK)
                    {
                        ShowStatus(_language.SubtitleSplitted);
                    }
                    else if (splitSubtitle.ShowAdvanced)
                    {
                        Configuration.Settings.Tools.SplitAdvanced = true;
                        SplitToolStripMenuItemClick(null, null);
                    }
                }
            }
        }

        private void AppendTextVisuallyToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();

            if (MessageBox.Show(_language.SubtitleAppendPrompt, _language.SubtitleAppendPromptTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
            {
                openFileDialog1.Title = _language.OpenSubtitleToAppend;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
                if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    bool success = false;
                    string fileName = openFileDialog1.FileName;
                    if (File.Exists(fileName))
                    {
                        var fileInfo = new FileInfo(fileName);
                        var subtitleToAppend = new Subtitle();
                        SubtitleFormat format;

                        // do not allow blu-ray/vobsub
                        string extension = Path.GetExtension(fileName).ToLowerInvariant();
                        if (extension == ".sub" && (IsVobSubFile(fileName, false) || FileUtil.IsSpDvdSup(fileName)))
                        {
                            format = null;
                        }
                        else if (extension == ".sup" && FileUtil.IsBluRaySup(fileName))
                        {
                            format = null;
                        }
                        else if (fileInfo.Length < Subtitle.MaxFileSize)
                        {
                            format = subtitleToAppend.LoadSubtitle(fileName, out var _, null);

                            if (format == null)
                            {
                                var ebu = new Ebu();
                                if (ebu.IsMine(null, fileName))
                                {
                                    ebu.LoadSubtitle(subtitleToAppend, null, fileName);
                                    format = ebu;
                                }
                            }

                            if (format == null)
                            {
                                var pac = new Pac();
                                if (pac.IsMine(null, fileName))
                                {
                                    pac.LoadSubtitle(subtitleToAppend, null, fileName);
                                    format = pac;
                                }
                            }

                            if (format == null)
                            {
                                var cavena890 = new Cavena890();
                                if (cavena890.IsMine(null, fileName))
                                {
                                    cavena890.LoadSubtitle(subtitleToAppend, null, fileName);
                                    format = cavena890;
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show(string.Format(_language.FileXIsLargerThan10MB, fileName));
                            return;
                        }

                        if (format != null && subtitleToAppend.Paragraphs.Count > 1)
                        {
                            using (var visualSync = new VisualSync(this))
                            {
                                visualSync.Initialize(toolStripButtonVisualSync.Image as Bitmap, subtitleToAppend, null, _fileName, _language.AppendViaVisualSyncTitle, CurrentFrameRate);
                                visualSync.ShowDialog(this);
                                if (visualSync.OkPressed)
                                {
                                    if (MessageBox.Show(_language.AppendSynchronizedSubtitlePrompt, _language.SubtitleAppendPromptTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                                    {
                                        int start = _subtitle.Paragraphs.Count + 1;
                                        var fr = CurrentFrameRate;
                                        MakeHistoryForUndo(_language.BeforeAppend);
                                        foreach (var p in visualSync.Paragraphs)
                                        {
                                            _subtitle.Paragraphs.Add(new Paragraph(p));
                                        }

                                        if (format.GetType() == typeof(AdvancedSubStationAlpha) && GetCurrentSubtitleFormat().GetType() == typeof(AdvancedSubStationAlpha))
                                        {
                                            var currentStyles = new List<string>();
                                            if (_subtitle.Header != null)
                                            {
                                                currentStyles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                                            }

                                            foreach (var styleName in AdvancedSubStationAlpha.GetStylesFromHeader(subtitleToAppend.Header))
                                            {
                                                bool alreadyExists = false;
                                                foreach (var currentStyleName in currentStyles)
                                                {
                                                    if (currentStyleName.Trim().Equals(styleName.Trim(), StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        alreadyExists = true;
                                                    }
                                                }

                                                if (!alreadyExists)
                                                {
                                                    var newStyle = AdvancedSubStationAlpha.GetSsaStyle(styleName, subtitleToAppend.Header);
                                                    _subtitle.Header = AdvancedSubStationAlpha.AddSsaStyle(newStyle, _subtitle.Header);
                                                }
                                            }
                                        }

                                        _subtitle.Renumber();

                                        UpdateSourceView();
                                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);

                                        // select appended lines
                                        for (int i = start; i < _subtitle.Paragraphs.Count; i++)
                                        {
                                            SubtitleListview1.Items[i].Selected = true;
                                        }

                                        SubtitleListview1.EnsureVisible(start);

                                        ShowStatus(string.Format(_language.SubtitleAppendedX, fileName));
                                        success = true;
                                    }
                                }
                            }
                        }
                    }

                    if (!success)
                    {
                        ShowStatus(_language.SubtitleNotAppended);
                    }
                }
            }
        }


        /// <summary>
        /// Undo or Redo
        /// </summary>
        /// <param name="undo">True equals undo, false triggers redo</param>
        private void UndoToIndex(bool undo)
        {
            if (_networkSession != null)
            {
                return;
            }

            lock (_syncUndo)
            {
                if (!undo && _undoIndex >= _subtitle.HistoryItems.Count - 1)
                {
                    return;
                }

                if (undo && (_subtitle == null || !_subtitle.CanUndo || _undoIndex < 0))
                {
                    return;
                }

                // Add latest changes if any (also stop changes from being added while redoing/undoing)
                timerTextUndo.Stop();
                timerOriginalTextUndo.Stop();
                _listViewTextTicks = 0;
                _listViewOriginalTextTicks = 0;
                TimerTextUndoTick(null, null);
                TimerOriginalTextUndoTick(null, null);

                try
                {
                    var undoLineIndex = -1;
                    int selectedIndex = FirstSelectedIndex;
                    if (undo)
                    {
                        _subtitle.HistoryItems[_undoIndex].RedoParagraphs = new List<Paragraph>();
                        _subtitle.HistoryItems[_undoIndex].RedoParagraphsOriginal = new List<Paragraph>();
                        undoLineIndex = _subtitle.HistoryItems[_undoIndex].LineIndex;

                        foreach (var p in _subtitle.Paragraphs)
                        {
                            _subtitle.HistoryItems[_undoIndex].RedoParagraphs.Add(new Paragraph(p));
                        }

                        if (IsOriginalEditable)
                        {
                            foreach (var p in _subtitleOriginal.Paragraphs)
                            {
                                _subtitle.HistoryItems[_undoIndex].RedoParagraphsOriginal.Add(new Paragraph(p));
                            }
                        }

                        _subtitle.HistoryItems[_undoIndex].RedoFileName = _fileName;
                        _subtitle.HistoryItems[_undoIndex].RedoFileModified = _fileDateTime;
                        _subtitle.HistoryItems[_undoIndex].RedoOriginalFileName = _subtitleOriginalFileName;

                        if (selectedIndex >= 0)
                        {
                            _subtitle.HistoryItems[_undoIndex].RedoParagraphs[selectedIndex].Text =
                                textBoxListViewText.Text;
                            if (IsOriginalEditable &&
                                selectedIndex < _subtitle.HistoryItems[_undoIndex].RedoParagraphsOriginal.Count)
                            {
                                _subtitle.HistoryItems[_undoIndex].RedoParagraphsOriginal[selectedIndex].Text =
                                    textBoxListViewTextOriginal.Text;
                            }

                            _subtitle.HistoryItems[_undoIndex].RedoLineIndex = selectedIndex;
                            _subtitle.HistoryItems[_undoIndex].RedoLinePosition = textBoxListViewText.SelectionStart;
                            _subtitle.HistoryItems[_undoIndex].RedoLinePositionOriginal = textBoxListViewTextOriginal.SelectionStart;
                        }
                        else
                        {
                            _subtitle.HistoryItems[_undoIndex].RedoLineIndex = -1;
                            _subtitle.HistoryItems[_undoIndex].RedoLinePosition = -1;
                        }
                    }
                    else
                    {
                        _undoIndex++;
                    }

                    var text = _subtitle.HistoryItems[_undoIndex].Description;

                    _subtitleListViewIndex = -1;
                    textBoxListViewText.Text = string.Empty;
                    textBoxListViewTextOriginal.Text = string.Empty;
                    string oldFileName = _fileName;
                    DateTime oldFileDateTime = _fileDateTime;

                    string oldAlternameFileName = _subtitleOriginalFileName;
                    _fileName = _subtitle.UndoHistory(_undoIndex, out var subtitleFormatFriendlyName, out _fileDateTime, out _subtitleOriginal, out _subtitleOriginalFileName);
                    if (string.IsNullOrEmpty(oldAlternameFileName) && !string.IsNullOrEmpty(_subtitleOriginalFileName))
                    {
                        SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
                        SubtitleListview1.AutoSizeAllColumns(this);
                    }
                    else if (SubtitleListview1.IsOriginalTextColumnVisible && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count == 0)
                    {
                        RemoveOriginal(true, false);
                    }

                    if (!undo)
                    {
                        // TODO: Sometimes redo paragraphs can be null - how?
                        if (_subtitle.HistoryItems[_undoIndex].RedoParagraphs != null)
                        {
                            _subtitle.Paragraphs.Clear();
                            foreach (var p in _subtitle.HistoryItems[_undoIndex].RedoParagraphs)
                            {
                                _subtitle.Paragraphs.Add(new Paragraph(p));
                            }

                            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null)
                            {
                                _subtitleOriginal.Paragraphs.Clear();
                                foreach (var p in _subtitle.HistoryItems[_undoIndex].RedoParagraphsOriginal)
                                {
                                    _subtitleOriginal.Paragraphs.Add(new Paragraph(p));
                                }
                            }
                        }
                        else
                        {
                            Debug.WriteLine("Undo failed at undo index: " + _undoIndex);
                        }

                        _subtitle.HistoryItems[_undoIndex].RedoParagraphs = null;
                        _subtitle.HistoryItems[_undoIndex].RedoParagraphsOriginal = null;
                        if (SubtitleListview1.IsOriginalTextColumnVisible && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count == 0)
                        {
                            RemoveOriginal(true, false);
                        }
                    }

                    if (oldFileName == null || oldFileName.Equals(_fileName, StringComparison.OrdinalIgnoreCase))
                    {
                        _fileDateTime = oldFileDateTime; // undo will not give overwrite-newer-file warning
                    }

                    if (GetCurrentSubtitleFormat().FriendlyName != subtitleFormatFriendlyName)
                    {
                        var oldPaused = _makeHistoryPaused;
                        _makeHistoryPaused = true;
                        comboBoxSubtitleFormats.SelectedIndexChanged -= ComboBoxSubtitleFormatsSelectedIndexChanged;
                        SetCurrentFormat(subtitleFormatFriendlyName);
                        comboBoxSubtitleFormats.SelectedIndexChanged += ComboBoxSubtitleFormatsSelectedIndexChanged;
                        _makeHistoryPaused = oldPaused;
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);

                    if (undoLineIndex >= 0 && undoLineIndex < _subtitle.Paragraphs.Count)
                    {
                        selectedIndex = undoLineIndex;
                    }

                    if (selectedIndex >= _subtitle.Paragraphs.Count)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.Count - 1, true);
                    }
                    else if (selectedIndex >= 0 && selectedIndex < _subtitle.Paragraphs.Count)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(selectedIndex, true);
                    }
                    else
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }

                    audioVisualizer.Invalidate();
                    if (undo)
                    {
                        if (_subtitle.HistoryItems[_undoIndex].LineIndex == FirstSelectedIndex)
                        {
                            textBoxListViewText.SelectionStart = _subtitle.HistoryItems[_undoIndex].LinePosition;
                            if (_subtitleOriginal != null)
                            {
                                textBoxListViewTextOriginal.SelectionStart =
                                    _subtitle.HistoryItems[_undoIndex].LinePositionOriginal;
                            }
                        }

                        ShowStatus(_language.UndoPerformed + ": " + text.Replace(Environment.NewLine, "  "));
                        _undoIndex--;
                    }
                    else
                    {
                        if (_subtitle.HistoryItems[_undoIndex].RedoLineIndex >= 0 &&
                            _subtitle.HistoryItems[_undoIndex].RedoLineIndex == FirstSelectedIndex)
                        {
                            textBoxListViewText.SelectionStart = _subtitle.HistoryItems[_undoIndex].RedoLinePosition;
                        }

                        if (_subtitleOriginal != null && _subtitle.HistoryItems[_undoIndex].RedoLineIndex >= 0 &&
                            _subtitle.HistoryItems[_undoIndex].RedoLineIndex == FirstSelectedIndex)
                        {
                            textBoxListViewTextOriginal.SelectionStart = _subtitle.HistoryItems[_undoIndex].RedoLinePositionOriginal;
                        }

                        _fileName = _subtitle.HistoryItems[_undoIndex].RedoFileName;
                        _subtitleOriginalFileName = _subtitle.HistoryItems[_undoIndex].RedoOriginalFileName;
                        ShowStatus(_language.RedoPerformed);
                    }
                }
                catch (Exception exception)
                {
                    System.Diagnostics.Debug.WriteLine(exception.Message);
                }

                timerTextUndo.Start();
                timerOriginalTextUndo.Start();
                SetTitle();
                SetListViewStateImages();
                EnableOrDisableEditControls();
            }
        }

        private void ShowHistoryforUndoToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle != null && _subtitle.CanUndo)
            {
                ReloadFromSourceView();
                using (var showHistory = new ShowHistory())
                {
                    showHistory.Initialize(_subtitle, _undoIndex);
                    if (showHistory.ShowDialog(this) == DialogResult.OK)
                    {
                        _subtitleListViewIndex = -1;
                        textBoxListViewText.Text = string.Empty;
                        textBoxListViewTextOriginal.Text = string.Empty;

                        Cursor.Current = Cursors.WaitCursor;
                        SubtitleListview1.BeginUpdate();
                        int rollBackCount = 0;
                        while (_undoIndex > showHistory.SelectedIndex && rollBackCount < Subtitle.MaximumHistoryItems)
                        {
                            UndoToIndex(true);
                            rollBackCount++;
                        }

                        SubtitleListview1.EndUpdate();
                        Cursor.Current = Cursors.Default;
                        audioVisualizer.Invalidate();
                    }
                }
            }
            else
            {
                MessageBox.Show(_language.NothingToUndo, Title, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void StartOrStopLiveSpellCheckTimer()
        {
            _liveSpellCheckTimer?.Dispose();
            if (IsLiveSpellCheckEnabled)
            {
                _liveSpellCheckTimer = new Timer { Interval = 2000 };
                _liveSpellCheckTimer.Tick += LiveSpellCheckTimer_Tick;
                _liveSpellCheckTimer.Start();
            }
        }

        private void LiveSpellCheckTimer_Tick(object sender, EventArgs e)
        {
            _liveSpellCheckTimer.Stop();
            InitializeLiveSpellChcek();
            _liveSpellCheckTimer.Start();
        }

        private void InitializeLiveSpellChcek()
        {
            if (IsSubtitleLoaded)
            {
                var hash = _subtitle.GetFastHashCodeTextOnly();
                if (!textBoxListViewText.IsSpellCheckerInitialized && textBoxListViewText.IsDictionaryDownloaded)
                {
                    textBoxListViewText.InitializeLiveSpellCheck(_subtitle, FirstSelectedIndex);
                }
                else if (_changeSubtitleTextHash != hash)
                {
                    textBoxListViewText.CheckForLanguageChange(_subtitle);
                    _changeSubtitleTextHash = hash;
                }

                if (textBoxListViewText.LanguageChanged)
                {
                    if (textBoxListViewText.IsDictionaryDownloaded)
                    {
                        ShowStatus(string.Format(LanguageSettings.Current.SpellCheck.LiveSpellCheckLanguage, textBoxListViewText.CurrentLanguage), true);
                    }
                    else
                    {
                        ShowStatus(string.Format(LanguageSettings.Current.SpellCheck.NoDictionaryForLiveSpellCheck, textBoxListViewText.CurrentLanguage), true);
                    }

                    textBoxListViewText.LanguageChanged = false;
                }
            }
            else if (textBoxListViewText.IsSpellCheckerInitialized)
            {
                textBoxListViewText.DisposeHunspellAndDictionaries();
                textBoxListViewText.IsDictionaryDownloaded = true;
            }
        }

        private void ToolStripButtonSpellCheckClick(object sender, EventArgs e)
        {
            SpellCheck(true, 0);
        }

        private void SpellCheckToolStripMenuItemClick(object sender, EventArgs e)
        {
            SpellCheck(true, 0);
        }

        private void SpellCheck(bool autoDetect, int startFromLine)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            try
            {
                string dictionaryFolder = Utilities.DictionaryFolder;
                if (!Directory.Exists(dictionaryFolder) || Directory.GetFiles(dictionaryFolder, "*.dic").Length == 0)
                {
                    ShowGetDictionaries();
                    return;
                }

                if (_subtitle != null && _subtitle.Paragraphs.Count > 0)
                {
                    if (_spellCheckForm != null)
                    {
                        var result = MessageBox.Show(_language.ContinueWithCurrentSpellCheck, Title, MessageBoxButtons.YesNoCancel);
                        if (result == DialogResult.Cancel)
                        {
                            return;
                        }

                        if (result == DialogResult.No)
                        {
                            _spellCheckForm.Dispose();
                            _spellCheckForm = new SpellCheck(GetCurrentSubtitleFormat(), _imageSubFileName, this);
                            _spellCheckForm.DoSpellCheck(autoDetect, _subtitle, dictionaryFolder, this, startFromLine);
                        }
                        else
                        {
                            _spellCheckForm.ContinueSpellCheck(_subtitle);
                        }
                    }
                    else
                    {
                        _spellCheckForm = new SpellCheck(GetCurrentSubtitleFormat(), _imageSubFileName, this);
                        _spellCheckForm.DoSpellCheck(autoDetect, _subtitle, dictionaryFolder, this, startFromLine);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("{0}{1}{2}{3}{4}", ex.Source, Environment.NewLine, ex.Message, Environment.NewLine, ex.StackTrace), _title, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void ChangeWholeTextMainPart(ref int noOfChangedWords, ref bool firstChange, int i, Paragraph p)
        {
            SubtitleListview1.SetText(i, p.Text);
            noOfChangedWords++;
            if (firstChange)
            {
                MakeHistoryForUndo(_language.BeforeSpellCheck);
                firstChange = false;
            }

            UpdateSourceView();
            RefreshSelectedParagraph();
        }

        public void DeleteLine()
        {
            MakeHistoryForUndo(LanguageSettings.Current.Main.OneLineDeleted);
            DeleteSelectedLines();
        }

        public void FocusParagraph(int index)
        {
            if (InSourceView)
            {
                SwitchView(ListView);
            }
            else if (InListView)
            {
                SelectListViewIndexAndEnsureVisible(index);
            }
        }

        private void RefreshSelectedParagraph()
        {
            if (!InListView)
            {
                return;
            }

            var idx = FirstSelectedIndex;
            if (idx == -1 && _subtitle?.Paragraphs?.Count > 0)
            {
                idx = 0;
            }

            var p = _subtitle.GetParagraphOrDefault(idx);
            _subtitleListViewIndex = -1;
            SubtitleListview1_SelectedIndexChanged(null, null);
            if (p != null)
            {
                SubtitleListview1.SetStartTimeAndDuration(idx, p, _subtitle.GetParagraphOrDefault(idx + 1), _subtitle.GetParagraphOrDefault(idx - 1));
            }
        }

        private void RefreshSelectedParagraphs()
        {
            foreach (var index in SubtitleListview1.GetSelectedIndices())
            {
                var p = _subtitle.GetParagraphOrDefault(index);
                if (p != null)
                {
                    SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                }
            }

            _subtitleListViewIndex = -1;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private int GetPositionFromWordIndex(string text, int wordIndex)
        {
            var sb = new StringBuilder();
            int index = -1;
            for (int i = 0; i < text.Length; i++)
            {
                if (SpellCheckWordLists.SplitChars.Contains(text[i]))
                {
                    if (sb.Length > 0)
                    {
                        index++;
                        if (index == wordIndex)
                        {
                            int pos = i - sb.Length;
                            if (pos > 0)
                            {
                                pos--;
                            }

                            if (pos >= 0)
                            {
                                return pos;
                            }
                        }
                    }

                    sb.Clear();
                }
                else
                {
                    sb.Append(text[i]);
                }
            }

            if (sb.Length > 0)
            {
                index++;
                if (index == wordIndex)
                {
                    int pos = text.Length - 1 - sb.Length;
                    if (pos >= 0)
                    {
                        return pos;
                    }
                }
            }

            return 0;
        }

        public void CorrectWord(string changeWord, Paragraph p, string oldWord, ref bool firstChange, int wordIndex)
        {
            if (oldWord == changeWord)
            {
                return;
            }

            if (firstChange)
            {
                MakeHistoryForUndo(_language.BeforeSpellCheck);
                firstChange = false;
            }

            int startIndex = p.Text.IndexOf(oldWord, StringComparison.Ordinal);
            if (wordIndex >= 0)
            {
                startIndex = p.Text.IndexOf(oldWord, GetPositionFromWordIndex(p.Text, wordIndex), StringComparison.Ordinal);
            }

            while (startIndex >= 0 && startIndex < p.Text.Length && p.Text.Substring(startIndex).Contains(oldWord))
            {
                bool startOk = startIndex == 0 ||
                               "«»“” <>-—+/'\"[](){}¿¡….,;:!?%&$£\r\n؛،؟\u200E\u200F\u202A\u202B\u202C\u202D\u202E\u00A0\u200B\uFEFF".Contains(p.Text[startIndex - 1]) ||
                               char.IsPunctuation(p.Text[startIndex - 1]) ||
                               startIndex == p.Text.Length - oldWord.Length;
                if (startOk)
                {
                    int end = startIndex + oldWord.Length;
                    if (end == p.Text.Length ||
                        "«»“” ,.!?:;'()<>\"-—+/[]{}%&$£…\r\n؛،؟\u200E\u200F\u202A\u202B\u202C\u202D\u202E\u00A0\u200B\uFEFF".Contains(p.Text[end]) ||
                        char.IsPunctuation(p.Text[end]))
                    {
                        var endOk = true;

                        if (changeWord.EndsWith('\'') && end < p.Text.Length && p.Text[end] == '\'')
                        {
                            endOk = false;
                        }

                        if (endOk)
                        {
                            var lengthBefore = p.Text.Length;
                            p.Text = p.Text.Remove(startIndex, oldWord.Length).Insert(startIndex, changeWord);
                            var lengthAfter = p.Text.Length;
                            if (lengthAfter > lengthBefore)
                            {
                                startIndex += (lengthAfter - lengthBefore);
                            }
                        }
                    }
                }

                if (startIndex + 2 >= p.Text.Length)
                {
                    startIndex = -1;
                }
                else
                {
                    startIndex = p.Text.IndexOf(oldWord, startIndex + 2, StringComparison.Ordinal);
                }

                // stop if using index
                if (wordIndex >= 0)
                {
                    startIndex = -1;
                }
            }

            ShowStatus(string.Format(_language.SpellCheckChangedXToY, oldWord, changeWord));
            SubtitleListview1.SetText(_subtitle.GetIndex(p), p.Text);
            UpdateSourceView();
            RefreshSelectedParagraph();
        }

        private void GetDictionariesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ShowGetDictionaries();
        }

        private void ShowGetDictionaries()
        {
            using (var form = new GetDictionaries())
            {
                form.ShowDialog(this);
            }
        }

        private void ContextMenuStripListViewOpening(object sender, CancelEventArgs e)
        {
            var format = GetCurrentSubtitleFormat();
            var formatType = format.GetType();
            var coordinates = SubtitleListview1.PointToClient(Cursor.Position);
            var hitTest = SubtitleListview1.HitTest(coordinates);
            if (coordinates.Y < 19 || (hitTest.Item != null && hitTest.Item.Index == 0 && coordinates.Y < hitTest.Item.Position.Y))
            {
                e.Cancel = true;
                var cm = new ContextMenuStrip();
                UiUtil.FixFonts(cm);
                var contextMenuStripLvHeaderResizeToolStripMenuItem = new ToolStripMenuItem(LanguageSettings.Current.Main.Menu.ContextMenu.SizeAllColumnsToFit);
                contextMenuStripLvHeaderResizeToolStripMenuItem.Click += (sender2, e2) => { SubtitleListview1.AutoSizeColumns(); };
                cm.Items.Add(contextMenuStripLvHeaderResizeToolStripMenuItem);

                var tss = new ToolStripSeparator();
                UiUtil.FixFonts(tss);
                cm.Items.Add(tss);

                // Start time
                var contextMenuStripLvHeaderStartTimeToolStripMenuItem = new ToolStripMenuItem(LanguageSettings.Current.General.StartTime)
                {
                    CheckOnClick = true,
                    Checked = Configuration.Settings.Tools.ListViewShowColumnStartTime
                };
                contextMenuStripLvHeaderStartTimeToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnStartTime = contextMenuStripLvHeaderStartTimeToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnStartTime)
                    {
                        SubtitleListview1.ShowStartColumn(LanguageSettings.Current.General.StartTime);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Start);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderStartTimeToolStripMenuItem);


                // End time
                var contextMenuStripLvHeaderEndTimeToolStripMenuItem = new ToolStripMenuItem(LanguageSettings.Current.General.EndTime)
                {
                    CheckOnClick = true,
                    Checked = Configuration.Settings.Tools.ListViewShowColumnEndTime
                };
                contextMenuStripLvHeaderEndTimeToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnEndTime = contextMenuStripLvHeaderEndTimeToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnEndTime)
                    {
                        SubtitleListview1.ShowEndColumn(LanguageSettings.Current.General.EndTime);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.End);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderEndTimeToolStripMenuItem);

                // Duration
                var contextMenuStripLvHeaderDurationToolStripMenuItem = new ToolStripMenuItem(LanguageSettings.Current.General.Duration)
                {
                    CheckOnClick = true,
                    Checked = Configuration.Settings.Tools.ListViewShowColumnDuration
                };
                contextMenuStripLvHeaderDurationToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnDuration = contextMenuStripLvHeaderDurationToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnDuration)
                    {
                        SubtitleListview1.ShowDurationColumn(LanguageSettings.Current.General.Duration);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Duration);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderDurationToolStripMenuItem);

                // CPS
                var contextMenuStripLvHeaderCpsToolStripMenuItem = new ToolStripMenuItem(LanguageSettings.Current.General.CharsPerSec)
                {
                    CheckOnClick = true,
                    Checked = Configuration.Settings.Tools.ListViewShowColumnCharsPerSec
                };
                contextMenuStripLvHeaderCpsToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnCharsPerSec = contextMenuStripLvHeaderCpsToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnCharsPerSec)
                    {
                        SubtitleListview1.ShowCharsSecColumn(LanguageSettings.Current.General.CharsPerSec);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.CharactersPerSeconds);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderCpsToolStripMenuItem);

                // WPM
                var contextMenuStripLvHeaderWpmToolStripMenuItem = new ToolStripMenuItem(LanguageSettings.Current.General.WordsPerMin)
                {
                    CheckOnClick = true,
                    Checked = Configuration.Settings.Tools.ListViewShowColumnWordsPerMin
                };
                contextMenuStripLvHeaderWpmToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnWordsPerMin = contextMenuStripLvHeaderWpmToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnWordsPerMin)
                    {
                        SubtitleListview1.ShowWordsMinColumn(LanguageSettings.Current.General.WordsPerMin);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.WordsPerMinute);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderWpmToolStripMenuItem);

                // GAP
                var contextMenuStripLvHeaderGapToolStripMenuItem = new ToolStripMenuItem(LanguageSettings.Current.General.Gap)
                {
                    CheckOnClick = true,
                    Checked = Configuration.Settings.Tools.ListViewShowColumnGap
                };
                contextMenuStripLvHeaderGapToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnGap = contextMenuStripLvHeaderGapToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnGap)
                    {
                        SubtitleListview1.ShowGapColumn(LanguageSettings.Current.General.Gap);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Gap);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderGapToolStripMenuItem);

                if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha) || formatType == typeof(CsvNuendo) || formatType == typeof(PodcastIndexer))
                {
                    // ACTOR
                    var actorTitle = formatType == typeof(CsvNuendo) ? LanguageSettings.Current.General.Character : LanguageSettings.Current.General.Actor;
                    var contextMenuStripLvHeaderActorToolStripMenuItem = new ToolStripMenuItem(actorTitle)
                    {
                        CheckOnClick = true,
                        Checked = Configuration.Settings.Tools.ListViewShowColumnActor
                    };
                    contextMenuStripLvHeaderActorToolStripMenuItem.Click += (sender2, e2) =>
                    {
                        SubtitleListview1.BeginUpdate();
                        Configuration.Settings.Tools.ListViewShowColumnActor = contextMenuStripLvHeaderActorToolStripMenuItem.Checked;
                        if (Configuration.Settings.Tools.ListViewShowColumnActor)
                        {
                            SubtitleListview1.ShowActorColumn(actorTitle);
                        }
                        else
                        {
                            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Actor);
                        }

                        SaveSubtitleListviewIndices();
                        UiUtil.InitializeSubtitleFont(SubtitleListview1);
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        RestoreSubtitleListviewIndices();
                        SubtitleListview1.EndUpdate();
                    };
                    cm.Items.Add(contextMenuStripLvHeaderActorToolStripMenuItem);
                }

                if (formatType == typeof(TimedText10))
                {
                    // REGION
                    var contextMenuStripLvHeaderRegionToolStripMenuItem = new ToolStripMenuItem(LanguageSettings.Current.General.Region)
                    {
                        CheckOnClick = true,
                        Checked = Configuration.Settings.Tools.ListViewShowColumnRegion
                    };
                    contextMenuStripLvHeaderRegionToolStripMenuItem.Click += (sender2, e2) =>
                    {
                        SubtitleListview1.BeginUpdate();
                        Configuration.Settings.Tools.ListViewShowColumnRegion = contextMenuStripLvHeaderRegionToolStripMenuItem.Checked;
                        if (Configuration.Settings.Tools.ListViewShowColumnRegion)
                        {
                            SubtitleListview1.ShowRegionColumn(LanguageSettings.Current.General.Region);
                        }
                        else
                        {
                            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Region);
                        }

                        SaveSubtitleListviewIndices();
                        UiUtil.InitializeSubtitleFont(SubtitleListview1);
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        RestoreSubtitleListviewIndices();
                        SubtitleListview1.EndUpdate();
                    };
                    cm.Items.Add(contextMenuStripLvHeaderRegionToolStripMenuItem);
                }

                cm.Show(SubtitleListview1, coordinates);
                return;
            }

            toolStripMenuWebVttBrowserPreview.Visible = formatType == typeof(WebVTT) &&
                                               !string.IsNullOrEmpty(_videoFileName) &&
                                               (_videoFileName.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) ||
                                                _videoFileName.EndsWith(".m4v", StringComparison.OrdinalIgnoreCase) ||
                                                _videoFileName.EndsWith(".mov", StringComparison.OrdinalIgnoreCase) ||
                                                _videoFileName.EndsWith(".webm", StringComparison.OrdinalIgnoreCase)) &&
                                               IsSubtitleLoaded;

            // Insert "selected lines" sub menu items dynamically
            while (toolStripMenuItemSelectedLines.DropDownItems[0].Tag?.ToString() == "(REMOVE)")
            {
                toolStripMenuItemSelectedLines.DropDownItems.RemoveAt(0);
            }

            var selectLinesMultipleReplace = new ToolStripMenuItem(LanguageSettings.Current.Main.Menu.Edit.MultipleReplace);
            UiUtil.FixFonts(selectLinesMultipleReplace);
            selectLinesMultipleReplace.Tag = "(REMOVE)";
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                toolStripMenuItemSelectedLines.DropDownItems.Insert(0, selectLinesMultipleReplace);
            }

            selectLinesMultipleReplace.Click += (senderNew, eNew) =>
            {
                using (var multipleReplace = new MultipleReplace())
                {
                    var sub = new Subtitle();
                    foreach (var idx in SubtitleListview1.GetSelectedIndices())
                    {
                        sub.Paragraphs.Add(new Paragraph(_subtitle.Paragraphs[idx], false));
                    }

                    multipleReplace.Initialize(sub, this);
                    if (multipleReplace.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeMultipleReplace);
                        SaveSubtitleListviewIndices();

                        for (int i = 0; i < sub.Paragraphs.Count; i++)
                        {
                            var tempP = multipleReplace.FixedSubtitle.Paragraphs[i];
                            var p = _subtitle.GetParagraphOrDefaultById(tempP.Id);
                            if (p != null)
                            {
                                p.Text = tempP.Text;
                            }
                        }

                        var indicesToDelete = new List<int>();
                        foreach (var i in multipleReplace.DeleteIndices)
                        {
                            var tempP = sub.Paragraphs[i];
                            var p = _subtitle.GetParagraphOrDefaultById(tempP.Id);
                            if (p != null)
                            {
                                indicesToDelete.Add(_subtitle.Paragraphs.IndexOf(p));
                            }
                        }
                        _subtitle.RemoveParagraphsByIndices(indicesToDelete);
                        _subtitle.Renumber();

                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        if (indicesToDelete.Count > 0)
                        {
                            SubtitleListview1.SelectIndexAndEnsureVisible(FirstSelectedIndex);
                        }
                        else
                        {
                            RestoreSubtitleListviewIndices();
                        }

                        RefreshSelectedParagraph();
                        UpdateSourceView();
                        ShowStatus(string.Format(_language.NumberOfLinesReplacedX, multipleReplace.FixCount));
                    }
                }
            };


            var selectLinesBurnIn = new ToolStripMenuItem(_language.Menu.Video.GenerateVideoWithBurnedInSub);
            UiUtil.FixFonts(selectLinesBurnIn);
            selectLinesBurnIn.Tag = "(REMOVE)";
            if (SubtitleListview1.SelectedItems.Count > 0 && !string.IsNullOrEmpty(_videoFileName) &&
                _videoInfo != null && _videoInfo.Width > 0)
            {
                toolStripMenuItemSelectedLines.DropDownItems.Insert(0, selectLinesBurnIn);
                selectLinesBurnIn.Click += (senderNew, eNew) =>
                {
                    if (VideoFileNameIsUrl)
                    {
                        MessageBox.Show(LanguageSettings.Current.General.OnlineVideoFeatureNotAvailable);
                        return;
                    }

                    if (string.IsNullOrEmpty(_videoFileName) || _videoInfo == null || _videoInfo.Width == 0 || _videoInfo.Height == 0)
                    {
                        MessageBox.Show(LanguageSettings.Current.General.NoVideoLoaded);
                        return;
                    }

                    if (!RequireFfmpegOk())
                    {
                        return;
                    }

                    var sub = new Subtitle(_subtitle);
                    sub.Paragraphs.Clear();
                    foreach (var idx in SubtitleListview1.GetSelectedIndices())
                    {
                        sub.Paragraphs.Add(new Paragraph(_subtitle.Paragraphs[idx], false));
                    }
                    var fontSize = PrepareBurn(sub);

                    using (var form = new GenerateVideoWithHardSubs(sub, GetCurrentSubtitleFormat(), _videoFileName, _videoInfo, fontSize, true))
                    {
                        form.ShowDialog(this);
                    }
                };
            }

            if (SubtitleListview1.SelectedItems.Count > 0 && !string.IsNullOrEmpty(_videoFileName) && !VideoFileNameIsUrl)
            {
                var audio = new ToolStripMenuItem(LanguageSettings.Current.GenerateVideoWithBurnedInSubs.Audio)
                {
                    Tag = "(REMOVE)"
                };

                toolStripMenuItemSelectedLines.DropDownItems.Insert(0, audio);
                var audioClip = new ToolStripMenuItem(LanguageSettings.Current.Main.Menu.ContextMenu.ExtractAudio);
                var audioToTextWhisper = new ToolStripMenuItem(string.Format(LanguageSettings.Current.Main.Menu.Video.VideoAudioToTextX, "Whisper"));
                var audioToTextVosk = new ToolStripMenuItem(string.Format(LanguageSettings.Current.Main.Menu.Video.VideoAudioToTextX, "Vosk/Kaldi"));
                audio.DropDownItems.Insert(0, audioClip);
                audio.DropDownItems.Insert(0, audioToTextVosk);

                if (WhisperHelper.IsWhisperInstalled())
                {
                    audio.DropDownItems.Insert(0, audioToTextWhisper);
                }

                UiUtil.FixFonts(audio);
                UiUtil.FixFonts(audioClip);
                UiUtil.FixFonts(audioToTextWhisper);
                UiUtil.FixFonts(audioToTextVosk);
                UiUtil.FixFonts(toolStripMenuItemSelectedLines);

                audioClip.Click += (senderNew, eNew) => { ExtractAudioSelectedLines(); };
                audioToTextWhisper.Click += (senderNew, eNew) => { AudioToTextWhisperSelectedLines(); };
                audioToTextVosk.Click += (senderNew, eNew) => { AudioToTextVoskSelectedLines(); };
            }

            toolStripMenuItemSetRegion.Visible = false;
            toolStripMenuItemSetLanguage.Visible = false;
            toolStripMenuItemSetLayer.Visible = false;
            List<string> actors = null;
            if ((formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha) || formatType == typeof(CsvNuendo) || formatType == typeof(PodcastIndexer)) && SubtitleListview1.SelectedItems.Count > 0)
            {
                actors = new List<string>();
                toolStripMenuItemWebVTT.Visible = false;
                var styles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                if (styles.Count == 0)
                {
                    styles = AdvancedSubStationAlpha.GetStylesFromHeader(AdvancedSubStationAlpha.DefaultHeader);
                }

                setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, SetStyle);
                    if (SubtitleListview1.SelectedItems.Count == 1 && SubtitleListview1.SelectedItems.Count > 0 &&
                        _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index)?.Extra == style)
                    {
                        ((ToolStripMenuItem)setStylesForSelectedLinesToolStripMenuItem.DropDownItems[setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1]).Checked = true;
                    }
                }

                toolStripMenuItemAssStyles.Visible = true;
                if (styles.Count > 1)
                {
                    setStylesForSelectedLinesToolStripMenuItem.Visible = true;
                    UiUtil.FixFonts(setStylesForSelectedLinesToolStripMenuItem);
                }
                else
                {
                    setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                }

                if (formatType == typeof(AdvancedSubStationAlpha))
                {
                    toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.AdvancedSubStationAlphaStyles;
                    setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SetStyle;
                }
                else
                {
                    toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.SubStationAlphaStyles;
                    setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SetStyle;
                }

                // actor
                foreach (var p in _subtitle.Paragraphs)
                {
                    if (!string.IsNullOrEmpty(p.Actor) && !actors.Contains(p.Actor))
                    {
                        actors.Add(p.Actor);
                    }

                    actors.Sort();
                }

                setActorForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                for (var index = 0; index < actors.Count; index++)
                {
                    var actor = actors[index];
                    setActorForSelectedLinesToolStripMenuItem.DropDownItems.Add(actor, null, SetActor);
                    if (index == 0 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor1))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor1);
                    }
                    else if (index == 1 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor2))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor2);
                    }
                    else if (index == 2 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor3))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor3);
                    }
                    else if (index == 3 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor4))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor4);
                    }
                    else if (index == 4 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor5))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor5);
                    }
                    else if (index == 5 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor6))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor6);
                    }
                    else if (index == 6 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor7))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor7);
                    }
                    else if (index == 7 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor8))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor8);
                    }
                    else if (index == 8 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor9))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor9);
                    }
                    else if (index == 9 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor10))
                    {
                        var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor10);
                    }

                    if (SubtitleListview1.SelectedItems.Count == 1 && _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index)?.Actor == actor)
                    {
                        ((ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1]).Checked = true;
                    }
                }

                if (actors.Count > 0)
                {
                    var tss = new ToolStripSeparator();
                    UiUtil.FixFonts(tss);
                    setActorForSelectedLinesToolStripMenuItem.DropDownItems.Add(tss);
                }

                setActorForSelectedLinesToolStripMenuItem.DropDownItems.Add(_language.Menu.ContextMenu.NewActor, null, SetNewActor);
                if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetNewActor))
                {
                    var item = (ToolStripMenuItem)setActorForSelectedLinesToolStripMenuItem.DropDownItems[setActorForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1];
                    item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetNewActor);
                }

                if (actors.Count > 0)
                {
                    setActorForSelectedLinesToolStripMenuItem.DropDownItems.Add(_language.Menu.ContextMenu.RemoveActors, null, RemoveActors);
                }

                UiUtil.FixFonts(setActorForSelectedLinesToolStripMenuItem);

                toolStripMenuItemSetLayer.DropDownItems.Clear();
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        var layer = p.Layer;

                        toolStripMenuItemSetLayer.DropDownItems.Add((layer - 100).ToString(CultureInfo.InvariantCulture), null, SetLayer);
                        toolStripMenuItemSetLayer.DropDownItems.Add((layer - 10).ToString(CultureInfo.InvariantCulture), null, SetLayer);
                        toolStripMenuItemSetLayer.DropDownItems.Add((layer - 1).ToString(CultureInfo.InvariantCulture), null, SetLayer);

                        toolStripMenuItemSetLayer.DropDownItems.Add(layer.ToString(CultureInfo.InvariantCulture), null, SetLayer);
                        ((ToolStripMenuItem)toolStripMenuItemSetLayer.DropDownItems[toolStripMenuItemSetLayer.DropDownItems.Count - 1]).Checked = true;

                        toolStripMenuItemSetLayer.DropDownItems.Add((layer + 1).ToString(CultureInfo.InvariantCulture), null, SetLayer);
                        toolStripMenuItemSetLayer.DropDownItems.Add((layer + 10).ToString(CultureInfo.InvariantCulture), null, SetLayer);
                        toolStripMenuItemSetLayer.DropDownItems.Add((layer + 100).ToString(CultureInfo.InvariantCulture), null, SetLayer);

                        toolStripMenuItemSetLayer.DropDownItems.Add(new ToolStripSeparator());

                        toolStripMenuItemSetLayer.DropDownItems.Add(_language.Menu.ContextMenu.SetLayer, null, SetLayerChooseValue);
                    }
                    toolStripMenuItemSetLayer.Visible = true;
                    if (Configuration.Settings.General.UseDarkTheme)
                    {
                        DarkTheme.SetDarkTheme(toolStripMenuItemSetLayer);
                    }
                }
            }
            else if (((formatType == typeof(TimedText10) && Configuration.Settings.SubtitleSettings.TimedText10ShowStyleAndLanguage) || formatType == typeof(ItunesTimedText) || formatType == typeof(TimedTextImsc11)) && SubtitleListview1.SelectedItems.Count > 0)
            {
                toolStripMenuItemWebVTT.Visible = false;
                toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.TimedTextStyles;
                var styles = TimedText10.GetStylesFromHeader(_subtitle.Header);
                setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, SetStyle);
                    if (SubtitleListview1.SelectedItems.Count == 1 && _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index)?.Style == style)
                    {
                        ((ToolStripMenuItem)setStylesForSelectedLinesToolStripMenuItem.DropDownItems[setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1]).Checked = true;
                    }
                }

                if (styles.Count >= 1)
                {
                    setStylesForSelectedLinesToolStripMenuItem.Visible = true;
                    UiUtil.FixFonts(setStylesForSelectedLinesToolStripMenuItem);
                }
                else
                {
                    setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                }

                toolStripMenuItemAssStyles.Visible = true;
                setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.TimedTextSetStyle;

                // regions
                if (string.IsNullOrEmpty(_subtitle.Header) || !_subtitle.Header.Contains("http://www.w3.org/ns/ttml"))
                {
                    _subtitle.Header = new TimedText10().ToText(_subtitle, string.Empty);
                }

                var regions = TimedText10.GetRegionsFromHeader(_subtitle.Header);
                toolStripMenuItemSetRegion.DropDownItems.Clear();
                toolStripMenuItemSetRegion.Text = _language.Menu.ContextMenu.TimedTextSetRegion;
                if (regions.Count > 0)
                {
                    toolStripMenuItemSetRegion.Visible = true;
                    foreach (var region in regions)
                    {
                        toolStripMenuItemSetRegion.DropDownItems.Add(region, null, SetRegion);
                        if (SubtitleListview1.SelectedItems.Count == 1 && _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index)?.Region == region)
                        {
                            ((ToolStripMenuItem)toolStripMenuItemSetRegion.DropDownItems[toolStripMenuItemSetRegion.DropDownItems.Count - 1]).Checked = true;
                        }
                    }

                    var tss = new ToolStripSeparator();
                    UiUtil.FixFonts(tss);
                    toolStripMenuItemSetRegion.DropDownItems.Add(tss);

                    var clear = new ToolStripMenuItem(LanguageSettings.Current.DvdSubRip.Clear);
                    toolStripMenuItemSetRegion.DropDownItems.Add(clear);
                    clear.Click += (sender2, e2) =>
                    {
                        MakeHistoryForUndo("Set region: " + LanguageSettings.Current.DvdSubRip.Clear);
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index].Region = null;
                            SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                        }
                    };

                    UiUtil.FixFonts(toolStripMenuItemSetRegion);
                }
                else
                {
                    toolStripMenuItemSetRegion.Visible = false;
                }

                // languages
                var languages = TimedText10.GetUsedLanguages(_subtitle);
                toolStripMenuItemSetLanguage.DropDownItems.Clear();
                toolStripMenuItemSetLanguage.Text = _language.Menu.ContextMenu.TimedTextSetLanguage;
                toolStripMenuItemSetLanguage.Visible = true;
                if (languages.Count > 0)
                {
                    foreach (var language in languages)
                    {
                        toolStripMenuItemSetLanguage.DropDownItems.Add(language, null, SetLanguage);
                        if (SubtitleListview1.SelectedItems.Count == 1 && _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index)?.Language == language)
                        {
                            ((ToolStripMenuItem)toolStripMenuItemSetLanguage.DropDownItems[toolStripMenuItemSetLanguage.DropDownItems.Count - 1]).Checked = true;
                        }
                    }

                    var tss = new ToolStripSeparator();
                    UiUtil.FixFonts(tss);
                    toolStripMenuItemSetLanguage.DropDownItems.Add(tss);
                }

                var newItem = new ToolStripMenuItem(_language.New);
                toolStripMenuItemSetLanguage.DropDownItems.Add(newItem);
                newItem.Click += (senderNew, eNew) =>
                {
                    var moreLanguages = new List<CultureInfo>();
                    foreach (CultureInfo x in CultureInfo.GetCultures(CultureTypes.NeutralCultures))
                    {
                        var twoLetterLower = x.TwoLetterISOLanguageName.ToLowerInvariant();
                        if (!languages.Contains(twoLetterLower) &&
                            !languages.Contains(x.GetThreeLetterIsoLanguageName().ToLowerInvariant()) &&
                            twoLetterLower != "iv")
                        {
                            moreLanguages.Add(x);
                        }
                    }

                    moreLanguages = moreLanguages.OrderBy(p => p.TwoLetterISOLanguageName).ToList();
                    using (var form = new TimedTextNewLanguage(moreLanguages, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle)))
                    {
                        if (form.ShowDialog(this) == DialogResult.OK)
                        {
                            if (!string.IsNullOrEmpty(form.Language))
                            {
                                MakeHistoryForUndo("Set language: " + form.Language);
                                foreach (int index in SubtitleListview1.SelectedIndices)
                                {
                                    _subtitle.Paragraphs[index].Language = form.Language;
                                    _subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(_subtitle.Paragraphs[index]);
                                    SubtitleListview1.SetExtraText(index, _subtitle.Paragraphs[index].Extra, SubtitleListview1.ForeColor);
                                }
                            }
                        }
                    }
                };

                if (languages.Count > 0)
                {
                    var clearLanguage = new ToolStripMenuItem(LanguageSettings.Current.DvdSubRip.Clear);
                    toolStripMenuItemSetLanguage.DropDownItems.Add(clearLanguage);
                    clearLanguage.Click += (sender2, e2) =>
                    {
                        MakeHistoryForUndo("Set language: " + LanguageSettings.Current.DvdSubRip.Clear);
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index].Language = null;
                            _subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(_subtitle.Paragraphs[index]);
                            SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                        }
                    };
                }

                UiUtil.FixFonts(toolStripMenuItemSetLanguage);
            }
            else if ((formatType == typeof(Sami) || formatType == typeof(SamiModern)) && SubtitleListview1.SelectedItems.Count > 0)
            {
                toolStripMenuItemWebVTT.Visible = false;
                toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.TimedTextStyles;
                var styles = Sami.GetStylesFromHeader(_subtitle.Header);
                setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, SetStyle);
                    if (SubtitleListview1.SelectedItems.Count == 1 && _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index)?.Extra == style)
                    {
                        ((ToolStripMenuItem)setStylesForSelectedLinesToolStripMenuItem.DropDownItems[setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1]).Checked = true;
                    }
                }

                if (styles.Count > 1)
                {
                    setStylesForSelectedLinesToolStripMenuItem.Visible = true;
                    UiUtil.FixFonts(setStylesForSelectedLinesToolStripMenuItem);
                }
                else
                {
                    setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                }

                toolStripMenuItemAssStyles.Visible = false;
                setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SamiSetStyle;
            }
            else if (formatType == typeof(WebVTT) && SubtitleListview1.SelectedItems.Count > 0)
            {
                setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                toolStripMenuItemAssStyles.Visible = false;
                toolStripMenuItemWebVTT.Visible = true;
                var voices = WebVTT.GetVoices(_subtitle).OrderBy(p => p).ToList();
                toolStripMenuItemWebVTT.DropDownItems.Clear();
                for (var index = 0; index < voices.Count; index++)
                {
                    var voice = voices[index];
                    toolStripMenuItemWebVTT.DropDownItems.Add(voice, null, WebVTTSetVoice);

                    if (index == 0 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor1))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor1);
                    }
                    else if (index == 1 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor2))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor2);
                    }
                    else if (index == 2 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor3))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor3);
                    }
                    else if (index == 3 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor4))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor4);
                    }
                    else if (index == 4 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor5))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor5);
                    }
                    else if (index == 5 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor6))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor6);
                    }
                    else if (index == 6 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor7))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor7);
                    }
                    else if (index == 7 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor8))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor8);
                    }
                    else if (index == 8 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor9))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor9);
                    }
                    else if (index == 9 && !string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetActor10))
                    {
                        var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                        item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetActor10);
                    }
                }

                if (voices.Count > 0)
                {
                    var tss = new ToolStripSeparator();
                    UiUtil.FixFonts(tss);
                    toolStripMenuItemWebVTT.DropDownItems.Add(tss);
                }

                toolStripMenuItemWebVTT.DropDownItems.Add(_language.Menu.ContextMenu.WebVTTSetNewVoice, null, WebVTTSetNewVoice);
                if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainListViewSetNewActor))
                {
                    var item = (ToolStripMenuItem)toolStripMenuItemWebVTT.DropDownItems[toolStripMenuItemWebVTT.DropDownItems.Count - 1];
                    item.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSetNewActor);
                }

                if (voices.Count > 0)
                {
                    toolStripMenuItemWebVTT.DropDownItems.Add(_language.Menu.ContextMenu.WebVTTRemoveVoices, null, WebVTTRemoveVoices);
                }

                UiUtil.FixFonts(toolStripMenuItemWebVTT);
            }
            else if (format.Name == "Nuendo" && SubtitleListview1.SelectedItems.Count > 0)
            {
                toolStripMenuItemWebVTT.Visible = false;
                var styles = GetNuendoStyles();
                setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, NuendoSetStyle);
                    if (SubtitleListview1.SelectedItems.Count == 1 && _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index)?.Extra == style)
                    {
                        ((ToolStripMenuItem)setStylesForSelectedLinesToolStripMenuItem.DropDownItems[setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Count - 1]).Checked = true;
                    }
                }

                if (styles.Count > 1)
                {
                    setStylesForSelectedLinesToolStripMenuItem.Visible = true;
                    UiUtil.FixFonts(setStylesForSelectedLinesToolStripMenuItem);
                }
                else
                {
                    setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                }

                toolStripMenuItemAssStyles.Visible = false;
                setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.NuendoSetStyle;
            }
            else
            {
                setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                toolStripMenuItemAssStyles.Visible = false;
                toolStripMenuItemWebVTT.Visible = false;
            }

            if (actors != null)
            {
                setActorForSelectedLinesToolStripMenuItem.Visible = true;
            }
            else
            {
                setActorForSelectedLinesToolStripMenuItem.Visible = false;
            }

            if (formatType == typeof(Ebu))
            {
                Ebu.EbuGeneralSubtitleInformation header;
                if (_subtitle != null && _subtitle.Header != null && (_subtitle.Header.Contains("STL2") || _subtitle.Header.Contains("STL3")))
                {
                    header = Ebu.ReadHeader(Encoding.UTF8.GetBytes(_subtitle.Header));
                }
                else
                {
                    header = new Ebu.EbuGeneralSubtitleInformation();
                }

                var open = header.DisplayStandardCode != "1" && header.DisplayStandardCode != "2";
                boxToolStripMenuItem.Visible = open;
            }
            else
            {
                boxToolStripMenuItem.Visible = false;
            }

            toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = false;
            if (SubtitleListview1.SelectedItems.Count == 0)
            {
                contextMenuStripEmpty.Show(MousePosition.X, MousePosition.Y);
                e.Cancel = true;
            }
            else
            {
                bool noNetWorkSession = _networkSession == null;

                toolStripMenuItemSaveSelectedLines.Visible = false;
                toolStripMenuItemInsertBefore.Visible = true;
                toolStripMenuItemInsertAfter.Visible = true;
                toolStripMenuItemInsertSubtitle.Visible = noNetWorkSession;
                toolStripMenuItemMergeLines.Visible = true;
                mergeAfterToolStripMenuItem.Visible = true;
                mergeBeforeToolStripMenuItem.Visible = true;
                splitLineToolStripMenuItem.Visible = true;
                toolStripSeparator7.Visible = true;
                typeEffectToolStripMenuItem.Visible = noNetWorkSession;
                karaokeEffectToolStripMenuItem.Visible = noNetWorkSession;
                adjustDisplayTimeForSelectedLinesToolStripMenuItem.Visible = true;
                visualSyncSelectedLinesToolStripMenuItem.Visible = true;
                toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = false;
                toolStripMenuItemUnbreakLines.Visible = true;
                toolStripMenuItemAutoBreakLines.Visible = true;
                toolStripMenuItemEvenlyDistributeLines.Visible = true;
                toolStripMenuItemSurroundWithMusicSymbols.Visible = IsUnicode || Configuration.Settings.Tools.MusicSymbol == "#" || Configuration.Settings.Tools.MusicSymbol == "*";
                if (SubtitleListview1.SelectedItems.Count == 1)
                {
                    toolStripMenuItemMergeLines.Visible = false;
                    visualSyncSelectedLinesToolStripMenuItem.Visible = false;
                    toolStripMenuItemUnbreakLines.Visible = false;
                    if (_subtitleOriginal != null && noNetWorkSession && !string.IsNullOrEmpty(Configuration.Settings.Tools.MicrosoftTranslatorApiKey))
                    {
                        toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = true;
                    }

                    toolStripMenuItemMergeDialog.Visible = false;
                }
                else if (SubtitleListview1.SelectedItems.Count == 2)
                {
                    toolStripMenuItemInsertBefore.Visible = false;
                    toolStripMenuItemInsertAfter.Visible = false;
                    toolStripMenuItemInsertSubtitle.Visible = false;
                    mergeAfterToolStripMenuItem.Visible = false;
                    mergeBeforeToolStripMenuItem.Visible = false;
                    splitLineToolStripMenuItem.Visible = false;
                    toolStripMenuItemMergeDialog.Visible = true;
                }
                else if (SubtitleListview1.SelectedItems.Count >= 2)
                {
                    toolStripMenuItemSaveSelectedLines.Visible = true;
                    toolStripMenuItemInsertBefore.Visible = false;
                    toolStripMenuItemInsertAfter.Visible = false;
                    toolStripMenuItemInsertSubtitle.Visible = false;
                    splitLineToolStripMenuItem.Visible = false;
                    mergeAfterToolStripMenuItem.Visible = false;
                    mergeBeforeToolStripMenuItem.Visible = false;
                    toolStripSeparator7.Visible = false;

                    if (SubtitleListview1.SelectedItems.Count > 25)
                    {
                        toolStripMenuItemMergeLines.Visible = false;
                    }
                    else if (SubtitleListview1.SelectedItems.Count > 2)
                    { // only allow merge if text is not way too long
                        try
                        {
                            int totalLength = 0;
                            foreach (int index in SubtitleListview1.SelectedIndices)
                            {
                                totalLength += _subtitle.Paragraphs[index].Text.Length;
                            }

                            if (totalLength > Configuration.Settings.General.SubtitleLineMaximumLength * 2.5)
                            {
                                toolStripMenuItemMergeLines.Visible = false;
                            }
                        }
                        catch
                        {
                        }
                    }

                    toolStripMenuItemMergeDialog.Visible = false;
                }
            }

            try
            {
                toolStripMenuItemPasteSpecial.Visible = Clipboard.ContainsText();
            }
            catch
            {
                toolStripMenuItemPasteSpecial.Visible = false;
            }

            var selectLinesStatistics = new ToolStripMenuItem(LanguageSettings.Current.Main.Menu.File.Statistics);
            UiUtil.FixFonts(selectLinesStatistics);
            selectLinesStatistics.Tag = "(REMOVE)";
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                toolStripMenuItemSelectedLines.DropDownItems.Insert(1, selectLinesStatistics);
            }
            selectLinesStatistics.Click += (senderNew, eNew) =>
            {
                var sub = new Subtitle();
                foreach (var idx in SubtitleListview1.GetSelectedIndices())
                {
                    sub.Paragraphs.Add(new Paragraph(_subtitle.Paragraphs[idx], false));
                }

                using (var form = new Statistics(sub, LanguageSettings.Current.Main.SelectedLines, GetCurrentSubtitleFormat()))
                {
                    form.ShowDialog(this);
                }
            };

            toolStripMenuItemSurroundWithMusicSymbols.Text = Configuration.Settings.Tools.MusicSymbol;
            if (string.IsNullOrEmpty(Configuration.Settings.Tools.MusicSymbol))
            {
                toolStripMenuItemSurroundWithMusicSymbols.Visible = false;
            }

            // final tuning for ASSA
            if (formatType == typeof(AdvancedSubStationAlpha))
            {
                toolStripMenuItemAssaTools.Visible = true;
                toolStripSeparatorAssa.Visible = true;
                toolStripMenuItemAssStyles.Visible = false; // Use toolbar instead
            }
            else
            {
                toolStripMenuItemAssaTools.Visible = false;
                toolStripSeparatorAssa.Visible = false;
            }
        }

        private void ExtractAudioSelectedLines()
        {
            if (!RequireFfmpegOk())
            {
                return;
            }

            var audioClips = GetAudioClips();
            UiUtil.OpenFolder(Path.GetDirectoryName(audioClips[0].AudioFileName));
        }

        private void AudioToTextVoskSelectedLines()
        {
            if (!RequireFfmpegOk())
            {
                return;
            }

            var voskFolder = Path.Combine(Configuration.DataDirectory, "Vosk");
            if (!Directory.Exists(voskFolder))
            {
                Directory.CreateDirectory(voskFolder);
            }

            if (Configuration.IsRunningOnWindows && !HasCurrentVosk(voskFolder))
            {
                if (MessageBox.Show(string.Format(LanguageSettings.Current.Settings.DownloadX, "libvosk"), "Subtitle Edit", MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return;
                }

                using (var form = new DownloadVosk())
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }
                }
            }

            var audioClips = GetAudioClips();

            if (audioClips.Count == 1 && audioClips[0].Paragraph.DurationTotalMilliseconds > 10_000)
            {
                using (var form = new VoskAudioToText(audioClips[0].AudioFileName, _videoAudioTrackNumber, this))
                {
                    var result = form.ShowDialog(this);
                    if (result != DialogResult.OK)
                    {
                        return;
                    }

                    if (form.TranscribedSubtitle.Paragraphs.Count == 0)
                    {
                        MessageBox.Show(LanguageSettings.Current.AudioToText.NoTextFound);
                        return;
                    }

                    _subtitle.Paragraphs.RemoveAll(p => p.Id == audioClips[0].Paragraph.Id);

                    foreach (var p in form.TranscribedSubtitle.Paragraphs)
                    {
                        p.Adjust(1, audioClips[0].Paragraph.StartTime.TotalSeconds);
                        _subtitle.InsertParagraphInCorrectTimeOrder(p);
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    RefreshSelectedParagraph();
                }
            }

            using (var form = new VoskAudioToTextSelectedLines(audioClips, this))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeX, string.Format(LanguageSettings.Current.Main.Menu.Video.VideoAudioToTextX, "Vosk/Kaldi")));
                    SubtitleListview1.BeginUpdate();
                    foreach (var ac in audioClips)
                    {
                        var p = _subtitle.Paragraphs.FirstOrDefault(pa => pa.Id == ac.Paragraph.Id);
                        if (p != null)
                        {
                            p.Text = ac.Paragraph.Text;
                            var idx = _subtitle.Paragraphs.IndexOf(p);
                            SubtitleListview1.SetText(idx, p.Text);
                        }
                    }

                    SubtitleListview1.EndUpdate();
                    RefreshSelectedParagraph();
                }
            }
        }

        private void AudioToTextWhisperSelectedLines()
        {
            if (!RequireFfmpegOk())
            {
                return;
            }

            var useOriginal = Configuration.Settings.General.AllowEditOfOriginalSubtitle &&
                              _subtitleOriginal != null &&
                              SubtitleListview1.IsOriginalTextColumnVisible;
            var audioClips = GetAudioClips();
            if (audioClips.Count == 1 && audioClips[0].Paragraph.DurationTotalMilliseconds > 8_000)
            {
                var s = new Subtitle();
                s.Paragraphs.Add(audioClips[0].Paragraph);

                using (var form = new WhisperAudioToText(audioClips[0].AudioFileName, s, _videoAudioTrackNumber, this, null))
                {
                    var result = form.ShowDialog(this);
                    if (result != DialogResult.OK)
                    {
                        return;
                    }

                    if (form.TranscribedSubtitle.Paragraphs.Count == 0)
                    {
                        MessageBox.Show(LanguageSettings.Current.AudioToText.NoTextFound);
                        return;
                    }

                    if (useOriginal)
                    {
                        var p2 = _subtitle.GetParagraphOrDefaultById(audioClips[0].Paragraph.Id);
                        if (p2 != null)
                        {
                            var original = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.IndexOf(p2), p2, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                _subtitleOriginal.Paragraphs.Remove(original);
                            }
                        }
                    }

                    _subtitle.Paragraphs.RemoveAll(p => p.Id == audioClips[0].Paragraph.Id);

                    foreach (var p in form.TranscribedSubtitle.Paragraphs)
                    {
                        p.Adjust(1, audioClips[0].Paragraph.StartTime.TotalSeconds);
                        if (useOriginal)
                        {
                            _subtitleOriginal.InsertParagraphInCorrectTimeOrder(p);
                            if (_subtitle.Paragraphs.Any(x =>
                                    (p.StartTime.TotalMilliseconds > x.StartTime.TotalMilliseconds && p.StartTime.TotalMilliseconds < x.EndTime.TotalMilliseconds) ||
                                    (p.EndTime.TotalMilliseconds > x.EndTime.TotalMilliseconds && p.EndTime.TotalMilliseconds < x.EndTime.TotalMilliseconds)))
                            {
                                // overlap
                            }
                            else
                            {
                                var p2 = new Paragraph(p);
                                p2.Text = string.Empty;
                                _subtitle.InsertParagraphInCorrectTimeOrder(p2);
                            }
                        }
                        else
                        {
                            _subtitle.InsertParagraphInCorrectTimeOrder(p);
                        }
                    }

                    _subtitle.Renumber();
                    _subtitleOriginal.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    RefreshSelectedParagraph();
                }

                return;
            }

            using (var form = new WhisperAudioToTextSelectedLines(audioClips, this))
            {
                CheckWhisperCpp();
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeX, string.Format(LanguageSettings.Current.Main.Menu.Video.VideoAudioToTextX, "Whisper")));
                    SubtitleListview1.BeginUpdate();
                    foreach (var ac in audioClips)
                    {
                        var p = _subtitle.Paragraphs.FirstOrDefault(pa => pa.Id == ac.Paragraph.Id);
                        if (p != null)
                        {
                            if (useOriginal)
                            {
                                var original = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.IndexOf(p), p, _subtitleOriginal.Paragraphs);
                                if (original != null)
                                {
                                    original.Text = ac.Paragraph.Text;
                                    var idx = _subtitleOriginal.Paragraphs.IndexOf(original);
                                    SubtitleListview1.SetOriginalText(idx, original.Text);
                                }
                            }
                            else
                            {
                                p.Text = ac.Paragraph.Text;
                                var idx = _subtitle.Paragraphs.IndexOf(p);
                                SubtitleListview1.SetText(idx, p.Text);
                            }
                        }
                    }

                    SubtitleListview1.EndUpdate();
                    RefreshSelectedParagraph();
                }
            }
        }

        private List<AudioClipsGet.AudioClip> GetAudioClips()
        {
            var selectedParagraphs = new List<Paragraph>();
            foreach (var index in SubtitleListview1.GetSelectedIndices())
            {
                selectedParagraphs.Add(new Paragraph(_subtitle.Paragraphs[index], false));
            }

            using (var form = new AudioClipsGet(selectedParagraphs, _videoFileName, _videoAudioTrackNumber))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    return form.AudioClips;
                }
            }

            return null;
        }

        private void SetStyle(object sender, EventArgs e)
        {
            string style = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(style))
            {
                MakeHistoryForUndo("Set style: " + style);

                var format = GetCurrentSubtitleFormat();
                var formatType = format.GetType();
                if ((formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText) || formatType == typeof(TimedTextImsc11)))
                {
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        _subtitle.Paragraphs[index].Style = style;
                        _subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(_subtitle.Paragraphs[index]);
                        SubtitleListview1.SetExtraText(index, _subtitle.Paragraphs[index].Extra, SubtitleListview1.ForeColor);
                    }
                }
                else
                {
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        _subtitle.Paragraphs[index].Extra = style;
                        SubtitleListview1.SetExtraText(index, style, SubtitleListview1.ForeColor);
                    }
                }
            }
        }

        private void SetActor(object sender, EventArgs e)
        {
            string actor = (sender as ToolStripItem).Text;
            SetActor(actor);
        }
        private void SetActor(string actor)
        {
            if (!string.IsNullOrEmpty(actor))
            {
                MakeHistoryForUndo(LanguageSettings.Current.Main.Menu.ContextMenu.SetActor + ": " + actor);

                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Actor = actor;
                    SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                }
            }
        }

        private void SetLayer(object sender, EventArgs e)
        {
            string layer = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(layer) && int.TryParse(layer, out int number))
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, $"{_language.Menu.ContextMenu.SetLayer}: {layer}"));
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Layer = number;
                }
            }
        }

        private void SetLayerChooseValue(object sender, EventArgs e)
        {
            var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
            using (var form = new SetLayer(_subtitle, p))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeX, $"{_language.Menu.ContextMenu.SetLayer}: {form.Layer}"));
                    var selectedIndices = new List<int>(SubtitleListview1.GetSelectedIndices());
                    foreach (int index in selectedIndices)
                    {
                        _subtitle.Paragraphs[index].Layer = form.Layer;
                    }

                    numericUpDownLayer.Value = form.Layer;
                }
            }
        }

        private void SetRegion(object sender, EventArgs e)
        {
            string region = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(region))
            {
                MakeHistoryForUndo("Set region: " + region);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Region = region;
                    SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                }
            }
        }

        private void SetLanguage(object sender, EventArgs e)
        {
            string lang = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(lang))
            {
                MakeHistoryForUndo("Set language: " + lang);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Language = lang;
                    _subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(_subtitle.Paragraphs[index]);
                    SubtitleListview1.SetExtraText(index, _subtitle.Paragraphs[index].Extra, SubtitleListview1.ForeColor);
                }
            }
        }

        private void NuendoSetStyle(object sender, EventArgs e)
        {
            string style = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(style))
            {
                int indexOfComment = style.IndexOf('[');
                if (indexOfComment > 0)
                {
                    style = style.Substring(0, indexOfComment).Trim();
                }

                MakeHistoryForUndo("Set style: " + style);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Extra = style;
                    _subtitle.Paragraphs[index].Actor = style;
                    SubtitleListview1.SetExtraText(index, style, SubtitleListview1.ForeColor);
                }
            }
        }

        private void WebVTTSetVoice(object sender, EventArgs e)
        {
            string voice = (sender as ToolStripItem).Text;
            WebVTTSetVoice(voice);
        }

        private void WebVTTSetVoice(string voice)
        {
            if (!string.IsNullOrEmpty(voice))
            {
                MakeHistoryForUndo("Set voice: " + voice);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", _subtitle.Paragraphs[index].Text);
                    _subtitle.Paragraphs[index].Text = string.Format("<v {0}>{1}", voice, _subtitle.Paragraphs[index].Text);
                    SubtitleListview1.SetText(index, _subtitle.Paragraphs[index].Text);
                }

                RefreshSelectedParagraph();
            }
        }

        private void WebVTTSetNewVoice(object sender, EventArgs e)
        {
            using (var form = new TextPrompt(LanguageSettings.Current.WebVttNewVoice.Title, LanguageSettings.Current.WebVttNewVoice.VoiceName, string.Empty))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string voice = form.InputText;
                    if (!string.IsNullOrEmpty(voice))
                    {
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", _subtitle.Paragraphs[index].Text);
                            _subtitle.Paragraphs[index].Text = string.Format("<v {0}>{1}", voice, _subtitle.Paragraphs[index].Text);
                            SubtitleListview1.SetText(index, _subtitle.Paragraphs[index].Text);
                        }

                        RefreshSelectedParagraph();
                    }
                }
            }
        }

        private void SetNewActor(object sender, EventArgs e)
        {
            using (var form = new TextPrompt(LanguageSettings.Current.Main.Menu.ContextMenu.NewActor.Replace("...", string.Empty), LanguageSettings.Current.General.Actor, string.Empty))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string actor = form.InputText;
                    if (!string.IsNullOrEmpty(actor))
                    {
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index].Actor = actor;
                            SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                        }
                    }
                }
            }
        }

        private void WebVTTRemoveVoices(object sender, EventArgs e)
        {
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                _subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", _subtitle.Paragraphs[index].Text);
                SubtitleListview1.SetText(index, _subtitle.Paragraphs[index].Text);
            }

            RefreshSelectedParagraph();
        }

        private void RemoveActors(object sender, EventArgs e)
        {
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                _subtitle.Paragraphs[index].Actor = null;
                SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
            }
        }

        private void WebVTTSetVoiceTextBox(object sender, EventArgs e)
        {
            string voice = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(voice))
            {
                var tb = GetFocusedTextBox();

                if (tb.SelectionLength > 0)
                {
                    string s = tb.SelectedText;
                    s = WebVTT.RemoveTag("v", s);
                    if (tb.SelectedText == tb.Text)
                    {
                        s = string.Format("<v {0}>{1}", voice, s);
                    }
                    else
                    {
                        s = string.Format("<v {0}>{1}</v>", voice, s);
                    }

                    tb.SelectedText = s;
                }
            }
        }

        private void WebVTTSetNewVoiceTextBox(object sender, EventArgs e)
        {
            using (var form = new TextPrompt(LanguageSettings.Current.WebVttNewVoice.Title, LanguageSettings.Current.WebVttNewVoice.VoiceName, string.Empty))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string voice = form.InputText;
                    if (!string.IsNullOrEmpty(voice))
                    {
                        var tb = GetFocusedTextBox();

                        if (tb.SelectionLength > 0)
                        {
                            string s = tb.SelectedText;
                            s = WebVTT.RemoveTag("v", s);
                            if (tb.SelectedText == tb.Text)
                            {
                                s = string.Format("<v {0}>{1}", voice, s);
                            }
                            else
                            {
                                s = string.Format("<v {0}>{1}</v>", voice, s);
                            }

                            tb.SelectedText = s;
                        }
                    }
                }
            }
        }

        private void BoldToolStripMenuItemClick(object sender, EventArgs e)
        {
            ListViewToggleTag(HtmlUtil.TagBold);
        }

        private void ItalicToolStripMenuItemClick(object sender, EventArgs e)
        {
            ListViewToggleTag(HtmlUtil.TagItalic);
        }

        private void UnderlineToolStripMenuItemClick(object sender, EventArgs e)
        {
            ListViewToggleTag(HtmlUtil.TagUnderline);
        }

        private void ListViewToggleTag(string tag)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, tag));

                var indices = new List<int>();
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    indices.Add(item.Index);
                }

                var first = true;
                var toggleOn = true;

                SubtitleListview1.BeginUpdate();
                var isAssa = IsAssa();
                foreach (int i in indices)
                {
                    var p = _subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        if (first)
                        {
                            toggleOn = !HtmlUtil.IsTagOn(p.Text, tag, true, isAssa);
                            first = false;
                        }

                        if (IsOriginalEditable)
                        {
                            var original = Utilities.GetOriginalParagraph(i, p, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                if (toggleOn)
                                {
                                    original.Text = HtmlUtil.TagOn(original.Text, tag, true, isAssa);
                                }
                                else
                                {
                                    original.Text = HtmlUtil.TagOff(original.Text, tag, true, isAssa);
                                }

                                SubtitleListview1.SetOriginalText(i, original.Text);
                            }
                        }

                        if (toggleOn)
                        {
                            p.Text = HtmlUtil.TagOn(p.Text, tag, true, isAssa);
                        }
                        else
                        {
                            p.Text = HtmlUtil.TagOff(p.Text, tag, true, isAssa);
                        }

                        SubtitleListview1.SetText(i, p.Text);
                    }
                }

                SubtitleListview1.EndUpdate();

                ShowStatus(string.Format(_language.TagXAdded, isAssa ? tag : "<" + tag + ">"));
                UpdateSourceView();
                RefreshSelectedParagraph();
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            }
        }

        private void ToolStripMenuItemDeleteClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                string statusText;
                string historyText;
                string askText;

                if (SubtitleListview1.SelectedItems.Count > 1)
                {
                    statusText = string.Format(_language.XLinesDeleted, SubtitleListview1.SelectedItems.Count);
                    historyText = string.Format(_language.BeforeDeletingXLines, SubtitleListview1.SelectedItems.Count);
                    askText = string.Format(_language.DeleteXLinesPrompt, SubtitleListview1.SelectedItems.Count);
                }
                else
                {
                    statusText = _language.OneLineDeleted;
                    historyText = _language.BeforeDeletingOneLine;
                    askText = _language.DeleteOneLinePrompt;
                }

                if (Configuration.Settings.General.PromptDeleteLines && MessageBox.Show(askText, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    _cutText = string.Empty;
                    return;
                }

                if (!string.IsNullOrEmpty(_cutText))
                {
                    ClipboardSetText(_cutText);
                    _cutText = string.Empty;
                }

                MakeHistoryForUndo(historyText);
                DeleteSelectedLines();

                EnableOrDisableEditControls();

                ShowStatus(statusText);
                UpdateSourceView();
            }
        }

        private void EnableOrDisableEditControls()
        {
            if (_subtitle.Paragraphs.Count == 0)
            {
                labelStartTimeWarning.Text = string.Empty;
                _subtitleListViewIndex = -1;
                textBoxListViewText.Text = string.Empty;
                textBoxListViewTextOriginal.Text = string.Empty;
                textBoxListViewText.Enabled = false;
                textBoxListViewText.BackColor = SystemColors.ActiveBorder;
                textBoxListViewTextOriginal.BackColor = SystemColors.ActiveBorder;
                buttonSplitLine.Visible = false;
                labelTextLineLengths.Text = string.Empty;
                labelCharactersPerSecond.Text = string.Empty;
                labelTextLineTotal.Text = string.Empty;
                textBoxListViewText.Enabled = false;
                labelSingleLine.Text = string.Empty;
                labelSingleLinePixels.Text = string.Empty;
                timeUpDownStartTime.TimeCode = new TimeCode();
                numericUpDownDuration.Value = 0;
                ShowHideBookmark(new Paragraph());
                labelOriginalSingleLine.Text = string.Empty;
                labelOriginalSingleLinePixels.Text = string.Empty;
                textBoxListViewTextOriginal.Enabled = false;
                labelOriginalCharactersPerSecond.Text = string.Empty;
                labelTextOriginalLineLengths.Text = string.Empty;
                labelTextOriginalLineTotal.Text = string.Empty;
                numericUpDownDuration.Value = 0;
                timeUpDownStartTime.TimeCode = new TimeCode(0);

                var focused = FindFocusedControl(this);
                if (focused?.Name == MainTextBox)
                {
                    SubtitleListview1.Focus();
                }

                textBoxListViewText.Enabled = false;
                textBoxListViewTextOriginal.Enabled = false;
                timeUpDownStartTime.Enabled = false;
                numericUpDownDuration.Enabled = false;
                buttonPrevious.Enabled = false;
                buttonNext.Enabled = false;
                buttonUnBreak.Enabled = false;
                buttonAutoBreak.Enabled = false;
                numericUpDownLayer.Enabled = false;
                labelLayer.Enabled = false;
                labelText.Enabled = false;
                labelStartTime.Enabled = false;
                labelDuration.Enabled = false;

                textBoxListViewText.ContextMenuStrip = null;

            }
            else if (!numericUpDownDuration.Enabled)
            {
                textBoxListViewText.BackColor = SystemColors.WindowFrame;
                textBoxListViewTextOriginal.BackColor = SystemColors.WindowFrame;

                textBoxListViewText.Enabled = true;
                textBoxListViewTextOriginal.Enabled = Configuration.Settings.General.AllowEditOfOriginalSubtitle;
                timeUpDownStartTime.Enabled = true;
                numericUpDownDuration.Enabled = true;
                buttonPrevious.Enabled = true;
                buttonNext.Enabled = true;
                buttonUnBreak.Enabled = true;
                buttonAutoBreak.Enabled = true;
                numericUpDownLayer.Enabled = true;
                labelLayer.Enabled = true;
                labelText.Enabled = true;
                labelStartTime.Enabled = true;
                labelDuration.Enabled = true;
                textBoxListViewText.ContextMenuStrip = contextMenuStripTextBoxListView;
            }
        }

        public static Control FindFocusedControl(Control control)
        {
            var container = control as IContainerControl;
            while (container != null)
            {
                control = container.ActiveControl;
                container = control as IContainerControl;
            }

            return control;
        }

        private void DeleteSelectedLines()
        {
            _subtitleListViewIndex = -1;
            textBoxListViewText.Text = string.Empty;
            textBoxListViewTextOriginal.Text = string.Empty;
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                var originalIndices = new List<int>();
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    var p = _subtitle.GetParagraphOrDefault(item.Index);
                    if (p != null)
                    {
                        var original = Utilities.GetOriginalParagraph(item.Index, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            originalIndices.Add(_subtitleOriginal.GetIndex(original));
                        }
                    }
                }

                originalIndices.Reverse();
                foreach (int i in originalIndices)
                {
                    if (i < _subtitleOriginal.Paragraphs.Count)
                    {
                        _subtitleOriginal.Paragraphs.RemoveAt(i);
                    }
                }

                _subtitleOriginal.Renumber();
            }

            var indices = new List<int>();
            foreach (ListViewItem item in SubtitleListview1.SelectedItems)
            {
                indices.Add(item.Index);
            }

            int firstIndex = SubtitleListview1.SelectedItems[0].Index;

            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(indices, 0, null);
            }
            else
            {
                indices.Reverse();
                foreach (int i in indices)
                {
                    _subtitle.Paragraphs.RemoveAt(i);
                }

                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                if (SubtitleListview1.FirstVisibleIndex == 0)
                {
                    SubtitleListview1.FirstVisibleIndex = -1;
                }

                if (SubtitleListview1.Items.Count > firstIndex)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                }
                else if (SubtitleListview1.Items.Count > 0)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(SubtitleListview1.Items.Count - 1, true);
                }
            }

            EnableOrDisableEditControls();
            SetListViewStateImages();
        }

        private void ToolStripMenuItemInsertBeforeClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0)
            {
                InsertBefore();
            }

            textBoxListViewText.Focus();
        }

        private void InsertBefore()
        {
            MakeHistoryForUndo(_language.BeforeInsertLine);

            int firstSelectedIndex = 0;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            }

            int addMilliseconds = MinGapBetweenLines + 1;
            if (addMilliseconds < 1)
            {
                addMilliseconds = 1;
            }

            var newParagraph = new Paragraph();

            SetStyleForNewParagraph(newParagraph, firstSelectedIndex);

            var prev = _subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
            var next = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            if (prev != null && next != null)
            {
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - addMilliseconds;
                newParagraph.StartTime.TotalMilliseconds = newParagraph.EndTime.TotalMilliseconds - 2000;
                if (newParagraph.StartTime.TotalMilliseconds <= prev.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + 1;
                }

                if (newParagraph.DurationTotalMilliseconds < 100)
                {
                    newParagraph.EndTime.TotalMilliseconds += 100;
                }

                if (next.StartTime.IsMaxTime && prev.EndTime.IsMaxTime)
                {
                    newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                }
                else if (next.StartTime.TotalMilliseconds == 0 && prev.EndTime.TotalMilliseconds == 0)
                {
                    newParagraph.StartTime.TotalMilliseconds = 0;
                    newParagraph.EndTime.TotalMilliseconds = 0;
                }
                else if (prev.StartTime.TotalMilliseconds == next.StartTime.TotalMilliseconds &&
                         prev.EndTime.TotalMilliseconds == next.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.StartTime.TotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                }
            }
            else if (prev != null)
            {
                newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + addMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs;
                if (newParagraph.StartTime.TotalMilliseconds > newParagraph.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + 1;
                }
            }
            else if (next != null)
            {
                newParagraph.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - (2000 + MinGapBetweenLines);
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - MinGapBetweenLines;

                if (next.StartTime.IsMaxTime)
                {
                    newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                }
                else if (next.StartTime.TotalMilliseconds == 0 && next.EndTime.TotalMilliseconds == 0)
                {
                    newParagraph.StartTime.TotalMilliseconds = 0;
                    newParagraph.EndTime.TotalMilliseconds = 0;
                }
            }
            else
            {
                newParagraph.StartTime.TotalMilliseconds = 1000;
                newParagraph.EndTime.TotalMilliseconds = 3000;
                if (newParagraph.DurationTotalMilliseconds < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                {
                    newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds +
                                                             Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds;
                }
            }

            if (newParagraph.Duration.TotalMilliseconds < 100)
            {
                newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds;
            }

            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), firstSelectedIndex, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(firstSelectedIndex, newParagraph);
                _subtitleListViewIndex = -1;
                _subtitle.Renumber();

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible)
                {
                    var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex, _subtitle.Paragraphs[firstSelectedIndex], _subtitleOriginal.Paragraphs);
                    if (currentOriginal != null)
                    {
                        _subtitleOriginal.Paragraphs.Insert(_subtitleOriginal.Paragraphs.IndexOf(currentOriginal), new Paragraph(newParagraph));
                    }
                    else
                    {
                        _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                    }

                    _subtitleOriginal.Renumber();
                }

                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            UpdateSourceView();
            ShowStatus(_language.LineInserted);
        }

        private void ToolStripMenuItemInsertAfterClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0)
            {
                InsertAfter(string.Empty, true);
                textBoxListViewText.Focus();
            }
        }

        private void InsertAfter(string text, bool goToNewLine)
        {
            MakeHistoryForUndo(_language.BeforeInsertLine);

            int firstSelectedIndex = 0;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index + 1;
            }

            var newParagraph = new Paragraph { Text = text };

            SetStyleForNewParagraph(newParagraph, firstSelectedIndex);

            var prev = _subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
            var next = _subtitle.GetParagraphOrDefault(firstSelectedIndex);

            var addMilliseconds = MinGapBetweenLines;
            if (addMilliseconds < 1)
            {
                addMilliseconds = 0;
            }

            if (prev != null)
            {
                newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + addMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs;
                if (next != null && newParagraph.EndTime.TotalMilliseconds > next.StartTime.TotalMilliseconds)
                {
                    newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - MinGapBetweenLines;
                }

                if (newParagraph.StartTime.TotalMilliseconds > newParagraph.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + addMilliseconds;
                }

                if (next != null && next.StartTime.IsMaxTime && prev.EndTime.IsMaxTime)
                {
                    newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                }
                else if (next != null && next.StartTime.TotalMilliseconds == 0 && prev.EndTime.TotalMilliseconds == 0)
                {
                    newParagraph.StartTime.TotalMilliseconds = 0;
                    newParagraph.EndTime.TotalMilliseconds = 0;
                }
                else if (next == null && prev.EndTime.IsMaxTime)
                {
                    newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                }
                else if (next == null && prev.EndTime.TotalMilliseconds == 0)
                {
                    newParagraph.StartTime.TotalMilliseconds = 0;
                    newParagraph.EndTime.TotalMilliseconds = 0;
                }
                else if (next != null &&
                         prev.StartTime.TotalMilliseconds == next.StartTime.TotalMilliseconds &&
                         prev.EndTime.TotalMilliseconds == next.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.StartTime.TotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                }
            }
            else if (next != null)
            {
                newParagraph.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 2000;
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - addMilliseconds;
            }
            else
            {
                newParagraph.StartTime.TotalMilliseconds = 1000;
                newParagraph.EndTime.TotalMilliseconds = 3000;
                if (newParagraph.DurationTotalMilliseconds < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                {
                    newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds +
                                                             Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds;
                }
            }

            if (newParagraph.Duration.TotalMilliseconds < 100)
            {
                newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds;
            }

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex - 1, _subtitle.Paragraphs[firstSelectedIndex - 1], _subtitleOriginal.Paragraphs);
                if (currentOriginal != null)
                {
                    _subtitleOriginal.Paragraphs.Insert(_subtitleOriginal.Paragraphs.IndexOf(currentOriginal) + 1, new Paragraph(newParagraph));
                }
                else
                {
                    _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                }

                _subtitleOriginal.Renumber();
            }

            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), firstSelectedIndex, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(firstSelectedIndex, newParagraph);
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            }

            if (goToNewLine)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
                UpdateSourceView();
                ShowStatus(_language.LineInserted);
            }
        }

        private void SetStyleForNewParagraph(Paragraph newParagraph, int nearestIndex)
        {
            var format = GetCurrentSubtitleFormat();
            bool useExtraForStyle = format.HasStyleSupport;
            var formatType = format.GetType();
            var styles = new List<string>();
            if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
            {
                styles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
            }
            else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText) || formatType == typeof(TimedTextImsc11))
            {
                styles = TimedText10.GetStylesFromHeader(_subtitle.Header);
            }
            else if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
            {
                styles = Sami.GetStylesFromHeader(_subtitle.Header);
            }

            string style = "Default";
            if (styles.Count > 0)
            {
                style = styles[0];
            }

            if (useExtraForStyle)
            {
                newParagraph.Extra = style;
                if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText) || formatType == typeof(TimedTextImsc11))
                {
                    if (styles.Count > 0)
                    {
                        newParagraph.Style = style;
                    }

                    var c = _subtitle.GetParagraphOrDefault(nearestIndex);
                    if (c != null)
                    {
                        newParagraph.Style = c.Style;
                        newParagraph.Region = c.Region;
                        newParagraph.Language = c.Language;
                    }

                    newParagraph.Extra = TimedText10.SetExtra(newParagraph);
                }
                else if (format.GetType() == typeof(AdvancedSubStationAlpha))
                {
                    var c = _subtitle.GetParagraphOrDefault(nearestIndex);
                    if (c != null)
                    {
                        newParagraph.Extra = c.Extra;
                    }
                }
            }
        }

        private void SubtitleListView1SelectedIndexChange()
        {
            StopAutoDuration();

            if (_listViewMouseDown)
            {
                return;
            }

            ShowLineInformationListView();
            if (_subtitle?.Paragraphs.Count > 0)
            {
                int firstSelectedIndex = 0;
                if (SubtitleListview1.SelectedIndices.Count > 0)
                {
                    firstSelectedIndex = SubtitleListview1.SelectedIndices[0];
                }

                if (_subtitleListViewIndex >= 0)
                {
                    if (_subtitleListViewIndex == firstSelectedIndex)
                    {
                        return;
                    }

                    bool showSource = false;

                    var last = _subtitle?.GetParagraphOrDefault(_subtitleListViewIndex);
                    if (last != null && textBoxListViewText.Text != last.Text)
                    {
                        last.Text = textBoxListViewText.Text.TrimEnd();
                        SubtitleListview1.SetText(_subtitleListViewIndex, last.Text);
                        showSource = true;
                    }

                    var startTime = timeUpDownStartTime.TimeCode;
                    if (startTime != null && last != null && _subtitle != null &&
                        Math.Abs(last.StartTime.TotalMilliseconds - startTime.TotalMilliseconds) > 0.5)
                    {
                        var dur = last.DurationTotalMilliseconds;
                        last.StartTime.TotalMilliseconds = startTime.TotalMilliseconds;
                        last.EndTime.TotalMilliseconds = startTime.TotalMilliseconds + dur;
                        SubtitleListview1.SetStartTimeAndDuration(_subtitleListViewIndex, last, _subtitle.GetParagraphOrDefault(_subtitleListViewIndex + 1), _subtitle.GetParagraphOrDefault(_subtitleListViewIndex - 1));
                        showSource = true;
                    }

                    var duration = GetDurationInMilliseconds();
                    if (last != null && duration > 0 && duration < 100000 && Math.Abs(duration - last.DurationTotalMilliseconds) > 0.5 && _subtitle != null)
                    {
                        last.EndTime.TotalMilliseconds = last.StartTime.TotalMilliseconds + duration;
                        SubtitleListview1.SetDuration(_subtitleListViewIndex, last, _subtitle.GetParagraphOrDefault(_subtitleListViewIndex + 1));
                        showSource = true;
                    }

                    if (showSource)
                    {
                        UpdateSourceView();
                    }
                }

                var p = _subtitle?.GetParagraphOrDefault(firstSelectedIndex);
                if (p != null)
                {
                    if (IsLiveSpellCheckEnabled)
                    {
                        textBoxListViewText.CurrentLineIndex = firstSelectedIndex;
                        textBoxListViewText.IsSpellCheckRequested = true;
                    }

                    InitializeListViewEditBox(p);
                    _subtitleListViewIndex = firstSelectedIndex;
                    _oldSelectedParagraph = new Paragraph(p);
                    UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, p, textBoxListViewText);
                    FixVerticalScrollBars(textBoxListViewText);

                    if (_isOriginalActive)
                    {
                        InitializeListViewEditBoxOriginal(p, firstSelectedIndex);
                        labelOriginalCharactersPerSecond.Left = textBoxListViewTextOriginal.Left + (textBoxListViewTextOriginal.Width - labelOriginalCharactersPerSecond.Width);
                        labelTextOriginalLineTotal.Left = textBoxListViewTextOriginal.Left + (textBoxListViewTextOriginal.Width - labelTextOriginalLineTotal.Width);
                    }
                }
            }
        }

        private void SubtitleListview1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_playSelectionIndexLoopStart >= 0)
            {
                ResetPlaySelection();
            }

            if (SubtitleListview1.SelectedIndices.Count == 0)
            {
                _listViewTextUndoIndex = -1;
                return;
            }

            if (!_makeHistoryPaused)
            {
                _listViewTextTicks = 0;
                _listViewOriginalTextTicks = 0;
                TimerTextUndoTick(null, null);
                TimerOriginalTextUndoTick(null, null);
            }

            _listViewTextUndoIndex = -1;
            SubtitleListView1SelectedIndexChange();
            if (_findHelper != null && !_findHelper.InProgress)
            {
                _findHelper.StartLineIndex = _subtitleListViewIndex;
                _findHelper.StartFindText = _findHelper.FindText;
                _findHelper.SelectedLineIndex = _subtitleListViewIndex;
                _findHelper.SelectedPosition = 0;
                _findHelper.ReplaceFromPosition = 0;
                _findHelper.MatchInOriginal = false;
            }
        }

        private void ShowLineInformationListView()
        {
            if (InListView)
            {
                _updateSelectedCountStatusBar = true;
            }
        }

        private void UpdateListViewTextCharactersPerSeconds(Label charsPerSecond, Paragraph paragraph)
        {
            if (paragraph.DurationTotalSeconds > 0)
            {
                double charactersPerSecond = Utilities.GetCharactersPerSecond(paragraph);
                if (charactersPerSecond > Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds &&
                    Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall)
                {
                    charsPerSecond.ForeColor = Color.Red;
                }
                else
                {
                    charsPerSecond.ForeColor = UiUtil.ForeColor;
                }

                charsPerSecond.Text = string.Format(_language.CharactersPerSecond, charactersPerSecond);
            }
            else
            {
                if (Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall)
                {
                    charsPerSecond.ForeColor = UiUtil.ForeColor;
                }
                else
                {
                    charsPerSecond.ForeColor = Color.Red;
                }

                charsPerSecond.Text = string.Format(_language.CharactersPerSecond, _languageGeneral.NotAvailable);
            }
        }

        private void UpdateListViewTextInfo(Label lineLengths, Label singleLine, Label singleLinePixels, Label lineTotal, Label charactersPerSecond, Paragraph paragraph, SETextBox textBox)
        {
            if (paragraph == null)
            {
                return;
            }

            bool textBoxHasFocus = textBox.Focused;
            string text = paragraph.Text;
            lineLengths.Text = _languageGeneral.SingleLineLengths.Trim();
            singleLine.Left = lineLengths.Left + lineLengths.Width - 3;
            singleLinePixels.Left = lineLengths.Left + lineLengths.Width + 50;
            text = HtmlUtil.RemoveHtmlTags(text, true);
            text = NetflixImsc11Japanese.RemoveTags(text);
            UiUtil.GetLineLengths(singleLine, text);

            if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
            {
                UiUtil.GetLinePixelWidths(singleLinePixels, text);
                labelSingleLinePixels.Visible = !(textBoxListViewText.Width / 3 < labelTextLineLengths.Width);
            }
            else
            {
                labelSingleLinePixels.Visible = false;
            }

            buttonSplitLine.Visible = false;

            var s = text.Replace(Environment.NewLine, " ");
            var len = text.CountCharacters(false);

            int numberOfLines = Utilities.GetNumberOfLines(text.Trim());
            int maxLines = int.MaxValue;
            if (Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines)
            {
                maxLines = Configuration.Settings.General.MaxNumberOfLines;
            }

            var splitLines = text.SplitToLines();
            if (numberOfLines <= maxLines)
            {
                if (len <= Configuration.Settings.General.SubtitleLineMaximumLength * Math.Max(numberOfLines, 2) &&
                    splitLines.Count == 2 && splitLines[0].StartsWith('-') && splitLines[1].StartsWith('-') &&
                    (splitLines[0].CountCharacters(false) > Configuration.Settings.General.SubtitleLineMaximumLength ||
                     splitLines[1].CountCharacters(false) > Configuration.Settings.General.SubtitleLineMaximumLength))
                {
                    if (buttonUnBreak.Visible)
                    {
                        if (!textBoxHasFocus)
                        {
                            if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                            {
                                var totalLengthPixels = TextWidth.CalcPixelWidth(text.RemoveChar('\r', '\n'));
                                lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", len, totalLengthPixels));
                            }
                            else
                            {
                                lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, len);
                            }
                        }

                        buttonSplitLine.Visible = true;
                    }
                }
                else if (len <= Configuration.Settings.General.SubtitleLineMaximumLength * Math.Max(numberOfLines, 2))
                {
                    lineTotal.ForeColor = UiUtil.ForeColor;
                    if (!textBoxHasFocus)
                    {
                        if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                        {
                            var totalLengthPixels = TextWidth.CalcPixelWidth(text.RemoveChar('\r', '\n'));
                            lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", len, totalLengthPixels));
                        }
                        else
                        {
                            lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, len);
                        }
                    }
                }
                else
                {
                    lineTotal.ForeColor = Color.Red;
                    if (!textBoxHasFocus)
                    {
                        if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                        {
                            var totalLengthPixels = TextWidth.CalcPixelWidth(text.RemoveChar('\r', '\n'));
                            lineTotal.Text = string.Format(_languageGeneral.TotalLengthXSplitLine, string.Format("{0}     {1}", len, totalLengthPixels));
                        }
                        else
                        {
                            lineTotal.Text = string.Format(_languageGeneral.TotalLengthXSplitLine, len);
                        }
                    }

                    if (buttonUnBreak.Visible)
                    {
                        if (!textBoxHasFocus)
                        {
                            if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                            {
                                var totalLengthPixels = TextWidth.CalcPixelWidth(text.RemoveChar('\r', '\n'));
                                lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", len, totalLengthPixels));
                            }
                            else
                            {
                                lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, len);
                            }
                        }

                        var lang = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle, 50);
                        var abl = Utilities.AutoBreakLine(s, lang).SplitToLines();
                        if (abl.Count > maxLines || abl.Any(li => li.CountCharacters(false) > Configuration.Settings.General.SubtitleLineMaximumLength))
                        {
                            buttonSplitLine.Visible = buttonAutoBreak.Visible;
                        }
                    }
                }
            }
            else
            {
                if (!textBoxHasFocus)
                {
                    if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                    {
                        var totalLengthPixels = TextWidth.CalcPixelWidth(text.RemoveChar('\r', '\n'));
                        lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", len, totalLengthPixels));
                    }
                    else
                    {
                        lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, len);
                    }
                }

                var lang = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle, 50);
                var abl = Utilities.AutoBreakLine(s, lang).SplitToLines();
                if (abl.Count > maxLines || abl.Any(li => li.CountCharacters(false) > Configuration.Settings.General.SubtitleLineMaximumLength) &&
                    !textBoxListViewTextOriginal.Visible)
                {
                    buttonSplitLine.Visible = buttonAutoBreak.Visible;
                }
            }

            UpdateListViewTextCharactersPerSeconds(charactersPerSecond, paragraph);
            charactersPerSecond.Left = textBox.Left + (textBox.Width - labelCharactersPerSecond.Width);
            lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
        }

        private void ButtonNextClick(object sender, EventArgs e)
        {
            MoveNextPrevious(0);
        }

        private void ButtonPreviousClick(object sender, EventArgs e)
        {
            MoveNextPrevious(1);
        }

        private void MoveNextPrevious(int firstSelectedIndex)
        {
            if (_subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            var temp = firstSelectedIndex;
            if (SubtitleListview1.SelectedIndices.Count > 0)
            {
                firstSelectedIndex = SubtitleListview1.SelectedIndices[0];
            }

            firstSelectedIndex = temp == 0 ? firstSelectedIndex + 1 : firstSelectedIndex - 1;
            var p = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            if (p != null)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            }

            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private void FixVerticalScrollBars(SETextBox tb)
        {
            if (!Configuration.Settings.General.SubtitleTextBoxAutoVerticalScrollBars || !tb.Visible)
            {
                return;
            }

            var noOfNewLines = Utilities.GetNumberOfLines(tb.Text.TrimEnd());
            try
            {
                if (noOfNewLines <= 2 && tb.Text.Length <= 70 && tb.TextBoxFont.Size < 15 && tb.Width > 300)
                {
                    tb.ScrollBars = RichTextBoxScrollBars.None;
                }
                else if (noOfNewLines > 20 || tb.Text.Length > 999)
                {
                    tb.ScrollBars = RichTextBoxScrollBars.Vertical;
                }
                else
                {
                    var calculatedHeight = TextRenderer.MeasureText(
                        tb.Text,
                        tb.TextBoxFont,
                        new Size(tb.Width, 1000),
                        TextFormatFlags.WordBreak | TextFormatFlags.TextBoxControl).Height;
                    BeginInvoke(new Action(() =>
                    {
                        tb.ScrollBars = calculatedHeight > tb.Height ? RichTextBoxScrollBars.Vertical : RichTextBoxScrollBars.None;
                    }));
                }
            }
            catch
            {
                // ignored
            }
        }

        private void TextBoxListViewTextTextChanged(object sender, EventArgs e)
        {
            var idx = _subtitleListViewIndex;
            var p = _subtitle.GetParagraphOrDefault(idx);
            if (p == null)
            {
                return;
            }

            // Writing when text is selected gives a double event + some trouble (typed letter disappears or a crash happens).
            // This tries to fix this - changing scrollbars is bad during this double event!?
            // Also check https://stackoverflow.com/questions/28331672/c-sharp-textchanged-event-fires-twice-in-a-multiline-textbox
            if (textBoxListViewText.Text.Length == 0)
            {
                p.Text = string.Empty;
                UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[idx], textBoxListViewText);
                SubtitleListview1.SetText(idx, string.Empty);
                _listViewTextUndoIndex = idx;
                labelStatus.Text = string.Empty;
                StartUpdateListSyntaxColoring();
                return;
            }

            textBoxListViewText.TextChanged -= TextBoxListViewTextTextChanged;
            if (_doAutoBreakOnTextChanged)
            {
                UiUtil.CheckAutoWrap(textBoxListViewText, new KeyEventArgs(Keys.None), Utilities.GetNumberOfLines(textBoxListViewText.Text));
            }

            // update _subtitle + listview
            string text = textBoxListViewText.Text.TrimEnd();
            if (text.ContainsNonStandardNewLines())
            {
                var lines = text.SplitToLines();
                text = string.Join(Environment.NewLine, lines);
                textBoxListViewText.Text = text;
            }

            if (p != _subtitle.GetParagraphOrDefault(idx))
            {
                textBoxListViewText.TextChanged += TextBoxListViewTextTextChanged;
                return;
            }

            p.Text = text;
            labelStatus.Text = string.Empty;
            UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[idx], textBoxListViewText);
            SubtitleListview1.SetText(idx, text);

            _listViewTextUndoIndex = _subtitleListViewIndex;

            StartUpdateListSyntaxColoring();
            FixVerticalScrollBars(textBoxListViewText);
            textBoxListViewText.TextChanged += TextBoxListViewTextTextChanged;
        }

        private void TextBoxListViewTextOriginalTextChanged(object sender, EventArgs e)
        {
            if (_subtitleListViewIndex >= 0)
            {
                var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                if (p == null)
                {
                    return;
                }

                var original = Utilities.GetOriginalParagraph(_subtitleListViewIndex, p, _subtitleOriginal.Paragraphs);
                if (original != null)
                {
                    if (textBoxListViewTextOriginal.Text.Length == 0)
                    {
                        UpdateListViewTextInfo(labelTextOriginalLineLengths, labelOriginalSingleLine, labelOriginalSingleLinePixels, labelTextOriginalLineTotal, labelOriginalCharactersPerSecond, original, textBoxListViewTextOriginal);
                        SubtitleListview1.SetOriginalText(_subtitleListViewIndex, string.Empty);
                        _listViewTextUndoIndex = _subtitleListViewIndex;
                        labelStatus.Text = string.Empty;
                        StartUpdateListSyntaxColoring();
                        return;
                    }

                    int numberOfNewLines = Utilities.GetNumberOfLines(textBoxListViewTextOriginal.Text);
                    UiUtil.CheckAutoWrap(textBoxListViewTextOriginal, new KeyEventArgs(Keys.None), numberOfNewLines);

                    // update _subtitle + listview
                    string text = textBoxListViewTextOriginal.Text.TrimEnd();
                    if (text.ContainsNonStandardNewLines())
                    {
                        var lines = text.SplitToLines();
                        text = string.Join(Environment.NewLine, lines);
                        textBoxListViewTextOriginal.Text = text;
                    }

                    original.Text = text;
                    UpdateListViewTextInfo(labelTextOriginalLineLengths, labelOriginalSingleLine, labelOriginalSingleLinePixels, labelTextOriginalLineTotal, labelOriginalCharactersPerSecond, original, textBoxListViewTextOriginal);
                    SubtitleListview1.SetOriginalText(_subtitleListViewIndex, text);
                    _listViewTextUndoIndex = _subtitleListViewIndex;
                }

                labelStatus.Text = string.Empty;

                StartUpdateListSyntaxColoring();
                FixVerticalScrollBars(textBoxListViewTextOriginal);
            }
        }

        private void NumericUpDownLayer_ValueChanged(object sender, EventArgs e)
        {
            var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
            if (p == null)
            {
                return;
            }

            var isAssa = GetCurrentSubtitleFormat().GetType() == typeof(AdvancedSubStationAlpha);
            if (isAssa)
            {
                var layer = (int)numericUpDownLayer.Value;
                MakeHistoryForUndo(string.Format(_language.BeforeX, $"{_language.Menu.ContextMenu.SetLayer}: {layer}"));
                p.Layer = layer;
            }
        }

        public Point GetPositionInForm(Control ctrl)
        {
            Point p = ctrl.Location;
            Control parent = ctrl.Parent;
            while (!(parent is Form))
            {
                p.Offset(parent.Location.X, parent.Location.Y);
                parent = parent.Parent;
            }

            return p;
        }

        private void TextBoxListViewTextKeyDown(object sender, KeyEventArgs e)
        {
            _listViewTextTicks = DateTime.UtcNow.Ticks;

            if (e.Modifiers == Keys.Shift && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == (Keys.LButton | Keys.ShiftKey))
            { // surround ctrl+v action with history (for undo)
                _listViewTextTicks = 0;
                TimerTextUndoTick(sender, e);
                Application.DoEvents();
                Thread.Sleep(50);
                Application.DoEvents();
                _listViewTextTicks = 0;
                TimerTextUndoTick(sender, e);
                return;
            }

            if (_shortcuts.MainTextBoxAssaIntellisense == e.KeyData)
            {
                _intellisenceList = DoIntellisense(textBoxListViewText, _intellisenceList);
                e.SuppressKeyPress = true;
                return;
            }
            else if (_shortcuts.MainTextBoxAssaRemoveTag == e.KeyData)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.MainTextBoxAssaRemoveTag));
                AssaTagHelper.RemoveTagAtCursor(textBoxListViewText);
                e.SuppressKeyPress = true;
                return;
            }

            int numberOfLines = Utilities.GetNumberOfLines(textBoxListViewText.Text);

            if (e.Modifiers == Keys.None && e.KeyCode == Keys.Enter && numberOfLines >= Configuration.Settings.General.MaxNumberOfLines + Configuration.Settings.General.MaxNumberOfLinesPlusAbort)
            {
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxBreakAtCursorPosition)
            {
                AutoBreakAtFirstSpaceFromPos(textBoxListViewText);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxBreakAtCursorPositionAndGoToNext)
            {
                AutoBreakAtFirstSpaceFromPos(textBoxListViewText, true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxRecord)
            {
                e.SuppressKeyPress = true;

                if (_dictateTextBox != null && _dictateForm != null)
                {
                    return; // already recording
                }

                if (!RequireFfmpegOk())
                {
                    return;
                }

                var voskFolder = Path.Combine(Configuration.DataDirectory, "Vosk");
                if (Configuration.IsRunningOnWindows && !HasCurrentVosk(voskFolder))
                {
                    if (MessageBox.Show(string.Format(LanguageSettings.Current.Settings.DownloadX, "libvosk"), "Subtitle Edit", MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }

                    using (var form = new DownloadVosk())
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }
                    }
                }

                if (_subtitle?.GetParagraphOrDefault(_subtitleListViewIndex) == null || !(sender is TextBox || sender is AdvancedTextBox))
                {
                    return;
                }

                if (_dictateForm == null || string.IsNullOrEmpty(Configuration.Settings.Tools.VoskModel))
                {
                    _dictateForm?.Dispose();
                    _dictateForm = new VoskDictate();
                    if (_dictateForm.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }

                    _dictateTextBox = null;
                }
                else
                {
                    pictureBoxRecord.BringToFront();
                    pictureBoxRecord.Visible = true;
                    _dictateTextBox = sender;
                    _dictateForm.Record();
                    ShowStatus("Recording...");
                }
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                textBoxListViewText.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitAtCursor == e.KeyData)
            {
                SplitTextAtCursor(false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitAtCursorAndAutoBr == e.KeyData)
            {
                SplitTextAtCursor(true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitAtCursorAndVideoPos == e.KeyData)
            {
                ToolStripMenuItemSplitViaWaveformClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitSelectedLineBilingual == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1 && SubtitleListview1.SelectedItems.Count < 10)
                {
                    SplitSelectedLineBilingual();
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN1)
            {
                SetAlignment("{\\an1}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN2)
            {
                SetAlignment("", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN3)
            {
                SetAlignment("{\\an3}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN4)
            {
                SetAlignment("{\\an4}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN5)
            {
                SetAlignment("{\\an5}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN6)
            {
                SetAlignment("{\\an6}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN7)
            {
                SetAlignment("{\\an7}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN8)
            {
                SetAlignment("{\\an8}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN9)
            {
                SetAlignment("{\\an9}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor1)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color1), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor2)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color2), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor3)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color3), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor4)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color4), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor5)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color5), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor6)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color6), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor7)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color7), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor8)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color8), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewToggleMusicSymbols)
            {
                SurroundWithTag(Configuration.Settings.Tools.MusicSymbol, Configuration.Settings.Tools.MusicSymbol, selectedTextOnly: true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainInsertBefore)
            {
                InsertBefore();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainInsertAfter)
            {
                InsertAfter(string.Empty, true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewRemoveTimeCodes)
            {
                int i = _subtitleListViewIndex;
                var p = _subtitle.GetParagraphOrDefault(i);
                if (p != null)
                {
                    p.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    p.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    RefreshSelectedParagraph();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSelectionToLower == e.KeyData && textBoxListViewText.SelectionLength > 0) // selection to lowercase
            {
                int start = textBoxListViewText.SelectionStart;
                int length = textBoxListViewText.SelectionLength;
                textBoxListViewText.SelectedText = textBoxListViewText.SelectedText.ToLowerInvariant();
                textBoxListViewText.SelectionStart = start;
                textBoxListViewText.SelectionLength = length;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSelectionToUpper == e.KeyData && textBoxListViewText.SelectionLength > 0) // selection to uppercase
            {
                int start = textBoxListViewText.SelectionStart;
                int length = textBoxListViewText.SelectionLength;
                textBoxListViewText.SelectedText = textBoxListViewText.SelectedText.ToUpperInvariant();
                textBoxListViewText.SelectionStart = start;
                textBoxListViewText.SelectionLength = length;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxToggleAutoDuration == e.KeyData) // toggle auto-duration
            {
                if (timerAutoDuration.Enabled)
                {
                    StopAutoDuration();
                }
                else
                {
                    StartAutoDuration();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralToggleBookmarksAddComment == e.KeyData)
            {
                BeginInvoke(new Action(() => ToggleBookmarks(true, this)));
                e.SuppressKeyPress = true;
            }

            //TODO: add these two to custom shortcuts
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.Home)
            {
                SelectListViewIndexAndEnsureVisible(0);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.End)
            {
                SelectListViewIndexAndEnsureVisible(SubtitleListview1.Items.Count - 1);
                e.SuppressKeyPress = true;
            }

            // last key down in text
            _lastTextKeyDownTicks = DateTime.UtcNow.Ticks;

            UpdatePositionAndTotalLength(labelTextLineTotal, textBoxListViewText);
        }

        private ListBox DoIntellisense(SETextBox tb, ListBox intellisenseListBox)
        {
            if (intellisenseListBox == null)
            {
                intellisenseListBox = new ListBox();
                Controls.Add(intellisenseListBox);
                intellisenseListBox.PreviewKeyDown += (o, args) =>
                {
                    if (args.KeyCode == Keys.Tab && intellisenseListBox.SelectedIndex >= 0)
                    {
                        if (intellisenseListBox.Items[intellisenseListBox.SelectedIndex] is AssaTagHelper.IntellisenseItem item)
                        {
                            MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, item.Value));
                            AssaTagHelper.CompleteItem(tb, item);
                            ShowStatus(string.Format(_language.TagXAdded, item.Value));
                        }

                        intellisenseListBox.Hide();
                        TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(10), () => tb.Focus());
                    }
                };
                intellisenseListBox.KeyDown += (o, args) =>
                {
                    if (args.KeyCode == Keys.Enter && intellisenseListBox.SelectedIndex >= 0)
                    {
                        if (intellisenseListBox.Items[intellisenseListBox.SelectedIndex] is AssaTagHelper.IntellisenseItem item)
                        {
                            MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, item.Value));
                            AssaTagHelper.CompleteItem(tb, item);
                            ShowStatus(string.Format(_language.TagXAdded, item.Value));
                        }

                        args.SuppressKeyPress = true;
                        intellisenseListBox.Hide();
                        tb.Focus();
                    }
                    else if (args.KeyCode == Keys.Escape || _shortcuts.MainTextBoxAssaIntellisense == args.KeyData)
                    {
                        args.SuppressKeyPress = true;
                        intellisenseListBox.Hide();
                        tb.Focus();
                    }
                };
                intellisenseListBox.Click += (o, args) =>
                {
                    int index = intellisenseListBox.IndexFromPoint((args as MouseEventArgs).Location);
                    if (index != ListBox.NoMatches)
                    {
                        if (intellisenseListBox.Items[index] is AssaTagHelper.IntellisenseItem item)
                        {
                            MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, item.Value));
                            AssaTagHelper.CompleteItem(tb, item);
                            ShowStatus(string.Format(_language.TagXAdded, item.Value));
                        }

                        intellisenseListBox.Hide();
                        tb.Focus();
                    }
                };
                intellisenseListBox.KeyPress += (o, args) =>
                {
                    var x = args.KeyChar.ToString();
                    if (!string.IsNullOrEmpty(x) && x != "\r" && x != "\n" && x != "\u001b" && x != " ")
                    {
                        if (x == "{")
                        {
                            x = "{{}";
                        }
                        else if (x == "}")
                        {
                            x = "{}}";
                        }

                        tb.Focus();
                        SendKeys.SendWait(x);
                        args.Handled = true;
                        AssaTagHelper.AutoCompleteTextBox(tb, intellisenseListBox);
                        intellisenseListBox.Focus();
                    }
                };
                intellisenseListBox.LostFocus += (o, args) => intellisenseListBox.Hide();
            }

            if (AssaTagHelper.AutoCompleteTextBox(tb, intellisenseListBox))
            {
                var p = GetPositionInForm(tb);
                intellisenseListBox.Location = new Point(p.X + 10, p.Y + 40); //TODO: improve position
                intellisenseListBox.Show();
                intellisenseListBox.BringToFront();
                intellisenseListBox.Focus();
            }

            return intellisenseListBox;
        }


        private void MoveFirstWordInNextUp(SETextBox tb)
        {
            int firstIndex = FirstSelectedIndex;
            if (firstIndex >= 0)
            {
                var p = _subtitle.GetParagraphOrDefault(firstIndex);
                var next = _subtitle.GetParagraphOrDefault(firstIndex + 1);

                if (tb == textBoxListViewTextOriginal)
                {
                    p = Utilities.GetOriginalParagraph(firstIndex, p, _subtitleOriginal.Paragraphs);
                    next = Utilities.GetOriginalParagraph(firstIndex + 1, next, _subtitleOriginal.Paragraphs);
                }

                if (p != null && next != null)
                {
                    var moveUpDown = new MoveWordUpDown(p.Text, next.Text);
                    moveUpDown.MoveWordUp();
                    if (moveUpDown.S1 != p.Text && moveUpDown.S2 != next.Text)
                    {
                        MakeHistoryForUndo(_language.BeforeLineUpdatedInListView);
                        p.Text = moveUpDown.S1;
                        next.Text = moveUpDown.S2;
                        if (tb == textBoxListViewTextOriginal)
                        {
                            SubtitleListview1.SetOriginalText(firstIndex, p.Text);
                            SubtitleListview1.SetOriginalText(firstIndex + 1, next.Text);
                        }
                        else
                        {
                            SubtitleListview1.SetText(firstIndex, p.Text);
                            SubtitleListview1.SetText(firstIndex + 1, next.Text);
                        }

                        var selectionStart = textBoxListViewText.SelectionStart;
                        tb.Text = p.Text;
                        if (selectionStart >= 0)
                        {
                            tb.SelectionStart = selectionStart;
                        }
                    }
                }
            }
        }

        private void MoveLastWordDown(SETextBox tb)
        {
            int firstIndex = FirstSelectedIndex;
            if (firstIndex >= 0)
            {
                var p = _subtitle.GetParagraphOrDefault(firstIndex);
                var next = _subtitle.GetParagraphOrDefault(firstIndex + 1);

                if (tb == textBoxListViewTextOriginal)
                {
                    p = Utilities.GetOriginalParagraph(firstIndex, p, _subtitleOriginal.Paragraphs);
                    next = Utilities.GetOriginalParagraph(firstIndex + 1, next, _subtitleOriginal.Paragraphs);
                }

                if (p != null && next != null)
                {
                    var moveUpDown = new MoveWordUpDown(p.Text, next.Text);
                    moveUpDown.MoveWordDown();
                    if (moveUpDown.S1 != p.Text && moveUpDown.S2 != next.Text)
                    {
                        MakeHistoryForUndo(_language.BeforeLineUpdatedInListView);
                        p.Text = moveUpDown.S1;
                        next.Text = moveUpDown.S2;
                        if (tb == textBoxListViewTextOriginal)
                        {
                            SubtitleListview1.SetOriginalText(firstIndex, p.Text);
                            SubtitleListview1.SetOriginalText(firstIndex + 1, next.Text);
                        }
                        else
                        {
                            SubtitleListview1.SetText(firstIndex, p.Text);
                            SubtitleListview1.SetText(firstIndex + 1, next.Text);
                        }

                        var selectionStart = textBoxListViewText.SelectionStart;
                        tb.Text = p.Text;
                        if (selectionStart >= 0)
                        {
                            tb.SelectionStart = selectionStart;
                        }
                    }
                }
            }
        }

        private void MakeAutoDurationSelectedLines()
        {
            if (_subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                MakeAutoDuration();
                return;
            }

            if (SubtitleListview1.SelectedItems.Count > 1)
            {
                MakeHistoryForUndo(_language.BeforeAutoDuration);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p == null)
                    {
                        return;
                    }

                    double duration = Utilities.GetOptimalDisplayMilliseconds(textBoxListViewText.Text);
                    var next = _subtitle.GetParagraphOrDefault(index + 1);
                    if (next != null && p.StartTime.TotalMilliseconds + duration + MinGapBetweenLines > next.StartTime.TotalMilliseconds)
                    {
                        duration = next.StartTime.TotalMilliseconds - p.StartTime.TotalMilliseconds - MinGapBetweenLines;
                    }

                    if (duration > 500)
                    {
                        p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
                    }
                }

                SaveSubtitleListviewIndices();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                RestoreSubtitleListviewIndices();
                RefreshSelectedParagraph();
            }
        }

        private void MakeAutoDuration()
        {
            int i = _subtitleListViewIndex;
            var p = _subtitle.GetParagraphOrDefault(i);
            if (p == null)
            {
                return;
            }

            double duration = Utilities.GetOptimalDisplayMilliseconds(textBoxListViewText.Text);
            var next = _subtitle.GetParagraphOrDefault(i + 1);
            if (next != null && p.StartTime.TotalMilliseconds + duration + MinGapBetweenLines > next.StartTime.TotalMilliseconds)
            {
                duration = next.StartTime.TotalMilliseconds - p.StartTime.TotalMilliseconds - MinGapBetweenLines;
                if (duration < 400)
                {
                    return;
                }
            }

            SetDurationInSeconds(duration / TimeCode.BaseUnit);

            p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
            SubtitleListview1.SetDuration(i, p, _subtitle.GetParagraphOrDefault(i + 1));
        }

        private void SplitLineToolStripMenuItemClick(object sender, EventArgs e)
        {
            SplitSelectedParagraph(null, null);
        }

        private void SplitSelectedParagraph(double? splitSeconds, int? textIndex, bool autoBreak = false)
        {
            var maxSingleLineLength = Configuration.Settings.General.SubtitleLineMaximumLength;
            var language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
            int? originalTextIndex = null;
            if (textBoxListViewTextOriginal.Focused)
            {
                originalTextIndex = textIndex;
                textIndex = null;
            }

            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedIndices.Count > 0)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeSplitLine);

                int firstSelectedIndex = SubtitleListview1.SelectedIndices[0];

                var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                var newParagraph = new Paragraph(currentParagraph) { NewSection = false };

                currentParagraph.Text = currentParagraph.Text.Replace("< /i>", "</i>");
                currentParagraph.Text = currentParagraph.Text.Replace("< i>", "<i>");

                string oldText = currentParagraph.Text;
                var lines = currentParagraph.Text.SplitToLines();
                if (textIndex != null)
                {
                    string a = oldText.Substring(0, textIndex.Value).Trim();
                    string b = oldText.Substring(textIndex.Value).Trim();

                    if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) &&
                        Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                    {
                        a += "</i>";
                        b = "<i>" + b;
                    }
                    else if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) &&
                             Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                    {
                        a += "</b>";
                        b = "<b>" + b;
                    }

                    string aTrimmed = HtmlUtil.RemoveHtmlTags(a).TrimEnd('"').TrimEnd().TrimEnd('\'').TrimEnd();
                    if (Configuration.Settings.General.SplitRemovesDashes && (aTrimmed.EndsWith('.') || aTrimmed.EndsWith('!') || aTrimmed.EndsWith('?') || aTrimmed.EndsWith('…') || aTrimmed.EndsWith('؟')))
                    {
                        a = DialogSplitMerge.RemoveStartDash(a);
                        b = DialogSplitMerge.RemoveStartDash(b);
                    }

                    currentParagraph.Text = a.SplitToLines().Any(line => line.Length > maxSingleLineLength) ? Utilities.AutoBreakLine(a, language) : a;
                    newParagraph.Text = b.SplitToLines().Any(line => line.Length > maxSingleLineLength) ? Utilities.AutoBreakLine(b, language) : b;
                }
                else
                {
                    var l0 = string.Empty;
                    if (lines.Count > 0)
                    {
                        l0 = HtmlUtil.RemoveHtmlTags(lines[0], true).Trim().TrimEnd('"', '\'').TrimEnd();
                    }

                    if (lines.Count == 2 && (l0.EndsWith('.') || l0.EndsWith('!') || l0.EndsWith('?') || l0.EndsWith('…') || l0.EndsWith('؟')))
                    {
                        currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                        newParagraph.Text = Utilities.AutoBreakLine(lines[1], language);
                        if (currentParagraph.Text.StartsWith("<i>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</i>") &&
                            newParagraph.Text.EndsWith("</i>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<i>"))
                        {
                            currentParagraph.Text += "</i>";
                            newParagraph.Text = "<i>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<b>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</b>") &&
                            newParagraph.Text.EndsWith("</b>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<b>"))
                        {
                            currentParagraph.Text += "</b>";
                            newParagraph.Text = "<b>" + newParagraph.Text;
                        }

                        if (Configuration.Settings.General.SplitRemovesDashes)
                        {
                            currentParagraph.Text = DialogSplitMerge.RemoveStartDash(currentParagraph.Text);
                            newParagraph.Text = DialogSplitMerge.RemoveStartDash(newParagraph.Text);
                        }
                    }
                    else
                    {
                        string s = currentParagraph.Text;
                        var arr = HtmlUtil.RemoveHtmlTags(s, true).SplitToLines();
                        if (arr.Count == 1 || arr.Count == 2 && (arr[0].Length > Configuration.Settings.General.SubtitleLineMaximumLength || arr[1].Length > Configuration.Settings.General.SubtitleLineMaximumLength))
                        {
                            if (arr.Count == 2 && arr[0].StartsWith('-') && arr[1].StartsWith('-'))
                            {
                                if (lines[0].StartsWith("<i>-", StringComparison.Ordinal))
                                {
                                    lines[0] = "<i>" + lines[0].Remove(0, 4).TrimStart();
                                }

                                lines[0] = lines[0].TrimStart('-').TrimStart();
                                lines[1] = lines[1].TrimStart('-').TrimStart();
                                s = lines[0] + Environment.NewLine + lines[1];
                            }
                            else
                            {
                                s = Utilities.AutoBreakLine(currentParagraph.Text, 5, Configuration.Settings.General.MergeLinesShorterThan, language);
                            }
                        }

                        lines = s.SplitToLines();
                        if (lines.Count == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 20, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 18, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 15, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 2)
                        {
                            if (Utilities.CountTagInText(s, "<i>") == 1 && lines[0].Contains("<i>", StringComparison.Ordinal) && lines[1].Contains("</i>", StringComparison.Ordinal))
                            {
                                lines[0] += "</i>";
                                lines[1] = "<i>" + lines[1];
                            }

                            currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                            newParagraph.Text = Utilities.AutoBreakLine(lines[1], language);
                        }
                        else if (lines.Count == 1)
                        {
                            currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                            newParagraph.Text = string.Empty;
                        }
                        else if (lines.Count == 3)
                        {
                            currentParagraph.Text = Utilities.AutoBreakLine(lines[0] + Environment.NewLine + lines[1], language);
                            newParagraph.Text = lines[2];
                        }
                        else if (lines.Count > 3)
                        {
                            var half = lines.Count / 2;
                            var sb1 = new StringBuilder();
                            for (int i = 0; i < half; i++)
                            {
                                sb1.AppendLine(lines[i]);
                            }

                            currentParagraph.Text = Utilities.AutoBreakLine(sb1.ToString(), language);
                            sb1 = new StringBuilder();
                            for (int i = half; i < lines.Count; i++)
                            {
                                sb1.AppendLine(lines[i]);
                            }

                            newParagraph.Text = Utilities.AutoBreakLine(sb1.ToString(), language);
                        }

                        if (currentParagraph.Text.Contains("<i>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</i>", StringComparison.Ordinal) &&
                            newParagraph.Text.Contains("</i>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<i>", StringComparison.Ordinal))
                        {
                            currentParagraph.Text += "</i>";
                            newParagraph.Text = "<i>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.Contains("<b>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</b>", StringComparison.Ordinal) &&
                            newParagraph.Text.Contains("</b>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<b>"))
                        {
                            currentParagraph.Text += "</b>";
                            newParagraph.Text = "<b>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<i>-", StringComparison.Ordinal) && (currentParagraph.Text.EndsWith(".</i>", StringComparison.Ordinal) || currentParagraph.Text.EndsWith("!</i>", StringComparison.Ordinal)) &&
                            newParagraph.Text.StartsWith("<i>-", StringComparison.Ordinal) && (newParagraph.Text.EndsWith(".</i>", StringComparison.Ordinal) || newParagraph.Text.EndsWith("!</i>", StringComparison.Ordinal)))
                        {
                            currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                            newParagraph.Text = newParagraph.Text.Remove(3, 1);
                        }
                    }
                }

                if (currentParagraph.Text.StartsWith("<i> ", StringComparison.Ordinal))
                {
                    currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                }

                if (newParagraph.Text.StartsWith("<i> ", StringComparison.Ordinal))
                {
                    newParagraph.Text = newParagraph.Text.Remove(3, 1);
                }

                var continuationStyle = Configuration.Settings.General.ContinuationStyle;
                if (continuationStyle != ContinuationStyle.None)
                {
                    if (language == "ar")
                    {
                        currentParagraph.Text = ContinuationUtilities.ConvertToForArabic(currentParagraph.Text);
                        newParagraph.Text = ContinuationUtilities.ConvertToForArabic(newParagraph.Text);
                    }

                    var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                    if (ContinuationUtilities.ShouldAddSuffix(currentParagraph.Text, continuationProfile))
                    {
                        currentParagraph.Text = ContinuationUtilities.AddSuffixIfNeeded(currentParagraph.Text, continuationProfile, false);
                        newParagraph.Text = ContinuationUtilities.AddPrefixIfNeeded(newParagraph.Text, continuationProfile, false);
                    }

                    if (language == "ar")
                    {
                        currentParagraph.Text = ContinuationUtilities.ConvertBackForArabic(currentParagraph.Text);
                        newParagraph.Text = ContinuationUtilities.ConvertBackForArabic(newParagraph.Text);
                    }
                }

                FixSplitItalicTagAndAssa(currentParagraph, newParagraph);
                FixSplitFontTag(currentParagraph, newParagraph);
                FixSplitBoxTag(currentParagraph, newParagraph);
                SetSplitTime(splitSeconds, currentParagraph, newParagraph, oldText);

                if (autoBreak)
                {
                    currentParagraph.Text = Utilities.AutoBreakLine(currentParagraph.Text);
                    newParagraph.Text = Utilities.AutoBreakLine(newParagraph.Text);
                }

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    var originalCurrent = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, _subtitleOriginal.Paragraphs);
                    if (originalCurrent != null)
                    {
                        string languageOriginal = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal);

                        originalCurrent.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        var originalNew = new Paragraph(newParagraph) { NewSection = false };

                        lines = originalCurrent.Text.SplitToLines();

                        var l0Trimmed = string.Empty;
                        if (lines.Count > 0)
                        {
                            l0Trimmed = HtmlUtil.RemoveHtmlTags(lines[0]).TrimEnd('\'').TrimEnd('"');
                        }

                        oldText = originalCurrent.Text;
                        if (originalTextIndex != null)
                        {
                            var firstPart = oldText.Substring(0, originalTextIndex.Value).Trim();
                            var secondPart = oldText.Substring(originalTextIndex.Value).Trim();
                            originalCurrent.Text = firstPart.SplitToLines().Any(line => line.Length > maxSingleLineLength) ? Utilities.AutoBreakLine(firstPart, language) : firstPart;
                            originalNew.Text = secondPart.SplitToLines().Any(line => line.Length > maxSingleLineLength) ? Utilities.AutoBreakLine(secondPart, language) : secondPart;
                            if (originalCurrent.Text.Contains("<i>", StringComparison.Ordinal) && !originalCurrent.Text.Contains("</i>", StringComparison.Ordinal) &&
                                originalNew.Text.Contains("</i>", StringComparison.Ordinal) && !originalNew.Text.Contains("<i>", StringComparison.Ordinal))
                            {
                                if (originalCurrent.Text.StartsWith("<i>-", StringComparison.Ordinal) && (originalCurrent.Text.EndsWith(".", StringComparison.Ordinal) || originalCurrent.Text.EndsWith("?", StringComparison.Ordinal) ||
                                                                                                          originalCurrent.Text.EndsWith("!", StringComparison.Ordinal) || originalCurrent.Text.EndsWith("؟", StringComparison.Ordinal)) && originalNew.Text.StartsWith("-", StringComparison.Ordinal))
                                {
                                    originalCurrent.Text = "<i>" + originalCurrent.Text.Remove(0, 4).Trim();
                                    originalNew.Text = originalNew.Text.TrimStart('-').Trim();
                                }

                                originalCurrent.Text += "</i>";
                                originalNew.Text = "<i>" + originalNew.Text;
                            }

                            if (originalCurrent.Text.Contains("<b>", StringComparison.Ordinal) && !originalCurrent.Text.Contains("</b>") &&
                                originalNew.Text.Contains("</b>", StringComparison.Ordinal) && !originalNew.Text.Contains("<b>"))
                            {
                                originalCurrent.Text += "</b>";
                                originalNew.Text = "<b>" + originalNew.Text;
                            }

                            if (Configuration.Settings.General.SplitRemovesDashes && (l0Trimmed.EndsWith('.') || l0Trimmed.EndsWith('!') || l0Trimmed.EndsWith('?') || l0Trimmed.EndsWith('…') || l0Trimmed.EndsWith('؟')))
                            {
                                originalCurrent.Text = DialogSplitMerge.RemoveStartDash(originalCurrent.Text);
                                originalNew.Text = DialogSplitMerge.RemoveStartDash(originalNew.Text);
                            }

                            lines.Clear();
                        }
                        else if (lines.Count == 2 && (l0Trimmed.EndsWith('.') || l0Trimmed.EndsWith('!') || l0Trimmed.EndsWith('?') || l0Trimmed.EndsWith('…') || l0Trimmed.EndsWith('؟')))
                        {
                            string a = lines[0].Trim();
                            string b = lines[1].Trim();
                            if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) &&
                                Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                            {
                                a += "</i>";
                                b = "<i>" + b;
                            }

                            if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) &&
                                Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                            {
                                a += "</b>";
                                b = "<b>" + b;
                            }

                            if (Configuration.Settings.General.SplitRemovesDashes)
                            {
                                a = DialogSplitMerge.RemoveStartDash(a);
                                b = DialogSplitMerge.RemoveStartDash(b);
                            }

                            lines[0] = a;
                            lines[1] = b;
                            originalCurrent.Text = Utilities.AutoBreakLine(a);
                            originalNew.Text = Utilities.AutoBreakLine(b);
                        }
                        else if (Utilities.GetNumberOfLines(originalCurrent.Text) == 2)
                        {
                            lines = originalCurrent.Text.SplitToLines();
                        }
                        else
                        {
                            string s = Utilities.AutoBreakLine(originalCurrent.Text, 5, Configuration.Settings.General.MergeLinesShorterThan, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 20, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 18, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 15, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 2)
                        {
                            string a = lines[0].Trim();
                            string b = lines[1].Trim();
                            if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) &&
                                Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                            {
                                a += "</i>";
                                b = "<i>" + b;
                            }

                            if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) &&
                                Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                            {
                                a += "</b>";
                                b = "<b>" + b;
                            }

                            if (Configuration.Settings.General.SplitRemovesDashes && (l0Trimmed.EndsWith('.') || l0Trimmed.EndsWith('!') || l0Trimmed.EndsWith('?') || l0Trimmed.EndsWith('…') || l0Trimmed.EndsWith('؟')))
                            {
                                a = DialogSplitMerge.RemoveStartDash(a);
                                b = DialogSplitMerge.RemoveStartDash(b);
                            }

                            lines[0] = a;
                            lines[1] = b;

                            originalCurrent.Text = Utilities.AutoBreakLine(lines[0]);
                            originalNew.Text = Utilities.AutoBreakLine(lines[1]);
                        }
                        else if (lines.Count == 1)
                        {
                            originalNew.Text = string.Empty;
                        }

                        if (originalCurrent != null && originalNew != null)
                        {
                            if (originalCurrent.Text.StartsWith("<i> ", StringComparison.Ordinal))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(3, 1);
                            }

                            if (originalNew.Text.StartsWith("<i> ", StringComparison.Ordinal))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(3, 1);
                            }

                            if (continuationStyle != ContinuationStyle.None)
                            {
                                if (languageOriginal == "ar")
                                {
                                    originalCurrent.Text = ContinuationUtilities.ConvertToForArabic(originalCurrent.Text);
                                    originalNew.Text = ContinuationUtilities.ConvertToForArabic(originalNew.Text);
                                }

                                var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                                if (ContinuationUtilities.ShouldAddSuffix(originalCurrent.Text, continuationProfile))
                                {
                                    originalCurrent.Text = ContinuationUtilities.AddSuffixIfNeeded(originalCurrent.Text, continuationProfile, false);
                                    originalNew.Text = ContinuationUtilities.AddPrefixIfNeeded(originalNew.Text, continuationProfile, false);
                                }

                                if (languageOriginal == "ar")
                                {
                                    originalCurrent.Text = ContinuationUtilities.ConvertBackForArabic(originalCurrent.Text);
                                    originalNew.Text = ContinuationUtilities.ConvertBackForArabic(originalNew.Text);
                                }
                            }
                        }

                        _subtitleOriginal.InsertParagraphInCorrectTimeOrder(originalNew);
                        _subtitleOriginal.Renumber();
                        FixSplitItalicTagAndAssa(originalCurrent, originalNew);
                        FixSplitFontTag(originalCurrent, originalNew);
                        FixSplitBoxTag(originalCurrent, originalNew);

                        if (autoBreak)
                        {
                            originalCurrent.Text = Utilities.AutoBreakLine(originalCurrent.Text);
                            originalNew.Text = Utilities.AutoBreakLine(originalNew.Text);
                        }
                    }
                }

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    SetDurationInSeconds(currentParagraph.DurationTotalSeconds);
                    _networkSession.UpdateLine(_subtitle.GetIndex(currentParagraph), currentParagraph);
                    NetworkGetSendUpdates(new List<int>(), firstSelectedIndex + 1, newParagraph);
                }
                else
                {
                    _subtitle.Paragraphs.Insert(firstSelectedIndex + 1, newParagraph);
                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                }

                var index = firstSelectedIndex;
                if (Configuration.Settings.General.SplitBehavior == 0 || !mediaPlayer.IsPaused)
                {
                    index++;
                }

                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                UpdateSourceView();
                ShowStatus(_language.LineSplitted);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();

                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(25), () =>
                {
                    _lastTextKeyDownTicks = -1; // faster refresh
                });
            }
        }

        private void FixSplitItalicTagAndAssa(Paragraph currentParagraph, Paragraph nextParagraph)
        {
            if (currentParagraph == null || nextParagraph == null)
            {
                return;
            }

            var startIdx = currentParagraph.Text.LastIndexOf("<i>", StringComparison.OrdinalIgnoreCase);

            string pre;
            if (startIdx >= 0 &&
                !currentParagraph.Text.Contains("</i>", StringComparison.OrdinalIgnoreCase) &&
                nextParagraph.Text.Contains("</i>", StringComparison.OrdinalIgnoreCase))
            {
                var endIdx = currentParagraph.Text.IndexOf('>', startIdx);
                if (endIdx >= 0)
                {
                    var fontTag = currentParagraph.Text.Substring(startIdx, endIdx - startIdx + 1);
                    pre = string.Empty;
                    if (currentParagraph.Text.StartsWith('{') && currentParagraph.Text.IndexOf('}') > 0)
                    {
                        var i = currentParagraph.Text.IndexOf('}');
                        pre = currentParagraph.Text.Substring(0, i + 1);
                        currentParagraph.Text = currentParagraph.Text.Remove(0, i + 1);
                    }

                    currentParagraph.Text = pre + currentParagraph.Text + "</i>";
                    nextParagraph.Text = pre + fontTag + nextParagraph.Text;
                }
            }
            else if (currentParagraph.Text.StartsWith("{\\", StringComparison.Ordinal))
            {
                var endIdx = currentParagraph.Text.IndexOf('}', 2);
                if (endIdx > 2)
                {
                    pre = currentParagraph.Text.Substring(0, endIdx + 1);
                    nextParagraph.Text = pre + nextParagraph.Text;
                }
            }
            else if (currentParagraph.Text.Contains("{\\i1}", StringComparison.Ordinal) &&
                     !currentParagraph.Text.Contains("{\\i0}", StringComparison.Ordinal) &&
                     nextParagraph.Text.Contains("{\\i0}", StringComparison.Ordinal))
            {
                currentParagraph.Text += "{\\i0}";
                nextParagraph.Text = "{\\i1}" + nextParagraph.Text;
            }
        }

        private void FixSplitBoxTag(Paragraph currentParagraph, Paragraph nextParagraph)
        {
            if (currentParagraph == null || nextParagraph == null)
            {
                return;
            }

            var startIdx = currentParagraph.Text.LastIndexOf("<box>", StringComparison.OrdinalIgnoreCase);

            string pre;
            if (startIdx >= 0 &&
                !currentParagraph.Text.Contains("</box>", StringComparison.OrdinalIgnoreCase) &&
                nextParagraph.Text.Contains("</box>", StringComparison.OrdinalIgnoreCase))
            {
                var endIdx = currentParagraph.Text.IndexOf('>', startIdx);
                if (endIdx >= 0)
                {
                    var fontTag = currentParagraph.Text.Substring(startIdx, endIdx - startIdx + 1);
                    pre = string.Empty;
                    if (currentParagraph.Text.StartsWith('{') && currentParagraph.Text.IndexOf('}') > 0)
                    {
                        var i = currentParagraph.Text.IndexOf('}');
                        pre = currentParagraph.Text.Substring(0, i + 1);
                        currentParagraph.Text = currentParagraph.Text.Remove(0, i + 1);
                    }

                    currentParagraph.Text = pre + currentParagraph.Text + "</box>";
                    nextParagraph.Text = pre + fontTag + nextParagraph.Text;
                }
            }
        }

        private void FixSplitFontTag(Paragraph currentParagraph, Paragraph nextParagraph)
        {
            if (currentParagraph == null || nextParagraph == null)
            {
                return;
            }

            var startIdx = currentParagraph.Text.LastIndexOf("<font ", StringComparison.OrdinalIgnoreCase);
            if (startIdx >= 0 &&
                !currentParagraph.Text.Contains("</font>", StringComparison.OrdinalIgnoreCase) &&
                nextParagraph.Text.Contains("</font>", StringComparison.OrdinalIgnoreCase))
            {
                var endIdx = currentParagraph.Text.IndexOf('>', startIdx);
                if (endIdx >= 0)
                {
                    var fontTag = currentParagraph.Text.Substring(startIdx, endIdx - startIdx + 1);
                    var pre = string.Empty;
                    if (currentParagraph.Text.StartsWith('{') && currentParagraph.Text.IndexOf('}') > 0)
                    {
                        var i = currentParagraph.Text.IndexOf('}');
                        pre = currentParagraph.Text.Substring(0, i + 1);
                        currentParagraph.Text = currentParagraph.Text.Remove(0, i + 1);
                    }

                    currentParagraph.Text = pre + currentParagraph.Text + "</font>";
                    nextParagraph.Text = pre + fontTag + nextParagraph.Text;
                }
            }
        }

        private void SetSplitTime(double? splitSeconds, Paragraph currentParagraph, Paragraph newParagraph, string oldText)
        {
            double middle = currentParagraph.StartTime.TotalMilliseconds + (currentParagraph.DurationTotalMilliseconds / 2);
            if (!string.IsNullOrWhiteSpace(HtmlUtil.RemoveHtmlTags(oldText)))
            {
                var lineOneTextNoHtml = HtmlUtil.RemoveHtmlTags(currentParagraph.Text, true).Replace(Environment.NewLine, string.Empty);
                var lineTwoTextNoHtml = HtmlUtil.RemoveHtmlTags(newParagraph.Text, true).Replace(Environment.NewLine, string.Empty);
                if (Math.Abs(lineOneTextNoHtml.Length - lineTwoTextNoHtml.Length) > 2)
                {
                    // give more time to the paragraph with most text
                    var oldTextNoHtml = HtmlUtil.RemoveHtmlTags(oldText, true).Replace(Environment.NewLine, string.Empty);
                    var startFactor = (double)lineOneTextNoHtml.Length / oldTextNoHtml.Length;
                    if (startFactor < 0.25)
                    {
                        startFactor = 0.25;
                    }

                    if (startFactor > 0.75)
                    {
                        startFactor = 0.75;
                    }

                    middle = currentParagraph.StartTime.TotalMilliseconds + (currentParagraph.DurationTotalMilliseconds * startFactor);
                }
            }

            if (currentParagraph.StartTime.IsMaxTime && currentParagraph.EndTime.IsMaxTime)
            {
                newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
            }
            else if (currentParagraph.DurationTotalMilliseconds <= 1)
            {
                newParagraph.StartTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
            }
            else
            {
                if (splitSeconds.HasValue && splitSeconds.Value > (currentParagraph.StartTime.TotalSeconds + 0.2) && splitSeconds.Value < (currentParagraph.EndTime.TotalSeconds - 0.2))
                {
                    middle = splitSeconds.Value * TimeCode.BaseUnit;
                }

                newParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                currentParagraph.EndTime.TotalMilliseconds = middle;
                newParagraph.StartTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds + 1;
                if (MinGapBetweenLines > 0)
                {
                    if (splitSeconds == null || Configuration.Settings.General.SplitBehavior == 1)
                    {
                        // SE decides split point (not user), so split gap time evenly
                        var halfGap = (int)Math.Round(MinGapBetweenLines / 2.0);
                        currentParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds - halfGap;
                    }
                    else if (Configuration.Settings.General.SplitBehavior == 0)
                    {
                        currentParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds - MinGapBetweenLines;
                    }

                    newParagraph.StartTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds + MinGapBetweenLines;
                }
            }
        }

        private void MergeBeforeToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count >= 1)
            {
                var idx = SubtitleListview1.SelectedItems[0].Index;
                if (idx > 0)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(idx - 1, true);
                    MergeAfterToolStripMenuItemClick(null, null);
                }
            }
        }

        private void MergeSelectedLinesBilingual(int[] selectedIndices)
        {
            if (_subtitle.Paragraphs.Count > 0 && selectedIndices.Length > 1)
            {
                var sb1 = new StringBuilder();
                var sb2 = new StringBuilder();
                var deleteIndices = new List<int>();
                bool first = true;
                int firstIndex = 0;
                double durationMilliseconds = 0;
                int next = 0;
                foreach (var index in selectedIndices)
                {
                    if (first)
                    {
                        firstIndex = index;
                        next = index + 1;
                        first = !first;
                    }
                    else
                    {
                        deleteIndices.Add(index);
                        if (next != index)
                        {
                            return;
                        }

                        next++;
                    }

                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p == null)
                    {
                        return;
                    }

                    var arr = p.Text.Trim().SplitToLines();
                    if (arr.Count > 0)
                    {
                        var mid = arr.Count / 2;
                        for (var i = 0; i < arr.Count; i++)
                        {
                            var l = arr[i];
                            if (i < mid)
                            {
                                sb1.Append(l).Append(' ');
                            }
                            else
                            {
                                sb2.Append(l).Append(' ');
                            }
                        }
                    }

                    durationMilliseconds += p.DurationTotalMilliseconds;
                }

                if (sb1.Length > 150 || sb2.Length > 150)
                {
                    return;
                }

                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeMergeLines);

                var currentParagraph = _subtitle.Paragraphs[firstIndex];
                string text1 = sb1.ToString().Trim();
                string text2 = sb2.ToString().Trim();

                currentParagraph.Text = (text1 + Environment.NewLine + text2).Trim();

                //display time
                currentParagraph.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + durationMilliseconds;

                var nextParagraph = _subtitle.GetParagraphOrDefault(next);
                if (nextParagraph != null && currentParagraph.EndTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && currentParagraph.StartTime.TotalMilliseconds < nextParagraph.StartTime.TotalMilliseconds)
                {
                    currentParagraph.EndTime.TotalMilliseconds = nextParagraph.StartTime.TotalMilliseconds - 1;
                }

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    _networkSession.UpdateLine(firstIndex, currentParagraph);
                    NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    for (var i = deleteIndices.Count - 1; i >= 0; i--)
                    {
                        _subtitle.Paragraphs.RemoveAt(deleteIndices[i]);
                    }

                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                }

                UpdateSourceView();
                ShowStatus(_language.LinesMerged);
                SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }
        }

        private void SplitSelectedLineBilingual()
        {
            var idx = FirstSelectedIndex;
            if (_subtitle.Paragraphs.Count < 1 || idx < 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(idx);
            if (p == null)
            {
                return;
            }

            var tb = textBoxListViewText;
            var lines = tb.Text.Trim().SplitToLines();
            if (lines.Count != 2 || tb.SelectionLength < 3 || lines[0].Length < 2 || lines[1].Length < 2)
            {
                return;
            }

            var start = tb.SelectionStart;
            var end = start + tb.SelectionLength;
            var indexOfNewLine = tb.Text.IndexOf(Environment.NewLine, StringComparison.Ordinal);
            if (end < indexOfNewLine - 2 || start > indexOfNewLine || end - indexOfNewLine - 2 >= lines[1].Length)
            {
                return;
            }

            MakeHistoryForUndo(_language.BeforeSplitLine);
            var oldText = p.Text;
            string text1 = lines[0].Substring(0, start).Trim() + Environment.NewLine + lines[1].Substring(0, end - indexOfNewLine - 2).Trim();
            string text2 = lines[0].Remove(0, start).Trim() + Environment.NewLine + lines[1].Remove(0, end - indexOfNewLine - 2).Trim();
            var newParagraph = new Paragraph(p) { NewSection = false };
            double? splitPos = null;
            if (!string.IsNullOrEmpty(_videoFileName))
            {
                splitPos = mediaPlayer.CurrentPosition;
            }

            SetSplitTime(splitPos, p, newParagraph, oldText);
            _subtitle.InsertParagraphInCorrectTimeOrder(newParagraph);
            _subtitle.Renumber();
            if (Configuration.Settings.General.SplitBehavior > 0)
            {
                _subtitleListViewIndex = -1;
            }

            p.Text = text1;
            newParagraph.Text = text2;
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            SubtitleListview1.SelectIndexAndEnsureVisible(idx, true);
            RefreshSelectedParagraph();
        }

        private void MergeSelectedLines(BreakMode breakMode = BreakMode.Normal)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 1)
            {
                var sb = new StringBuilder();
                var deleteIndices = new List<int>();
                bool first = true;
                int firstIndex = 0;
                double endMilliseconds = 0;
                int next = 0;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    if (first)
                    {
                        firstIndex = index;
                        next = index + 1;
                        first = !first;
                    }
                    else
                    {
                        deleteIndices.Add(index);
                        if (next != index)
                        {
                            return;
                        }

                        next++;
                    }

                    var continuationStyle = Configuration.Settings.General.ContinuationStyle;
                    if (continuationStyle != ContinuationStyle.None)
                    {
                        var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                        if (next < firstIndex + SubtitleListview1.SelectedIndices.Count)
                        {
                            var mergeResult = ContinuationUtilities.MergeHelper(_subtitle.Paragraphs[index].Text, _subtitle.Paragraphs[index + 1].Text, continuationProfile, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                            _subtitle.Paragraphs[index].Text = mergeResult.Item1;
                            _subtitle.Paragraphs[index + 1].Text = mergeResult.Item2;
                        }
                    }

                    var addText = _subtitle.Paragraphs[index].Text;

                    if (firstIndex != index)
                    {
                        addText = RemoveAssStartAlignmentTag(addText);
                    }

                    if (breakMode == BreakMode.UnbreakNoSpace)
                    {
                        sb.Append(addText);
                    }
                    else
                    {
                        sb.AppendLine(addText);
                    }

                    endMilliseconds = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                }

                if (HtmlUtil.RemoveHtmlTags(sb.ToString(), true).Length > 200)
                {
                    return;
                }

                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeMergeLines);

                var currentParagraph = _subtitle.Paragraphs[firstIndex];
                string text = sb.ToString();
                text = HtmlUtil.FixInvalidItalicTags(text);
                text = FixAssaTagsAfterMerge(text);
                text = ChangeAllLinesTagsToSingleTag(text, "i");
                text = ChangeAllLinesTagsToSingleTag(text, "b");
                text = ChangeAllLinesTagsToSingleTag(text, "u");
                if (breakMode == BreakMode.Unbreak)
                {
                    text = Utilities.UnbreakLine(text);
                }
                else if (breakMode == BreakMode.UnbreakNoSpace)
                {
                    text = text.Replace(" " + Environment.NewLine + " ", string.Empty)
                        .Replace(Environment.NewLine + " ", string.Empty)
                        .Replace(" " + Environment.NewLine, string.Empty)
                        .Replace(Environment.NewLine, string.Empty);
                }
                else
                {
                    text = Utilities.AutoBreakLine(text, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                }

                currentParagraph.Text = text;

                //display time
                currentParagraph.EndTime.TotalMilliseconds = endMilliseconds;

                var nextParagraph = _subtitle.GetParagraphOrDefault(next);
                if (nextParagraph != null && currentParagraph.EndTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && currentParagraph.StartTime.TotalMilliseconds < nextParagraph.StartTime.TotalMilliseconds)
                {
                    currentParagraph.EndTime.TotalMilliseconds = nextParagraph.StartTime.TotalMilliseconds - 1;
                }

                // original subtitle
                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(firstIndex, currentParagraph, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        var originalTexts = new StringBuilder();
                        originalTexts.Append(original.Text.TrimEnd());
                        if (breakMode != BreakMode.UnbreakNoSpace)
                        {
                            originalTexts.Append(" ");
                        }

                        for (int i = 0; i < deleteIndices.Count; i++)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], _subtitle.Paragraphs[deleteIndices[i]], _subtitleOriginal.Paragraphs);
                            if (originalNext != null)
                            {
                                if (breakMode == BreakMode.UnbreakNoSpace)
                                {
                                    originalTexts.Append(originalNext.Text.Trim());
                                }
                                else
                                {
                                    originalTexts.Append(originalNext.Text).Append(' ');
                                }
                            }

                        }

                        for (int i = deleteIndices.Count - 1; i >= 0; i--)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], _subtitle.Paragraphs[deleteIndices[i]], _subtitleOriginal.Paragraphs);
                            if (originalNext != null)
                            {
                                _subtitleOriginal.Paragraphs.Remove(originalNext);
                            }
                        }

                        original.Text = originalTexts.ToString().Replace("  ", " ");
                        original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "i");
                        original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "b");
                        original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "u");

                        if (breakMode == BreakMode.Unbreak)
                        {
                            original.Text = Utilities.UnbreakLine(original.Text);
                        }
                        else if (breakMode == BreakMode.UnbreakNoSpace)
                        {
                            original.Text = original.Text.Replace(" " + Environment.NewLine + " ", string.Empty)
                                .Replace(Environment.NewLine + " ", string.Empty)
                                .Replace(" " + Environment.NewLine, string.Empty)
                                .Replace(Environment.NewLine, string.Empty);
                        }
                        else
                        {
                            original.Text = Utilities.AutoBreakLine(original.Text, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal));
                        }

                        original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        _subtitleOriginal.Renumber();
                    }
                }

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    _networkSession.UpdateLine(firstIndex, currentParagraph);
                    NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    for (int i = deleteIndices.Count - 1; i >= 0; i--)
                    {
                        _subtitle.Paragraphs.RemoveAt(deleteIndices[i]);
                    }

                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                }

                UpdateSourceView();
                ShowStatus(_language.LinesMerged);
                SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }
        }

        private void ExtendBeforeToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                ExtendSelectedLinesToPreviousLine();
            }
        }

        private void ExtendAfterToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                ExtendSelectedLinesToNextLine();
            }
        }

        private static string FixAssaTagsAfterMerge(string text)
        {
            return text
                .Replace("{\\i0}{\\i1}", "")
                .Replace("{\\i0} {\\i1}", " ")
                .Replace($"{{\\i0}}{Environment.NewLine}{{\\i1}}", Environment.NewLine);
        }

        private static string ChangeAllLinesTagsToSingleTag(string text, string tag)
        {
            if (!text.Contains("<" + tag + ">"))
            {
                return text;
            }

            foreach (var line in text.SplitToLines())
            {
                if (!line.TrimStart().StartsWith("<" + tag + ">", StringComparison.Ordinal) || !line.TrimEnd().EndsWith("</" + tag + ">", StringComparison.Ordinal))
                {
                    return text;
                }
            }

            return "<" + tag + ">" + HtmlUtil.RemoveOpenCloseTags(text, tag).Trim() + "</" + tag + ">";
        }

        private void MergeAfterToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                if (SubtitleListview1.SelectedItems.Count > 2)
                {
                    MergeSelectedLines();
                    return;
                }

                MergeWithLineAfter(false);
            }
        }

        public enum BreakMode
        {
            AutoBreak,
            Normal,
            Unbreak,
            UnbreakNoSpace
        }

        private void MergeWithLineAfter(bool insertDash, BreakMode breakMode = BreakMode.Normal)
        {
            var dialogHelper = new DialogSplitMerge { DialogStyle = Configuration.Settings.General.DialogStyle };
            int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;

            var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            var nextParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1);

            if (nextParagraph != null && currentParagraph != null)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeMergeLines);

                var continuationStyle = Configuration.Settings.General.ContinuationStyle;
                if (continuationStyle != ContinuationStyle.None && !insertDash)
                {
                    var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                    var mergeResult = ContinuationUtilities.MergeHelper(currentParagraph.Text, nextParagraph.Text, continuationProfile, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                    currentParagraph.Text = mergeResult.Item1;
                    nextParagraph.Text = mergeResult.Item2;
                }

                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, _subtitleOriginal.Paragraphs);
                    var originalNext = Utilities.GetOriginalParagraph(firstSelectedIndex + 1, nextParagraph, _subtitleOriginal.Paragraphs);

                    if (original != null && originalNext != null)
                    {
                        if (continuationStyle != ContinuationStyle.None && !insertDash)
                        {
                            var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                            var mergeResult = ContinuationUtilities.MergeHelper(original.Text, originalNext.Text, continuationProfile, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal));
                            original.Text = mergeResult.Item1;
                            originalNext.Text = mergeResult.Item2;
                        }
                    }

                    if (originalNext != null)
                    {
                        if (original == null)
                        {
                            originalNext.StartTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds;
                            originalNext.EndTime.TotalMilliseconds = nextParagraph.EndTime.TotalMilliseconds;
                        }
                        else
                        {
                            if (insertDash && !string.IsNullOrEmpty(original.Text) && !string.IsNullOrEmpty(originalNext.Text))
                            {
                                string s = Utilities.UnbreakLine(original.Text);
                                original.Text = dialogHelper.InsertStartDash(s, 0);

                                s = Utilities.UnbreakLine(originalNext.Text);
                                original.Text += Environment.NewLine + dialogHelper.InsertStartDash(s, 1);

                                original.Text = original.Text.Replace("</i>" + Environment.NewLine + "<i>", Environment.NewLine).TrimEnd();
                            }
                            else
                            {
                                string old1 = original.Text;
                                string old2 = originalNext.Text;

                                if (breakMode == BreakMode.Unbreak)
                                {
                                    original.Text = old1.Replace(Environment.NewLine, " ");
                                    original.Text += Environment.NewLine + old2.Replace(Environment.NewLine, " ");
                                    original.Text = Utilities.UnbreakLine(original.Text);
                                }
                                else if (breakMode == BreakMode.UnbreakNoSpace)
                                {
                                    original.Text = old1.TrimEnd() + old2.TrimStart();
                                }
                                else
                                {
                                    original.Text = old1.Replace(Environment.NewLine, " ");
                                    original.Text += Environment.NewLine + old2.Replace(Environment.NewLine, " ");

                                    if (old1.Contains(Environment.NewLine) || old2.Contains(Environment.NewLine) ||
                                        old1.Length > Configuration.Settings.General.SubtitleLineMaximumLength || old2.Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                                    {
                                        original.Text = Utilities.AutoBreakLine(original.Text, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal));
                                    }
                                }

                                original.Text = FixAssaTagsAfterMerge(original.Text);
                                original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "i");
                                original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "b");
                                original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "u");
                                original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "box");

                                if (string.IsNullOrWhiteSpace(old1))
                                {
                                    original.Text = original.Text.TrimStart();
                                }

                                if (string.IsNullOrWhiteSpace(old2))
                                {
                                    original.Text = original.Text.TrimEnd();
                                }
                            }

                            original.EndTime = originalNext.EndTime;
                            _subtitleOriginal.Paragraphs.Remove(originalNext);
                        }

                        _subtitleOriginal.Renumber();
                    }
                }

                if (insertDash && !string.IsNullOrEmpty(currentParagraph.Text) && !string.IsNullOrEmpty(nextParagraph.Text))
                {
                    string s = Utilities.UnbreakLine(currentParagraph.Text);
                    currentParagraph.Text = dialogHelper.InsertStartDash(s, 0);

                    s = Utilities.UnbreakLine(RemoveAssStartAlignmentTag(nextParagraph.Text));
                    currentParagraph.Text += Environment.NewLine + dialogHelper.InsertStartDash(s, 1);

                    currentParagraph.Text = currentParagraph.Text.Replace("</i>" + Environment.NewLine + "<i>", Environment.NewLine).TrimEnd();
                }
                else
                {
                    string old1 = currentParagraph.Text;
                    string old2 = nextParagraph.Text;
                    if (breakMode == BreakMode.Unbreak)
                    {
                        currentParagraph.Text = currentParagraph.Text.Replace(Environment.NewLine, " ");
                        currentParagraph.Text += Environment.NewLine + nextParagraph.Text.Replace(Environment.NewLine, " ");
                        currentParagraph.Text = Utilities.UnbreakLine(RemoveAssStartAlignmentTag(currentParagraph.Text));
                    }
                    else if (breakMode == BreakMode.UnbreakNoSpace)
                    {
                        currentParagraph.Text = currentParagraph.Text.TrimEnd() + RemoveAssStartAlignmentTag(nextParagraph.Text).TrimStart();
                    }
                    else if (breakMode == BreakMode.AutoBreak)
                    {
                        currentParagraph.Text = currentParagraph.Text.Replace(Environment.NewLine, " ");
                        currentParagraph.Text += Environment.NewLine + RemoveAssStartAlignmentTag(nextParagraph.Text).Replace(Environment.NewLine, " ");
                        var language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                        currentParagraph.Text = Utilities.AutoBreakLine(currentParagraph.Text, language);
                    }
                    else
                    {
                        currentParagraph.Text = (currentParagraph.Text.Trim() + Environment.NewLine +
                                                 RemoveAssStartAlignmentTag(nextParagraph.Text).Trim()).Trim();
                    }

                    currentParagraph.Text = FixAssaTagsAfterMerge(currentParagraph.Text);
                    currentParagraph.Text = ChangeAllLinesTagsToSingleTag(currentParagraph.Text, "i");
                    currentParagraph.Text = ChangeAllLinesTagsToSingleTag(currentParagraph.Text, "b");
                    currentParagraph.Text = ChangeAllLinesTagsToSingleTag(currentParagraph.Text, "u");
                    currentParagraph.Text = ChangeAllLinesTagsToSingleTag(currentParagraph.Text, "box");

                    if (old1.Contains(Environment.NewLine) || old2.Contains(Environment.NewLine) ||
                        old1.Length > Configuration.Settings.General.SubtitleLineMaximumLength || old2.Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                    {
                        currentParagraph.Text = Utilities.AutoBreakLine(currentParagraph.Text, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                    }

                    if (string.IsNullOrWhiteSpace(old1) && old2 != null)
                    {
                        currentParagraph.Text = old2.Trim();
                    }

                    if (string.IsNullOrWhiteSpace(old2) && old1 != null)
                    {
                        currentParagraph.Text = old1.Trim();
                    }
                }

                currentParagraph.EndTime.TotalMilliseconds = nextParagraph.EndTime.TotalMilliseconds;

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    SetDurationInSeconds(currentParagraph.DurationTotalSeconds);
                    _networkSession.UpdateLine(_subtitle.GetIndex(currentParagraph), currentParagraph);
                    var deleteIndices = new List<int> { _subtitle.GetIndex(nextParagraph) };
                    NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    _subtitle.Paragraphs.Remove(nextParagraph);
                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                }

                UpdateSourceView();
                ShowStatus(_language.LinesMerged);
                SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
                SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            }
        }

        private static string RemoveAssStartAlignmentTag(string text)
        {
            var s = text.TrimStart();
            if (s.StartsWith("{\\an", StringComparison.Ordinal) && s.Length > 5 && s[5] == '}')
            {
                s = s.Remove(0, 6);
            }

            return s;
        }

        private void UpdateStartTimeInfo(TimeCode startTime, int index)
        {
            if (_subtitle.Paragraphs.Count > 0 && _subtitleListViewIndex >= 0 && startTime != null)
            {
                UpdateOverlapErrors(startTime, index);

                // update _subtitle + listview
                var p = _subtitle.Paragraphs[index];
                p.EndTime.TotalMilliseconds += (startTime.TotalMilliseconds - p.StartTime.TotalMilliseconds);
                p.StartTime = startTime;
                SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                StartUpdateListSyntaxColoring();
            }
        }

        private void StartUpdateListSyntaxColoring()
        {
            if (!_timerDoSyntaxColoring.Enabled)
            {
                _timerDoSyntaxColoring.Start();
            }
        }

        private void UpdateListSyntaxColoring()
        {
            if (_loading || _subtitle == null || _subtitleListViewIndex < 0 || _subtitleListViewIndex >= _subtitle.Paragraphs.Count)
            {
                return;
            }

            SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, _subtitleListViewIndex, _subtitle.Paragraphs[_subtitleListViewIndex]);
            var idx = _subtitleListViewIndex + 1;
            var p = _subtitle.GetParagraphOrDefault(idx);
            if (p != null)
            {
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, idx, p);
            }

            idx = _subtitleListViewIndex - 1;
            p = _subtitle.GetParagraphOrDefault(idx);
            if (p != null)
            {
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, idx, p);
            }
        }

        private void UpdateOverlapErrors(TimeCode startTime, int index)
        {
            string startTimeWarning = string.Empty;
            string durationWarning = string.Empty;
            if (_subtitle.Paragraphs.Count > 0 && _subtitleListViewIndex >= 0 && startTime != null)
            {
                var prevParagraph = _subtitle.GetParagraphOrDefault(index - 1);
                if (prevParagraph != null && !prevParagraph.EndTime.IsMaxTime && prevParagraph.EndTime.TotalMilliseconds > startTime.TotalMilliseconds && Configuration.Settings.Tools.ListViewSyntaxColorOverlap)
                {
                    startTimeWarning = string.Format(_languageGeneral.OverlapPreviousLineX, prevParagraph.EndTime.TotalSeconds - startTime.TotalSeconds);
                }

                var nextParagraph = _subtitle.GetParagraphOrDefault(index + 1);
                if (nextParagraph != null)
                {
                    double durationMilliSeconds = GetDurationInMilliseconds();
                    if (startTime.TotalMilliseconds + durationMilliSeconds > nextParagraph.StartTime.TotalMilliseconds &&
                        Configuration.Settings.Tools.ListViewSyntaxColorOverlap &&
                        !startTime.IsMaxTime)
                    {
                        durationWarning = string.Format(_languageGeneral.OverlapX, ((startTime.TotalMilliseconds + durationMilliSeconds) - nextParagraph.StartTime.TotalMilliseconds) / TimeCode.BaseUnit);
                    }

                    if (startTimeWarning.Length == 0 &&
                        startTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds &&
                        Configuration.Settings.Tools.ListViewSyntaxColorOverlap &&
                        !startTime.IsMaxTime)
                    {
                        double di = (startTime.TotalMilliseconds - nextParagraph.StartTime.TotalMilliseconds) / TimeCode.BaseUnit;
                        startTimeWarning = string.Format(_languageGeneral.OverlapNextX, di);
                    }
                    else if (numericUpDownDuration.Value < 0)
                    {
                        durationWarning = _languageGeneral.Negative;
                    }
                }
            }

            if (!string.IsNullOrEmpty(startTimeWarning) && !string.IsNullOrEmpty(durationWarning))
            {
                labelStartTimeWarning.TextAlign = ContentAlignment.TopLeft;
                labelStartTimeWarning.Text = _languageGeneral.OverlapStartAndEnd;
                ShowStatus(startTimeWarning + "  " + durationWarning, false, 4, true);
            }
            else if (!string.IsNullOrEmpty(startTimeWarning))
            {
                labelStartTimeWarning.TextAlign = ContentAlignment.TopLeft;
                labelStartTimeWarning.Text = startTimeWarning;
            }
            else if (!string.IsNullOrEmpty(durationWarning))
            {
                labelStartTimeWarning.TextAlign = ContentAlignment.TopRight;
                labelStartTimeWarning.Text = durationWarning;
            }
            else
            {
                labelStartTimeWarning.Text = string.Empty;
            }
        }

        private double _durationMsInitialValue = 0;
        private bool _durationIsDirty = false;

        private double GetDurationInMilliseconds()
        {
            if (!_durationIsDirty)
            {
                return _durationMsInitialValue;
            }

            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                var seconds = (int)numericUpDownDuration.Value;
                var frames = (int)Math.Round((Convert.ToDouble(numericUpDownDuration.Value) % 1.0 * 100.0));
                return seconds * TimeCode.BaseUnit + frames * (TimeCode.BaseUnit / Configuration.Settings.General.CurrentFrameRate);
            }

            return ((double)numericUpDownDuration.Value * TimeCode.BaseUnit);
        }

        private bool _skipDurationChangedEvent = false;

        private void SetDurationInSeconds(double seconds)
        {
            _durationIsDirty = false;
            _durationMsInitialValue = seconds * 1000.0;
            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                var wholeSeconds = (int)seconds;
                var frames = SubtitleFormat.MillisecondsToFrames(seconds % 1.0 * TimeCode.BaseUnit);
                var extraSeconds = (int)(frames / Configuration.Settings.General.CurrentFrameRate);
                var restFrames = (int)(frames % Configuration.Settings.General.CurrentFrameRate);
                var v = (decimal)(wholeSeconds + extraSeconds + restFrames / 100.0);
                if (v >= numericUpDownDuration.Minimum && v <= numericUpDownDuration.Maximum)
                {
                    _skipDurationChangedEvent = true;
                    numericUpDownDuration.Value = (decimal)(wholeSeconds + extraSeconds + restFrames / 100.0);
                    _skipDurationChangedEvent = false;

                    int firstSelectedIndex = FirstSelectedIndex;
                    var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                    if (currentParagraph != null)
                    {
                        UpdateOverlapErrors(timeUpDownStartTime.TimeCode, firstSelectedIndex);
                        UpdateListViewTextCharactersPerSeconds(labelCharactersPerSecond, currentParagraph);

                        if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                        {
                            var original = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                                UpdateListViewTextCharactersPerSeconds(labelOriginalCharactersPerSecond, original);
                            }
                        }

                        SubtitleListview1.SetDuration(firstSelectedIndex, currentParagraph, _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1));
                        StartUpdateListSyntaxColoring();
                    }
                }
            }
            else
            {
                var d = (decimal)seconds;
                if (d > numericUpDownDuration.Maximum)
                {
                    numericUpDownDuration.Value = numericUpDownDuration.Maximum;
                }
                else if (d < numericUpDownDuration.Minimum)
                {
                    numericUpDownDuration.Value = numericUpDownDuration.Minimum;
                }
                else if (numericUpDownDuration.Value != d)
                {
                    numericUpDownDuration.Value = d;
                }
            }
        }

        private void NumericUpDownDurationValueChanged(object sender, EventArgs e)
        {
            if (_skipDurationChangedEvent)
            {
                return;
            }

            _durationIsDirty = true;
            if (_subtitle.Paragraphs.Count > 0 && _subtitleListViewIndex >= 0)
            {
                labelStatus.Text = string.Empty;
                int firstSelectedIndex = _subtitleListViewIndex;
                var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (currentParagraph != null)
                {
                    // update _subtitle + listview
                    var oldDuration = currentParagraph.Duration.ToString();
                    var temp = new Paragraph(currentParagraph);

                    if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                    {
                        var seconds = (int)numericUpDownDuration.Value;
                        var frames = Convert.ToInt32((numericUpDownDuration.Value - seconds) * 100);
                        if (frames > Math.Round(Configuration.Settings.General.CurrentFrameRate) - 1)
                        {
                            numericUpDownDuration.ValueChanged -= NumericUpDownDurationValueChanged;
                            if (frames >= 99)
                            {
                                numericUpDownDuration.Value = (decimal)(seconds + (Math.Round((Configuration.Settings.General.CurrentFrameRate - 1)) / 100.0));
                            }
                            else
                            {
                                numericUpDownDuration.Value = seconds + 1;
                            }

                            numericUpDownDuration.ValueChanged += NumericUpDownDurationValueChanged;
                        }
                    }

                    temp.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + GetDurationInMilliseconds();

                    MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.DisplayTimeAdjustedX, "#" + currentParagraph.Number + ": " + oldDuration + " -> " + temp.Duration));

                    currentParagraph.EndTime.TotalMilliseconds = temp.EndTime.TotalMilliseconds;
                    SubtitleListview1.SetDuration(firstSelectedIndex, currentParagraph, _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1));

                    UpdateOverlapErrors(timeUpDownStartTime.TimeCode, firstSelectedIndex);
                    UpdateListViewTextCharactersPerSeconds(labelCharactersPerSecond, currentParagraph);

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                    {
                        var original = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                            UpdateListViewTextCharactersPerSeconds(labelOriginalCharactersPerSecond, original);
                        }
                    }

                    StartUpdateListSyntaxColoring();
                }

                StartUpdateListSyntaxColoring();
            }
        }

        private void InitializeListViewEditBoxOriginal(Paragraph p, int firstSelectedIndex)
        {
            if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                var original = Utilities.GetOriginalParagraph(firstSelectedIndex, p, _subtitleOriginal.Paragraphs);
                if (original == null)
                {
                    textBoxListViewTextOriginal.Enabled = false;
                    textBoxListViewTextOriginal.Text = string.Empty;
                    labelOriginalCharactersPerSecond.Text = string.Empty;
                }
                else
                {
                    textBoxListViewTextOriginal.Enabled = Configuration.Settings.General.AllowEditOfOriginalSubtitle;
                    textBoxListViewTextOriginal.BackColor = textBoxListViewTextOriginal.Focused ? SystemColors.Highlight : SystemColors.WindowFrame;
                    textBoxListViewTextOriginal.TextChanged -= TextBoxListViewTextOriginalTextChanged;
                    textBoxListViewTextOriginal.Text = original.Text;
                    textBoxListViewTextOriginal.TextChanged += TextBoxListViewTextOriginalTextChanged;
                    UpdateListViewTextCharactersPerSeconds(labelOriginalCharactersPerSecond, original);
                    _listViewOriginalTextUndoLast = original.Text;
                }
            }
        }

        private void InitializeListViewEditBox(Paragraph p)
        {
            textBoxListViewText.TextChanged -= TextBoxListViewTextTextChanged;
            textBoxListViewText.Text = p.Text;
            textBoxListViewText.TextChanged += TextBoxListViewTextTextChanged;
            _listViewTextUndoLast = p.Text;

            var format = GetCurrentSubtitleFormat();
            bool isAssa = format.GetType() == typeof(AdvancedSubStationAlpha);
            numericUpDownLayer.Visible = isAssa;
            labelLayer.Visible = isAssa;
            if (isAssa)
            {
                labelLayer.Text = LanguageSettings.Current.General.Layer;
                numericUpDownLayer.Left = labelLayer.Right + 5;
                numericUpDownLayer.ValueChanged -= NumericUpDownLayer_ValueChanged;
                numericUpDownLayer.Value = p.Layer;
                numericUpDownLayer.ValueChanged += NumericUpDownLayer_ValueChanged;
            }

            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            timeUpDownStartTime.TimeCode = p.StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;

            numericUpDownDuration.ValueChanged -= NumericUpDownDurationValueChanged;
            if (p.DurationTotalSeconds > (double)numericUpDownDuration.Maximum)
            {
                SetDurationInSeconds((double)numericUpDownDuration.Maximum);
            }
            else
            {
                SetDurationInSeconds(p.DurationTotalSeconds);
            }

            numericUpDownDuration.ValueChanged += NumericUpDownDurationValueChanged;

            UpdateOverlapErrors(timeUpDownStartTime.TimeCode, _subtitle.Paragraphs.IndexOf(p));
            UpdateListViewTextCharactersPerSeconds(labelCharactersPerSecond, p);
            if (_subtitle != null && _subtitle.Paragraphs.Count > 0)
            {
                textBoxListViewText.Enabled = true;
                textBoxListViewText.BackColor = textBoxListViewText.Focused ? SystemColors.Highlight : SystemColors.WindowFrame;
                EnableOrDisableEditControls();
            }

            StartUpdateListSyntaxColoring();
            ShowHideBookmark(p);
        }

        private void InitializeListViewEditBoxTimeOnly(Paragraph p)
        {
            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            timeUpDownStartTime.TimeCode = p.StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;

            numericUpDownDuration.ValueChanged -= NumericUpDownDurationValueChanged;
            if (p.DurationTotalSeconds > (double)numericUpDownDuration.Maximum)
            {
                SetDurationInSeconds((double)numericUpDownDuration.Maximum);
            }
            else
            {
                SetDurationInSeconds(p.DurationTotalSeconds);
            }

            numericUpDownDuration.ValueChanged += NumericUpDownDurationValueChanged;

            UpdateOverlapErrors(timeUpDownStartTime.TimeCode, _subtitle.Paragraphs.IndexOf(p));
            StartUpdateListSyntaxColoring();
        }

        private void MaskedTextBoxTextChanged(object sender, EventArgs e)
        {
            if (_subtitleListViewIndex >= 0 && SubtitleListview1.Items.Count > 0)
            {
                MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.StartTimeAdjustedX, "#" + (_subtitleListViewIndex + 1) + ": " + timeUpDownStartTime.TimeCode));

                var oldParagraph = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                if (oldParagraph != null)
                {
                    oldParagraph = new Paragraph(oldParagraph, false);
                }

                labelStatus.Text = string.Empty;
                UpdateStartTimeInfo(timeUpDownStartTime.TimeCode, _subtitleListViewIndex);
                UpdateOriginalTimeCodes(oldParagraph);
            }
        }

        private void UpdateOriginalTimeCodes(Paragraph currentPargraphBeforeChange, Paragraph p2Before = null)
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                Paragraph p1 = null;
                Paragraph o1 = null;
                if (currentPargraphBeforeChange != null)
                {
                    p1 = _subtitle.GetParagraphOrDefaultById(currentPargraphBeforeChange.Id);
                    if (p1 != null)
                    {
                        o1 = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.IndexOf(p1), currentPargraphBeforeChange, _subtitleOriginal.Paragraphs);
                    }
                }

                Paragraph p2 = null;
                Paragraph o2 = null;
                if (p2Before != null)
                {
                    p2 = _subtitle.GetParagraphOrDefaultById(p2Before.Id);
                    if (p2 != null)
                    {
                        o2 = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.IndexOf(p2), p2Before, _subtitleOriginal.Paragraphs);
                    }
                }

                if (o1 != null)
                {
                    o1.StartTime.TotalMilliseconds = p1.StartTime.TotalMilliseconds;
                    o1.EndTime.TotalMilliseconds = p1.EndTime.TotalMilliseconds;
                }

                if (o2 != null)
                {
                    o2.StartTime.TotalMilliseconds = p2.StartTime.TotalMilliseconds;
                    o2.EndTime.TotalMilliseconds = p2.EndTime.TotalMilliseconds;
                }
            }
        }

        private void FormMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (_forceClose)
            {
                return;
            }

            _lastDoNotPrompt = -1;
            ReloadFromSourceView();
            if (!ContinueNewOrExit())
            {
                e.Cancel = true;
                return;
            }

            if (_networkSession != null)
            {
                try
                {
                    _networkSession.TimerStop();
                    _networkSession.Leave();
                }
                catch
                {
                    // ignore
                }
            }

            _timerSlow.Stop();
            ShowSubtitleTimer.Stop();
            if (Configuration.Settings.General.StartRememberPositionAndSize && WindowState != FormWindowState.Minimized)
            {
                Configuration.Settings.General.StartPosition = Left + ";" + Top;
                if (WindowState == FormWindowState.Maximized)
                {
                    Configuration.Settings.General.StartSize = "Maximized";
                }
                else
                {
                    Configuration.Settings.General.StartSize = Width + ";" + Height;
                }

                Configuration.Settings.General.LayoutSizes = LayoutManager.SaveLayout();
            }

            Configuration.Settings.General.AutoRepeatOn = checkBoxAutoRepeatOn.Checked;
            if (int.TryParse(comboBoxAutoRepeat.Text, out var autoRepeat))
            {
                Configuration.Settings.General.AutoRepeatCount = autoRepeat;
            }

            Configuration.Settings.General.AutoContinueOn = checkBoxAutoContinue.Checked;
            Configuration.Settings.General.AutoContinueDelay = comboBoxAutoContinue.SelectedIndex;
            Configuration.Settings.General.SyncListViewWithVideoWhilePlaying = checkBoxSyncListViewWithVideoWhilePlaying.Checked;
            Configuration.Settings.General.ShowWaveform = audioVisualizer.ShowWaveform;
            Configuration.Settings.General.ShowSpectrogram = audioVisualizer.ShowSpectrogram;
            Configuration.Settings.General.LayoutNumber = _layout;
            if (Configuration.Settings.General.ShowRecentFiles)
            {
                if (!string.IsNullOrEmpty(_fileName))
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                }
                else if (Configuration.Settings.RecentFiles.Files.Count > 0)
                {
                    Configuration.Settings.RecentFiles.Add(null, null, 1, null);
                }
            }

            if (SubtitleListview1.StateImageList?.Images.Count > 0)
            {
                Configuration.Settings.General.ListViewNumberWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width - 18;
            }
            else
            {
                Configuration.Settings.General.ListViewNumberWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width;
            }

            SaveUndockedPositions();
            ListViewHelper.SaveListViewState(SubtitleListview1, _subtitle);
            CheckSecondSubtitleReset();
            Configuration.Settings.Save();

            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.PauseAndDisposePlayer();
            }

            foreach (var fileToDelete in _filesToDelete)
            {
                try
                {
                    File.Delete(fileToDelete);
                }
                catch
                {
                    // ignore
                }
            }

            _dictateForm?.Dispose();

            if (!e.Cancel)
            {
                e.Cancel = true; // Hack as FormClosing will crash if any Forms are created here (e.g. a msgbox). 
                _forceClose = true;
                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(10), () => Application.Exit());
            }
        }

        private void SaveUndockedPositions()
        {
            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedVideoFullscreen = _videoPlayerUndocked.IsFullscreen;
                Configuration.Settings.General.UndockedVideoPosition = _videoPlayerUndocked.Left + @";" + _videoPlayerUndocked.Top + @";" + _videoPlayerUndocked.Width + @";" + _videoPlayerUndocked.Height;
            }

            if (_waveformUndocked != null && !_waveformUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedWaveformPosition = _waveformUndocked.Left + @";" + _waveformUndocked.Top + @";" + _waveformUndocked.Width + @";" + _waveformUndocked.Height;
            }

            if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedVideoControlsPosition = _videoControlsUndocked.Left + @";" + _videoControlsUndocked.Top + @";" + _videoControlsUndocked.Width + @";" + _videoControlsUndocked.Height;
            }
        }

        private void BreakUnbreakTextBox(bool unbreak, SETextBox tb, bool removeNewLineOnly = false)
        {
            var textCaretPos = tb.SelectionStart;
            var startText = tb.Text.Substring(0, textCaretPos);
            var numberOfNewLines = Utilities.CountTagInText(startText, Environment.NewLine);
            if (unbreak)
            {
                textCaretPos -= numberOfNewLines;
                if (removeNewLineOnly)
                {
                    tb.Text = tb.Text.Replace(Environment.NewLine, string.Empty);
                }
                else
                {
                    tb.Text = Utilities.UnbreakLine(tb.Text);
                }
            }
            else
            {
                int i = 0;
                string s;
                bool useLanguage = false;
                var language = "en";
                if (Configuration.Settings.Tools.UseNoLineBreakAfter && tb == textBoxListViewText)
                {
                    language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                    useLanguage = true;
                }
                else if (Configuration.Settings.Tools.UseNoLineBreakAfter && tb == textBoxListViewTextOriginal)
                {
                    language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal);
                    useLanguage = true;
                }

                if (useLanguage)
                {
                    s = Utilities.AutoBreakLine(tb.Text, language);
                }
                else
                {
                    s = Utilities.AutoBreakLine(tb.Text);
                }

                while (i < textCaretPos && i < s.Length)
                {
                    var ch = s[i];
                    if (ch == '\n')
                    {
                        textCaretPos++;
                    }

                    i++;
                }

                textCaretPos -= numberOfNewLines;
                tb.Text = s;
            }

            tb.SelectionStart = textCaretPos;
        }

        private void ButtonUnBreakClick(object sender, EventArgs e)
        {
            Unbreak();
        }

        private void Unbreak(bool removeNewLineOnly = false)
        {
            _doAutoBreakOnTextChanged = false;

            var textCaretPos = textBoxListViewText.SelectionStart;
            var startText = textBoxListViewText.Text.Substring(0, textCaretPos);
            var numberOfNewLines = Utilities.CountTagInText(startText, Environment.NewLine);
            textCaretPos -= numberOfNewLines;
            bool historyAdded = false;

            if (SubtitleListview1.SelectedItems.Count > 1)
            {
                SubtitleListview1.BeginUpdate();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(index);
                    var oldText = p.Text;
                    var newText = p.Text;
                    if (removeNewLineOnly)
                    {
                        newText = newText.Replace(Environment.NewLine, string.Empty);
                    }
                    else
                    {
                        newText = Utilities.UnbreakLine(newText);
                    }

                    if (oldText != newText)
                    {
                        if (!historyAdded)
                        {
                            historyAdded = true;
                            MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);
                        }

                        p.Text = newText;
                        SubtitleListview1.SetText(index, p.Text);
                        SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                    }

                    if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(index, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            oldText = original.Text;
                            newText = original.Text;
                            if (removeNewLineOnly)
                            {
                                newText = newText.Replace(Environment.NewLine, string.Empty);
                            }
                            else
                            {
                                newText = Utilities.UnbreakLine(newText);
                            }

                            if (oldText != newText)
                            {
                                if (!historyAdded)
                                {
                                    historyAdded = true;
                                    MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);
                                }

                                original.Text = newText;
                                SubtitleListview1.SetOriginalText(index, original.Text);
                            }
                        }
                    }
                }

                SubtitleListview1.EndUpdate();
                RefreshSelectedParagraph();
            }
            else
            {
                var fixedText = removeNewLineOnly ? textBoxListViewText.Text.Replace(Environment.NewLine, string.Empty) : Utilities.UnbreakLine(textBoxListViewText.Text);
                var makeHistory = textBoxListViewText.Text != fixedText;
                if (IsOriginalEditable)
                {
                    var originalFixedText = removeNewLineOnly ? textBoxListViewText.Text.Replace(Environment.NewLine, string.Empty) : Utilities.UnbreakLine(textBoxListViewTextOriginal.Text);
                    if (!makeHistory)
                    {
                        makeHistory = textBoxListViewTextOriginal.Text != originalFixedText;
                    }

                    if (makeHistory)
                    {
                        MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);
                        textBoxListViewText.Text = fixedText;
                    }

                    textBoxListViewTextOriginal.Text = originalFixedText;
                }
                else if (makeHistory)
                {
                    MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);
                    textBoxListViewText.Text = fixedText;
                }

                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, _subtitleListViewIndex, _subtitle.GetParagraphOrDefault(_subtitleListViewIndex));
            }

            _doAutoBreakOnTextChanged = true;
            textBoxListViewText.SelectionStart = textCaretPos;
        }

        private void ButtonAutoBreakClick(object sender, EventArgs e)
        {
            AutoBreak();
        }

        private void AutoBreak()
        {
            string language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
            string languageOriginal = string.Empty;
            if (_subtitleOriginal != null)
            {
                languageOriginal = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal);
            }

            var textCaretPos = textBoxListViewText.SelectionStart;

            if (SubtitleListview1.SelectedItems.Count > 1)
            {
                bool historyAdded = false;
                SubtitleListview1.BeginUpdate();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        var oldText = p.Text;
                        var newText = Utilities.AutoBreakLine(p.Text, language);
                        if (oldText != newText)
                        {
                            if (!historyAdded)
                            {
                                historyAdded = true;
                                MakeHistoryForUndo(_language.Controls.AutoBreak.RemoveChar('&'));
                            }

                            p.Text = newText;
                            SubtitleListview1.SetText(index, p.Text);
                        }

                        if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                        {
                            var original = Utilities.GetOriginalParagraph(index, p, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                oldText = original.Text;
                                newText = Utilities.AutoBreakLine(original.Text, language);
                                if (oldText != newText)
                                {
                                    if (!historyAdded)
                                    {
                                        historyAdded = true;
                                        MakeHistoryForUndo(_language.Controls.AutoBreak.RemoveChar('&'));
                                    }

                                    original.Text = newText;
                                    SubtitleListview1.SetOriginalText(index, original.Text);
                                }
                            }
                        }

                        SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                    }
                }

                SubtitleListview1.EndUpdate();
                RefreshSelectedParagraph();
            }
            else
            {
                var fixedText = Utilities.AutoBreakLine(textBoxListViewText.Text, language);
                var makeHistory = textBoxListViewText.Text != fixedText;
                if (IsOriginalEditable)
                {
                    var originalFixedText = Utilities.AutoBreakLine(textBoxListViewTextOriginal.Text, languageOriginal);
                    if (!makeHistory)
                    {
                        makeHistory = textBoxListViewTextOriginal.Text != originalFixedText;
                    }

                    if (makeHistory)
                    {
                        MakeHistoryForUndo(_language.Controls.AutoBreak.RemoveChar('&'));
                        textBoxListViewText.Text = fixedText;
                    }

                    textBoxListViewTextOriginal.Text = originalFixedText;
                }
                else if (makeHistory)
                {
                    MakeHistoryForUndo(_language.Controls.AutoBreak.RemoveChar('&'));
                    textBoxListViewText.Text = fixedText;
                }
            }

            var s = textBoxListViewText.Text;
            var startText = s.Substring(0, Math.Min(textCaretPos, s.Length));
            var numberOfNewLines = Utilities.CountTagInText(startText, Environment.NewLine);
            textCaretPos += numberOfNewLines;
            if (s.Length > textCaretPos && '\n' == s[textCaretPos])
            {
                textCaretPos--;
            }

            if (textCaretPos > 0)
            {
                textBoxListViewText.SelectionStart = textCaretPos;
            }
        }

        private void AutoBreakAtFirstSpaceFromPos(SETextBox textBox, bool goToNext = false)
        {
            var text = Utilities.ReSplit(textBox.Text, textBox.SelectionStart);
            if (text != textBox.Text)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.MainTextBoxAutoBreakFromPos));
                textBox.Text = text;

                if (goToNext)
                {
                    ButtonNextClick(null, null);
                }
                else
                {
                    var lines = textBox.Text.SplitToLines();
                    if (lines.Count > 0)
                    {
                        textBox.SelectionStart = lines[0].Length;
                    }
                }
            }
        }

        private void SwitchView(Control view)
        {
            if (InSourceView)
            {
                var currentFormat = GetCurrentSubtitleFormat();
                if (currentFormat != null && currentFormat.IsTextBased)
                {
                    var newFormat = new Subtitle().ReloadLoadSubtitle(textBoxSource.Lines.ToList(), null, currentFormat);
                    if (newFormat == null && !string.IsNullOrWhiteSpace(textBoxSource.Text))
                    {
                        MessageBox.Show(_language.UnableToParseSourceView);
                        return;
                    }
                }
            }

            if (view == ListView)
            {
                textBoxSource.Visible = false;
            }
            else
            {
                textBoxSource.Parent.Controls.Remove(textBoxSource);
                SubtitleListview1.Parent.Parent.Parent.Controls.Add(textBoxSource);
                textBoxSource.Dock = DockStyle.Fill;
                textBoxSource.BringToFront();
                textBoxSource.Visible = true;
            }

            toolStripButtonSourceView.Checked = InSourceView;
        }

        private void ListViewVisibleChanged(object sender, EventArgs e)
        {
            if (InListView && !_loading)
            {
                var currentFormat = GetCurrentSubtitleFormat();

                ReloadFromSourceView();
                ShowLineInformationListView();
                if (SubtitleListview1.CanFocus)
                {
                    SubtitleListview1.Focus();
                }

                // go to (select + focus) correct line in list view
                if (textBoxSource.SelectionStart > 0 && textBoxSource.TextLength > 30)
                {
                    if (currentFormat.GetType() == typeof(SubRip))
                    {
                        var timeCodeRegEx = new Regex(@"^-?\d+:-?\d+:-?\d+[:,]-?\d+\s*-->\s*-?\d+:-?\d+:-?\d+[:,]-?\d+$");
                        var lineNumber = textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart);
                        var lines = textBoxSource.Lines.ToList();
                        if (lineNumber >= lines.Count)
                        {
                            lineNumber = lines.Count - 1;
                        }

                        var currentLine = lines[lineNumber];
                        var nextLine = lineNumber + 1 < lines.Count ? lines[lineNumber + 1] : string.Empty;
                        var startLine = 0;
                        if (Utilities.IsInteger(currentLine) && timeCodeRegEx.IsMatch(nextLine))
                        {
                            startLine = lineNumber;
                        }
                        else
                        {
                            for (int i = lineNumber; i > 0; i--)
                            {
                                if (timeCodeRegEx.IsMatch(lines[i]) && Utilities.IsInteger(lines[i - 1]))
                                {
                                    startLine = i - 1;
                                    break;
                                }
                            }
                        }

                        var sb = new StringBuilder();
                        for (int i = startLine; i < lines.Count; i++)
                        {
                            sb.AppendLine(lines[i]);
                        }

                        var sub = new Subtitle();
                        new SubRip().LoadSubtitle(sub, sb.ToString().SplitToLines().ToList(), null);
                        if (sub.Paragraphs.Count > 0)
                        {
                            foreach (var p in _subtitle.Paragraphs)
                            {
                                if (sub.Paragraphs[0].Number == p.Number &&
                                    sub.Paragraphs[0].StartTime.TotalMilliseconds == p.StartTime.TotalMilliseconds &&
                                    sub.Paragraphs[0].EndTime.TotalMilliseconds == p.EndTime.TotalMilliseconds)
                                {
                                    _subtitleListViewIndex = -1;
                                    var index = _subtitle.Paragraphs.IndexOf(p);
                                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                    break;
                                }
                            }
                        }
                    }
                    else if (currentFormat.GetType() == typeof(SubStationAlpha) || currentFormat.GetType() == typeof(AdvancedSubStationAlpha))
                    {
                        int pos = textBoxSource.SelectionStart;
                        string s = textBoxSource.Text;
                        if (pos > 0)
                        {
                            pos--;
                        }

                        while (pos > 0 && pos + 3 < s.Length && !s.Substring(pos, 3).StartsWith(Environment.NewLine, StringComparison.Ordinal))
                        {
                            pos--;
                        }

                        s = s.Substring(pos).Trim();
                        int lastTimeCode = s.IndexOf("Dialogue:", StringComparison.Ordinal);

                        if (lastTimeCode >= 0)
                        {
                            string tc = s.Substring(lastTimeCode).Trim();
                            while (tc.Length > 0 && !char.IsDigit(tc[0]))
                            {
                                tc = tc.Remove(0, 1);
                            }

                            if (tc.Length > 12)
                            {
                                TimeCode realTC;
                                tc = tc.Substring(0, 13);
                                var timeCode = tc.Split(new[] { ':', '.', ',' }, StringSplitOptions.RemoveEmptyEntries);
                                try
                                {
                                    realTC = new TimeCode(int.Parse(timeCode[1]), int.Parse(timeCode[2]), int.Parse(timeCode[3]), int.Parse(timeCode[4]) * 10);
                                }
                                catch
                                {
                                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                                    return;
                                }

                                int index = 0;
                                foreach (var p in _subtitle.Paragraphs)
                                {
                                    if (Math.Abs(realTC.TotalMilliseconds - p.StartTime.TotalMilliseconds) < 50)
                                    {
                                        SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                        break;
                                    }

                                    index++;
                                }
                            }
                        }
                    }
                }
                else if (textBoxSource.SelectionStart == 0 && textBoxSource.TextLength > 30)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                }
            }
        }

        private void SourceViewVisibleChanged(object sender, EventArgs e)
        {
            if (InSourceView && !_loading)
            {
                var currentFormat = GetCurrentSubtitleFormat();

                ShowSource();
                ShowSourceLineNumber();
                if (textBoxSource.CanFocus)
                {
                    textBoxSource.Focus();
                }

                textBoxSource.SelectionLength = 0;

                // go to correct line in source view
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    if (currentFormat.GetType() == typeof(SubRip))
                    {
                        var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                        if (p != null)
                        {
                            string tc = p.StartTime + " --> " + p.EndTime;
                            int start = textBoxSource.Text.IndexOf(p.Number + Environment.NewLine + tc, StringComparison.Ordinal);
                            if (start < 0)
                            {
                                start = 0;
                            }

                            start = textBoxSource.Text.IndexOf(tc, start, StringComparison.Ordinal);
                            if (start > 0)
                            {
                                textBoxSource.SelectionStart = start + tc.Length + Environment.NewLine.Length;
                                textBoxSource.SelectionLength = 0;
                                textBoxSource.ScrollToCaret();
                            }
                        }
                    }
                    else if (currentFormat.GetType() == typeof(SubStationAlpha) || currentFormat.GetType() == typeof(AdvancedSubStationAlpha))
                    {
                        var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                        if (p != null)
                        {
                            const string timeCodeFormat = "{0}:{1:00}:{2:00}.{3:00}"; // h:mm:ss.cc
                            string startTimeCode = string.Format(timeCodeFormat, p.StartTime.Hours, p.StartTime.Minutes, p.StartTime.Seconds, p.StartTime.Milliseconds / 10);
                            string endTimeCode = string.Format(timeCodeFormat, p.EndTime.Hours, p.EndTime.Minutes, p.EndTime.Seconds, p.EndTime.Milliseconds / 10);
                            string tc = startTimeCode + "," + endTimeCode;
                            int start = textBoxSource.Text.IndexOf(tc, StringComparison.Ordinal);
                            if (start > 0)
                            {
                                int start2 = textBoxSource.Text.LastIndexOf("Dialogue:", start, StringComparison.Ordinal);
                                if (start2 > 0)
                                {
                                    start2 = (textBoxSource.Text + Environment.NewLine).IndexOf(Environment.NewLine, start2, StringComparison.Ordinal);
                                }

                                if (start2 > 0)
                                {
                                    start = start2;
                                }

                                textBoxSource.SelectionStart = start;
                                textBoxSource.SelectionLength = 0;
                                textBoxSource.ScrollToCaret();
                            }
                        }
                    }
                }
            }
        }

        private void ColorToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                string color;
                var formatType = GetCurrentSubtitleFormat().GetType();
                if (formatType == typeof(AdvancedSubStationAlpha))
                {
                    using (var form = new ColorChooser { Color = GetColorFromFirstLine(Configuration.Settings.General.LastColorPickerColor) })
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }

                        color = Utilities.ColorToHexWithTransparency(form.Color);
                        Configuration.Settings.General.LastColorPickerColor = form.Color;
                    }
                }
                else if (formatType == typeof(Ebu))
                {
                    using (var form = new EbuColorPicker(true))
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }

                        color = form.Color;
                    }
                }
                else if (formatType == typeof(ScenaristClosedCaptions) || formatType == typeof(ScenaristClosedCaptionsDropFrame))
                {
                    using (var form = new EbuColorPicker(false))
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }

                        color = form.Color;
                    }
                }
                else
                {
                    using (var form = new ColorChooser { Color = GetColorFromFirstLine(Configuration.Settings.General.LastColorPickerColor), ShowAlpha = false })
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }

                        color = Utilities.ColorToHex(form.Color);
                        Configuration.Settings.General.LastColorPickerColor = form.Color;
                    }
                }

                SetColor(color, false, false);
            }
        }

        private Color GetColorFromFirstLine(Color defaultColor)
        {
            var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
            if (p != null)
            {
                if (p.Text.IndexOf("<font ") >= 0)
                {
                    return Utilities.GetColorFromFontString(p.Text, defaultColor);
                }
                else
                {
                    return Utilities.GetColorFromAssa(p.Text, defaultColor);
                }
            }

            return defaultColor;
        }

        private void SetColor(string color, bool selectedText = false, bool allowRemove = true)
        {
            var format = GetCurrentSubtitleFormat();
            var isAssa = format.GetType() == typeof(AdvancedSubStationAlpha);
            var isWebVtt = format.Name == WebVTT.NameOfFormat || format.Name == WebVTTFileWithLineNumber.NameOfFormat;
            var c = HtmlUtil.GetColorFromString(color);

            if (selectedText)
            {
                SetSelectedTextColor(color);
            }
            else
            {
                var webVttStyles = new List<WebVttStyle>();
                if (isWebVtt)
                {
                    webVttStyles = WebVttHelper.GetStyles(_subtitle.Header);
                }

                MakeHistoryForUndo(_language.BeforeSettingColor);
                var remove = allowRemove;
                var removeOriginal = allowRemove;

                var assaColor = string.Empty;
                if (isAssa)
                {
                    assaColor = AdvancedSubStationAlpha.GetSsaColorStringForEvent(c);
                }

                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    var p = _subtitle.GetParagraphOrDefault(item.Index);
                    if (p != null)
                    {
                        if (isAssa)
                        {
                            if (!p.Text.Contains(assaColor, StringComparison.OrdinalIgnoreCase))
                            {
                                remove = false;
                                break;
                            }
                        }
                        else if (isWebVtt)
                        {
                            var removeFound = false;
                            foreach (var style in webVttStyles)
                            {
                                if (style.Color == c && p.Text.Contains("." + style.Name))
                                {
                                    removeFound = true;
                                }
                            }

                            if (!removeFound)
                            {
                                remove = false;
                                break;
                            }
                        }
                        else
                        {
                            var s = Utilities.RemoveSsaTags(p.Text);
                            if (!s.StartsWith("<font ", StringComparison.OrdinalIgnoreCase) || !s.Contains(color, StringComparison.OrdinalIgnoreCase))
                            {
                                remove = false;
                                break;
                            }

                            if (assaColor.Length > 0 && !s.Contains(assaColor))
                            {
                                remove = false;
                                break;
                            }
                        }
                    }
                }

                if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                    {
                        var p = _subtitle.GetParagraphOrDefault(item.Index);
                        if (p != null)
                        {
                            var original = Utilities.GetOriginalParagraph(item.Index, p, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                var s = Utilities.RemoveSsaTags(original.Text);
                                if (!s.StartsWith("<font ", StringComparison.OrdinalIgnoreCase) || !s.Contains(color, StringComparison.OrdinalIgnoreCase))
                                {
                                    removeOriginal = false;
                                    break;
                                }
                            }
                        }
                    }
                }

                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    var p = _subtitle.GetParagraphOrDefault(item.Index);
                    if (p != null)
                    {
                        if (remove)
                        {
                            if (isAssa)
                            {
                                p.Text = HtmlUtil.RemoveAssaColor(p.Text);
                            }
                            else if (isWebVtt)
                            {
                                p.Text = WebVttHelper.RemoveColorTag(p.Text, c, webVttStyles);
                            }
                            else
                            {
                                p.Text = HtmlUtil.RemoveOpenCloseTags(p.Text, HtmlUtil.TagFont);
                            }
                        }
                        else
                        {
                            SetParagraphFontColor(_subtitle, p, color, isAssa, isWebVtt, webVttStyles);
                        }

                        SubtitleListview1.SetText(item.Index, p.Text);

                        if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                        {
                            var original = Utilities.GetOriginalParagraph(item.Index, p, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                if (removeOriginal)
                                {
                                    if (isWebVtt)
                                    {
                                        original.Text = WebVttHelper.RemoveColorTag(original.Text, c, webVttStyles);
                                    }
                                    else
                                    {
                                        original.Text = HtmlUtil.RemoveOpenCloseTags(original.Text, HtmlUtil.TagFont);
                                    }
                                }
                                else
                                {
                                    SetParagraphFontColor(_subtitleOriginal, original, color);
                                }

                                SubtitleListview1.SetOriginalText(item.Index, original.Text);
                            }
                        }
                    }
                }

                RefreshSelectedParagraph();
            }
        }

        private void SetSelectedTextColor(string color)
        {
            var tb = GetFocusedTextBox();
            bool allSelected;
            string text = tb.SelectedText;
            if (string.IsNullOrEmpty(text) && tb.Text.Length > 0)
            {
                text = tb.Text;
                tb.SelectAll();
                allSelected = true;
            }
            else
            {
                allSelected = tb.SelectionLength == tb.Text.Length;
            }

            int selectionStart = tb.SelectionStart;

            var format = GetCurrentSubtitleFormat();

            if (IsAssa())
            {
                var c = HtmlUtil.GetColorFromString(color);
                var assaColor = AdvancedSubStationAlpha.GetSsaColorStringForEvent(c);
                if (allSelected)
                {
                    text = $"{{\\c{assaColor}&}}{text}";
                }
                else
                {
                    var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                    if (p != null)
                    {
                        var style = AdvancedSubStationAlpha.GetSsaStyle(p.Extra, _subtitle.Header);
                        text = $"{{\\{assaColor}&}}{text}{{\\{AdvancedSubStationAlpha.GetSsaColorStringForEvent(style.Primary)}&}}";
                    }
                }

                tb.SelectedText = text;
                tb.SelectionStart = selectionStart;
                tb.SelectionLength = text.Length;

                return;
            }
            else if (format.Name == WebVTT.NameOfFormat || format.Name == WebVTTFileWithLineNumber.NameOfFormat)
            {
                var c = HtmlUtil.GetColorFromString(color);
                WebVttStyle styleWithColor = WebVttHelper.GetOnlyColorStyle(c, _subtitle.Header);
                if (styleWithColor == null)
                {
                    styleWithColor = WebVttHelper.AddStyleFromColor(c);
                    _subtitle.Header = WebVttHelper.AddStyleToHeader(_subtitle.Header, styleWithColor);
                }

                if (text.StartsWith("<c.", StringComparison.Ordinal))
                {
                    var indexOfEndTag = text.IndexOf('>');
                    if (indexOfEndTag > 0)
                    {
                        text = text.Insert(indexOfEndTag, "." + styleWithColor.Name.RemoveChar('.'));
                    }
                }
                else
                {
                    text = "<c." + styleWithColor.Name.RemoveChar('.') + ">" + text + "</c>";
                }

                text = WebVttHelper.RemoveUnusedColorStylesFromText(text, _subtitle.Header);

                tb.SelectedText = text;
                tb.SelectionStart = selectionStart;
                tb.SelectionLength = text.Length;

                return;
            }

            bool done = false;
            string pre = string.Empty;
            if (selectionStart == 0 && text.StartsWith("{\\", StringComparison.Ordinal) && text.IndexOf('}') >= 0)
            {
                int endIndex = text.IndexOf('}') + 1;
                pre = text.Substring(0, endIndex);
                text = text.Remove(0, endIndex);
            }

            string s = text;
            if (s.StartsWith("<font ", StringComparison.OrdinalIgnoreCase))
            {
                if (s.EndsWith("</font>", StringComparison.Ordinal) &&
                    s.StartsWith($"<font color=\"{color}\">", StringComparison.Ordinal))
                {
                    var start = $"<font color=\"{color}\">";
                    text = s.Substring(start.Length, s.Length - start.Length - "</font>".Length);
                    done = true;
                }
                else
                {
                    int end = s.IndexOf('>');
                    if (end > 0)
                    {
                        string f = s.Substring(0, end);
                        if (f.Contains(" face=", StringComparison.OrdinalIgnoreCase) && !f.Contains(" color=", StringComparison.OrdinalIgnoreCase))
                        {
                            var start = s.IndexOf(" face=", StringComparison.OrdinalIgnoreCase);
                            s = s.Insert(start, string.Format(" color=\"{0}\"", color));
                            text = s;
                            done = true;
                        }
                        else if (f.Contains(" color=", StringComparison.OrdinalIgnoreCase))
                        {
                            int colorStart = f.IndexOf(" color=", StringComparison.OrdinalIgnoreCase);
                            if (s.IndexOf('"', colorStart + " color=".Length + 1) > 0)
                            {
                                end = s.IndexOf('"', colorStart + " color=".Length + 1);
                            }

                            s = s.Substring(0, colorStart) + string.Format(" color=\"{0}", color) + s.Substring(end);
                            text = s;
                            done = true;
                        }
                    }
                }
            }

            if (!done)
            {
                text = $"{pre}<font color=\"{color}\">{text}</font>";
            }
            else
            {
                text = pre + text;
            }

            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        private void SetParagraphFontColor(Subtitle subtitle, Paragraph p, string color, bool isAssa = false, bool isWebVtt = false, List<WebVttStyle> webVttStyles = null)
        {
            if (p == null)
            {
                return;
            }

            if (isAssa)
            {
                try
                {
                    var c = HtmlUtil.GetColorFromString(color);
                    p.Text = HtmlUtil.RemoveAssaColor(p.Text);
                    p.Text = "{\\" + AdvancedSubStationAlpha.GetSsaColorStringForEvent(c) + "&}" + p.Text;
                }
                catch
                {
                    // ignore
                }

                return;
            }

            if (isWebVtt)
            {
                try
                {
                    var c = HtmlUtil.GetColorFromString(color);
                    var existingStyle = WebVttHelper.GetOnlyColorStyle(c, _subtitle.Header);
                    if (existingStyle != null)
                    {
                        p.Text = WebVttHelper.AddStyleToText(p.Text, existingStyle, WebVttHelper.GetStyles(_subtitle.Header));
                        p.Text = WebVttHelper.RemoveUnusedColorStylesFromText(p.Text, subtitle.Header);
                    }
                    else
                    {
                        var styleWithColor = WebVttHelper.AddStyleFromColor(c);
                        subtitle.Header = WebVttHelper.AddStyleToHeader(_subtitle.Header, styleWithColor);
                        p.Text = WebVttHelper.AddStyleToText(p.Text, styleWithColor, WebVttHelper.GetStyles(_subtitle.Header));
                        p.Text = WebVttHelper.RemoveUnusedColorStylesFromText(p.Text, subtitle.Header);
                    }
                }
                catch
                {
                    // ignore
                }

                return;
            }

            string pre = string.Empty;
            if (p.Text.StartsWith("{\\", StringComparison.Ordinal) && p.Text.IndexOf('}') >= 0)
            {
                int endIndex = p.Text.IndexOf('}') + 1;
                pre = p.Text.Substring(0, endIndex);
                p.Text = p.Text.Remove(0, endIndex);
            }

            string s = p.Text;
            if (s.StartsWith("<font ", StringComparison.OrdinalIgnoreCase))
            {
                int end = s.IndexOf('>');
                if (end > 0)
                {
                    string f = s.Substring(0, end);

                    if (f.Contains(" face=", StringComparison.OrdinalIgnoreCase) && !f.Contains(" color=", StringComparison.OrdinalIgnoreCase))
                    {
                        var start = s.IndexOf(" face=", StringComparison.OrdinalIgnoreCase);
                        s = s.Insert(start, string.Format(" color=\"{0}\"", color));
                        p.Text = pre + s;
                        return;
                    }

                    var colorStart = f.IndexOf(" color=", StringComparison.OrdinalIgnoreCase);
                    if (colorStart >= 0)
                    {
                        if (s.IndexOf('"', colorStart + 8) > 0)
                        {
                            end = s.IndexOf('"', colorStart + 8);
                        }

                        s = s.Substring(0, colorStart) + string.Format(" color=\"{0}", color) + s.Substring(end);
                        p.Text = pre + s;
                        return;
                    }
                }
            }

            p.Text = $"{pre}<font color=\"{color}\">{p.Text}</font>";
        }

        private void ToolStripMenuItemFontClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                using (var form = new ChooseFontName())
                {

                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeSettingFontName);

                        foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                        {
                            var p = _subtitle.GetParagraphOrDefault(item.Index);
                            if (p != null)
                            {
                                SetFontName(p, form.FontName);
                                SubtitleListview1.SetText(item.Index, p.Text);
                                if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                                {
                                    var original = Utilities.GetOriginalParagraph(item.Index, p, _subtitleOriginal.Paragraphs);
                                    if (original != null)
                                    {
                                        SetFontName(original, form.FontName);
                                        SubtitleListview1.SetOriginalText(item.Index, original.Text);
                                    }
                                }
                            }
                        }

                        RefreshSelectedParagraph();
                    }
                }
            }
        }

        private void SetFontName(Paragraph p, string fontName)
        {
            if (p == null)
            {
                return;
            }

            var isAssa = IsAssa();
            if (isAssa)
            {
                p.Text = Regex.Replace(p.Text, "{\\\\fn[^\\\\]+}", string.Empty);
                p.Text = Regex.Replace(p.Text, "\\\\fn[a-zA-Z \\d]+\\\\", string.Empty);
                p.Text = "{\\fn" + fontName + "}" + p.Text;
                return;
            }

            string pre = string.Empty;
            if (p.Text.StartsWith("{\\", StringComparison.Ordinal) && p.Text.IndexOf('}') >= 0)
            {
                int endIndex = p.Text.IndexOf('}') + 1;
                pre = p.Text.Substring(0, endIndex);
                p.Text = p.Text.Remove(0, endIndex);
            }

            string s = p.Text;
            if (s.StartsWith("<font ", StringComparison.OrdinalIgnoreCase))
            {
                var end = s.IndexOf('>');
                if (end > 0)
                {
                    var f = s.Substring(0, end);

                    if (f.Contains(" color=", StringComparison.OrdinalIgnoreCase) && !f.Contains(" face=", StringComparison.OrdinalIgnoreCase))
                    {
                        var start = s.IndexOf(" color=", StringComparison.OrdinalIgnoreCase);
                        p.Text = pre + s.Insert(start, string.Format(" face=\"{0}\"", fontName));
                        return;
                    }

                    var faceStart = f.IndexOf(" face=", StringComparison.OrdinalIgnoreCase);
                    if (f.Contains(" face=", StringComparison.OrdinalIgnoreCase))
                    {
                        if (s.IndexOf('"', faceStart + 7) > 0)
                        {
                            end = s.IndexOf('"', faceStart + 7);
                        }

                        p.Text = pre + s.Substring(0, faceStart) + string.Format(" face=\"{0}", fontName) + s.Substring(end);
                        return;
                    }
                }
            }

            p.Text = $"{pre}<font face=\"{fontName}\">{s}</font>";
        }

        private void TypeEffectToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                using (var typewriter = new EffectTypewriter())
                {
                    typewriter.Initialize(SubtitleListview1.GetSelectedParagraph(_subtitle));

                    if (typewriter.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeTypeWriterEffect);
                        bool isframeBased = GetCurrentSubtitleFormat().IsFrameBased;
                        int lastSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                        int i = SubtitleListview1.SelectedItems.Count - 1;
                        while (i >= 0)
                        {
                            var item = SubtitleListview1.SelectedItems[i];
                            var p = _subtitle.GetParagraphOrDefault(item.Index);
                            if (p != null)
                            {
                                typewriter.Initialize(p);
                                typewriter.MakeAnimation();
                                int index = item.Index;
                                _subtitle.Paragraphs.RemoveAt(index);
                                foreach (var tp in typewriter.TypewriterParagraphs)
                                {
                                    _subtitle.Paragraphs.Insert(index, tp);
                                    index++;
                                }
                            }

                            i--;
                        }

                        _subtitle.Renumber();
                        _subtitleListViewIndex = -1;
                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex, true);
                    }
                }
            }
        }

        private void KaraokeEffectToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                using (var karaoke = new EffectKaraoke())
                {
                    karaoke.Initialize(SubtitleListview1.GetSelectedParagraph(_subtitle));

                    if (karaoke.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeKaraokeEffect);
                        int lastSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                        bool isframeBased = GetCurrentSubtitleFormat().IsFrameBased;

                        int i = SubtitleListview1.SelectedItems.Count - 1;
                        while (i >= 0)
                        {
                            var item = SubtitleListview1.SelectedItems[i];
                            var p = _subtitle.GetParagraphOrDefault(item.Index);
                            if (p != null)
                            {
                                int index = item.Index;
                                _subtitle.Paragraphs.RemoveAt(index);
                                foreach (var kp in karaoke.MakeAnimation(p))
                                {
                                    _subtitle.Paragraphs.Insert(index, kp);
                                    index++;
                                }
                            }

                            i--;
                        }

                        _subtitle.Renumber();
                        _subtitleListViewIndex = -1;
                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex, true);
                    }
                }
            }
        }

        private void ImportSubtitleFromMatroskaFile(string fileName)
        {
            using (var matroska = new MatroskaFile(fileName))
            {
                if (matroska.IsValid)
                {
                    var subtitleList = matroska.GetTracks(true);
                    if (subtitleList.Count == 0)
                    {
                        MessageBox.Show(_language.NoSubtitlesFound);
                    }
                    else if (ContinueNewOrExit())
                    {
                        if (subtitleList.Count > 1)
                        {
                            using (var subtitleChooser = new MatroskaSubtitleChooser("mkv"))
                            {
                                subtitleChooser.Initialize(subtitleList);
                                if (_loading)
                                {
                                    subtitleChooser.Icon = (Icon)this.Icon.Clone();
                                    subtitleChooser.ShowInTaskbar = true;
                                    subtitleChooser.ShowIcon = true;
                                }

                                if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                {
                                    if (LoadMatroskaSubtitle(subtitleList[subtitleChooser.SelectedIndex], matroska, false) &&
                                        (Path.GetExtension(matroska.Path).Equals(".mkv", StringComparison.OrdinalIgnoreCase) ||
                                         Path.GetExtension(matroska.Path).Equals(".mks", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                                        {
                                            matroska.Dispose();
                                            OpenVideo(matroska.Path);
                                        }
                                    }
                                    else
                                    {
                                        _exitWhenLoaded = _loading;
                                    }
                                }
                            }
                        }
                        else
                        {
                            var ext = Path.GetExtension(matroska.Path).ToLowerInvariant();
                            if (LoadMatroskaSubtitle(subtitleList[0], matroska, false) &&
                                (ext == ".mkv" || ext == ".mks"))
                            {
                                if (!Configuration.Settings.General.DisableVideoAutoLoading)
                                {
                                    matroska.Dispose();
                                    if (ext == ".mkv")
                                    {
                                        OpenVideo(matroska.Path);
                                    }
                                    else
                                    {
                                        TryToFindAndOpenVideoFile(Path.Combine(Path.GetDirectoryName(matroska.Path), Path.GetFileNameWithoutExtension(matroska.Path)));
                                    }
                                }
                            }
                            else
                            {
                                _exitWhenLoaded = _loading;
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show(string.Format(_language.NotAValidMatroskaFileX, fileName));
                }
            }
        }

        private int _lastProgressPercent = -1;

        private void UpdateProgress(long position, long total, string statusMessage)
        {
            var percent = (int)Math.Round(position * 100.0 / total);
            if (percent == _lastProgressPercent)
            {
                return;
            }

            ShowStatus(string.Format("{0}, {1:0}%", statusMessage, _lastProgressPercent));
            statusStrip1.Refresh();
            TaskbarList.SetProgressValue(Handle, percent, 100);
            if (DateTime.UtcNow.Ticks % 10 == 0)
            {
                Application.DoEvents();
            }

            _lastProgressPercent = percent;
        }

        private void MatroskaProgress(long position, long total)
        {
            UpdateProgress(position, total, _language.ParsingMatroskaFile);
        }

        private Subtitle LoadMatroskaSubtitleForSync(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            var subtitle = new Subtitle();
            bool isSsa = false;

            if (matroskaSubtitleInfo.CodecId.Equals("S_VOBSUB", StringComparison.OrdinalIgnoreCase))
            {
                return subtitle;
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_HDMV/PGS", StringComparison.OrdinalIgnoreCase))
            {
                return subtitle;
            }

            SubtitleFormat format;
            var codecPrivate = matroskaSubtitleInfo.GetCodecPrivate();
            if (codecPrivate.Contains("[script info]", StringComparison.OrdinalIgnoreCase))
            {
                if (codecPrivate.Contains("[V4 Styles]", StringComparison.OrdinalIgnoreCase))
                {
                    format = new SubStationAlpha();
                }
                else
                {
                    format = new AdvancedSubStationAlpha();
                }

                isSsa = true;
            }
            else
            {
                format = new SubRip();
            }

            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            if (isSsa)
            {
                foreach (var p in Utilities.LoadMatroskaSSA(matroskaSubtitleInfo, matroska.Path, format, sub).Paragraphs)
                {
                    subtitle.Paragraphs.Add(p);
                }
            }
            else
            {
                foreach (var p in sub)
                {
                    subtitle.Paragraphs.Add(new Paragraph(p.GetText(matroskaSubtitleInfo), p.Start, p.End));
                }
            }

            return subtitle;
        }

        private bool LoadMatroskaSubtitle(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska, bool batchMode)
        {
            if (matroskaSubtitleInfo.CodecId.Equals("S_VOBSUB", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return LoadVobSubFromMatroska(matroskaSubtitleInfo, matroska);
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_HDMV/PGS", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return LoadBluRaySubFromMatroska(matroskaSubtitleInfo, matroska);
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_HDMV/TEXTST", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return LoadTextSTFromMatroska(matroskaSubtitleInfo, matroska, batchMode);
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_DVBSUB", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return LoadDvbFromMatroska(matroskaSubtitleInfo, matroska, batchMode);
            }

            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            if (!batchMode)
            {
                ResetSubtitle();
            }

            _subtitle.Paragraphs.Clear();

            var format = Utilities.LoadMatroskaTextSubtitle(matroskaSubtitleInfo, matroska, sub, _subtitle);

            if (matroskaSubtitleInfo.GetCodecPrivate().Contains("[script info]", StringComparison.OrdinalIgnoreCase))
            {
                if (_networkSession == null)
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Style);
                }
            }
            else if (_networkSession == null)
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
            }

            comboBoxSubtitleFormats.SelectedIndexChanged -= ComboBoxSubtitleFormatsSelectedIndexChanged;
            SetCurrentFormat(format);
            comboBoxSubtitleFormats.SelectedIndexChanged += ComboBoxSubtitleFormatsSelectedIndexChanged;
            _oldSubtitleFormat = format;
            SetEncoding(Encoding.UTF8);
            ShowStatus(_language.SubtitleImportedFromMatroskaFile);
            _subtitle.Renumber();
            if (matroska.Path.EndsWith(".mkv", StringComparison.OrdinalIgnoreCase) || matroska.Path.EndsWith(".mks", StringComparison.OrdinalIgnoreCase))
            {
                _fileName = matroska.Path.Remove(matroska.Path.Length - 4) + format.Extension;
            }

            SetTitle();
            _fileDateTime = new DateTime();
            _converted = true;

            if (batchMode)
            {
                return true;
            }

            UpdateSourceView();
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            _subtitleListViewIndex = -1;
            SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
            return true;
        }

        private bool LoadTextSTFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska, bool batchMode)
        {
            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            if (!batchMode)
            {
                ResetSubtitle();
            }

            _subtitle.Paragraphs.Clear();

            Utilities.LoadMatroskaTextSubtitle(matroskaSubtitleInfo, matroska, sub, _subtitle);
            Utilities.ParseMatroskaTextSt(matroskaSubtitleInfo, sub, _subtitle);

            if (_networkSession == null)
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
            }

            comboBoxSubtitleFormats.SelectedIndexChanged -= ComboBoxSubtitleFormatsSelectedIndexChanged;
            SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
            comboBoxSubtitleFormats.SelectedIndexChanged += ComboBoxSubtitleFormatsSelectedIndexChanged;
            SetEncoding(Encoding.UTF8);
            ShowStatus(_language.SubtitleImportedFromMatroskaFile);
            _subtitle.Renumber();
            if (matroska.Path.EndsWith(".mkv", StringComparison.OrdinalIgnoreCase) || matroska.Path.EndsWith(".mks", StringComparison.OrdinalIgnoreCase))
            {
                _fileName = matroska.Path.Remove(matroska.Path.Length - 4) + GetCurrentSubtitleFormat().Extension;
            }

            SetTitle();
            _fileDateTime = new DateTime();
            _converted = true;
            if (batchMode)
            {
                return true;
            }

            UpdateSourceView();
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            _subtitleListViewIndex = -1;
            SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
            return true;
        }

        private bool LoadDvbFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska, bool batchMode)
        {
            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            if (!batchMode)
            {
                ResetSubtitle();
            }

            _subtitle.Paragraphs.Clear();
            var subtitleImages = new List<DvbSubPes>();
            var subtitle = new Subtitle();
            Utilities.LoadMatroskaTextSubtitle(matroskaSubtitleInfo, matroska, sub, _subtitle);
            for (int index = 0; index < sub.Count; index++)
            {
                try
                {
                    var msub = sub[index];
                    DvbSubPes pes = null;
                    var data = msub.GetData(matroskaSubtitleInfo);
                    if (data != null && data.Length > 9 && data[0] == 15 && data[1] >= SubtitleSegment.PageCompositionSegment && data[1] <= SubtitleSegment.DisplayDefinitionSegment) // sync byte + segment id
                    {
                        var buffer = new byte[data.Length + 3];
                        Buffer.BlockCopy(data, 0, buffer, 2, data.Length);
                        buffer[0] = 32;
                        buffer[1] = 0;
                        buffer[buffer.Length - 1] = 255;
                        pes = new DvbSubPes(0, buffer);
                    }
                    else if (VobSubParser.IsMpeg2PackHeader(data))
                    {
                        pes = new DvbSubPes(data, Mpeg2Header.Length);
                    }
                    else if (VobSubParser.IsPrivateStream1(data, 0))
                    {
                        pes = new DvbSubPes(data, 0);
                    }
                    else if (data.Length > 9 && data[0] == 32 && data[1] == 0 && data[2] == 14 && data[3] == 16)
                    {
                        pes = new DvbSubPes(0, data);
                    }

                    if (pes == null && subtitle.Paragraphs.Count > 0)
                    {
                        var last = subtitle.Paragraphs[subtitle.Paragraphs.Count - 1];
                        if (last.DurationTotalMilliseconds < 100)
                        {
                            last.EndTime.TotalMilliseconds = msub.Start;
                            if (last.DurationTotalMilliseconds > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                            {
                                last.EndTime.TotalMilliseconds = last.StartTime.TotalMilliseconds + 3000;
                            }
                        }
                    }

                    if (pes != null && pes.PageCompositions != null && pes.PageCompositions.Any(p => p.Regions.Count > 0))
                    {
                        subtitleImages.Add(pes);
                        subtitle.Paragraphs.Add(new Paragraph(string.Empty, msub.Start, msub.End));
                    }
                }
                catch
                {
                    // continue
                }
            }

            if (subtitleImages.Count == 0)
            {
                return false;
            }

            for (int index = 0; index < subtitle.Paragraphs.Count; index++)
            {
                var p = subtitle.Paragraphs[index];
                if (p.DurationTotalMilliseconds < 200)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + 3000;
                }

                var next = subtitle.GetParagraphOrDefault(index + 1);
                if (next != null && next.StartTime.TotalMilliseconds < p.EndTime.TotalMilliseconds)
                {
                    p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - MinGapBetweenLines;
                }
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitle, subtitleImages, Configuration.Settings.VobSubOcr); // TODO: language???
                if (_loading)
                {
                    formSubOcr.Icon = (Icon)Icon.Clone();
                    formSubOcr.ShowInTaskbar = true;
                    formSubOcr.ShowIcon = true;
                }

                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    ResetSubtitle();
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    RefreshSelectedParagraph();
                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(matroska.Path) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();

                    Configuration.Settings.Save();
                    return true;
                }
            }

            return false;
        }

        public static void CopyStream(Stream input, Stream output)
        {
            var buffer = new byte[128 * 1024];
            int len;
            while ((len = input.Read(buffer, 0, buffer.Length)) > 0)
            {
                output.Write(buffer, 0, len);
            }

            output.Flush();
        }

        private bool LoadVobSubFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            if (matroskaSubtitleInfo.ContentEncodingType == 1)
            {
                MessageBox.Show(_language.NoSupportEncryptedVobSub);
            }

            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            _subtitle.Paragraphs.Clear();

            List<VobSubMergedPack> mergedVobSubPacks = new List<VobSubMergedPack>();
            var idx = new Core.VobSub.Idx(matroskaSubtitleInfo.GetCodecPrivate().SplitToLines());
            foreach (var p in sub)
            {
                mergedVobSubPacks.Add(new VobSubMergedPack(p.GetData(matroskaSubtitleInfo), TimeSpan.FromMilliseconds(p.Start), 32, null));
                if (mergedVobSubPacks.Count > 0)
                {
                    mergedVobSubPacks[mergedVobSubPacks.Count - 1].EndTime = TimeSpan.FromMilliseconds(p.End);
                }

                // fix overlapping (some versions of Handbrake makes overlapping time codes - thx Hawke)
                if (mergedVobSubPacks.Count > 1 && mergedVobSubPacks[mergedVobSubPacks.Count - 2].EndTime > mergedVobSubPacks[mergedVobSubPacks.Count - 1].StartTime)
                {
                    mergedVobSubPacks[mergedVobSubPacks.Count - 2].EndTime = TimeSpan.FromMilliseconds(mergedVobSubPacks[mergedVobSubPacks.Count - 1].StartTime.TotalMilliseconds - 1);
                }
            }

            // Remove bad packs
            for (int i = mergedVobSubPacks.Count - 1; i >= 0; i--)
            {
                if (mergedVobSubPacks[i].SubPicture.SubPictureDateSize <= 2)
                {
                    mergedVobSubPacks.RemoveAt(i);
                }
                else if (mergedVobSubPacks[i].SubPicture.SubPictureDateSize <= 67 && mergedVobSubPacks[i].SubPicture.Delay.TotalMilliseconds < 35)
                {
                    mergedVobSubPacks.RemoveAt(i);
                }
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(mergedVobSubPacks, idx.Palette, Configuration.Settings.VobSubOcr, null); // TODO: language???
                if (_loading)
                {
                    formSubOcr.Icon = (Icon)Icon.Clone();
                    formSubOcr.ShowInTaskbar = true;
                    formSubOcr.ShowIcon = true;
                }

                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    ResetSubtitle();
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    RefreshSelectedParagraph();
                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(matroska.Path) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();

                    Configuration.Settings.Save();
                    return true;
                }
            }

            return false;
        }

        private bool LoadBluRaySubFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            if (matroskaSubtitleInfo.ContentEncodingType == 1)
            {
                MessageBox.Show(_language.NoSupportEncryptedVobSub);
            }

            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            int noOfErrors = 0;
            string lastError = string.Empty;
            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            _subtitle.Paragraphs.Clear();
            var subtitles = new List<BluRaySupParser.PcsData>();
            var log = new StringBuilder();
            var clusterStream = new MemoryStream();
            var lastPalettes = new Dictionary<int, List<PaletteInfo>>();
            var lastBitmapObjects = new Dictionary<int, List<BluRaySupParser.OdsData>>();
            foreach (var p in sub)
            {
                byte[] buffer = p.GetData(matroskaSubtitleInfo);
                if (buffer != null && buffer.Length > 2)
                {
                    clusterStream.Write(buffer, 0, buffer.Length);
                    if (ContainsBluRayStartSegment(buffer))
                    {
                        if (subtitles.Count > 0 && subtitles[subtitles.Count - 1].StartTime == subtitles[subtitles.Count - 1].EndTime)
                        {
                            subtitles[subtitles.Count - 1].EndTime = (long)((p.Start - 1) * 90.0);
                        }

                        clusterStream.Position = 0;
                        var list = BluRaySupParser.ParseBluRaySup(clusterStream, log, true, lastPalettes, lastBitmapObjects);
                        foreach (var sup in list)
                        {
                            sup.StartTime = (long)((p.Start - 1) * 90.0);
                            sup.EndTime = (long)((p.End - 1) * 90.0);
                            subtitles.Add(sup);

                            // fix overlapping
                            if (subtitles.Count > 1 && sub[subtitles.Count - 2].End > sub[subtitles.Count - 1].Start)
                            {
                                subtitles[subtitles.Count - 2].EndTime = subtitles[subtitles.Count - 1].StartTime - 1;
                            }
                        }

                        clusterStream = new MemoryStream();
                    }
                }
                else if (subtitles.Count > 0)
                {
                    var lastSub = subtitles[subtitles.Count - 1];
                    if (lastSub.StartTime == lastSub.EndTime)
                    {
                        lastSub.EndTime = (long)((p.Start - 1) * 90.0);
                        if (lastSub.EndTime - lastSub.StartTime > 1000000)
                        {
                            lastSub.EndTime = lastSub.StartTime;
                        }
                    }
                }
            }

            if (noOfErrors > 0)
            {
                MessageBox.Show(string.Format("{0} error(s) occurred during extraction of bdsup\r\n\r\n{1}", noOfErrors, lastError));
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, matroska.Path);
                if (_loading)
                {
                    formSubOcr.Icon = (Icon)Icon.Clone();
                    formSubOcr.ShowInTaskbar = true;
                    formSubOcr.ShowIcon = true;
                }

                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);

                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    RefreshSelectedParagraph();

                    _fileName = string.Empty;
                    if (!string.IsNullOrEmpty(matroska.Path))
                    {
                        _fileName = Path.GetFileNameWithoutExtension(matroska.Path) + GetCurrentSubtitleFormat().Extension;
                    }

                    _converted = true;
                    SetTitle();

                    Configuration.Settings.Save();
                    return true;
                }
            }

            return false;
        }

        private bool ContainsBluRayStartSegment(byte[] buffer)
        {
            const int epochStart = 0x80;
            var position = 0;
            while (position + 3 <= buffer.Length)
            {
                var segmentType = buffer[position];
                if (segmentType == epochStart)
                {
                    return true;
                }

                int length = BluRaySupParser.BigEndianInt16(buffer, position + 1) + 3;
                position += length;
            }

            return false;
        }

        private void ImportSubtitleFromDvbSupFile(string fileName)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                string language = null;
                var programMapTableParser = new ProgramMapTableParser();
                programMapTableParser.Parse(fileName); // get languages
                if (programMapTableParser.GetSubtitlePacketIds().Count > 0)
                {
                    language = programMapTableParser.GetSubtitleLanguageTwoLetter(programMapTableParser.GetSubtitlePacketIds().First());
                }

                var subtitles = TransportStreamParser.GetDvbSup(fileName);
                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName, language);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);

                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = string.Empty;
                    SetTitle();

                    Configuration.Settings.Save();
                }
            }
        }

        private bool ImportSubtitleFromTransportStream(string fileName)
        {
            ShowStatus(_language.ParsingTransportStream);
            Refresh();
            var tsParser = new TransportStreamParser();
            tsParser.Parse(fileName, (pos, total) => UpdateProgress(pos, total, _language.ParsingTransportStreamFile));
            ShowStatus(string.Empty);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);

            if (tsParser.SubtitlePacketIds.Count == 0 && tsParser.TeletextSubtitlesLookup.Count == 0)
            {
                MessageBox.Show(_language.NoSubtitlesFound);
                _exitWhenLoaded = _loading;
                return false;
            }

            if (tsParser.SubtitlePacketIds.Count == 0 && tsParser.TeletextSubtitlesLookup.Count == 1 && tsParser.TeletextSubtitlesLookup.First().Value.Count == 1)
            {
                _subtitle = new Subtitle(tsParser.TeletextSubtitlesLookup.First().Value.First().Value);
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle);
                SubtitleListview1.SelectIndexAndEnsureVisible(0);
                if (!Configuration.Settings.General.DisableVideoAutoLoading)
                {
                    OpenVideo(fileName);
                }

                _fileName = Path.GetFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                _converted = true;
                SetTitle();
                return true;
            }

            int packetId;
            if (tsParser.SubtitlePacketIds.Count + tsParser.TeletextSubtitlesLookup.Sum(p => p.Value.Count) > 1)
            {
                using (var subChooser = new TransportStreamSubtitleChooser())
                {
                    subChooser.Initialize(tsParser, fileName);
                    if (subChooser.ShowDialog(this) == DialogResult.Cancel)
                    {
                        return false;
                    }

                    if (subChooser.IsTeletext)
                    {
                        new SubRip().LoadSubtitle(_subtitle, subChooser.Srt.SplitToLines(), null);
                        _subtitle.Renumber();
                        SubtitleListview1.Fill(_subtitle);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0);
                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                        {
                            OpenVideo(fileName);
                        }

                        _fileName = Path.GetFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                        _converted = true;
                        SetTitle();
                        return true;
                    }

                    packetId = tsParser.SubtitlePacketIds[subChooser.SelectedIndex];
                }
            }
            else
            {
                packetId = tsParser.SubtitlePacketIds[0];
            }


            var subtitles = tsParser.GetDvbSubtitles(packetId);
            using (var formSubOcr = new VobSubOcr())
            {
                string language = null;
                var programMapTableParser = new ProgramMapTableParser();
                programMapTableParser.Parse(fileName); // get languages
                if (programMapTableParser.GetSubtitlePacketIds().Count > 0)
                {
                    language = programMapTableParser.GetSubtitleLanguage(packetId);
                }

                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName, language);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);

                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = string.Empty;
                    if (!string.IsNullOrEmpty(formSubOcr.FileName))
                    {
                        var currentFormat = GetCurrentSubtitleFormat();
                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(formSubOcr.FileName) + currentFormat.Extension;
                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                        {
                            OpenVideo(fileName);
                        }

                        _converted = true;
                    }

                    SetTitle();
                    Configuration.Settings.Save();
                    return true;
                }
            }

            _exitWhenLoaded = _loading;
            return false;
        }

        private bool ImportSubtitleFromManzanitaTransportStream(string fileName, List<TransportStreamSubtitle> subtitles)
        {
            ShowStatus(_language.ParsingTransportStream);
            Refresh();

            using (var formSubOcr = new VobSubOcr())
            {
                string language = null;
                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName, language);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);

                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = string.Empty;
                    if (!string.IsNullOrEmpty(formSubOcr.FileName))
                    {
                        var currentFormat = GetCurrentSubtitleFormat();
                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(formSubOcr.FileName) + currentFormat.Extension;
                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                        {
                            OpenVideo(fileName);
                        }

                        _converted = true;
                    }

                    SetTitle();
                    Configuration.Settings.Save();
                    return true;
                }
            }

            _exitWhenLoaded = _loading;
            return false;
        }

        private bool ImportSubtitleFromMp4(string fileName)
        {
            var mp4Parser = new MP4Parser(fileName);
            var mp4SubtitleTracks = mp4Parser.GetSubtitleTracks();
            if (mp4SubtitleTracks.Count == 0)
            {
                if (mp4Parser.VttcSubtitle?.Paragraphs.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                    _subtitleListViewIndex = -1;
                    FileNew();
                    _subtitle = mp4Parser.VttcSubtitle;
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();
                    return true;
                }

                if (mp4Parser.TrunCea608Subtitle?.Paragraphs.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                    _subtitleListViewIndex = -1;
                    FileNew();
                    _subtitle = mp4Parser.TrunCea608Subtitle;
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();
                    return true;
                }

                MessageBox.Show(_language.NoSubtitlesFound);
                return false;
            }
            else if (mp4SubtitleTracks.Count == 1)
            {
                LoadMp4Subtitle(fileName, mp4SubtitleTracks[0]);
                return true;
            }
            else
            {
                using (var subtitleChooser = new MatroskaSubtitleChooser("mp4"))
                {
                    subtitleChooser.Initialize(mp4SubtitleTracks);
                    if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                    {
                        LoadMp4Subtitle(fileName, mp4SubtitleTracks[subtitleChooser.SelectedIndex]);
                        return true;
                    }
                }

                return false;
            }
        }

        private bool ImportSubtitleFromDivX(string fileName)
        {
            var count = 0;
            var list = new List<XSub>();
            using (var f = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                var searchBuffer = new byte[2048];
                long pos = 0;
                long length = f.Length - 50;
                while (pos < length)
                {
                    f.Position = pos;
                    int readCount = f.Read(searchBuffer, 0, searchBuffer.Length);
                    for (int i = 0; i < readCount; i++)
                    {
                        if (searchBuffer[i] != 0x5b || (i + 4 < readCount && (searchBuffer[i + 1] < 0x30 || searchBuffer[i + 1] > 0x39 || searchBuffer[i + 3] != 0x3a)))
                        {
                            continue;
                        }

                        f.Position = pos + i + 1;

                        var buffer = new byte[26];
                        f.Read(buffer, 0, buffer.Length);

                        if (buffer[2] == 0x3a && // :
                            buffer[5] == 0x3a && // :
                            buffer[8] == 0x2e && // .
                            buffer[12] == 0x2d && // -
                            buffer[15] == 0x3a && // :
                            buffer[18] == 0x3a && // :
                            buffer[21] == 0x2e && // .
                            buffer[25] == 0x5d) // ]
                        { // subtitle time code
                            string timeCode = Encoding.ASCII.GetString(buffer, 0, 25);

                            f.Read(buffer, 0, 2);
                            int width = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int height = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int x = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int y = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int xEnd = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int yEnd = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int RleLength = BitConverter.ToUInt16(buffer, 0);

                            var colorBuffer = new byte[4 * 3]; // four colors with rgb (3 bytes)
                            f.Read(colorBuffer, 0, colorBuffer.Length);

                            buffer = new byte[RleLength];
                            int bytesRead = f.Read(buffer, 0, buffer.Length);

                            if (width > 0 && height > 0 && bytesRead == buffer.Length)
                            {
                                var xSub = new XSub(timeCode, width, height, colorBuffer, buffer);
                                list.Add(xSub);
                                count++;
                            }
                        }
                    }

                    pos += searchBuffer.Length;
                }
            }

            if (count == 0)
            {
                return false;
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(list, Configuration.Settings.VobSubOcr, fileName); // TODO: language???
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                    _subtitleListViewIndex = -1;
                    FileNew();
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();

                    Configuration.Settings.Save();
                    if (!Configuration.Settings.General.DisableVideoAutoLoading)
                    {
                        OpenVideo(fileName);
                    }
                }
            }

            return true;
        }

        private static Subtitle LoadMp4SubtitleForSync(Trak mp4SubtitleTrack)
        {
            var subtitle = new Subtitle();
            if (mp4SubtitleTrack.Mdia.IsVobSubSubtitle)
            {
                return subtitle;
            }
            else
            {
                subtitle.Paragraphs.AddRange(mp4SubtitleTrack.Mdia.Minf.Stbl.GetParagraphs());
            }

            return subtitle;
        }

        private void LoadMp4Subtitle(string fileName, Trak mp4SubtitleTrack)
        {
            if (mp4SubtitleTrack.Mdia.IsVobSubSubtitle)
            {
                var subPicturesWithTimeCodes = new List<VobSubOcr.SubPicturesWithSeparateTimeCodes>();
                var paragraphs = mp4SubtitleTrack.Mdia.Minf.Stbl.GetParagraphs();
                for (int i = 0; i < paragraphs.Count; i++)
                {
                    if (mp4SubtitleTrack.Mdia.Minf.Stbl.SubPictures.Count > i)
                    {
                        var start = paragraphs[i].StartTime.TimeSpan;
                        var end = paragraphs[i].EndTime.TimeSpan;
                        subPicturesWithTimeCodes.Add(new VobSubOcr.SubPicturesWithSeparateTimeCodes(mp4SubtitleTrack.Mdia.Minf.Stbl.SubPictures[i], start, end));
                    }
                }

                using (var formSubOcr = new VobSubOcr())
                {
                    formSubOcr.Initialize(subPicturesWithTimeCodes, Configuration.Settings.VobSubOcr, fileName); // TODO: language???
                    if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                        _subtitleListViewIndex = -1;
                        FileNew();
                        foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(p);
                        }

                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        _subtitleListViewIndex = -1;
                        SubtitleListview1.FirstVisibleIndex = -1;
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                        _converted = true;
                        SetTitle();

                        Configuration.Settings.Save();
                    }
                }
            }
            else
            {
                MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                _subtitleListViewIndex = -1;
                FileNew();

                _subtitle.Paragraphs.AddRange(mp4SubtitleTrack.Mdia.Minf.Stbl.GetParagraphs());

                SetEncoding(Encoding.UTF8);
                ShowStatus(_language.SubtitleImportedFromMatroskaFile);
                _subtitle.Renumber();
                if (fileName.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) ||
                    fileName.EndsWith(".m4v", StringComparison.OrdinalIgnoreCase))
                {
                    _fileName = fileName.Substring(0, fileName.Length - 4) + GetCurrentSubtitleFormat().Extension;
                }

                SetTitle();
                _fileDateTime = new DateTime();
                _converted = true;
                UpdateSourceView();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
            }
        }

        private void SubtitleListview1_DragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        private void SubtitleListview1_DragDrop(object sender, DragEventArgs e)
        {
            mediaPlayer.Pause();
            _dragAndDropFiles = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (_dragAndDropFiles.Length == 1)
            {
                _dragAndDropTimer.Start();
            }
            else
            {
                MessageBox.Show(_language.DropOnlyOneFile);
            }
        }

        private void DoSubtitleListview1Drop(object sender, EventArgs e)
        {
            _dragAndDropTimer.Stop();

            if (!ContinueNewOrExit())
            {
                return;
            }

            Interlocked.Increment(ref _openSaveCounter);

            string fileName = _dragAndDropFiles[0];
            var file = new FileInfo(fileName);

            // Do not allow directory drop
            if (FileUtil.IsDirectory(fileName))
            {
                MessageBox.Show(_language.ErrorDirectoryDropNotAllowed, file.Name, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var dirName = Path.GetDirectoryName(fileName);
            saveFileDialog1.InitialDirectory = dirName;
            openFileDialog1.InitialDirectory = dirName;
            var ext = file.Extension.ToLowerInvariant();

            if (ext == ".mkv" || ext == ".mks")
            {
                using (var matroska = new MatroskaFile(fileName))
                {
                    if (matroska.IsValid)
                    {
                        var subtitleList = matroska.GetTracks(true);
                        if (subtitleList.Count == 0)
                        {
                            MessageBox.Show(_language.NoSubtitlesFound);
                        }
                        else if (subtitleList.Count > 1)
                        {
                            using (var subtitleChooser = new MatroskaSubtitleChooser("mkv"))
                            {
                                subtitleChooser.Initialize(subtitleList);
                                if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                {
                                    ResetSubtitle();
                                    if (LoadMatroskaSubtitle(subtitleList[subtitleChooser.SelectedIndex], matroska, false) &&
                                        (ext.Equals(".mkv", StringComparison.Ordinal) || ext.Equals(".mks", StringComparison.Ordinal)) &&
                                        !Configuration.Settings.General.DisableVideoAutoLoading)
                                    {
                                        OpenVideo(fileName);
                                    }
                                }
                            }
                        }
                        else
                        {
                            ResetSubtitle();
                            if (LoadMatroskaSubtitle(subtitleList[0], matroska, false) &&
                                (ext.Equals(".mkv", StringComparison.Ordinal) || ext.Equals(".mks", StringComparison.Ordinal)) &&
                                !Configuration.Settings.General.DisableVideoAutoLoading)
                            {
                                OpenVideo(fileName);
                            }
                        }

                        return;
                    }
                }
            }

            if (ext == ".ismt" || ext == ".mp4" || ext == ".m4v" || ext == ".mov" || ext == ".3gp" || ext == ".cmaf" || ext == ".m4s")
            {
                var mp4Parser = new MP4Parser(fileName);
                var mp4SubtitleTracks = mp4Parser.GetSubtitleTracks();
                if (mp4SubtitleTracks.Count > 0)
                {
                    ImportSubtitleFromMp4(fileName);
                    if (_subtitle.Paragraphs.Count > 0)
                    {
                        return;
                    }
                }

                var f = new IsmtDfxp();
                if (f.IsMine(null, fileName))
                {
                    f.LoadSubtitle(_subtitle, null, fileName);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                    SetTitle();
                    ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                    _sourceViewChange = false;
                    _changeSubtitleHash = GetFastSubtitleHash();
                    ResetHistory();
                    SetUndockedWindowsTitle();
                    _converted = true;
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    return;
                }

                if (mp4Parser.VttcSubtitle?.Paragraphs.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                    _subtitleListViewIndex = -1;
                    FileNew();
                    _subtitle = mp4Parser.VttcSubtitle;
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();
                    return;
                }

                MessageBox.Show(_language.NoSubtitlesFound);
                return;
            }
            else if (ext == ".vob" || ext == ".ifo")
            {
                ImportDvdSubtitle(fileName);
                return;
            }
            else if (ext == ".idx")
            {
                var subFileName = fileName.Substring(0, fileName.Length - 3) + "sub";
                if (File.Exists(subFileName) && FileUtil.IsVobSub(subFileName))
                {
                    ImportAndOcrVobSubSubtitleNew(subFileName, _loading);
                    return;
                }
            }

            comboBoxEncoding.BeginUpdate();
            comboBoxSubtitleFormats.BeginUpdate();

            if (file.Length < Subtitle.MaxFileSize)
            {
                if (!OpenFromRecentFiles(fileName))
                {
                    OpenSubtitle(fileName, null);
                }
            }
            else if (file.Length < 150000000 && ext == ".sub" && IsVobSubFile(fileName, true)) // max 150 mb
            {
                OpenSubtitle(fileName, null);
            }
            else if (file.Length < 250000000 && ext == ".sup" && FileUtil.IsBluRaySup(fileName)) // max 250 mb
            {
                OpenSubtitle(fileName, null);
            }
            else if ((ext == ".ts" || ext == ".tsv" || ext == ".tts" || ext == ".rec" || ext == ".mpg" || ext == ".mpeg") && FileUtil.IsTransportStream(fileName))
            {
                OpenSubtitle(fileName, null);
            }
            else if ((ext == ".m2ts" || ext == ".ts" || ext == ".tts" || ext == ".mts") && FileUtil.IsM2TransportStream(fileName))
            {
                OpenSubtitle(fileName, null);
            }
            else if (ext == ".divx" || ext == ".avi")
            {
                OpenSubtitle(fileName, null);
            }
            else
            {
                MessageBox.Show(string.Format(_language.DropSubtitleFileXNotAccepted, fileName));
            }

            comboBoxSubtitleFormats.EndUpdate();
            comboBoxEncoding.EndUpdate();

            Interlocked.Decrement(ref _openSaveCounter);
        }

        private void TextBoxSourceDragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        private void TextBoxSourceDragDrop(object sender, DragEventArgs e)
        {
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length == 1)
            {
                if (ContinueNewOrExit())
                {
                    OpenSubtitle(files[0], null);
                }
            }
            else
            {
                MessageBox.Show(_language.DropOnlyOneFile);
            }
        }

        private void ToolStripMenuItemImportManualAnsiClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            openFileDialog1.Title = _language.OpenAnsiSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                using (var chooseEncoding = new ChooseEncoding())
                {
                    chooseEncoding.Initialize(openFileDialog1.FileName);
                    if (chooseEncoding.ShowDialog(this) == DialogResult.OK)
                    {
                        Encoding encoding = chooseEncoding.GetEncoding();
                        SetEncoding(Encoding.UTF8);

                        Interlocked.Increment(ref _openSaveCounter);
                        OpenSubtitle(openFileDialog1.FileName, encoding);
                        Interlocked.Decrement(ref _openSaveCounter);
                    }
                }
            }
        }

        private void ChangeCasingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ChangeCasing(false);
        }

        private void ChangeCasing(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            SaveSubtitleListviewIndices();
            using (var changeCasing = new ChangeCasing())
            {
                if (onlySelectedLines)
                {
                    changeCasing.Text += " - " + _language.SelectedLines;
                }

                ReloadFromSourceView();
                if (changeCasing.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeChangeCasing);

                    Cursor.Current = Cursors.WaitCursor;
                    var selectedLines = new Subtitle();
                    var selectedIndices = new List<int>(SubtitleListview1.GetSelectedIndices());
                    if (onlySelectedLines)
                    {
                        foreach (int index in selectedIndices)
                        {
                            selectedLines.Paragraphs.Add(new Paragraph(_subtitle.Paragraphs[index]));
                        }
                    }
                    else
                    {
                        foreach (var p in _subtitle.Paragraphs)
                        {
                            selectedLines.Paragraphs.Add(new Paragraph(p));
                        }
                    }

                    bool saveChangeCaseChanges = true;
                    var casingNamesLinesChanged = 0;

                    if (changeCasing.ChangeNamesToo && changeCasing.OnlyAllUpper)
                    {
                        selectedIndices = new List<int>();
                        var allUpperSubtitle = new Subtitle();
                        var sub = onlySelectedLines ? selectedLines : _subtitle;
                        for (var index = 0; index < sub.Paragraphs.Count; index++)
                        {
                            var p = sub.Paragraphs[index];
                            var noTags = HtmlUtil.RemoveHtmlTags(p.Text, true);
                            if (noTags == noTags.ToUpperInvariant())
                            {
                                allUpperSubtitle.Paragraphs.Add(p);
                                selectedIndices.Add(index);
                            }
                        }

                        selectedLines = allUpperSubtitle;
                        onlySelectedLines = true;
                    }

                    changeCasing.FixCasing(selectedLines, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                    if (changeCasing.ChangeNamesToo)
                    {
                        using (var changeCasingNames = new ChangeCasingNames())
                        {
                            changeCasingNames.Initialize(selectedLines);
                            if (changeCasingNames.ShowDialog(this) == DialogResult.OK)
                            {
                                changeCasingNames.FixCasing();
                                casingNamesLinesChanged = changeCasingNames.LinesChanged;

                                if (changeCasing.LinesChanged == 0)
                                {
                                    ShowStatus(string.Format(_language.CasingCompleteMessageOnlyNames, casingNamesLinesChanged, _subtitle.Paragraphs.Count));
                                }
                                else
                                {
                                    ShowStatus(string.Format(_language.CasingCompleteMessage, changeCasing.LinesChanged, _subtitle.Paragraphs.Count, casingNamesLinesChanged));
                                }
                            }
                            else
                            {
                                saveChangeCaseChanges = false;
                            }
                        }
                    }
                    else
                    {
                        ShowStatus(string.Format(_language.CasingCompleteMessageNoNames, changeCasing.LinesChanged, _subtitle.Paragraphs.Count));
                    }

                    if (saveChangeCaseChanges)
                    {
                        if (onlySelectedLines)
                        {
                            int i = 0;
                            foreach (int index in selectedIndices)
                            {
                                _subtitle.Paragraphs[index].Text = selectedLines.Paragraphs[i].Text;
                                i++;
                            }
                        }
                        else
                        {
                            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
                            {
                                _subtitle.Paragraphs[i].Text = selectedLines.Paragraphs[i].Text;
                            }
                        }

                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        if (changeCasing.LinesChanged > 0 || casingNamesLinesChanged > 0)
                        {
                            _subtitleListViewIndex = -1;
                            RestoreSubtitleListviewIndices();
                            UpdateSourceView();
                        }
                    }

                    Cursor.Current = Cursors.Default;
                }
            }
        }

        private void ToolStripMenuItemChangeFrameRateClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            int lastSelectedIndex = 0;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                lastSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            }

            ReloadFromSourceView();
            using (var changeFrameRate = new ChangeFrameRate())
            {
                changeFrameRate.Initialize(CurrentFrameRate.ToString());
                if (changeFrameRate.ShowDialog(this) == DialogResult.OK)
                {
                    double oldFrameRate = changeFrameRate.OldFrameRate;
                    double newFrameRate = changeFrameRate.NewFrameRate;

                    MakeHistoryForUndo(_language.BeforeChangeFrameRate + $" ({oldFrameRate} -> {newFrameRate})");

                    _subtitle.ChangeFrameRate(oldFrameRate, newFrameRate);

                    ShowStatus(string.Format(_language.FrameRateChangedFromXToY, oldFrameRate, newFrameRate));
                    toolStripComboBoxFrameRate.Text = newFrameRate.ToString();

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex, true);
                }
            }
        }

        private bool IsVobSubFile(string subFileName, bool verbose)
        {
            try
            {
                if (FileUtil.IsVobSub(subFileName))
                {
                    if (!verbose)
                    {
                        return true;
                    }

                    var idxFileName = Utilities.GetPathAndFileNameWithoutExtension(subFileName) + ".idx";
                    if (File.Exists(idxFileName))
                    {
                        return true;
                    }

                    var dr = MessageBox.Show(string.Format(_language.IdxFileNotFoundWarning, idxFileName), _title, MessageBoxButtons.YesNoCancel);
                    return dr == DialogResult.Yes;
                }

                if (verbose)
                {
                    MessageBox.Show(string.Format(_language.InvalidVobSubHeader, subFileName));
                }
            }
            catch (Exception ex)
            {
                if (verbose)
                {
                    MessageBox.Show(ex.Message);
                }
            }

            return false;
        }

        private void ImportAndOcrSpDvdSup(string fileName, bool showInTaskbar)
        {
            var spList = new List<SpHeader>();

            using (var fs = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                var buffer = new byte[SpHeader.SpHeaderLength];
                int bytesRead = fs.Read(buffer, 0, buffer.Length);
                var header = new SpHeader(buffer);

                while (header.Identifier == "SP" && bytesRead > 0 && header.NextBlockPosition > 4)
                {
                    buffer = new byte[header.NextBlockPosition];
                    bytesRead = fs.Read(buffer, 0, buffer.Length);
                    if (bytesRead == buffer.Length)
                    {
                        header.AddPicture(buffer);
                        spList.Add(header);
                    }

                    buffer = new byte[SpHeader.SpHeaderLength];
                    bytesRead = fs.Read(buffer, 0, buffer.Length);
                    while (bytesRead == buffer.Length && Encoding.ASCII.GetString(buffer, 0, 2) != "SP")
                    {
                        fs.Seek(fs.Position - buffer.Length + 1, SeekOrigin.Begin);
                        bytesRead = fs.Read(buffer, 0, buffer.Length);
                    }

                    header = new SpHeader(buffer);
                }
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)this.Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                vobSubOcr.Initialize(fileName, null, Configuration.Settings.VobSubOcr, spList);
                if (vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingVobSubFile);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(vobSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;

                    Configuration.Settings.Save();
                }
                else
                {
                    _exitWhenLoaded = _loading;
                }
            }
        }

        private void ImportAndOcrVobSubSubtitleNew(string fileName, bool showInTaskbar)
        {
            if (!IsVobSubFile(fileName, true))
            {
                return;
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                if (vobSubOcr.Initialize(fileName, Configuration.Settings.VobSubOcr, this) && vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingVobSubFile);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(vobSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;

                    _imageSubFileName = vobSubOcr.FileName;

                    Configuration.Settings.Save();
                }
                else
                {
                    _exitWhenLoaded = _loading;
                }
            }
        }

        private void ToolStripMenuItemMergeLinesClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1)
            {
                // check consecutive numbers
                var last = SubtitleListview1.SelectedIndices[0] - 1;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    if (last != index - 1)
                    {
                        return;
                    }

                    last = index;
                }

                MergeAfterToolStripMenuItemClick(null, null);
            }
        }

        private void VisualSyncSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            ShowVisualSync(true);
        }

        private void SaveSubtitleListviewIndices()
        {
            _selectedIndices = new List<int>();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                _selectedIndices.Add(index);
            }
        }

        private void RestoreSubtitleListviewIndices()
        {
            _subtitleListViewIndex = -1;
            if (_selectedIndices != null)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                SubtitleListview1.SelectNone();
                int i = 0;
                foreach (int index in _selectedIndices)
                {
                    if (index >= 0 && index < SubtitleListview1.Items.Count)
                    {
                        SubtitleListview1.Items[index].Selected = true;
                        if (i == 0)
                        {
                            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                        }
                    }

                    i++;
                }

                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            }
        }

        private void ShowSelectedLinesEarlierlaterToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            if (_showEarlierOrLater != null && !_showEarlierOrLater.IsDisposed)
            {
                _showEarlierOrLater.WindowState = FormWindowState.Normal;
                _showEarlierOrLater.Focus();
                return;
            }

            bool waveformEnabled = timerWaveform.Enabled;
            timerWaveform.Stop();

            _showEarlierOrLater = new ShowEarlierLater();
            if (!_showEarlierOrLater.IsPositionAndSizeSaved)
            {
                _showEarlierOrLater.Top = Top + 100;
                _showEarlierOrLater.Left = Left + (Width / 2) - (_showEarlierOrLater.Width / 3);
            }

            _showEarlierOrLater.Initialize(ShowEarlierOrLater, true);
            MakeHistoryForUndo(_language.BeforeShowSelectedLinesEarlierLater);
            _showEarlierOrLater.Show(this);

            timerWaveform.Enabled = waveformEnabled;

            RefreshSelectedParagraph();
        }

        internal void MainKeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.LWin)
            {
                _winLeftDownTicks = DateTime.UtcNow.Ticks;
            }

            if (e.KeyCode == Keys.RWin)
            {
                _winRightDownTicks = DateTime.UtcNow.Ticks;
            }

            if ((DateTime.UtcNow.Ticks - _winLeftDownTicks) <= 10000 * 999 || (DateTime.UtcNow.Ticks - _winRightDownTicks) <= 10000 * 999) // less than 999 ms
            {
                // if it's less than one second since Win key was pressed we ignore key (not perfect...)
                e.SuppressKeyPress = true;
                return;
            }

            if (e.Modifiers == Keys.Alt && e.KeyCode == (Keys.RButton | Keys.ShiftKey))
            {
                return;
            }

            if (e.Modifiers == Keys.Shift && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == (Keys.LButton | Keys.ShiftKey))
            {
                return;
            }

            if (e.Modifiers == (Keys.Control | Keys.Shift) && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (comboBoxSubtitleFormats.Focused && comboBoxSubtitleFormats.DroppedDown)
            {
                return;
            }

            var fc = UiUtil.FindFocusedControl(this);
            if (fc != null && (e.Modifiers == Keys.None || e.Modifiers == Keys.Shift))
            {
                var typeName = fc.GetType().Name;

                // do not check for shortcuts if text is being entered and a textbox is focused
                var textBoxTypes = new List<string> { "AdvancedTextBox", "SimpleTextBox", "SETextBox", "TextBox", "RichTextBox" };
                if (textBoxTypes.Contains(typeName) &&
                    ((e.KeyCode >= Keys.A && e.KeyCode <= Keys.Z) ||
                     (e.KeyCode >= Keys.OemSemicolon && e.KeyCode <= Keys.OemBackslash) ||
                      e.KeyCode >= Keys.NumPad0 && e.KeyCode <= Keys.NumPad9 ||
                      e.KeyCode == Keys.Multiply ||
                      e.KeyCode == Keys.Add ||
                      e.KeyCode == Keys.Subtract ||
                      e.KeyCode == Keys.Divide ||
                      e.KeyValue >= 48 && e.KeyValue <= 57) &&
                    !Configuration.Settings.General.AllowLetterShortcutsInTextBox)
                {
                    return;
                }

                // do not check for shortcuts if a number is being entered and a time box is focused
                if (typeName == "UpDownEdit" &&
                    (e.KeyCode >= Keys.NumPad0 && e.KeyCode <= Keys.NumPad9 || e.KeyValue >= 48 && e.KeyValue <= 57))
                {
                    return;
                }
            }

            if (e.KeyCode == Keys.Escape && !_cancelWordSpellCheck)
            {
                _cancelWordSpellCheck = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformVerticalZoom)
            {
                audioVisualizer.VerticalZoomFactor *= 1.1;
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformVerticalZoomOut)
            {
                audioVisualizer.VerticalZoomFactor /= 1.1;
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformZoomIn)
            {
                audioVisualizer.ZoomIn();
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformZoomOut)
            {
                audioVisualizer.ZoomOut();
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformSplit)
            {
                var pos = mediaPlayer.CurrentPosition;
                var paragraph = _subtitle.GetFirstParagraphOrDefaultByTime(pos * TimeCode.BaseUnit);
                if (paragraph != null &&
                    pos * TimeCode.BaseUnit + 100 > paragraph.StartTime.TotalMilliseconds &&
                    pos * TimeCode.BaseUnit - 100 < paragraph.EndTime.TotalMilliseconds)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(paragraph);
                    SplitSelectedParagraph(pos, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainToggleVideoControls)
            {
                Configuration.Settings.General.ShowVideoControls = !Configuration.Settings.General.ShowVideoControls;
                ToggleVideoControlsOnOff(Configuration.Settings.General.ShowVideoControls);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoPlayFirstSelected && !string.IsNullOrEmpty(_videoFileName))
            {
                PlayFirstSelectedSubtitle();
            }
            else if (audioVisualizer.Visible && (e.KeyData == _shortcuts.WaveformPlaySelection || e.KeyData == _shortcuts.WaveformPlaySelectionEnd))
            {
                WaveformPlaySelection(nearEnd: e.KeyData == _shortcuts.WaveformPlaySelectionEnd);
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformSearchSilenceForward)
            {
                if (audioVisualizer.WavePeaks != null)
                {
                    audioVisualizer.FindDataBelowThreshold(Configuration.Settings.VideoControls.WaveformSeeksSilenceMaxVolume, Configuration.Settings.VideoControls.WaveformSeeksSilenceDurationSeconds);
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformSearchSilenceBack)
            {
                if (audioVisualizer.WavePeaks != null)
                {
                    audioVisualizer.FindDataBelowThresholdBack(Configuration.Settings.VideoControls.WaveformSeeksSilenceMaxVolume, Configuration.Settings.VideoControls.WaveformSeeksSilenceDurationSeconds);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainInsertAfter == e.KeyData && InListView)
            {
                InsertAfter(string.Empty, true);
                e.SuppressKeyPress = true;
                textBoxListViewText.Focus();
            }
            else if (_shortcuts.MainInsertBefore == e.KeyData && InListView)
            {
                InsertBefore();
                e.SuppressKeyPress = true;
                textBoxListViewText.Focus();
            }
            else if (_shortcuts.MainMergeDialog == e.KeyData && InListView)
            {
                MergeDialogs();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainMergeDialogWithNext == e.KeyData && InListView)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx >= 0 && _subtitle.Paragraphs.Count > idx + 1)
                    {
                        SelectListViewIndexAndEnsureVisible(idx);
                        MergeWithLineAfter(true);
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainMergeDialogWithPrevious == e.KeyData && InListView)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx > 0)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(idx - 1, true);
                        MergeWithLineAfter(true);
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewToggleDashes == e.KeyData && InListView)
            {
                if (textBoxListViewText.Focused)
                {
                    ToggleDashesTextBox(textBoxListViewText);
                }
                else if (textBoxListViewTextOriginal.Focused)
                {
                    ToggleDashesTextBox(textBoxListViewTextOriginal);
                }
                else
                {
                    ToggleDashes();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewToggleQuotes == e.KeyData && InListView)
            {
                if (textBoxListViewText.Focused || textBoxListViewTextOriginal.Focused)
                {
                    SurroundWithTag("\"", "\"", selectedTextOnly: true);
                }
                else
                {
                    SurroundWithTag("\"", "\"");
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewToggleHiTags == e.KeyData && InListView)
            {
                var tags = Configuration.Settings.General.TagsInToggleHiTags.Split(';');
                string openingTag;
                string closingTag;
                switch (tags.Length)
                {
                    case 1:
                        openingTag = tags[0];
                        closingTag = openingTag;
                        break;
                    case 2:
                        openingTag = tags[0];
                        closingTag = tags[1];
                        break;
                    default:
                        openingTag = "[";
                        closingTag = "]";
                        break;
                }

                if (textBoxListViewText.Focused || textBoxListViewTextOriginal.Focused)
                {
                    SurroundWithTag(openingTag, closingTag, true);
                }
                else
                {
                    SurroundWithTag(openingTag, closingTag);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewToggleCustomTags == e.KeyData && InListView)
            {
                var tags = Configuration.Settings.General.TagsInToggleCustomTags.Split('Æ');
                string openingTag;
                string closingTag;
                switch (tags.Length)
                {
                    case 1:
                        openingTag = tags[0];
                        closingTag = openingTag;
                        break;
                    case 2:
                        openingTag = tags[0];
                        closingTag = tags[1];
                        break;
                    default:
                        openingTag = string.Empty;
                        closingTag = string.Empty;
                        break;
                }

                if (!string.IsNullOrEmpty(openingTag) || !string.IsNullOrEmpty(closingTag))
                {
                    if (textBoxListViewText.Focused || textBoxListViewTextOriginal.Focused)
                    {
                        SurroundWithTag(openingTag, closingTag, true);
                    }
                    else
                    {
                        SurroundWithTag(openingTag, closingTag);
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSelectionToggleCasing == e.KeyData)
            {
                e.SuppressKeyPress = true;
                if (textBoxListViewText.Focused || textBoxListViewTextOriginal.Focused)
                {
                    var tb = GetFocusedTextBox();
                    if (tb.SelectionLength > 0)
                    {
                        var start = tb.SelectionStart;
                        var length = tb.SelectionLength;
                        var text = tb.SelectedText.ToggleCasing(GetCurrentSubtitleFormat());
                        tb.SelectedText = text;
                        tb.SelectionStart = start;
                        tb.SelectionLength = length;
                    }
                }
                else
                {
                    ToggleCasingListView();
                }
            }
            else if (!toolStripMenuItemRtlUnicodeControlChars.Visible && _shortcuts.MainEditFixRTLViaUnicodeChars == e.KeyData && InListView)
            {
                ToolStripMenuItemRtlUnicodeControlCharsClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (!toolStripMenuItemRemoveUnicodeControlChars.Visible && _shortcuts.MainEditRemoveRTLUnicodeChars == e.KeyData && InListView)
            {
                ToolStripMenuItemRemoveUnicodeControlCharsClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (!toolStripMenuItemReverseRightToLeftStartEnd.Visible && _shortcuts.MainEditReverseStartAndEndingForRtl == e.KeyData && InListView)
            {
                ReverseStartAndEndingForRtl();
                e.SuppressKeyPress = true;
            }
            else if (toolStripMenuItemUndo.ShortcutKeys == e.KeyData) // undo
            {
                ToolStripMenuItemUndoClick(sender, e);
                e.SuppressKeyPress = true;
            }
            else if (toolStripMenuItemRedo.ShortcutKeys == e.KeyData) // redo
            {
                ToolStripMenuItemRedoClick(sender, e);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToNextSubtitlePlayTranslate == e.KeyData)
            {
                if (AutoRepeatContinueOn || AutoRepeatOn)
                {
                    PlayNext();
                }
                else
                {
                    ButtonNextClick(null, null);
                }
            }
            else if (_shortcuts.MainGeneralGoToPrevSubtitlePlayTranslate == e.KeyData)
            {
                if (AutoRepeatContinueOn || AutoRepeatOn)
                {
                    PlayPrevious();
                }
                else
                {
                    ButtonPreviousClick(null, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToNextSubtitle == e.KeyData)
            {
                MoveNextPrevious(0);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToNextSubtitleCursorAtEnd == e.KeyData)
            {
                MoveNextPrevious(0);
                textBoxListViewText.SelectionStart = textBoxListViewText.Text.Length;
                textBoxListViewText.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToPrevSubtitle == e.KeyData)
            {
                ButtonPreviousClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToStartOfCurrentSubtitle == e.KeyData)
            {
                GotoSubPositionAndPause();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToEndOfCurrentSubtitle == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count == 1 && mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.CurrentPosition = _subtitle.Paragraphs[SubtitleListview1.SelectedItems[0].Index].EndTime.TotalSeconds;
                    e.SuppressKeyPress = true;
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGoToPreviousSubtitleAndFocusVideo == e.KeyData)
            {
                int newIndex = _subtitleListViewIndex - 1;
                if (newIndex >= 0)
                {
                    _subtitleListViewIndex = -1;
                    SelectListViewIndexAndEnsureVisible(newIndex);
                    _subtitleListViewIndex = newIndex;
                    textBoxListViewText.Focus();
                    textBoxListViewText.SelectAll();
                    GotoSubtitleIndex(newIndex);
                    ShowSubtitle();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGoToNextSubtitleAndFocusVideo == e.KeyData)
            {
                int newIndex = _subtitleListViewIndex + 1;
                if (newIndex < _subtitle.Paragraphs.Count)
                {
                    _subtitleListViewIndex = -1;
                    SelectListViewIndexAndEnsureVisible(newIndex);
                    _subtitleListViewIndex = newIndex;
                    textBoxListViewText.Focus();
                    textBoxListViewText.SelectAll();
                    GotoSubtitleIndex(newIndex);
                    ShowSubtitle();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGoToPreviousSubtitleAndFocusWaveform == e.KeyData)
            {
                int newIndex = _subtitleListViewIndex - 1;
                if (newIndex >= 0)
                {
                    _subtitleListViewIndex = -1;
                    SelectListViewIndexAndEnsureVisible(newIndex);
                    _subtitleListViewIndex = newIndex;
                    audioVisualizer.Focus();
                    GotoSubtitleIndex(newIndex);
                    ShowSubtitle();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGoToNextSubtitleAndFocusWaveform == e.KeyData)
            {
                int newIndex = _subtitleListViewIndex + 1;
                if (newIndex < _subtitle.Paragraphs.Count)
                {
                    _subtitleListViewIndex = -1;
                    SelectListViewIndexAndEnsureVisible(newIndex);
                    _subtitleListViewIndex = newIndex;
                    audioVisualizer.Focus();
                    GotoSubtitleIndex(newIndex);
                    ShowSubtitle();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGoToNextSubtitleAndPlay == e.KeyData && mediaPlayer != null)
            {
                int newIndex = _subtitleListViewIndex + 1;
                if (newIndex < _subtitle.Paragraphs.Count)
                {
                    _subtitleListViewIndex = -1;
                    SelectListViewIndexAndEnsureVisible(newIndex);
                    _subtitleListViewIndex = newIndex;
                    textBoxListViewText.Focus();
                    textBoxListViewText.SelectAll();
                    GotoSubtitleIndex(newIndex);
                    var p = _subtitle.GetParagraphOrDefault(newIndex);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        ShowSubtitle();
                        mediaPlayer.Play();
                        ResetPlaySelection();
                        _endSeconds = p.EndTime.TotalSeconds;
                    }

                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainGoToPrevSubtitleAndPlay == e.KeyData && mediaPlayer != null)
            {
                int newIndex = _subtitleListViewIndex - 1;
                if (newIndex >= 0)
                {
                    _subtitleListViewIndex = -1;
                    SelectListViewIndexAndEnsureVisible(newIndex);
                    _subtitleListViewIndex = newIndex;
                    textBoxListViewText.Focus();
                    textBoxListViewText.SelectAll();
                    GotoSubtitleIndex(newIndex);
                    var p = _subtitle.GetParagraphOrDefault(newIndex);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        ShowSubtitle();
                        mediaPlayer.Play();
                        ResetPlaySelection();
                        _endSeconds = p.EndTime.TotalSeconds;
                    }

                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainTextBoxAutoBreak == e.KeyData && InListView)
            {
                if (textBoxListViewText.Focused)
                {
                    BreakUnbreakTextBox(false, textBoxListViewText);
                }
                else if (textBoxListViewTextOriginal.Focused)
                {
                    BreakUnbreakTextBox(false, textBoxListViewTextOriginal);
                }
                else
                {
                    AutoBreak();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxUnbreak == e.KeyData && InListView)
            {
                if (textBoxListViewText.Focused)
                {
                    BreakUnbreakTextBox(true, textBoxListViewText);
                }
                else if (textBoxListViewTextOriginal.Focused)
                {
                    BreakUnbreakTextBox(true, textBoxListViewTextOriginal);
                }
                else
                {
                    Unbreak();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxUnbreakNoSpace == e.KeyData && InListView)
            {
                if (textBoxListViewText.Focused)
                {
                    BreakUnbreakTextBox(true, textBoxListViewText, true);
                }
                else if (textBoxListViewTextOriginal.Focused)
                {
                    BreakUnbreakTextBox(true, textBoxListViewTextOriginal, true);
                }
                else
                {
                    Unbreak(true);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralToggleBookmarks == e.KeyData)
            {
                ToggleBookmarks(false, this);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralFocusTextBox == e.KeyData)
            {
                textBoxListViewText.Focus();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralEditBookmark == e.KeyData)
            {
                var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                if (p?.Bookmark != null)
                {
                    LabelBookmarkDoubleClick(null, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralClearBookmarks == e.KeyData)
            {
                ClearBookmarks();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToBookmark == e.KeyData)
            {
                e.SuppressKeyPress = true;
                BeginInvoke(new Action(() => GoToBookmark()));
            }
            else if (_shortcuts.MainGeneralGoToPreviousBookmark == e.KeyData)
            {
                GoToPrevoiusBookmark();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToNextBookmark == e.KeyData)
            {
                GoToNextBookmark();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralChooseProfile == e.KeyData)
            {
                e.SuppressKeyPress = true;
                BeginInvoke(new Action(() => ChooseProfile()));
            }
            else if (_shortcuts.MainGeneralOpenDataFolder == e.KeyData)
            {
                UiUtil.OpenFolder(Configuration.DataDirectory);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralDuplicateLine == e.KeyData && SubtitleListview1.SelectedItems.Count == 1)
            {
                DuplicateLine();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralToggleView == e.KeyData)
            {
                if (InListView)
                {
                    SwitchView(SourceView);
                }
                else
                {
                    SwitchView(ListView);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetNewActor == e.KeyData)
            {
                var formatType = GetCurrentSubtitleFormat().GetType();
                if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
                {
                    SetNewActor(null, null);
                }
                else if (formatType == typeof(WebVTT) || formatType == typeof(WebVTTFileWithLineNumber))
                {
                    WebVTTSetNewVoiceTextBox(null, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetActor1 == e.KeyData)
            {
                SetActorVoice(0);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetActor2 == e.KeyData)
            {
                SetActorVoice(1);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetActor3 == e.KeyData)
            {
                SetActorVoice(2);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetActor4 == e.KeyData)
            {
                SetActorVoice(3);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetActor5 == e.KeyData)
            {
                SetActorVoice(4);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetActor6 == e.KeyData)
            {
                SetActorVoice(5);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetActor7 == e.KeyData)
            {
                SetActorVoice(6);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewSetActor8 == e.KeyData)
            {
                SetActorVoice(7);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralToggleMode == e.KeyData && Configuration.Settings.General.ShowVideoControls)
            {
                var nextModeIndex = tabControlModes.SelectedIndex + 1;
                if (nextModeIndex == tabControlModes.TabCount)
                {
                    nextModeIndex = 0;
                }

                tabControlModes.SelectedIndex = nextModeIndex;
                tabControlModes.Focus();

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralTogglePreviewOnVideo == e.KeyData)
            {
                Configuration.Settings.General.MpvHandlesPreviewText = !Configuration.Settings.General.MpvHandlesPreviewText;
                if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
                {
                    if (!Configuration.Settings.General.MpvHandlesPreviewText)
                    {
                        libMpv.RemoveSubtitle();
                    }

                    mediaPlayer.VideoPlayer = mediaPlayer.VideoPlayer;
                    mediaPlayer.SetSubtitleText(string.Empty, null, _subtitle, GetCurrentSubtitleFormat());
                    ShowSubtitle();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralFileSaveAll == e.KeyData)
            {
                SaveAll();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralSetAssaResolution == e.KeyData)
            {
                SetAssaResolution(_subtitle);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralTakeAutoBackupNow == e.KeyData)
            {
                var saveFormat = GetCurrentSubtitleFormat();
                if (!saveFormat.IsTextBased)
                {
                    saveFormat = new SubRip();
                }

                if (_subtitle != null)
                {
                    if (RestoreAutoBackup.SaveAutoBackup(_subtitle, saveFormat, _subtitle.ToText(saveFormat)))
                    {
                        ShowStatus(_language.AutoBackupSaved);
                    }
                }

                if (_subtitleOriginalFileName != null && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    RestoreAutoBackup.SaveAutoBackup(_subtitleOriginal, saveFormat, _subtitleOriginal.ToText(saveFormat));
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainToggleFocus == e.KeyData)
            {
                if (InListView)
                {
                    if (SubtitleListview1.Focused)
                    {
                        textBoxListViewText.Focus();
                    }
                    else
                    {
                        SubtitleListview1.Focus();
                    }
                }
                else if (InSourceView)
                {
                    if (!textBoxSource.Focused)
                    {
                        textBoxSource.Focus();
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainToggleFocusWaveform == e.KeyData)
            {
                if (audioVisualizer.CanFocus)
                {
                    if (InListView)
                    {
                        if (SubtitleListview1.Focused || textBoxListViewText.Focused)
                        {
                            audioVisualizer.Focus();
                        }
                        else
                        {
                            SubtitleListview1.Focus();
                        }
                    }
                    else if (InSourceView)
                    {
                        if (textBoxSource.Focused)
                        {
                            audioVisualizer.Focus();
                        }
                        else
                        {
                            textBoxSource.Focus();
                        }
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainToggleFocusWaveformTextBox == e.KeyData)
            {
                if (textBoxListViewText.Focused || textBoxListViewTextOriginal.Focused)
                {
                    audioVisualizer.Focus();
                }
                else if (audioVisualizer.Focused)
                {
                    textBoxListViewText.Focus();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToFirstSelectedLine == e.KeyData) //Locate first selected line in subtitle listview
            {
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    SubtitleListview1.SelectedItems[0].EnsureVisible();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToFirstEmptyLine == e.KeyData) //Go to first empty line - if any
            {
                GoToFirstEmptyLine();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralMergeSelectedLines == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    if (SubtitleListview1.SelectedItems.Count == 2)
                    {
                        MergeAfterToolStripMenuItemClick(null, null);
                    }
                    else
                    {
                        MergeSelectedLines();
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesAndAutoBreak == e.KeyData)
            {
                e.SuppressKeyPress = true;
                if (SubtitleListview1.SelectedItems.Count == 2)
                {
                    MergeWithLineAfter(false, BreakMode.AutoBreak);
                }
                else
                {
                    MergeSelectedLines(BreakMode.AutoBreak);
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesAndUnbreak == e.KeyData)
            {
                e.SuppressKeyPress = true;
                if (SubtitleListview1.SelectedItems.Count == 2)
                {
                    MergeWithLineAfter(false, BreakMode.Unbreak);
                }
                else
                {
                    MergeSelectedLines(BreakMode.Unbreak);
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesAndUnbreakNoSpace == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    if (SubtitleListview1.SelectedItems.Count == 2)
                    {
                        MergeWithLineAfter(false, BreakMode.UnbreakNoSpace);
                    }
                    else
                    {
                        MergeSelectedLines(BreakMode.UnbreakNoSpace);
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesBilingual == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1 && SubtitleListview1.SelectedItems.Count < 10)
                {
                    e.SuppressKeyPress = true;
                    MergeSelectedLinesBilingual(SubtitleListview1.GetSelectedIndices());
                }
            }
            else if (_shortcuts.MainGeneralMergeWithPreviousBilingual == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 1 && SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    MergeSelectedLinesBilingual(new int[] { SubtitleListview1.SelectedItems[0].Index - 1, SubtitleListview1.SelectedItems[0].Index });
                }
            }
            else if (_shortcuts.MainGeneralMergeWithNextBilingual == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 1 && SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    MergeSelectedLinesBilingual(new int[] { SubtitleListview1.SelectedItems[0].Index, SubtitleListview1.SelectedItems[0].Index + 1 });
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesOnlyFirstText == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    MergeSelectedLinesOnlyFirstText();
                }
            }
            else if (_shortcuts.MainGeneralMergeWithNext == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx >= 0 && _subtitle.Paragraphs.Count > idx + 1)
                    {
                        SelectListViewIndexAndEnsureVisible(idx);
                        MergeAfterToolStripMenuItemClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeWithPrevious == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx > 0)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(idx - 1, true);
                        MergeAfterToolStripMenuItemClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeWithNextAndUnbreak == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx >= 0 && _subtitle.Paragraphs.Count > idx + 1)
                    {
                        MakeHistoryForUndo(_language.BeforeMergeLines);
                        _makeHistoryPaused = true;
                        SubtitleListview1.SelectIndexAndEnsureVisible(idx, true);
                        MergeAfterToolStripMenuItemClick(null, null);
                        ButtonUnBreakClick(null, null);
                        _makeHistoryPaused = false;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeWithPreviousAndUnbreak == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx > 0)
                    {
                        MakeHistoryForUndo(_language.BeforeMergeLines);
                        _makeHistoryPaused = true;
                        SubtitleListview1.SelectIndexAndEnsureVisible(idx - 1, true);
                        MergeAfterToolStripMenuItemClick(null, null);
                        ButtonUnBreakClick(null, null);
                        _makeHistoryPaused = false;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeWithNextAndBreak == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx >= 0 && _subtitle.Paragraphs.Count > idx + 1)
                    {
                        MakeHistoryForUndo(_language.BeforeMergeLines);
                        _makeHistoryPaused = true;
                        SubtitleListview1.SelectIndexAndEnsureVisible(idx, true);
                        MergeAfterToolStripMenuItemClick(null, null);
                        AutoBreak();
                        _makeHistoryPaused = false;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeWithPreviousAndBreak == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx > 0)
                    {
                        MakeHistoryForUndo(_language.BeforeMergeLines);
                        _makeHistoryPaused = true;
                        SubtitleListview1.SelectIndexAndEnsureVisible(idx - 1, true);
                        MergeAfterToolStripMenuItemClick(null, null);
                        AutoBreak();
                        _makeHistoryPaused = false;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (_shortcuts.MainGeneralToggleTranslationMode == e.KeyData)
            { // toggle translator mode
                EditToolStripMenuItemDropDownOpening(null, null);
                ToolStripMenuItemTranslationModeClick(null, null);
            }
            else if (e.KeyData == _shortcuts.VideoPlayPauseToggle)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    if (_shortcuts.VideoPlayPauseToggle == Keys.Space &&
                        (textBoxListViewText.Focused || textBoxListViewTextOriginal.Focused || textBoxSearchWord.Focused))
                    {
                        return;
                    }

                    ResetPlaySelection();
                    e.SuppressKeyPress = true;
                    TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(1), () => mediaPlayer.TogglePlayPause());
                }
            }
            else if (e.KeyData == _shortcuts.VideoPlay150Speed)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    if (mediaPlayer.IsPaused)
                    {
                        SetPlayRateAndPlay(150);
                    }
                    else if (mediaPlayer.VideoPlayer.PlayRate != 1.5)
                    {
                        SetPlayRateAndPlay(150, false);
                    }
                    else
                    {
                        mediaPlayer.Pause();
                    }

                    e.SuppressKeyPress = true;
                }
            }
            else if (e.KeyData == _shortcuts.VideoPlay200Speed)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    if (mediaPlayer.IsPaused)
                    {
                        SetPlayRateAndPlay(200);
                    }
                    else if (mediaPlayer.VideoPlayer.PlayRate != 2.0)
                    {
                        SetPlayRateAndPlay(200, false);
                    }
                    else
                    {
                        mediaPlayer.Pause();
                    }

                    e.SuppressKeyPress = true;
                }
            }
            else if (e.KeyData == _shortcuts.VideoPause)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    ResetPlaySelection();
                    mediaPlayer.Pause();
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.KeyData == _shortcuts.VideoStop)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.Stop();
                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainVideoPlayFromJustBefore == e.KeyData)
            {
                ButtonBeforeTextClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideoPlayFromBeginning == e.KeyData)
            {
                mediaPlayer.Stop();
                mediaPlayer.Play();
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.Space)
            {
                if (!textBoxListViewText.Focused && !textBoxListViewTextOriginal.Focused && !textBoxSource.Focused && mediaPlayer.VideoPlayer != null)
                {
                    if (audioVisualizer.Focused || mediaPlayer.Focused || SubtitleListview1.Focused)
                    {
                        ResetPlaySelection();
                        mediaPlayer.TogglePlayPause();
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D1)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D2)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.EndTime.TotalSeconds;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D3)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    int index = SubtitleListview1.SelectedItems[0].Index - 1;
                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        SelectListViewIndexAndEnsureVisible(index);
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D4)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    int index = SubtitleListview1.SelectedItems[0].Index + 1;
                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        SelectListViewIndexAndEnsureVisible(index);
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideoToggleStartEndCurrent == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.Pause();
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        if (Math.Abs(mediaPlayer.CurrentPosition - p.StartTime.TotalSeconds) < 0.1)
                        {
                            mediaPlayer.CurrentPosition = p.EndTime.TotalSeconds;
                        }
                        else
                        {
                            mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        }
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideoPlaySelectedLines == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    PlaySelectedLines(false);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideoLoopSelectedLines == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    PlaySelectedLines(true);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideoGoToStartCurrent == e.KeyData)
            {
                GotoSubPositionAndPause();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideo3000MsLeft == e.KeyData)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    GoBackSeconds(3);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideo3000MsRight == e.KeyData)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    GoBackSeconds(-3);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.W) // watermark
            {
                var enc = GetCurrentEncoding();
                if (enc != Encoding.UTF8 && enc != Encoding.UTF32 && enc != Encoding.Unicode && enc != Encoding.UTF7)
                {
                    MessageBox.Show(LanguageSettings.Current.Watermark.ErrorUnicodeEncodingOnly);
                }
                else
                {
                    using (var watermarkForm = new Watermark())
                    {
                        MakeHistoryForUndo(LanguageSettings.Current.Watermark.BeforeWatermark);
                        watermarkForm.Initialize(_subtitle, FirstSelectedIndex);
                        if (watermarkForm.ShowDialog(this) == DialogResult.OK)
                        {
                            watermarkForm.AddOrRemove(_subtitle);
                            RefreshSelectedParagraph();
                        }
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.F) // Toggle HHMMSSFF / HHMMSSMMM
            {
                Configuration.Settings.General.UseTimeFormatHHMMSSFF = !Configuration.Settings.General.UseTimeFormatHHMMSSFF;
                RefreshTimeCodeMode();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralSwitchTranslationAndOriginal == e.KeyData &&
                     _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0 && _networkSession == null)
            { // switch original/current
                int firstIndex = FirstSelectedIndex;
                if (firstIndex == -1)
                {
                    firstIndex = _subtitleListViewIndex;
                }

                double firstMs = -1;
                if (firstIndex >= 0)
                {
                    firstMs = _subtitle.Paragraphs[firstIndex].StartTime.TotalMilliseconds;
                }

                (_subtitle, _subtitleOriginal) = (_subtitleOriginal, _subtitle);
                (_fileName, _subtitleOriginalFileName) = (_subtitleOriginalFileName, _fileName);
                (_changeSubtitleHash, _changeOriginalSubtitleHash) = (_changeOriginalSubtitleHash, _changeSubtitleHash);

                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);

                _subtitleListViewIndex = -1;
                if (firstIndex == -1 && _subtitle?.Paragraphs?.Count > 0)
                {
                    firstIndex = 0;
                }

                SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);

                SetTitle();
                _fileDateTime = new DateTime();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralSwitchTranslationAndOriginalTextBoxes == e.KeyData &&
                     _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            { // switch original/current text boxes
                Configuration.Settings.General.TextAndOrigianlTextBoxesSwitched = !Configuration.Settings.General.TextAndOrigianlTextBoxesSwitched;
                MainResize();

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose == e.KeyData)
            {
                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(25), () => ToolStripButtonLayoutChooseClick(null, null));
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose1 == e.KeyData)
            {
                SetLayout(0, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose2 == e.KeyData)
            {
                SetLayout(1, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose3 == e.KeyData)
            {
                SetLayout(2, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose4 == e.KeyData)
            {
                SetLayout(3, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose5 == e.KeyData)
            {
                SetLayout(4, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose6 == e.KeyData)
            {
                SetLayout(5, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose7 == e.KeyData)
            {
                SetLayout(6, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose8 == e.KeyData)
            {
                SetLayout(7, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose9 == e.KeyData)
            {
                SetLayout(8, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose10 == e.KeyData)
            {
                SetLayout(9, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose11 == e.KeyData)
            {
                SetLayout(10, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralLayoutChoose12 == e.KeyData)
            {
                SetLayout(11, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralMergeTranslationAndOriginal == e.KeyData) // Merge translation and original
            {
                if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0 && _networkSession == null)
                {
                    if (ContinueNewOrExit())
                    {
                        var subtitle = new Subtitle();
                        var fr = CurrentFrameRate;
                        var format = GetCurrentSubtitleFormat();
                        var videoFileName = _videoFileName;
                        foreach (var p in _subtitle.Paragraphs)
                        {
                            var newP = new Paragraph(p);
                            var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(p), p, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                newP.Text = (newP.Text.TrimEnd() + Environment.NewLine + original.Text.TrimStart()).Trim();
                            }

                            subtitle.Paragraphs.Add(newP);
                        }

                        RemoveOriginal(true, true);
                        FileNew();
                        SetCurrentFormat(format);
                        toolStripComboBoxFrameRate.Text = fr.ToString();
                        _subtitle = subtitle;
                        _subtitleListViewIndex = -1;
                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                        if (!string.IsNullOrEmpty(videoFileName))
                        {
                            OpenVideo(videoFileName);
                        }

                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.KeyData == _shortcuts.ToggleVideoDockUndock)
            {
                if (_isVideoControlsUndocked)
                {
                    RedockVideoControlsToolStripMenuItemClick(null, null);
                }
                else
                {
                    UndockVideoControlsToolStripMenuItemClick(null, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.MainVideoFocusSetVideoPosition)
            {
                if (tabControlModes.SelectedTab == tabPageAdjust)
                {
                    timeUpDownVideoPositionAdjust.Focus();
                }
                else if (tabControlModes.SelectedTab == tabPageCreate)
                {
                    timeUpDownVideoPosition.Focus();
                }

                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video1FrameLeft)
            {
                if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
                {
                    libMpv.GetPreviousFrame();
                }
                else
                {
                    MoveVideoSeconds(-1.0 / Configuration.Settings.General.CurrentFrameRate);
                }

                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video1FrameRight)
            {
                if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
                {
                    libMpv.GetNextFrame();
                }
                else
                {
                    MoveVideoSeconds(1.0 / Configuration.Settings.General.CurrentFrameRate);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.Video1FrameLeftWithPlay)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    double startSeconds = mediaPlayer.CurrentPosition - (1.0 / Configuration.Settings.General.CurrentFrameRate);
                    ResetPlaySelection();
                    _endSeconds = startSeconds + (1.0 / Configuration.Settings.General.CurrentFrameRate);
                    _endSecondsNewPosition = startSeconds;
                    mediaPlayer.CurrentPosition = startSeconds;
                    UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());
                    mediaPlayer.Play();
                    _endSecondsNewPositionTicks = DateTime.UtcNow.Ticks;
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.Video1FrameRightWithPlay)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    double startSeconds = mediaPlayer.CurrentPosition + (1.0 / Configuration.Settings.General.CurrentFrameRate);
                    ResetPlaySelection();
                    _endSeconds = startSeconds + (1.0 / Configuration.Settings.General.CurrentFrameRate);
                    _endSecondsNewPosition = startSeconds;
                    mediaPlayer.CurrentPosition = startSeconds;
                    UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());
                    mediaPlayer.Play();
                    _endSecondsNewPositionTicks = DateTime.UtcNow.Ticks;
                }

                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video100MsLeft)
            {
                MoveVideoSeconds(-0.1);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video100MsRight)
            {
                MoveVideoSeconds(0.1);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video500MsLeft)
            {
                MoveVideoSeconds(-0.5);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video500MsRight)
            {
                MoveVideoSeconds(0.5);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video1000MsLeft)
            {
                MoveVideoSeconds(-1.0);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video1000MsRight)
            {
                MoveVideoSeconds(1.0);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video5000MsLeft)
            {
                MoveVideoSeconds(-5.0);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video5000MsRight)
            {
                MoveVideoSeconds(5.0);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.VideoXSMsLeft)
            {
                ButtonAdjustSecBackClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.VideoXSMsRight)
            {
                ButtonAdjustSecForwardClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.VideoXLMsLeft)
            {
                ButtonAdjustSecBack2Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.VideoXLMsRight)
            {
                ButtonAdjustSecForward2Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainVideoFullscreen) // fullscreen
            {
                GoFullscreen(false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainVideoSlower)
            {
                e.SuppressKeyPress = true;
                for (var index = 0; index < _contextMenuStripPlayRate.Items.Count; index++)
                {
                    var item = (ToolStripMenuItem)_contextMenuStripPlayRate.Items[index];
                    if (item.Checked && index > 0)
                    {
                        SetPlayRate(_contextMenuStripPlayRate.Items[index - 1], null);
                        return;
                    }
                }
            }
            else if (e.KeyData == _shortcuts.MainVideoFaster)
            {
                e.SuppressKeyPress = true;
                for (var index = 0; index < _contextMenuStripPlayRate.Items.Count; index++)
                {
                    var item = (ToolStripMenuItem)_contextMenuStripPlayRate.Items[index];
                    if (item.Checked && index + 1 < _contextMenuStripPlayRate.Items.Count)
                    {
                        SetPlayRate(_contextMenuStripPlayRate.Items[index + 1], null);
                        return;
                    }
                }
            }
            else if (e.KeyData == _shortcuts.MainVideoSpeedToggle)
            {
                e.SuppressKeyPress = true;
                if (!string.IsNullOrEmpty(_videoFileName) && mediaPlayer.VideoPlayer != null)
                {
                    if (Math.Abs(mediaPlayer.VideoPlayer.PlayRate - 2) < 0.1)
                    {
                        SetPlayRateAndPlay(50, false);
                    }
                    else if (Math.Abs(mediaPlayer.VideoPlayer.PlayRate - 1) < 0.1)
                    {
                        SetPlayRateAndPlay(150, false);
                    }
                    else if (Math.Abs(mediaPlayer.VideoPlayer.PlayRate - 1.5) < 0.1)
                    {
                        SetPlayRateAndPlay(200, false);
                    }
                    else
                    {
                        SetPlayRateAndPlay(100, false);
                    }
                }
            }
            else if (e.KeyData == _shortcuts.MainVideoReset)
            {
                e.SuppressKeyPress = true;
                if (audioVisualizer != null)
                {
                    audioVisualizer.ZoomFactor = 1.0;
                    audioVisualizer.VerticalZoomFactor = 1.0;
                    InitializeWaveformZoomDropdown();
                }

                if (mediaPlayer != null && mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.VideoPlayer.PlayRate = 1.0;
                    InitializePlayRateDropDown();
                    toolStripSplitButtonPlayRate.Checked = false;
                }
            }
            else if (audioVisualizer.Focused && audioVisualizer.NewSelectionParagraph != null && e.KeyData == _shortcuts.WaveformAddTextAtHere)
            {
                AddParagraphHereToolStripMenuItemClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Focused && audioVisualizer.NewSelectionParagraph != null && e.KeyData == _shortcuts.WaveformAddTextAtHereFromClipboard)
            {
                AddParagraphAndPasteToolStripMenuItem_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Focused && audioVisualizer.NewSelectionParagraph != null && e.KeyData == _shortcuts.WaveformSetParagraphAsNewSelection)
            {
                ToolStripMenuItemSetParagraphAsSelectionClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoGoToPrevSubtitle)
            {
                GoToPreviousSubtitle(mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoGoToNextSubtitle)
            {
                GoToNextSubtitle(mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoGoToPrevTimeCode)
            {
                GoToNearestTimeCode(mediaPlayer.CurrentPosition * TimeCode.BaseUnit, false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoGoToNextTimeCode)
            {
                GoToNearestTimeCode(mediaPlayer.CurrentPosition * TimeCode.BaseUnit, true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoSelectNextSubtitle)
            {
                var cp = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
                foreach (var p in _subtitle.Paragraphs)
                {
                    if (p.StartTime.TotalMilliseconds > cp)
                    {
                        SubtitleListview1.SelectNone();
                        SubtitleListview1.Items[_subtitle.Paragraphs.IndexOf(p)].Selected = true;
                        SubtitleListview1.Items[_subtitle.Paragraphs.IndexOf(p)].Focused = true;
                        break;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.Chapters?.Length > 0 && e.KeyData == _shortcuts.VideoGoToPrevChapter)
            {
                var cp = mediaPlayer.CurrentPosition - 0.01;
                foreach (var chapter in mediaPlayer.Chapters.Reverse<MatroskaChapter>())
                {
                    if (chapter.StartTime < cp)
                    {
                        mediaPlayer.CurrentPosition = chapter.StartTime;
                        break;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.Chapters?.Length > 0 && e.KeyData == _shortcuts.VideoGoToNextChapter)
            {
                var cp = mediaPlayer.CurrentPosition + 0.01;
                foreach (var chapter in mediaPlayer.Chapters)
                {
                    if (chapter.StartTime > cp)
                    {
                        mediaPlayer.CurrentPosition = chapter.StartTime;
                        break;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.ShotChanges != null && e.KeyData == _shortcuts.WaveformGoToPreviousShotChange)
            {
                var cp = mediaPlayer.CurrentPosition - 0.01;
                foreach (var shotChange in audioVisualizer.ShotChanges.Reverse<double>())
                {
                    if (shotChange < cp)
                    {
                        mediaPlayer.CurrentPosition = shotChange;
                        break;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.ShotChanges != null && e.KeyData == _shortcuts.WaveformGoToNextShotChange)
            {
                var cp = mediaPlayer.CurrentPosition + 0.01;
                foreach (var shotChange in audioVisualizer.ShotChanges)
                {
                    if (shotChange > cp)
                    {
                        mediaPlayer.CurrentPosition = shotChange;
                        break;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.ShotChanges != null && mediaPlayer.IsPaused && e.KeyData == _shortcuts.WaveformToggleShotChange)
            {
                var cp = mediaPlayer.CurrentPosition;
                var idx = audioVisualizer.GetShotChangeIndex(cp);
                if (idx >= 0)
                {
                    RemoveShotChange(idx);
                    if (audioVisualizer.ShotChanges.Count == 0)
                    {
                        ShotChangeHelper.DeleteShotChanges(_videoFileName);
                    }
                }
                else
                { // add shot change
                    var list = audioVisualizer.ShotChanges.Where(p => p > 0).ToList();
                    list.Add(cp);
                    list.Sort();
                    audioVisualizer.ShotChanges = list;
                    ShotChangeHelper.SaveShotChanges(_videoFileName, list);
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.ShotChanges != null && mediaPlayer.IsPaused && e.KeyData == _shortcuts.WaveformGuessStart)
            {
                AutoGuessStartTime(_subtitleListViewIndex);
                e.SuppressKeyPress = true;
            }
            else if (!string.IsNullOrEmpty(_videoFileName) && mediaPlayer.IsPaused && e.KeyData == _shortcuts.WaveformAudioToTextVosk)
            {
                e.SuppressKeyPress = true;
                AudioToTextVoskSelectedLines();
            }
            else if (!string.IsNullOrEmpty(_videoFileName) && mediaPlayer.IsPaused && e.KeyData == _shortcuts.WaveformAudioToTextWhisper)
            {
                e.SuppressKeyPress = true;
                AudioToTextWhisperSelectedLines();
            }
            else if (audioVisualizer.Focused && e.KeyCode == Keys.Delete)
            {
                ToolStripMenuItemDeleteClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainToolsAutoDuration == e.KeyData)
            {
                MakeAutoDuration();
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.I)
            {
                using (var form = new ImportUnknownFormat(string.Empty))
                {
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        if (form.ImportedSubitle?.Paragraphs.Count > 0)
                        {
                            _subtitle = form.ImportedSubitle;
                            _fileName = null;
                            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                            SetTitle();
                        }
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxMoveLastWordDown)
            {
                if (textBoxListViewTextOriginal.Focused)
                {
                    MoveLastWordDown(textBoxListViewTextOriginal);
                }
                else
                {
                    MoveLastWordDown(textBoxListViewText);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxMoveFirstWordFromNextUp)
            {
                if (textBoxListViewTextOriginal.Focused)
                {
                    MoveFirstWordInNextUp(textBoxListViewTextOriginal);
                }
                else
                {
                    MoveFirstWordInNextUp(textBoxListViewText);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxMoveLastWordDownCurrent)
            {
                if (textBoxListViewTextOriginal.Focused)
                {
                    MoveWordUpDownInCurrent(true, textBoxListViewTextOriginal);
                }
                else
                {
                    MoveWordUpDownInCurrent(true, textBoxListViewText);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxMoveFirstWordUpCurrent)
            {
                if (textBoxListViewTextOriginal.Focused)
                {
                    MoveWordUpDownInCurrent(false, textBoxListViewTextOriginal);
                }
                else
                {
                    MoveWordUpDownInCurrent(false, textBoxListViewText);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxMoveFromCursorToNextAndGoToNext)
            {
                if (textBoxListViewTextOriginal.Focused)
                {
                    MoveTextFromCursorToNext(textBoxListViewTextOriginal);
                }
                else
                {
                    MoveTextFromCursorToNext(textBoxListViewText);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAutoCalcCurrentDuration == e.KeyData)
            {
                RecalcCurrentDuration();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAutoCalcCurrentDurationByOptimalReadingSpeed == e.KeyData)
            {
                RecalcCurrentDuration(true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAutoCalcCurrentDurationByMinReadingSpeed == e.KeyData)
            {
                RecalcCurrentDurationMin();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.F3 && e.Modifiers == Keys.Shift)
            {
                FindPrevious();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendCurrentSubtitle == e.KeyData)
            {
                ExtendCurrentSubtitle();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToNextSubtitle == e.KeyData)
            {
                ExtendSelectedLinesToNextLine();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToPreviousSubtitle == e.KeyData)
            {
                ExtendSelectedLinesToPreviousLine();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToNextSubtitleMinusChainingGap == e.KeyData)
            {
                ExtendSelectedLinesToNextLine(true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToPreviousSubtitleMinusChainingGap == e.KeyData)
            {
                ExtendSelectedLinesToPreviousLine(true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendPreviousLineEndToCurrentStart == e.KeyData)
            {
                ExtendPreviousEndToCurrentStart();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendNextLineStartToCurrentEnd == e.KeyData)
            {
                ExtendNextStartToCurrentEnd();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSnapStartToNextShotChange == e.KeyData)
            {
                SnapSelectedLinesStartToNextShotChange();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSnapEndToPreviousShotChange == e.KeyData)
            {
                SnapSelectedLinesEndToPreviousShotChange();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToNextShotChange == e.KeyData)
            {
                ExtendSelectedLinesToNextShotChange();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToPreviousShotChange == e.KeyData)
            {
                ExtendSelectedLinesToPreviousShotChange();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainSetInCueToClosestShotChangeLeftGreenZone == e.KeyData)
            {
                SetCueToClosestShotChangeGreenZone(true, true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainSetInCueToClosestShotChangeRightGreenZone == e.KeyData)
            {
                SetCueToClosestShotChangeGreenZone(true, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainSetOutCueToClosestShotChangeLeftGreenZone == e.KeyData)
            {
                SetCueToClosestShotChangeGreenZone(false, true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainSetOutCueToClosestShotChangeRightGreenZone == e.KeyData)
            {
                SetCueToClosestShotChangeGreenZone(false, false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewGoToNextError)
            {
                GoToNextSyntaxError();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewRemoveBlankLines)
            {
                if (_subtitle != null && _subtitle.Paragraphs.Any(p => string.IsNullOrWhiteSpace(p.Text)))
                {
                    ShowStatus(LanguageSettings.Current.Settings.RemoveBlankLines);
                    MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.RemoveBlankLines));
                    SaveSubtitleListviewIndices();
                    _subtitle.RemoveEmptyLines();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    RefreshSelectedParagraph();
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainWaveformAdd)
            {
                if (audioVisualizer.WavePeaks == null)
                {
                    AudioWaveform_Click(null, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainVideoAudioToTextVosk)
            {
                VideoaudioToTextToolStripMenuItemClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainVideoAudioToTextWhisper)
            {
                AudioToTextWhisperTolStripMenuItemClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainVideoAudioExtractSelectedLines)
            {
                e.SuppressKeyPress = true;
                ExtractAudioSelectedLines();
            }
            else if (e.KeyData == _shortcuts.MainVideoTextToSpeech)
            {
                e.SuppressKeyPress = true;
                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(10), () => textToSpeechAndAddToVideoToolStripMenuItem_Click(null, null));
            }
            else if (e.KeyData == _shortcuts.MainVideoToggleBrightness)
            {
                if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
                {
                    ShowStatus(string.Format("Brightness: {0}", libMpv.ToggleBrightness()), false);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainVideoToggleContrast)
            {
                if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
                {
                    ShowStatus(string.Format("Contrast: {0}", libMpv.ToggleContrast()), false);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainCheckFixTimingViaShotChanges)
            {
                ShowCheckFixTimingViaShotChanges();
            }


            // TABS: Create / adjust / translate

            // create
            else if (_shortcuts.MainCreateInsertSubAtVideoPos == e.KeyData)
            {
                ButtonInsertNewTextClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateInsertSubAtVideoPosNoTextBoxFocus == e.KeyData)
            {
                var p = InsertNewTextAtVideoPosition(false, mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
                p.Text = string.Empty;
                SubtitleListview1.SetText(_subtitle.GetIndex(p), p.Text);
                textBoxListViewText.Text = p.Text;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateInsertSubAtVideoPosMax == e.KeyData)
            {
                var p = InsertNewTextAtVideoPosition(true, mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
                p.Text = string.Empty;
                SubtitleListview1.SetText(_subtitle.GetIndex(p), p.Text);
                textBoxListViewText.Text = p.Text;
                e.SuppressKeyPress = true;
            }
            else if (tabControlModes.SelectedTab == tabPageCreate && e.Modifiers == Keys.Alt && e.KeyCode == Keys.F9)
            {
                StopAutoDuration();
                SetEndTime();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateSetStart == e.KeyData)
            {
                ButtonSetStartTimeClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateSetEnd == e.KeyData)
            {
                StopAutoDuration();
                SetEndTime();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustVideoSetStartForAppropriateLine == e.KeyData && mediaPlayer.VideoPlayer != null)
            {
                VideoSetStartForAppropriateLine(mediaPlayer.CurrentPosition);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustVideoSetEndForAppropriateLine == e.KeyData && mediaPlayer.VideoPlayer != null)
            {
                VideoSetEndForAppropriateLine(mediaPlayer.CurrentPosition);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSetEndAndPause == e.KeyData)
            {
                StopAutoDuration();
                mediaPlayer.Pause();
                SetEndTime();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateSetEndAddNewAndGoToNew == e.KeyData)
            {
                StopAutoDuration();
                e.SuppressKeyPress = true;

                if (SubtitleListview1.SelectedItems.Count == 1)
                {
                    double videoPositionMs = mediaPlayer.CurrentPosition * 1000.0;
                    if (!mediaPlayer.IsPaused)
                    {
                        videoPositionMs -= Configuration.Settings.General.SetStartEndHumanDelay / 1000.0;
                    }

                    int index = SubtitleListview1.SelectedItems[0].Index;
                    var p = _subtitle.Paragraphs[index];
                    var videoTimeCode = new TimeCode(videoPositionMs);
                    var duration = videoTimeCode.TotalMilliseconds - p.StartTime.TotalMilliseconds - MinGapBetweenLines;
                    if (duration > 0.01 &&
                        duration <= 60_000)
                    {
                        MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + _subtitle.Paragraphs[index].Number + " " + _subtitle.Paragraphs[index].Text));
                        var newEndTime = new TimeCode(videoTimeCode.TotalMilliseconds - MinGapBetweenLines);
                        p.EndTime = newEndTime;

                        SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                        SetDurationInSeconds(_subtitle.Paragraphs[index].DurationTotalSeconds);
                        var newP = InsertNewParagraphAtPosition(newEndTime.TotalMilliseconds + MinGapBetweenLines, false);
                        if (audioVisualizer.WavePeaks != null && newP.EndTime.TotalSeconds >= audioVisualizer.EndPositionSeconds - 0.1)
                        {
                            audioVisualizer.StartPositionSeconds = Math.Max(0, newP.StartTime.TotalSeconds - 0.1);
                        }

                        UpdateSourceView();
                        StartAutoDuration();
                    }

                    textBoxListViewText.Focus();
                }
            }
            else if (_shortcuts.MainCreateStartDownEndUp == e.KeyData)
            {
                if (_mainCreateStartDownEndUpParagraph == null)
                {
                    _mainCreateStartDownEndUpParagraph = InsertNewTextAtVideoPosition(false, mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSelected100MsForward == e.KeyData)
            {
                ShowEarlierOrLater(100, SelectionChoice.SelectionOnly);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSelected100MsBack == e.KeyData)
            {
                ShowEarlierOrLater(-100, SelectionChoice.SelectionOnly);
                e.SuppressKeyPress = true;
            }


            // adjust
            else if (_shortcuts.MainAdjustSelected100MsForward == e.KeyData)
            {
                ShowEarlierOrLater(100, SelectionChoice.SelectionOnly);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSelected100MsBack == e.KeyData)
            {
                ShowEarlierOrLater(-100, SelectionChoice.SelectionOnly);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustAdjustStartXMsBack == e.KeyData)
            {
                MoveStartCurrent(-Configuration.Settings.Tools.MoveStartEndMs, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustAdjustStartXMsForward == e.KeyData)
            {
                MoveStartCurrent(Configuration.Settings.Tools.MoveStartEndMs, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustAdjustEndXMsBack == e.KeyData)
            {
                MoveEndCurrent(-Configuration.Settings.Tools.MoveStartEndMs, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustAdjustEndXMsForward == e.KeyData)
            {
                MoveEndCurrent(Configuration.Settings.Tools.MoveStartEndMs, false);
                e.SuppressKeyPress = true;
            }

            else if (_shortcuts.MainAdjustMoveStartOneFrameBack == e.KeyData)
            {
                MoveStartCurrent(-(int)Math.Round(1000.0 / CurrentFrameRate), false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveStartOneFrameForward == e.KeyData)
            {
                MoveStartCurrent((int)Math.Round(1000.0 / CurrentFrameRate), false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveEndOneFrameBack == e.KeyData)
            {
                MoveEndCurrent(-(int)Math.Round(1000.0 / CurrentFrameRate), false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveEndOneFrameForward == e.KeyData)
            {
                MoveEndCurrent((int)Math.Round(1000.0 / CurrentFrameRate), false);
                e.SuppressKeyPress = true;
            }

            else if (_shortcuts.MainAdjustMoveStartOneFrameBackKeepGapPrev == e.KeyData)
            {
                MoveStartCurrent(-(int)Math.Round(1000.0 / CurrentFrameRate), true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveStartOneFrameForwardKeepGapPrev == e.KeyData)
            {
                MoveStartCurrent((int)Math.Round(1000.0 / CurrentFrameRate), true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveEndOneFrameBackKeepGapNext == e.KeyData)
            {
                MoveEndCurrent(-(int)Math.Round(1000.0 / CurrentFrameRate), true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveEndOneFrameForwardKeepGapNext == e.KeyData)
            {
                MoveEndCurrent((int)Math.Round(1000.0 / CurrentFrameRate), true);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && (_shortcuts.MainAdjustSetStartAndOffsetTheRest == e.KeyData || _shortcuts.MainAdjustSetStartAndOffsetTheRest2 == e.KeyData))
            {
                ButtonSetStartAndOffsetRestClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetStartAndOffsetTheWholeSubtitle == e.KeyData)
            {
                SetStartAndOffsetTheWholeSubtitle();
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndAndOffsetTheRest == e.KeyData)
            {
                SetEndAndOffsetTheRest(false);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndAndOffsetTheRestAndGoToNext == e.KeyData)
            {
                SetEndAndOffsetTheRest(true);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndAndGotoNext == e.KeyData)
            {
                ShowNextSubtitleLabel();
                ButtonSetEndAndGoToNextClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetStartKeepDuration == e.KeyData)
            {
                SetStartTime(true, mediaPlayer.CurrentPosition);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustInsertViaEndAutoStart == e.KeyData)
            {
                SetCurrentViaEndPositionAndGotoNext(FirstSelectedIndex, false);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustInsertViaEndAutoStartAndGoToNext == e.KeyData)
            {
                ShowNextSubtitleLabel();
                SetCurrentViaEndPositionAndGotoNext(FirstSelectedIndex, true);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndMinusGapAndStartNextHere == e.KeyData)
            {
                ShowNextSubtitleLabel();
                SetEndMinusGapAndStartNextHere(FirstSelectedIndex);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndAndStartOfNextPlusGap == e.KeyData)
            {
                MainAdjustSetEndAndStartOfNextPlusGap(FirstSelectedIndex);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetStartAutoDurationAndGoToNext == e.KeyData)
            {
                SetCurrentStartAutoDurationAndGotoNext(FirstSelectedIndex);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndNextStartAndGoToNext == e.KeyData)
            {
                ShowNextSubtitleLabel();
                SetCurrentEndNextStartAndGoToNext(FirstSelectedIndex);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustStartDownEndUpAndGoToNext == e.KeyData && _mainAdjustStartDownEndUpAndGoToNextParagraph == null)
            {
                ShowNextSubtitleLabel();
                _mainAdjustStartDownEndUpAndGoToNextParagraph = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                SetStartTime(true, mediaPlayer.CurrentPosition);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetStartAndEndOfPrevious == e.KeyData)
            {
                var pos = mediaPlayer.CurrentPosition;
                SetStartAndEndOfPrevious(pos, false);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetStartAndEndOfPreviousAndGoToNext == e.KeyData)
            {
                var pos = mediaPlayer.CurrentPosition;
                SetStartAndEndOfPrevious(pos, true);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetStartAndGotoNext == e.KeyData)
            {
                var pos = mediaPlayer.CurrentPosition;
                SetStartTime(false, pos);

                var index = _subtitleListViewIndex;
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
                if (mediaPlayer.IsPaused && index + 1 < _subtitle.Paragraphs.Count)
                {
                    mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index + 1].StartTime.TotalSeconds;
                }
                e.SuppressKeyPress = true;
            }

            // translate
            else if (_shortcuts.MainTranslateGoogleIt == e.KeyData)
            {
                ButtonGoogleItClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTranslateGoogleTranslateIt == e.KeyData)
            {
                ButtonGoogleTranslateItClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTranslateCustomSearch1 == e.KeyData)
            {
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl1);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTranslateCustomSearch2 == e.KeyData)
            {
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl2);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTranslateCustomSearch3 == e.KeyData)
            {
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl3);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTranslateCustomSearch4 == e.KeyData)
            {
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl4);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTranslateCustomSearch5 == e.KeyData)
            {
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl5);
                e.SuppressKeyPress = true;
            }

            // put new entries above tabs

            //if (e.Modifiers == (Keys.Alt | Keys.Shift | Keys.Control) && e.KeyCode == Keys.something)
            //{
            //    new WordSplitDictionaryGenerator().ShowDialog(this);
            //}
        }

        private int _layout = 0;

        private void SetActorVoice(int index)
        {
            var formatType = GetCurrentSubtitleFormat().GetType();
            if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
            {
                var actors = new List<string>();
                foreach (var p in _subtitle.Paragraphs)
                {
                    if (!string.IsNullOrEmpty(p.Actor) && !actors.Contains(p.Actor))
                    {
                        actors.Add(p.Actor);
                    }

                    actors.Sort();
                }

                if (index >= 0 && index < actors.Count)
                {
                    SetActor(actors[index]);
                }
            }
            else if (formatType == typeof(WebVTT) || formatType == typeof(WebVTTFileWithLineNumber))
            {
                var voices = WebVTT.GetVoices(_subtitle).OrderBy(p => p).ToList();
                if (index >= 0 && index < voices.Count)
                {
                    WebVTTSetVoice(voices[index]);
                }
            }
        }

        private void ToggleCasingListView()
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.MainTextBoxSelectionToggleCasing));

                var indices = new List<int>();
                string first = null;

                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    indices.Add(item.Index);
                }


                var format = GetCurrentSubtitleFormat();
                SubtitleListview1.BeginUpdate();
                foreach (int i in indices)
                {
                    if (first == null)
                    {
                        first = _subtitle.Paragraphs[i].Text;
                    }

                    _subtitle.Paragraphs[i].Text = _subtitle.Paragraphs[i].Text.ToggleCasing(format, first);
                    SubtitleListview1.SetText(i, _subtitle.Paragraphs[i].Text);

                    if (IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            original.Text = original.Text.ToggleCasing(format, first);
                            SubtitleListview1.SetOriginalText(i, original.Text);
                        }
                    }
                }
                SubtitleListview1.EndUpdate();

                UpdateSourceView();
                RefreshSelectedParagraph();
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            }
        }

        private void ShowCheckFixTimingViaShotChanges()
        {
            using (var form = new AdjustTimingViaShotChanges(_subtitle, _videoFileName, audioVisualizer.WavePeaks, audioVisualizer.ShotChanges))
            {
                if (form.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }
            }
        }


        private void ToggleVideoControlsOnOff(bool on)
        {
            if (_isVideoControlsUndocked)
            {
                return;
            }

            groupBoxVideo.SuspendLayout();
            tabControlModes.Visible = on;
            var left = 5;
            if (on)
            {
                left = tabControlModes.Width + 10;
            }

            if (panelVideoPlayer.Parent == groupBoxVideo)
            {
                panelVideoPlayer.Left = left;
                panelVideoPlayer.Width = groupBoxVideo.Width - (panelVideoPlayer.Left + 10);
            }

            audioVisualizer.Left = left;
            audioVisualizer.Width = groupBoxVideo.Width - (audioVisualizer.Left + 10);
            checkBoxSyncListViewWithVideoWhilePlaying.Left = left;
            panelWaveformControls.Left = left;
            trackBarWaveformPosition.Left = left + panelWaveformControls.Width;
            trackBarWaveformPosition.Width = audioVisualizer.Left + audioVisualizer.Width - trackBarWaveformPosition.Left + 5;
            groupBoxVideo.ResumeLayout();
            audioVisualizer.Invalidate();
        }

        private void SetStartAndEndOfPrevious(double positionInSeconds, bool goToNext)
        {
            int index = SubtitleListview1.SelectedItems[0].Index;
            var current = _subtitle.GetParagraphOrDefault(index);
            if (SubtitleListview1.SelectedItems.Count != 1 || current == null)
            {
                return;
            }

            if (positionInSeconds > current.EndTime.TotalSeconds - Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds / 1000)
            {
                return;
            }

            // previous sub
            var p = _subtitle.GetParagraphOrDefault(index - 1);
            if (p == null || p.StartTime.TotalMilliseconds < p.StartTime.TotalMilliseconds - 9000)
            {
                SetStartTime(false, positionInSeconds);
                return;
            }

            if (positionInSeconds < p.StartTime.TotalSeconds + Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds / 1000)
            {
                return;
            }

            MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));
            var oldCurrent = new Paragraph(current, false);
            current.StartTime.TotalMilliseconds = positionInSeconds * 1_000.0;
            UpdateOriginalTimeCodes(oldCurrent);
            if (oldCurrent.EndTime.IsMaxTime)
            {
                current.EndTime.TotalMilliseconds = current.StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(p.Text);
                UpdateOriginalTimeCodes(oldCurrent);
            }

            var oldParagraph = new Paragraph(p, false);
            p.EndTime.TotalMilliseconds = positionInSeconds * TimeCode.BaseUnit - MinGapBetweenLines;
            if (oldParagraph.StartTime.IsMaxTime)
            {
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }

            UpdateOriginalTimeCodes(oldParagraph);
            SubtitleListview1.SetStartTimeAndDuration(index, current, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
            SubtitleListview1.SetStartTimeAndDuration(index - 1, p, current, _subtitle.GetParagraphOrDefault(index - 2));
            UpdateSourceView();
            var next = _subtitle.GetParagraphOrDefault(index - 1);
            if (goToNext && next != null)
            {
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
            }
            else
            {
                p = _subtitle.GetParagraphOrDefault(index);
                InitializeListViewEditBox(p);
            }
        }

        private void ExtendCurrentSubtitle()
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                var idx = SubtitleListview1.SelectedItems[0].Index;
                var p = _subtitle.Paragraphs[idx];
                var next = _subtitle.GetParagraphOrDefault(idx + 1);
                if (next == null || next.StartTime.TotalMilliseconds > p.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds + MinGapBetweenLines)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds;
                }
                else
                {
                    p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - MinGapBetweenLines;
                }

                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustExtendCurrentSubtitle));

                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        var originalNext = _subtitleOriginal.GetParagraphOrDefault(_subtitleOriginal.GetIndex(original) + 1);
                        if (originalNext == null || originalNext.StartTime.TotalMilliseconds > original.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds + MinGapBetweenLines)
                        {
                            original.EndTime.TotalMilliseconds = original.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds;
                        }
                        else
                        {
                            original.EndTime.TotalMilliseconds = originalNext.StartTime.TotalMilliseconds - MinGapBetweenLines;
                        }
                    }
                }

                RefreshSelectedParagraph();
            }
        }

        private void ExtendSelectedLinesToNextLine(bool minusChainingGap = false)
        {
            double GetNextStartTimeMinusChainingGap(Paragraph next)
            {
                if (ShotChangeHelper.IsCueOnShotChange(audioVisualizer.ShotChanges, next.StartTime, true))
                {
                    if (Configuration.Settings.BeautifyTimeCodes.Profile.ChainingInCueOnShotUseZones)
                    {
                        return next.StartTime.TotalMilliseconds - SubtitleFormat.FramesToMilliseconds(Configuration.Settings.BeautifyTimeCodes.Profile.ChainingInCueOnShotLeftGreenZone);
                    }
                    else
                    {
                        return next.StartTime.TotalMilliseconds - Configuration.Settings.BeautifyTimeCodes.Profile.ChainingInCueOnShotMaxGap;
                    }
                }
                else
                {
                    if (Configuration.Settings.BeautifyTimeCodes.Profile.ChainingGeneralUseZones)
                    {
                        return next.StartTime.TotalMilliseconds - SubtitleFormat.FramesToMilliseconds(Configuration.Settings.BeautifyTimeCodes.Profile.ChainingGeneralLeftGreenZone);
                    }
                    else
                    {
                        return next.StartTime.TotalMilliseconds - Configuration.Settings.BeautifyTimeCodes.Profile.ChainingGeneralMaxGap;
                    }
                }
            }

            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                var next = _subtitle.GetParagraphOrDefault(idx + 1);
                if (next != null)
                {
                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, minusChainingGap ? LanguageSettings.Current.Settings.AdjustExtendToNextSubtitleMinusChainingGap : LanguageSettings.Current.Settings.AdjustExtendToNextSubtitle));
                        historyAdded = true;
                    }

                    if (minusChainingGap)
                    {
                        p.EndTime.TotalMilliseconds = GetNextStartTimeMinusChainingGap(next);
                    }
                    else
                    {
                        p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - MinGapBetweenLines;
                    }

                    if (p.DurationTotalMilliseconds < 0)
                    {
                        p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                    }
                }

                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        var originalNext = _subtitleOriginal.GetParagraphOrDefault(_subtitleOriginal.GetIndex(original) + 1);
                        if (originalNext != null)
                        {
                            if (!historyAdded)
                            {
                                MakeHistoryForUndo(string.Format(_language.BeforeX, minusChainingGap ? LanguageSettings.Current.Settings.AdjustExtendToNextSubtitleMinusChainingGap : LanguageSettings.Current.Settings.AdjustExtendToNextSubtitle));
                                historyAdded = true;
                            }

                            if (minusChainingGap)
                            {
                                original.EndTime.TotalMilliseconds = GetNextStartTimeMinusChainingGap(originalNext);
                            }
                            else
                            {
                                original.EndTime.TotalMilliseconds = originalNext.StartTime.TotalMilliseconds - MinGapBetweenLines;
                            }

                            if (original.DurationTotalMilliseconds < 0)
                            {
                                original.EndTime.TotalMilliseconds = original.StartTime.TotalMilliseconds;
                            }
                        }
                    }
                }

                RefreshSelectedParagraphs();
            }
        }

        private void ExtendSelectedLinesToPreviousLine(bool minusChainingGap = false)
        {
            double GetPreviousEndTimePlusChainingGap(Paragraph previous)
            {
                if (ShotChangeHelper.IsCueOnShotChange(audioVisualizer.ShotChanges, previous.EndTime, false))
                {
                    if (Configuration.Settings.BeautifyTimeCodes.Profile.ChainingOutCueOnShotUseZones)
                    {
                        return previous.EndTime.TotalMilliseconds + SubtitleFormat.FramesToMilliseconds(Configuration.Settings.BeautifyTimeCodes.Profile.ChainingOutCueOnShotRightGreenZone);
                    }
                    else
                    {
                        return previous.EndTime.TotalMilliseconds + Configuration.Settings.BeautifyTimeCodes.Profile.ChainingOutCueOnShotMaxGap;
                    }
                }
                else
                {
                    if (Configuration.Settings.BeautifyTimeCodes.Profile.ChainingGeneralUseZones)
                    {
                        return previous.EndTime.TotalMilliseconds + SubtitleFormat.FramesToMilliseconds(Configuration.Settings.BeautifyTimeCodes.Profile.ChainingGeneralLeftGreenZone);
                    }
                    else
                    {
                        return previous.EndTime.TotalMilliseconds + Configuration.Settings.BeautifyTimeCodes.Profile.ChainingGeneralMaxGap;
                    }
                }
            }

            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                var previous = _subtitle.GetParagraphOrDefault(idx - 1);
                if (previous != null)
                {
                    if (IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            var originalPrevious = _subtitleOriginal.GetParagraphOrDefault(_subtitleOriginal.GetIndex(original) - 1);
                            if (originalPrevious != null)
                            {
                                if (!historyAdded)
                                {
                                    MakeHistoryForUndo(string.Format(_language.BeforeX, minusChainingGap ? LanguageSettings.Current.Settings.AdjustExtendToPreviousSubtitleMinusChainingGap : LanguageSettings.Current.Settings.AdjustExtendToPreviousSubtitle));
                                    historyAdded = true;
                                }

                                if (minusChainingGap)
                                {
                                    original.StartTime.TotalMilliseconds = GetPreviousEndTimePlusChainingGap(originalPrevious);
                                }
                                else
                                {
                                    original.StartTime.TotalMilliseconds = originalPrevious.EndTime.TotalMilliseconds + MinGapBetweenLines;
                                }

                                if (original.DurationTotalMilliseconds < 0)
                                {
                                    original.StartTime.TotalMilliseconds = original.EndTime.TotalMilliseconds;
                                }
                            }
                        }
                    }

                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, minusChainingGap ? LanguageSettings.Current.Settings.AdjustExtendToPreviousSubtitleMinusChainingGap : LanguageSettings.Current.Settings.AdjustExtendToPreviousSubtitle));
                        historyAdded = true;
                    }

                    if (minusChainingGap)
                    {
                        p.StartTime.TotalMilliseconds = GetPreviousEndTimePlusChainingGap(previous);
                    }
                    else
                    {
                        p.StartTime.TotalMilliseconds = previous.EndTime.TotalMilliseconds + MinGapBetweenLines;
                    }

                    if (p.DurationTotalMilliseconds < 0)
                    {
                        p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                    }
                }

                RefreshSelectedParagraphs();
            }
        }

        private void ExtendPreviousEndToCurrentStart()
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                var idx = SubtitleListview1.SelectedItems[0].Index;
                var p = _subtitle.Paragraphs[idx];
                var previous = _subtitle.GetParagraphOrDefault(idx - 1);
                if (previous is null)
                {
                    return;
                }

                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustExtendPreviousLineEndToCurrentStart));
                previous.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds - MinGapBetweenLines;

                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        var originalPrevious = _subtitleOriginal.GetParagraphOrDefault(_subtitleOriginal.GetIndex(original) - 1);
                        if (originalPrevious != null)
                        {
                            originalPrevious.EndTime.TotalMilliseconds = original.StartTime.TotalMilliseconds - MinGapBetweenLines;
                        }
                    }
                }

                SubtitleListview1.SetStartTimeAndDuration(idx - 1, previous, p, _subtitle.GetParagraphOrDefault(idx - 2));
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, idx - 1, previous);
            }
        }

        private void ExtendNextStartToCurrentEnd()
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                var idx = SubtitleListview1.SelectedItems[0].Index;
                var p = _subtitle.Paragraphs[idx];
                var next = _subtitle.GetParagraphOrDefault(idx + 1);
                if (next is null)
                {
                    return;
                }

                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustExtendNextLineStartToCurrentEnd));
                next.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + MinGapBetweenLines;

                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        var originalNext = _subtitleOriginal.GetParagraphOrDefault(_subtitleOriginal.GetIndex(original) + 1);
                        if (originalNext != null)
                        {
                            originalNext.StartTime.TotalMilliseconds = original.EndTime.TotalMilliseconds + MinGapBetweenLines;
                        }
                    }
                }

                SubtitleListview1.SetStartTimeAndDuration(idx + 1, next, _subtitle.GetParagraphOrDefault(idx + 2), p);
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, idx + 1, next);
            }
        }

        private void SnapSelectedLinesStartToNextShotChange()
        {
            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                var nextShotChange = ShotChangeHelper.GetNextShotChangeInMs(audioVisualizer.ShotChanges, p.StartTime);
                if (nextShotChange != null)
                {
                    var newStartTime = nextShotChange.Value + TimeCodesBeautifierUtils.GetInCuesGapMs();

                    if (IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            if (!historyAdded)
                            {
                                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustSnapStartToNextShotChange));
                                historyAdded = true;
                            }

                            if (newStartTime < p.EndTime.TotalMilliseconds)
                            {
                                original.StartTime.TotalMilliseconds = newStartTime;
                            }
                        }
                    }

                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustSnapStartToNextShotChange));
                        historyAdded = true;
                    }

                    if (newStartTime < p.EndTime.TotalMilliseconds)
                    {
                        p.StartTime.TotalMilliseconds = newStartTime;
                    }
                }

                RefreshSelectedParagraphs();
            }
        }

        private void SnapSelectedLinesEndToPreviousShotChange()
        {
            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                var previousShotChange = ShotChangeHelper.GetPreviousShotChangeInMs(audioVisualizer.ShotChanges, p.EndTime);
                if (previousShotChange != null)
                {
                    var newEndTime = previousShotChange.Value - TimeCodesBeautifierUtils.GetOutCuesGapMs();

                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustSnapEndToPreviousShotChange));
                        historyAdded = true;
                    }

                    if (newEndTime > p.StartTime.TotalMilliseconds)
                    {
                        p.EndTime.TotalMilliseconds = newEndTime;
                    }

                    if (IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            if (!historyAdded)
                            {
                                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustSnapEndToPreviousShotChange));
                                historyAdded = true;
                            }

                            if (newEndTime > p.StartTime.TotalMilliseconds)
                            {
                                original.EndTime.TotalMilliseconds = newEndTime;
                            }
                        }
                    }
                }

                RefreshSelectedParagraphs();
            }
        }

        private void ExtendSelectedLinesToNextShotChange()
        {
            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                if (audioVisualizer.ShotChanges.Count > 0)
                {
                    var next = _subtitle.GetParagraphOrDefault(idx + 1);
                    double nearestShotChangeWithGap = ShotChangeHelper.GetNextShotChangeMinusGapInMs(audioVisualizer.ShotChanges, p.EndTime) ?? double.MaxValue;
                    double nearestStartTimeWithGap = next != null ? next.StartTime.TotalMilliseconds - MinGapBetweenLines : Double.MaxValue;

                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustExtendToNextShotChange));
                        historyAdded = true;
                    }

                    var newEndTime = Math.Min(nearestShotChangeWithGap, nearestStartTimeWithGap);
                    if (newEndTime <= _videoInfo.TotalMilliseconds)
                    {
                        p.EndTime.TotalMilliseconds = newEndTime;
                    }

                    if (IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            var originalNext = _subtitleOriginal.GetParagraphOrDefault(_subtitleOriginal.GetIndex(original) + 1);
                            double nearestOriginalStartTimeWithGap = originalNext != null ? originalNext.StartTime.TotalMilliseconds - MinGapBetweenLines : Double.MaxValue;

                            if (!historyAdded)
                            {
                                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustExtendToNextShotChange));
                                historyAdded = true;
                            }

                            var originalNewEndTime = Math.Min(nearestShotChangeWithGap, nearestStartTimeWithGap);
                            if (originalNewEndTime <= _videoInfo.TotalMilliseconds)
                            {
                                original.EndTime.TotalMilliseconds = originalNewEndTime;
                            }
                        }
                    }
                }

                RefreshSelectedParagraphs();
            }
        }

        private void ExtendSelectedLinesToPreviousShotChange(bool withGap = false)
        {
            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                if (audioVisualizer.ShotChanges.Count > 0)
                {
                    var previous = _subtitle.GetParagraphOrDefault(idx - 1);
                    double nearestShotChangeWithGap = ShotChangeHelper.GetPreviousShotChangePlusGapInMs(audioVisualizer.ShotChanges, p.StartTime) ?? double.MinValue;
                    double nearestEndTimeWithGap = previous != null ? previous.EndTime.TotalMilliseconds + MinGapBetweenLines : -9999;

                    if (IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            var originalPrevious = _subtitleOriginal.GetParagraphOrDefault(_subtitleOriginal.GetIndex(original) - 1);
                            double nearestOriginalEndTimeWithGap = originalPrevious != null ? originalPrevious.EndTime.TotalMilliseconds + MinGapBetweenLines : -9999;

                            if (!historyAdded)
                            {
                                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustExtendToPreviousShotChange));
                                historyAdded = true;
                            }

                            var originalNewStartTime = Math.Max(nearestShotChangeWithGap, nearestOriginalEndTimeWithGap);
                            if (originalNewStartTime >= 0)
                            {
                                original.StartTime.TotalMilliseconds = originalNewStartTime;
                            }
                        }
                    }

                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.AdjustExtendToPreviousShotChange));
                        historyAdded = true;
                    }

                    var newStartTime = Math.Max(nearestShotChangeWithGap, nearestEndTimeWithGap);
                    if (newStartTime >= 0)
                    {
                        p.StartTime.TotalMilliseconds = newStartTime;
                    }
                }

                RefreshSelectedParagraphs();
            }
        }

        private void SetCueToClosestShotChangeGreenZone(bool isInCue, bool isLeft)
        {
            void MakeHistory()
            {
                if (isInCue && isLeft)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.SetInCueToClosestShotChangeLeftGreenZone));
                }
                else if (isInCue && !isLeft)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.SetInCueToClosestShotChangeRightGreenZone));
                }
                else if (!isInCue && isLeft)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.SetOutCueToClosestShotChangeLeftGreenZone));
                }
                else if (!isInCue && !isLeft)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.SetOutCueToClosestShotChangeRightGreenZone));
                }
            }

            void SetCueToClosestShotChangeGreenZone(Paragraph p, Subtitle sub)
            {
                if (isInCue)
                {
                    var closestShotChange = ShotChangeHelper.GetClosestShotChange(audioVisualizer.ShotChanges, p.StartTime);
                    if (closestShotChange != null)
                    {
                        var newInCue = isLeft ? (closestShotChange.Value * 1000) - SubtitleFormat.FramesToMilliseconds(Configuration.Settings.BeautifyTimeCodes.Profile.InCuesLeftGreenZone)
                            : (closestShotChange.Value * 1000) + SubtitleFormat.FramesToMilliseconds(Configuration.Settings.BeautifyTimeCodes.Profile.InCuesRightGreenZone);

                        double newStart = 0;
                        double newPreviousEnd = 0;

                        if (newInCue >= 0 && newInCue < p.EndTime.TotalMilliseconds)
                        {
                            newStart = newInCue;
                        }
                        else
                        {
                            return;
                        }

                        var previous = sub.GetParagraphOrDefault(sub.GetIndex(p) - 1);
                        if (previous != null)
                        {
                            if (isLeft)
                            {
                                // Push previous subtitle away if overlap
                                newPreviousEnd = Math.Min(previous.EndTime.TotalMilliseconds, newStart - Configuration.Settings.General.MinimumMillisecondsBetweenLines);
                            }
                            else
                            {
                                // Push previous subtitle away if overlap, until green zone edge
                                newPreviousEnd = Math.Min(newInCue, previous.EndTime.TotalMilliseconds);
                                newStart = Math.Max(newInCue, newPreviousEnd + Configuration.Settings.General.MinimumMillisecondsBetweenLines);
                            }

                            // Prevent invalid durations
                            if (newPreviousEnd - previous.StartTime.TotalMilliseconds > 0 && p.EndTime.TotalMilliseconds - newStart > 0)
                            {
                                p.StartTime.TotalMilliseconds = newStart;
                                previous.EndTime.TotalMilliseconds = newPreviousEnd;
                            }
                        }
                        else
                        {
                            p.StartTime.TotalMilliseconds = newStart;
                        }
                    }
                }
                else
                {
                    var closestShotChange = ShotChangeHelper.GetClosestShotChange(audioVisualizer.ShotChanges, p.EndTime);
                    if (closestShotChange != null)
                    {
                        var newOutCue = isLeft ? (closestShotChange.Value * 1000) - SubtitleFormat.FramesToMilliseconds(Configuration.Settings.BeautifyTimeCodes.Profile.OutCuesLeftGreenZone)
                            : (closestShotChange.Value * 1000) + SubtitleFormat.FramesToMilliseconds(Configuration.Settings.BeautifyTimeCodes.Profile.OutCuesRightGreenZone);

                        double newEnd = 0;
                        double newNextStart = 0;

                        if (newOutCue > p.StartTime.TotalMilliseconds)
                        {
                            newEnd = newOutCue;
                        }
                        else
                        {
                            return;
                        }

                        var next = sub.GetParagraphOrDefault(sub.GetIndex(p) + 1);
                        if (next != null)
                        {
                            if (!isLeft)
                            {
                                // Push next subtitle away if overlap
                                newNextStart = Math.Max(next.StartTime.TotalMilliseconds, newEnd + Configuration.Settings.General.MinimumMillisecondsBetweenLines);
                            }
                            else
                            {
                                // Push next subtitle away if overlap, until green zone edge
                                newNextStart = Math.Max(next.StartTime.TotalMilliseconds, newOutCue);
                                newEnd = Math.Min(newNextStart - Configuration.Settings.General.MinimumMillisecondsBetweenLines, newOutCue);
                            }

                            // Prevent invalid durations
                            if (next.EndTime.TotalMilliseconds - newNextStart > 0 && newEnd - p.StartTime.TotalMilliseconds > 0)
                            {
                                p.EndTime.TotalMilliseconds = newEnd;
                                next.StartTime.TotalMilliseconds = newNextStart;
                            }
                        }
                        else
                        {
                            p.EndTime.TotalMilliseconds = newEnd;
                        }
                    }
                }
            }

            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];

                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        if (!historyAdded)
                        {
                            MakeHistory();
                            historyAdded = true;
                        }

                        SetCueToClosestShotChangeGreenZone(original, _subtitleOriginal);
                    }
                }

                if (!historyAdded)
                {
                    MakeHistory();
                    historyAdded = true;
                }

                SetCueToClosestShotChangeGreenZone(p, _subtitle);

                RefreshSelectedParagraphs();
            }
        }

        private void GoToPreviousSubtitle(double currentPosition)
        {
            var found = false;
            foreach (var p in _subtitle.Paragraphs)
            {
                if (p.StartTime.TotalMilliseconds > currentPosition - 1)
                {
                    var prev = _subtitle.GetParagraphOrDefault(_subtitle.Paragraphs.IndexOf(p) - 1);
                    if (prev == null)
                    {
                        break;
                    }

                    mediaPlayer.CurrentPosition = prev.StartTime.TotalSeconds;
                    SelectListViewIndexAndEnsureVisible(_subtitle.Paragraphs.IndexOf(prev));
                    if (audioVisualizer.WavePeaks != null && p.StartTime.TotalSeconds > audioVisualizer.EndPositionSeconds + 0.2)
                    {
                        audioVisualizer.StartPositionSeconds = mediaPlayer.CurrentPosition - 0.2;
                    }

                    found = true;
                    break;
                }
            }

            if (!found && _subtitle.Paragraphs.Count > 0 && _subtitle.Paragraphs[_subtitle.Paragraphs.Count - 1].StartTime.TotalMilliseconds < currentPosition)
            {
                var p = _subtitle.Paragraphs[_subtitle.Paragraphs.Count - 1];
                mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                SelectListViewIndexAndEnsureVisible(_subtitle.Paragraphs.Count - 1);
                if (audioVisualizer.WavePeaks != null && p.StartTime.TotalSeconds > audioVisualizer.EndPositionSeconds + 0.2)
                {
                    audioVisualizer.StartPositionSeconds = mediaPlayer.CurrentPosition - 0.2;
                }
            }
        }

        private void GoToNextSubtitle(double currentPosition)
        {
            foreach (var p in _subtitle.Paragraphs)
            {
                if (p.StartTime.TotalMilliseconds > currentPosition + 0.01)
                {
                    mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    SelectListViewIndexAndEnsureVisible(_subtitle.Paragraphs.IndexOf(p));
                    if (audioVisualizer.WavePeaks != null && p.StartTime.TotalSeconds > audioVisualizer.EndPositionSeconds + 0.2)
                    {
                        audioVisualizer.StartPositionSeconds = mediaPlayer.CurrentPosition - 0.2;
                    }

                    break;
                }
            }
        }

        private void GoToNearestTimeCode(double currentPosition, bool forward)
        {
            var paragraphsStart = forward
                ? _subtitle.Paragraphs.Where(p => p.StartTime.TotalMilliseconds > currentPosition + 1)
                : _subtitle.Paragraphs.Where(p => p.StartTime.TotalMilliseconds < currentPosition - 1);

            var paragraphsEnd = forward
                ? _subtitle.Paragraphs.Where(p => p.EndTime.TotalMilliseconds > currentPosition + 1)
                : _subtitle.Paragraphs.Where(p => p.EndTime.TotalMilliseconds < currentPosition - 1);

            var closestStart = paragraphsStart
                .Select(p => new { Paragraph = p, Distance = Math.Abs(p.StartTime.TotalMilliseconds - currentPosition) })
                .OrderBy(p => p.Distance)
                .FirstOrDefault();

            var closestEnd = paragraphsEnd
                .Select(p => new { Paragraph = p, Distance = Math.Abs(p.EndTime.TotalMilliseconds - currentPosition) })
                .OrderBy(p => p.Distance)
                .FirstOrDefault();

            Paragraph found = null;
            double foundSeconds = 0d;

            if (closestStart != null && (closestEnd == null || Math.Abs(closestStart.Paragraph.StartTime.TotalMilliseconds - currentPosition) <
                Math.Abs(closestEnd.Paragraph.EndTime.TotalMilliseconds - currentPosition)))
            {
                if (closestStart.Paragraph.StartTime.IsMaxTime)
                {
                    return;
                }

                found = closestStart.Paragraph;
                foundSeconds = closestStart.Paragraph.StartTime.TotalSeconds;
            }
            else if (closestEnd != null && (closestStart == null || Math.Abs(closestStart.Paragraph.StartTime.TotalMilliseconds - currentPosition) >
                         Math.Abs(closestEnd.Paragraph.EndTime.TotalMilliseconds - currentPosition)))
            {
                if (closestEnd.Paragraph.EndTime.IsMaxTime)
                {
                    return;
                }

                found = closestEnd.Paragraph;
                foundSeconds = closestEnd.Paragraph.EndTime.TotalSeconds;
            }

            if (found == null)
            {
                return;
            }

            mediaPlayer.CurrentPosition = foundSeconds;
            SelectListViewIndexAndEnsureVisible(_subtitle.Paragraphs.IndexOf(found));

            Application.DoEvents();
            if (audioVisualizer.WavePeaks != null && foundSeconds < audioVisualizer.StartPositionSeconds + 0.15)
            {
                audioVisualizer.StartPositionSeconds -= 0.15;
            }
        }

        private void AutoGuessStartTime(int index)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            var silenceLengthInSeconds = 0.08;
            var lowPercent = audioVisualizer.FindLowPercentage(p.StartTime.TotalSeconds - 0.3, p.StartTime.TotalSeconds + 0.1);
            var highPercent = audioVisualizer.FindHighPercentage(p.StartTime.TotalSeconds - 0.3, p.StartTime.TotalSeconds + 0.4);
            var add = 5.0;
            if (highPercent > 40)
            {
                add = 8;
            }
            else if (highPercent < 5)
            {
                add = highPercent - lowPercent - 0.3;
            }

            for (var startVolume = lowPercent + add; startVolume < 14; startVolume += 0.3)
            {
                var pos = audioVisualizer.FindDataBelowThresholdBackForStart(startVolume, silenceLengthInSeconds, p.StartTime.TotalSeconds);
                var pos2 = audioVisualizer.FindDataBelowThresholdBackForStart(startVolume + 0.3, silenceLengthInSeconds, p.StartTime.TotalSeconds);
                if (pos >= 0 && pos > p.StartTime.TotalSeconds - 1)
                {
                    if (pos2 > pos && pos2 >= 0 && pos2 > p.StartTime.TotalSeconds - 1)
                    {
                        pos = pos2;
                    }

                    var newStartTimeMs = pos * TimeCode.BaseUnit;
                    var prev = _subtitle.GetParagraphOrDefault(index - 1);
                    if (prev != null && prev.EndTime.TotalMilliseconds + MinGapBetweenLines >= newStartTimeMs)
                    {
                        newStartTimeMs = prev.EndTime.TotalMilliseconds + MinGapBetweenLines;
                        if (newStartTimeMs >= p.StartTime.TotalMilliseconds)
                        {
                            break; // cannot move start time
                        }
                    }

                    // check for shot changes
                    if (audioVisualizer.ShotChanges != null)
                    {
                        var matchingShotChanges = audioVisualizer.ShotChanges
                            .Where(sc => sc > p.StartTime.TotalSeconds - 0.3 && sc < p.StartTime.TotalSeconds + 0.2)
                            .OrderBy(sc => Math.Abs(sc - p.StartTime.TotalSeconds));
                        if (matchingShotChanges.Any())
                        {
                            newStartTimeMs = matchingShotChanges.First() * TimeCode.BaseUnit;
                        }
                    }

                    if (Math.Abs(p.StartTime.TotalMilliseconds - newStartTimeMs) < 10)
                    {
                        break; // diff too small
                    }

                    var newEndTimeMs = p.EndTime.TotalMilliseconds;
                    if (newStartTimeMs > p.StartTime.TotalMilliseconds)
                    {
                        var temp = new Paragraph(p);
                        temp.StartTime.TotalMilliseconds = newStartTimeMs;
                        if (temp.DurationTotalMilliseconds < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds ||
                            Utilities.GetCharactersPerSecond(temp) > Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds)
                        {
                            var next = _subtitle.GetParagraphOrDefault(index + 1);
                            if (next == null ||
                                next.StartTime.TotalMilliseconds > newStartTimeMs + p.DurationTotalMilliseconds + MinGapBetweenLines)
                            {
                                newEndTimeMs = newStartTimeMs + p.DurationTotalMilliseconds;
                            }
                        }
                    }

                    MakeHistoryForUndo(string.Format(LanguageSettings.Current.Main.BeforeX, LanguageSettings.Current.Settings.WaveformGuessStart));

                    if (IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(index, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            original.StartTime.TotalMilliseconds = newStartTimeMs;
                            original.EndTime.TotalMilliseconds = newEndTimeMs;
                        }
                    }

                    p.StartTime.TotalMilliseconds = newStartTimeMs;
                    p.EndTime.TotalMilliseconds = newEndTimeMs;
                    RefreshSelectedParagraph();
                    SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    break;
                }
            }
        }

        private void GoToBookmark()
        {
            using (var form = new BookmarksGoTo(_subtitle))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    SelectListViewIndexAndEnsureVisible(form.BookmarkIndex);
                    if (mediaPlayer.VideoPlayer != null)
                    {
                        mediaPlayer.CurrentPosition = _subtitle.Paragraphs[form.BookmarkIndex].StartTime.TotalSeconds;
                    }
                }
            }
        }

        private void GoToPrevoiusBookmark()
        {
            int idx = FirstSelectedIndex - 1;
            try
            {
                for (int i = idx; i >= 0; i--)
                {
                    var p = _subtitle.Paragraphs[i];
                    if (p.Bookmark != null)
                    {
                        SelectListViewIndexAndEnsureVisible(i);
                        if (mediaPlayer.VideoPlayer != null)
                        {
                            mediaPlayer.CurrentPosition = _subtitle.Paragraphs[i].StartTime.TotalSeconds;
                        }

                        return;
                    }
                }
            }
            catch
            {
            }
        }

        private void GoToNextBookmark()
        {
            int idx = FirstSelectedIndex + 1;
            try
            {
                for (int i = idx; i < _subtitle.Paragraphs.Count; i++)
                {
                    var p = _subtitle.Paragraphs[i];
                    if (p.Bookmark != null)
                    {
                        SelectListViewIndexAndEnsureVisible(i);
                        if (mediaPlayer.VideoPlayer != null)
                        {
                            mediaPlayer.CurrentPosition = _subtitle.Paragraphs[i].StartTime.TotalSeconds;
                        }

                        return;
                    }
                }
            }
            catch
            {
            }
        }

        public void ToggleBookmarks(bool setText, Form parentForm)
        {
            bool first = true;
            string newValue = null;
            if (setText)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.ToggleBookmarksWithComment));
            }
            else
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.ToggleBookmarks));
            }

            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                if (first)
                {
                    if (p.Bookmark == null)
                    {
                        if (setText)
                        {
                            using (var form = new BookmarkAdd(p))
                            {
                                var result = form.ShowDialog(parentForm);
                                if (result != DialogResult.OK)
                                {
                                    return;
                                }

                                newValue = form.Comment;
                            }
                        }
                        else
                        {
                            newValue = string.Empty;
                        }
                    }
                    else
                    {
                        newValue = null;
                    }

                    first = false;
                }

                p.Bookmark = newValue;
                SubtitleListview1.ShowState(index, p);
                ShowHideBookmark(p);
            }

            SetListViewStateImages();
            new BookmarkPersistence(_subtitle, _fileName).Save();
        }

        private void SetListViewStateImages()
        {
            var oldStateImageList = SubtitleListview1.StateImageList;
            SubtitleListview1.StateImageList = _subtitle != null && _subtitle.Paragraphs.Any(p => p.Bookmark != null) ? imageListBookmarks : null;
            if (SubtitleListview1.StateImageList == null)
            {
                SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Text = LanguageSettings.Current.General.NumberSymbol;
            }
            else
            {
                SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Text = "    " + LanguageSettings.Current.General.NumberSymbol;
            }

            if (oldStateImageList == SubtitleListview1.StateImageList)
            {
                return;
            }

            if (!_loading)
            {
                if (SubtitleListview1.StateImageList == null)
                {
                    SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width = Configuration.Settings.General.ListViewNumberWidth - 18;
                }
                else
                {
                    SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width = Configuration.Settings.General.ListViewNumberWidth + 18;
                }
            }

            SubtitleListview1.SubtitleListViewLastColumnFill(null, null);
        }

        private void ClearBookmarks()
        {
            MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.ClearBookmarks));
            for (var index = 0; index < _subtitle.Paragraphs.Count; index++)
            {
                var paragraph = _subtitle.Paragraphs[index];
                if (paragraph.Bookmark != null)
                {
                    paragraph.Bookmark = null;
                    SubtitleListview1.ShowState(index, paragraph);
                }
            }

            var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
            if (p != null)
            {
                ShowHideBookmark(p);
            }

            SetListViewStateImages();
            new BookmarkPersistence(_subtitle, _fileName).Save();
        }

        private void MoveTextFromCursorToNext(SETextBox tb)
        {
            int firstIndex = FirstSelectedIndex;
            if (firstIndex < 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(firstIndex);
            var next = _subtitle.GetParagraphOrDefault(firstIndex + 1);
            if (tb == textBoxListViewTextOriginal)
            {
                p = Utilities.GetOriginalParagraph(firstIndex, p, _subtitleOriginal.Paragraphs);
                next = Utilities.GetOriginalParagraph(firstIndex + 1, next, _subtitleOriginal.Paragraphs);
            }

            if (p == null)
            {
                return;
            }

            MakeHistoryForUndo(_language.BeforeLineUpdatedInListView);

            if (next == null)
            {
                _makeHistoryPaused = true;
                InsertAfter(string.Empty, false);
                _makeHistoryPaused = false;
                next = _subtitle.GetParagraphOrDefault(firstIndex + 1);
                if (tb == textBoxListViewTextOriginal)
                {
                    next = Utilities.GetOriginalParagraph(firstIndex + 1, next, _subtitleOriginal.Paragraphs);
                }
            }

            var text1 = string.Empty;
            var text2 = p.Text;

            if (tb.SelectionStart > 0)
            {
                text1 = p.Text.Substring(0, Math.Min(p.Text.Length, tb.SelectionStart)).Trim();
                text2 = p.Text.Remove(0, Math.Min(p.Text.Length, tb.SelectionStart)).Trim();
            }

            p.Text = text1;
            next.Text = (text2 + Environment.NewLine + next.Text.Trim()).Trim();
            tb.Text = p.Text;
            if (tb == textBoxListViewTextOriginal)
            {
                SubtitleListview1.SetOriginalText(firstIndex, p.Text);
                SubtitleListview1.SetOriginalText(firstIndex + 1, next.Text);
            }
            else
            {
                SubtitleListview1.SetText(firstIndex, p.Text);
                SubtitleListview1.SetText(firstIndex + 1, next.Text);
            }

            if (firstIndex + 1 < _subtitle.Paragraphs.Count)
            {
                _subtitleListViewIndex = -1;
                var index = firstIndex + 1;
                SelectListViewIndexAndEnsureVisible(index);
                if (mediaPlayer.IsPaused && index < _subtitle.Paragraphs.Count)
                {
                    mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                }
            }
        }

        private void MoveWordUpDownInCurrent(bool down, SETextBox tb)
        {
            int firstIndex = FirstSelectedIndex;
            if (firstIndex < 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(firstIndex);
            if (tb == textBoxListViewTextOriginal)
            {
                p = Utilities.GetOriginalParagraph(firstIndex, p, _subtitleOriginal.Paragraphs);
            }

            if (p == null)
            {
                return;
            }

            var lines = p.Text.SplitToLines();
            if (lines.Count == 1)
            {
                lines.Add(string.Empty);
            }

            if (lines.Count != 2)
            {
                return;
            }

            var line1Words = lines[0].Split(' ').ToList();
            var line2Words = lines[1].Split(' ').ToList();
            if (down)
            {
                if (line1Words.Count > 0)
                {
                    line2Words.Insert(0, line1Words[line1Words.Count - 1]);
                    line1Words.RemoveAt(line1Words.Count - 1);
                }
            }
            else // up
            {
                if (line2Words.Count > 0)
                {
                    line1Words.Add(line2Words[0]);
                    line2Words.RemoveAt(0);
                }
            }

            var newText = (string.Join(" ", line1Words.ToArray()).Trim() + Environment.NewLine +
                           string.Join(" ", line2Words.ToArray()).Trim()).Trim();
            if (newText != p.Text)
            {
                var oldText = p.Text;
                MakeHistoryForUndo(_language.BeforeLineUpdatedInListView);
                var textCaretPos = textBoxListViewText.SelectionStart;
                p.Text = newText;
                if (tb == textBoxListViewTextOriginal)
                {
                    SubtitleListview1.SetOriginalText(firstIndex, p.Text);
                }
                else
                {
                    SubtitleListview1.SetText(firstIndex, p.Text);
                }

                tb.Text = p.Text;

                // keep cursor position
                KeepCursorMoveWordUpdown(down, newText, oldText, textCaretPos);
            }
        }

        private void KeepCursorMoveWordUpdown(bool down, string newText, string oldText, int textCaretPos)
        {
            if (textCaretPos > textBoxListViewText.Text.Length)
            {
                // set cursor at end of textbox
                textBoxListViewText.SelectionStart = textCaretPos;
                int end = textBoxListViewText.Text.Length;
                textBoxListViewText.SelectionStart = end;
                textBoxListViewText.SelectionLength = 0;
                return;
            }

            int indexOfNewLine = newText.IndexOf(Environment.NewLine, StringComparison.Ordinal);
            int oldIndexOfNewLine = oldText.IndexOf(Environment.NewLine, StringComparison.Ordinal);

            if (down)
            {
                if (indexOfNewLine == -1 && oldIndexOfNewLine > 0 && textCaretPos > oldIndexOfNewLine)
                {
                    textCaretPos--;
                }
                else if (textCaretPos > indexOfNewLine && textCaretPos > oldIndexOfNewLine && oldIndexOfNewLine >= 0 ||
                         textCaretPos < indexOfNewLine && (oldIndexOfNewLine == -1 || textCaretPos < oldIndexOfNewLine) ||
                         textCaretPos < oldIndexOfNewLine && indexOfNewLine == -1)
                {
                }
                else
                {
                    textCaretPos++;
                }
            }
            else // up
            {
                if (textCaretPos <= oldIndexOfNewLine || textCaretPos > oldIndexOfNewLine && textCaretPos > indexOfNewLine && indexOfNewLine >= 0)
                {
                }
                else
                {
                    textCaretPos--;
                }
            }

            if (textBoxListViewText.Text.Length > textCaretPos && '\n' == textBoxListViewText.Text[textCaretPos])
            {
                textCaretPos--;
            }

            if (textCaretPos >= 0)
            {
                textBoxListViewText.SelectionStart = textCaretPos;
                textBoxListViewText.SelectionStart = textCaretPos;
                textBoxListViewText.SelectionStart = textCaretPos;
            }
        }

        private void MoveStartCurrent(int ms, bool keepGapPrevIfClose)
        {
            StopAutoDuration();
            var i = _subtitleListViewIndex;
            if (i < 0 || i >= _subtitle.Paragraphs.Count || ms == 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(i);
            if (p == null)
            {
                return;
            }

            // snap to shot change
            if (Configuration.Settings.VideoControls.WaveformSnapToShotChanges && audioVisualizer?.ShotChanges?.Count > 0)
            {
                var seconds = (p.StartTime.TotalMilliseconds + ms) / 1000.0;
                var closest = audioVisualizer.ShotChanges.OrderBy(sc => Math.Abs(seconds - sc)).First() * 1000.0;
                if (Math.Abs(p.StartTime.TotalMilliseconds + ms - closest) < CurrentFrameRate * 0.9)
                {
                    ms = (int)Math.Round(closest - p.StartTime.TotalMilliseconds);
                }
            }

            var prevGap = 0.0;
            var prev = _subtitle.GetParagraphOrDefault(i - 1);
            var isClose = false;
            if (keepGapPrevIfClose && prev != null)
            {
                if (prev.EndTime.TotalMilliseconds <= p.StartTime.TotalMilliseconds && prev.EndTime.TotalMilliseconds + MinGapBetweenLines >= p.StartTime.TotalMilliseconds)
                {
                    isClose = true;
                    prevGap = p.StartTime.TotalMilliseconds - prev.EndTime.TotalMilliseconds;
                    if (ms < 0 && prev.DurationTotalMilliseconds + ms < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                    {
                        return;
                    }
                }
            }

            if (ms > 0)
            {
                if (p.StartTime.TotalMilliseconds + ms + Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds > p.EndTime.TotalMilliseconds)
                {
                    return; // do not allow duration smaller than min duration in ms
                }

                p.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + ms;
            }
            else
            {
                if (p.DurationTotalMilliseconds + Math.Abs(ms) > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                {
                    return;
                }

                if (p.StartTime.TotalMilliseconds + ms < 0)
                {
                    return;
                }

                if (prev == null || keepGapPrevIfClose && isClose || p.StartTime.TotalMilliseconds - (Math.Abs(ms) + MinGapBetweenLines) > prev.EndTime.TotalMilliseconds)
                {
                    p.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + ms;
                }
                else
                {
                    var newStartMs = prev.EndTime.TotalMilliseconds + MinGapBetweenLines;
                    if (newStartMs < p.StartTime.TotalMilliseconds)
                    {
                        p.StartTime.TotalMilliseconds = newStartMs;
                    }
                }
            }

            SubtitleListview1.SetStartTimeAndDuration(i, p, _subtitle.GetParagraphOrDefault(i + 1), _subtitle.GetParagraphOrDefault(i - 1));
            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            timeUpDownStartTime.TimeCode = p.StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            SetDurationInSeconds(p.DurationTotalSeconds);

            if (keepGapPrevIfClose && isClose && prev != null)
            {
                prev.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds - prevGap;
                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(prev), prev, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        original.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                    }
                }

                SubtitleListview1.SetStartTimeAndDuration(i - 1, prev, p, _subtitle.GetParagraphOrDefault(i - 2));
            }

            if (IsOriginalEditable)
            {
                var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(p), p, _subtitleOriginal.Paragraphs);
                if (original != null)
                {
                    original.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                    original.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                }
            }

            SubtitleListview1.SyntaxColorLineBackground(_subtitle.Paragraphs, i, p);
            UpdateSourceView();
            audioVisualizer.Invalidate();
        }

        private void MoveEndCurrent(int ms, bool keepGapNextIfClose)
        {
            StopAutoDuration();
            var i = _subtitleListViewIndex;
            if (i < 0 || i >= _subtitle.Paragraphs.Count || ms == 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(i);
            if (p == null)
            {
                return;
            }

            // snap to shot change
            if (Configuration.Settings.VideoControls.WaveformSnapToShotChanges && audioVisualizer?.ShotChanges?.Count > 0)
            {
                var seconds = (p.EndTime.TotalMilliseconds + ms) / 1000.0;
                var closest = audioVisualizer.ShotChanges.OrderBy(sc => Math.Abs(seconds - sc)).First() * 1000.0;
                if (Math.Abs(p.EndTime.TotalMilliseconds + ms - closest) < CurrentFrameRate * 0.9)
                {
                    ms = (int)Math.Round(closest - p.EndTime.TotalMilliseconds);
                }
            }

            var nextGap = 0.0;
            var next = _subtitle.GetParagraphOrDefault(i + 1);
            var isClose = false;
            if (keepGapNextIfClose && next != null)
            {
                if (p.EndTime.TotalMilliseconds <= next.StartTime.TotalMilliseconds && p.EndTime.TotalMilliseconds + MinGapBetweenLines >= next.StartTime.TotalMilliseconds)
                {
                    isClose = true;
                    nextGap = next.StartTime.TotalMilliseconds - p.EndTime.TotalMilliseconds;
                    if (ms > 0 && next.DurationTotalMilliseconds + ms < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                    {
                        return;
                    }
                }
            }

            if (ms > 0)
            {
                if (p.DurationTotalMilliseconds + ms > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                {
                    return;
                }

                if (next == null || keepGapNextIfClose && isClose || p.EndTime.TotalMilliseconds + ms + MinGapBetweenLines < next.StartTime.TotalMilliseconds)
                {
                    p.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + ms;
                }
                else
                {
                    var newEndMs = next.StartTime.TotalMilliseconds - MinGapBetweenLines;
                    if (newEndMs > p.EndTime.TotalMilliseconds)
                    {
                        p.EndTime.TotalMilliseconds = newEndMs;
                    }
                }
            }
            else
            {
                if (p.EndTime.TotalMilliseconds + ms - Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds < p.StartTime.TotalMilliseconds)
                {
                    return; // do not allow duration smaller than min duration in ms
                }

                p.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + ms;
            }

            SubtitleListview1.SetStartTimeAndDuration(i, p, _subtitle.GetParagraphOrDefault(i + 1), _subtitle.GetParagraphOrDefault(i - 1));
            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            timeUpDownStartTime.TimeCode = p.StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            SetDurationInSeconds(p.DurationTotalSeconds);

            if (keepGapNextIfClose && isClose && next != null)
            {
                next.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + nextGap;
                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(next), next, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds;
                    }
                }

                SubtitleListview1.SetStartTimeAndDuration(i + 1, next, _subtitle.GetParagraphOrDefault(i + 2), p);
            }

            if (IsOriginalEditable)
            {
                var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(p), p, _subtitleOriginal.Paragraphs);
                if (original != null)
                {
                    original.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                    original.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                }
            }

            SubtitleListview1.SyntaxColorLineBackground(_subtitle.Paragraphs, i, p);
            UpdateSourceView();
            audioVisualizer.Invalidate();
        }

        private void ShowNextSubtitleLabel()
        {
            if (audioVisualizer.Visible && audioVisualizer.WavePeaks != null && audioVisualizer.Width > 300 && _subtitleListViewIndex >= 0)
            {
                var next = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex + 1);
                if (next != null && !string.IsNullOrEmpty(next.Text))
                {
                    labelNextWord.Top = audioVisualizer.Top;
                    labelNextWord.Text = string.Format(_language.NextX, HtmlUtil.RemoveHtmlTags(next.Text, true).Replace(Environment.NewLine, " "));
                    labelNextWord.Left = audioVisualizer.Width / 2 - labelNextWord.Width / 2 + audioVisualizer.Left;
                    labelNextWord.Visible = true;
                    _labelNextTicks = DateTime.UtcNow.Ticks;
                }
                else
                {
                    labelNextWord.Visible = false;
                }
            }
            else
            {
                labelNextWord.Visible = false;
            }
        }

        private void MergeSelectedLinesOnlyFirstText()
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 1)
            {
                var deleteIndices = new List<int>();
                bool first = true;
                int firstIndex = 0;
                int next = 0;
                string text = string.Empty;
                double endTime = 0;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    if (first)
                    {
                        firstIndex = index;
                        next = index + 1;
                    }
                    else
                    {
                        deleteIndices.Add(index);
                        if (next != index)
                        {
                            return;
                        }

                        next++;
                    }

                    first = false;
                    if (string.IsNullOrEmpty(text))
                    {
                        text = _subtitle.Paragraphs[index].Text.Trim();
                    }

                    endTime = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                }

                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeMergeLines);

                var currentParagraph = _subtitle.Paragraphs[firstIndex];
                currentParagraph.Text = text;
                currentParagraph.EndTime.TotalMilliseconds = endTime;

                var nextParagraph = _subtitle.GetParagraphOrDefault(next);
                if (nextParagraph != null && currentParagraph.EndTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && currentParagraph.StartTime.TotalMilliseconds < nextParagraph.StartTime.TotalMilliseconds)
                {
                    currentParagraph.EndTime.TotalMilliseconds = nextParagraph.StartTime.TotalMilliseconds - 1;
                }

                // original subtitle
                if (IsOriginalEditable)
                {
                    var original = Utilities.GetOriginalParagraph(firstIndex, currentParagraph, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        string originalText = string.Empty;
                        for (int i = 0; i < deleteIndices.Count; i++)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], _subtitle.Paragraphs[deleteIndices[i]], _subtitleOriginal.Paragraphs);
                            if (originalNext != null && string.IsNullOrEmpty(originalText))
                            {
                                originalText = originalNext.Text;
                            }
                        }

                        for (int i = deleteIndices.Count - 1; i >= 0; i--)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], _subtitle.Paragraphs[deleteIndices[i]], _subtitleOriginal.Paragraphs);
                            if (originalNext != null)
                            {
                                _subtitleOriginal.Paragraphs.Remove(originalNext);
                            }
                        }

                        original.Text = originalText;
                        original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        _subtitleOriginal.Renumber();
                    }
                }

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    _networkSession.UpdateLine(firstIndex, currentParagraph);
                    NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    for (int i = deleteIndices.Count - 1; i >= 0; i--)
                    {
                        _subtitle.Paragraphs.RemoveAt(deleteIndices[i]);
                    }

                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                }

                UpdateSourceView();
                ShowStatus(_language.LinesMerged);
                SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }
        }

        private void GoToFirstEmptyLine()
        {
            var index = FirstSelectedIndex + 1;
            for (; index < _subtitle.Paragraphs.Count; index++)
            {
                if (string.IsNullOrWhiteSpace(_subtitle.Paragraphs[index].Text))
                {
                    SelectListViewIndexAndEnsureVisible(index);
                    if (mediaPlayer.VideoPlayer != null)
                    {
                        mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                    }

                    return;
                }
            }
        }

        private void PlayFirstSelectedSubtitle()
        {
            if (_subtitleListViewIndex >= 0 && mediaPlayer.VideoPlayer != null)
            {
                GotoSubtitleIndex(_subtitleListViewIndex);
                var paragraph = _subtitle.Paragraphs[_subtitleListViewIndex];
                double startSeconds = paragraph.StartTime.TotalSeconds;
                ResetPlaySelection();
                _endSeconds = paragraph.EndTime.TotalSeconds;
                mediaPlayer.CurrentPosition = startSeconds;
                ShowSubtitle();
                mediaPlayer.Play();
            }
        }

        private void MoveVideoSeconds(double seconds)
        {
            var oldPosition = mediaPlayer.CurrentPosition;
            var newPosition = oldPosition + seconds;
            if (newPosition < 0)
            {
                newPosition = 0;
            }

            if (mediaPlayer.IsPaused && Configuration.Settings.General.MoveVideo100Or500MsPlaySmallSample)
            {
                mediaPlayer.CurrentPosition = newPosition;
                mediaPlayer.Play();
                Thread.Sleep(99);
                mediaPlayer.Stop();
            }

            mediaPlayer.CurrentPosition = newPosition;
        }

        private void RunCustomSearch(string url)
        {
            if (!string.IsNullOrEmpty(url))
            {
                RunTranslateSearch((text) =>
                {
                    url = string.Format(url, Utilities.UrlEncode(text));
                    UiUtil.OpenUrl(url);
                });
            }
        }

        private void GoFullscreen(bool force)
        {
            if (_videoPlayerUndocked != null && Configuration.Settings.General.Undocked)
            {
                _videoPlayerUndocked.WindowState = FormWindowState.Maximized;
                return;
            }

            if (mediaPlayer.VideoPlayer == null)
            {
                return;
            }

            _textHeightResize = splitContainerListViewAndText.Height - splitContainerListViewAndText.SplitterDistance;
            _textHeightResizeIgnoreUpdate = DateTime.UtcNow.Ticks;
            mediaPlayer.ShowFullScreenControls();
            bool setRedockOnFullscreenEnd = false;

            if (_videoPlayerUndocked == null || _videoPlayerUndocked.IsDisposed)
            {
                Configuration.Settings.General.Undocked = true;
                UnDockVideoPlayer();
                setRedockOnFullscreenEnd = true;
            }

            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                _videoPlayerUndocked.Show(this);
                _videoPlayerUndocked.Focus();
                _videoPlayerUndocked.GoFullscreen();
                if (setRedockOnFullscreenEnd)
                {
                    _videoPlayerUndocked.RedockOnFullscreenEnd = true;
                }
            }
        }

        private void RefreshTimeCodeMode()
        {
            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                numericUpDownDuration.DecimalPlaces = 2;
                numericUpDownDuration.Increment = (decimal)(0.01);

                toolStripSeparatorFrameRate.Visible = true;
                toolStripLabelFrameRate.Visible = true;
                toolStripComboBoxFrameRate.Visible = true;
                toolStripButtonGetFrameRate.Visible = true;
            }
            else
            {
                numericUpDownDuration.DecimalPlaces = 3;
                numericUpDownDuration.Increment = (decimal)0.1;

                toolStripSeparatorFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                toolStripLabelFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                toolStripComboBoxFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                toolStripButtonGetFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
            }

            SaveSubtitleListviewIndices();
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            RestoreSubtitleListviewIndices();
            RefreshSelectedParagraph();
        }

        private void ReverseStartAndEndingForRtl()
        {
            MakeHistoryForUndo(toolStripMenuItemReverseRightToLeftStartEnd.Text);
            int selectedIndex = FirstSelectedIndex;
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                p.Text = Utilities.ReverseStartAndEndingForRightToLeft(p.Text);
                SubtitleListview1.SetText(index, p.Text);
                if (index == selectedIndex)
                {
                    textBoxListViewText.Text = p.Text;
                }
            }
        }

        private void MergeDialogs()
        {
            if (SubtitleListview1.SelectedItems.Count == 1 || SubtitleListview1.SelectedItems.Count == 2 && SubtitleListview1.SelectedIndices[0] + 1 == SubtitleListview1.SelectedIndices[1])
            {
                MergeWithLineAfter(true);
            }
        }

        private void ToggleDashes()
        {
            var index = FirstSelectedIndex;
            if (index >= 0)
            {
                var hasStartDash = false;
                var p = _subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                foreach (var line in lines)
                {
                    var trimmed = HtmlUtil.RemoveHtmlTags(line, true).TrimStart();
                    if (trimmed.StartsWith('-'))
                    {
                        hasStartDash = true;
                        break;
                    }
                }

                if (!hasStartDash && _subtitleOriginal != null && textBoxListViewTextOriginal.Visible)
                {
                    var original = Utilities.GetOriginalParagraph(index, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        lines = original.Text.SplitToLines();
                        foreach (var line in lines)
                        {
                            var trimmed = HtmlUtil.RemoveHtmlTags(line, true).TrimStart();
                            if (trimmed.StartsWith('-'))
                            {
                                hasStartDash = true;
                                break;
                            }
                        }
                    }
                }

                MakeHistoryForUndo(_language.BeforeToggleDialogDashes);
                if (hasStartDash)
                {
                    RemoveDashes();
                }
                else
                {
                    AddDashes();
                }
            }
        }

        private void ToggleDashesTextBox(SETextBox tb)
        {
            var hasStartDash = false;
            var lines = tb.Text.TrimEnd().SplitToLines();
            foreach (var line in lines)
            {
                var trimmed = HtmlUtil.RemoveHtmlTags(line, true).TrimStart();
                if (trimmed.StartsWith('-'))
                {
                    hasStartDash = true;
                    break;
                }
            }

            MakeHistoryForUndo(_language.BeforeToggleDialogDashes);
            var sb = new StringBuilder();
            if (hasStartDash)
            {
                // remove dashes
                foreach (var line in lines)
                {
                    var pre = string.Empty;
                    var s = Utilities.SplitStartTags(line, ref pre);
                    sb.Append(pre).AppendLine(s.TrimStart('-').TrimStart());
                }

                tb.Text = sb.ToString().Trim();
            }
            else
            {
                // add dashes
                if (CouldBeDialog(lines))
                {
                    foreach (var line in lines)
                    {
                        var pre = string.Empty;
                        var s = Utilities.SplitStartTags(line, ref pre);
                        sb.Append(pre).Append("- ").AppendLine(s);
                    }
                }
                else
                {
                    sb.Append(tb.Text);
                }

                var text = sb.ToString().Trim();
                var dialogHelper = new DialogSplitMerge { DialogStyle = Configuration.Settings.General.DialogStyle, SkipLineEndingCheck = true };
                text = dialogHelper.FixDashesAndSpaces(text);
                tb.Text = text;
            }
        }

        private void AddDashes()
        {
            var dialogHelper = new DialogSplitMerge { DialogStyle = Configuration.Settings.General.DialogStyle, SkipLineEndingCheck = true };
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                var sb = new StringBuilder();
                if (CouldBeDialog(lines))
                {
                    foreach (var line in lines)
                    {
                        var pre = string.Empty;
                        var s = Utilities.SplitStartTags(line, ref pre);
                        sb.Append(pre).Append("- ").AppendLine(s);
                    }
                }
                else
                {
                    sb.Append(p.Text);
                }

                var text = sb.ToString().Trim();
                text = dialogHelper.FixDashesAndSpaces(text);
                _subtitle.Paragraphs[index].Text = text;
                SubtitleListview1.SetText(index, text);
                if (index == _subtitleListViewIndex)
                {
                    textBoxListViewText.Text = text;
                }

                if (_subtitleOriginal != null && textBoxListViewTextOriginal.Visible)
                {
                    var original = Utilities.GetOriginalParagraph(index, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        lines = original.Text.SplitToLines();
                        sb = new StringBuilder();
                        if (CouldBeDialog(lines))
                        {
                            foreach (var line in lines)
                            {
                                var pre = string.Empty;
                                var s = Utilities.SplitStartTags(line, ref pre);
                                if (!line.StartsWith('-'))
                                {
                                    sb.Append(pre).Append("- ").AppendLine(s);
                                }
                                else
                                {
                                    sb.Append(pre).AppendLine(s);
                                }
                            }
                        }
                        else
                        {
                            sb.Append(original.Text);
                        }

                        text = sb.ToString().Trim();
                        text = dialogHelper.FixDashesAndSpaces(text);
                        _subtitleOriginal.Paragraphs[index].Text = text;
                        SubtitleListview1.SetOriginalText(index, text);
                        if (index == _subtitleListViewIndex)
                        {
                            textBoxListViewTextOriginal.Text = text;
                        }
                    }
                }
            }
        }

        private static bool CouldBeDialog(List<string> lines)
        {
            return lines.Count >= 2 && lines.Count <= 3;
        }

        private void RemoveDashes()
        {
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                var sb = new StringBuilder();
                foreach (var line in lines)
                {
                    var pre = string.Empty;
                    var s = Utilities.SplitStartTags(line, ref pre);
                    sb.Append(pre).AppendLine(s.TrimStart('-').TrimStart());
                }

                string text = sb.ToString().Trim();
                _subtitle.Paragraphs[index].Text = text;
                SubtitleListview1.SetText(index, text);
                if (index == _subtitleListViewIndex)
                {
                    textBoxListViewText.Text = text;
                }

                if (_subtitleOriginal != null && textBoxListViewTextOriginal.Visible)
                {
                    var original = Utilities.GetOriginalParagraph(index, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        lines = original.Text.SplitToLines();
                        sb = new StringBuilder();
                        foreach (var line in lines)
                        {
                            var pre = string.Empty;
                            var s = Utilities.SplitStartTags(line, ref pre);
                            sb.Append(pre).AppendLine(s.TrimStart('-').TrimStart());
                        }

                        text = sb.ToString().Trim();
                        _subtitleOriginal.Paragraphs[index].Text = text;
                        SubtitleListview1.SetOriginalText(index, text);
                        if (index == _subtitleListViewIndex)
                        {
                            textBoxListViewTextOriginal.Text = text;
                        }
                    }
                }
            }
        }

        private void SetTitle()
        {
            var text = "Untitled";
            string separator = " + ";
            if (!string.IsNullOrEmpty(_fileName))
            {
                text = Configuration.Settings.General.TitleBarFullFileName ? _fileName : Path.GetFileName(_fileName);
            }

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                text += separator;

                if (!string.IsNullOrEmpty(_subtitleOriginalFileName))
                {
                    text += Configuration.Settings.General.TitleBarFullFileName ? _subtitleOriginalFileName : Path.GetFileName(_subtitleOriginalFileName);
                }
                else
                {
                    text += _language.New;
                }
            }

            Text = text + " - " + Title;
        }

        private void ClipboardSetText(string text)
        {
            for (int i = 0; i < 5; i++)
            {
                try
                {
                    Clipboard.Clear();
                    Clipboard.SetText(text);
                    return;
                }
                catch
                {
                    Thread.Sleep(100);
                }
            }

            MessageBox.Show("Unable to set clipboard text - some other application might have locked the clipboard.");
        }

        private void CopyTextFromSelectedLinesToClipboard(bool removeTags)
        {
            var sb = new StringBuilder();
            foreach (int i in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.GetParagraphOrDefault(i);
                if (p != null)
                {
                    sb.Append(p.Text).AppendLine(Environment.NewLine);
                }
            }

            if (sb.ToString().TrimEnd().Length > 0)
            {
                var text = sb.ToString().TrimEnd();
                if (removeTags)
                {
                    text = HtmlUtil.RemoveHtmlTags(text, true);
                }

                ClipboardSetText(text);
            }
        }

        private void SubtitleListview1KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.C && e.Modifiers == Keys.Control) //Ctrl+c = Copy to clipboard
            {
                var tmp = new Subtitle();
                foreach (int i in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        tmp.Paragraphs.Add(new Paragraph(p));
                    }
                }

                if (tmp.Paragraphs.Count > 0)
                {
                    if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
                    {
                        tmp.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(Configuration.Settings.General.CurrentVideoOffsetInMs));
                    }

                    if (IsAssa())
                    {
                        tmp.Header = _subtitle.Header;
                        ClipboardSetText(tmp.ToText(new AdvancedSubStationAlpha()).TrimEnd());
                    }
                    else
                    {
                        ClipboardSetText(tmp.ToText(new SubRip()).TrimEnd());
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewCopyText)
            {
                CopyTextFromSelectedLinesToClipboard(false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewCopyPlainText)
            {
                CopyTextFromSelectedLinesToClipboard(true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAutoDuration)
            {
                MakeAutoDurationSelectedLines();
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN1)
            {
                SetAlignment("{\\an1}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN2)
            {
                SetAlignment("", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN3)
            {
                SetAlignment("{\\an3}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN4)
            {
                SetAlignment("{\\an4}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN5)
            {
                SetAlignment("{\\an5}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN6)
            {
                SetAlignment("{\\an6}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN7)
            {
                SetAlignment("{\\an7}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN8)
            {
                SetAlignment("{\\an8}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN9)
            {
                SetAlignment("{\\an9}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor1)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color1));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor2)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color2));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor3)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color3));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor4)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color4));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor5)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color5));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor6)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color6));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor7)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color7));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor8)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color8));
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewGoToNextError)
            {
                GoToNextSyntaxError();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewRemoveTimeCodes)
            {
                RemoveTimeCodesFromSelectedLines();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.V && e.Modifiers == Keys.Control) //Ctrl+V = Paste from clipboard
            {
                bool containsText;
                try
                {
                    containsText = Clipboard.ContainsText();
                }
                catch
                {
                    e.SuppressKeyPress = true;
                    return;
                }

                if (containsText)
                {
                    var isAssa = IsAssa();
                    var text = Clipboard.GetText();
                    var tmp = new Subtitle();
                    SubtitleFormat format = new SubRip();
                    var list = new List<string>(text.SplitToLines());
                    if (new AdvancedSubStationAlpha().IsMine(list, null))
                    {
                        format = new AdvancedSubStationAlpha();
                    }
                    format.LoadSubtitle(tmp, list, null);
                    if (SubtitleListview1.SelectedItems.Count == 1 && tmp.Paragraphs.Count > 0)
                    {
                        MakeHistoryForUndo(_language.BeforeInsertLine);
                        int firstIndex = FirstSelectedIndex;
                        var lastParagraph = _subtitle.Paragraphs[firstIndex];
                        double addMs = 0;
                        if (lastParagraph.EndTime.TotalMilliseconds > tmp.Paragraphs[0].StartTime.TotalMilliseconds)
                        { // add time to pasted subtitles to prevent overlap, but only if necessary
                            addMs = lastParagraph.EndTime.TotalMilliseconds - tmp.Paragraphs[0].StartTime.TotalMilliseconds + MinGapBetweenLines;
                        }
                        else if (firstIndex <= _subtitle.Paragraphs.Count - 2 && _subtitle.Paragraphs[firstIndex + 1].StartTime.TotalMilliseconds < tmp.Paragraphs[0].StartTime.TotalMilliseconds)
                        { // inserting between two subtitle... with overlapping codes
                            addMs = lastParagraph.EndTime.TotalMilliseconds - tmp.Paragraphs[0].StartTime.TotalMilliseconds + MinGapBetweenLines;
                        }

                        if (isAssa && format.GetType() == typeof(AdvancedSubStationAlpha))
                        {
                            addMs = 0;

                            if (string.IsNullOrWhiteSpace(_subtitle.Header))
                            {
                                _subtitle.Header = AdvancedSubStationAlpha.DefaultHeader;
                            }

                            var styles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                            foreach (var tmpParagraph in tmp.Paragraphs)
                            {
                                if (!string.IsNullOrWhiteSpace(tmpParagraph.Extra) && !styles.Any(p => p.Equals(tmpParagraph.Extra, StringComparison.OrdinalIgnoreCase)))
                                {
                                    var s = AdvancedSubStationAlpha.GetSsaStyle(tmpParagraph.Extra, tmp.Header);
                                    _subtitle.Header = AdvancedSubStationAlpha.AddSsaStyle(s, _subtitle.Header);
                                }
                            }
                        }

                        var selectIndices = new List<int>();
                        for (int i = 0; i < tmp.Paragraphs.Count; i++)
                        {
                            var p = tmp.Paragraphs[i];
                            p.StartTime.TotalMilliseconds += addMs;
                            p.EndTime.TotalMilliseconds += addMs;
                            _subtitle.Paragraphs.Insert(firstIndex + i + 1, p);
                            selectIndices.Insert(0, firstIndex + i + 1);
                            if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                            {
                                var original = Utilities.GetOriginalParagraph(firstIndex + i + 1, p, _subtitleOriginal.Paragraphs);
                                if (original == null)
                                {
                                    _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds));
                                }
                            }
                        }

                        _subtitle.Renumber();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.BeginUpdate();
                        foreach (var selectIndex in selectIndices)
                        {
                            SubtitleListview1.Items[selectIndex].Selected = true;
                        }

                        SubtitleListview1.EndUpdate();
                        SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex + 1, true);
                    }
                    else if (SubtitleListview1.Items.Count == 0 && tmp.Paragraphs.Count > 0)
                    { // insert into empty subtitle
                        MakeHistoryForUndo(_language.BeforeInsertLine);
                        foreach (var p in tmp.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(p);
                            if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                            {
                                var original = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.Count - 1, p, _subtitleOriginal.Paragraphs);
                                if (original == null)
                                {
                                    _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds));
                                }
                            }
                        }

                        _subtitle.Renumber();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }
                    else if (SubtitleListview1.Items.Count > 1 && tmp.Paragraphs.Count > 0)
                    {
                        // multiple lines selected - first delete, then insert
                        int firstIndex = FirstSelectedIndex;
                        if (firstIndex >= 0)
                        {
                            var idx = firstIndex;
                            MakeHistoryForUndo(_language.BeforeInsertLine);
                            _makeHistoryPaused = true;

                            DeleteSelectedLines();
                            _subtitleListViewIndex = -1;
                            var selectedIndices = new List<int>();
                            foreach (var p in tmp.Paragraphs)
                            {
                                _subtitle.Paragraphs.Insert(idx, p);
                                selectedIndices.Add(idx);
                                if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                                {
                                    var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                                    if (original == null)
                                    {
                                        _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds));
                                    }
                                }

                                idx++;
                            }

                            _subtitle.Renumber();
                            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                            SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                            foreach (var selectedIndex in selectedIndices)
                            {
                                SubtitleListview1.Items[selectedIndex].Selected = true;
                            }

                            RestartHistory();
                        }
                    }
                    else if (SubtitleListview1.Items.Count > 0 &&
                             list.Count >= 1 && list.Count < 3 &&
                             !text.Trim().Contains(Environment.NewLine + Environment.NewLine) &&
                             text.Length < 90)
                    {
                        if (_subtitle == null || _subtitle.Paragraphs.Count == 0)
                        {
                            InsertLineToolStripMenuItemClick(null, null);
                        }

                        // just insert into first selected
                        textBoxListViewText.Text = text.Trim();
                    }
                    else if (list.Count >= 1 && list.Count < 2000)
                    {
                        MakeHistoryForUndo(_language.BeforeInsertLine);
                        _makeHistoryPaused = true;
                        int firstSelectedIndex = 0;
                        if (SubtitleListview1.SelectedItems.Count > 0)
                        {
                            firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                        }

                        SubtitleListview1.BeginUpdate();
                        var newParagraph = new Paragraph();
                        var tempS = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                        if (tempS != null)
                        {
                            newParagraph.EndTime.TotalMilliseconds = tempS.EndTime.TotalMilliseconds;
                        }

                        foreach (var line in list)
                        {
                            if (!string.IsNullOrWhiteSpace(line))
                            {
                                var s = line.Trim().Length > Configuration.Settings.General.SubtitleLineMaximumLength ? Utilities.AutoBreakLine(line) : line.Trim();
                                var lastP = newParagraph;
                                newParagraph = new Paragraph()
                                {
                                    Text = line,
                                    StartTime = new TimeCode(newParagraph.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines),
                                    EndTime = new TimeCode(newParagraph.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines + Utilities.GetOptimalDisplayMilliseconds(line)),
                                };
                                SetStyleForNewParagraph(newParagraph, firstSelectedIndex);
                                _subtitle.InsertParagraphInCorrectTimeOrder(newParagraph);

                                if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                                {
                                    var original = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.Count - 1, newParagraph, _subtitleOriginal.Paragraphs);
                                    if (original == null)
                                    {
                                        _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, newParagraph.StartTime.TotalMilliseconds, newParagraph.EndTime.TotalMilliseconds));
                                    }
                                }
                            }
                        }

                        _subtitle.Renumber();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.EndUpdate();
                        SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex);
                        RestartHistory();
                    }

                    if (_subtitleListViewIndex >= 0)
                    {
                        UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[_subtitleListViewIndex], textBoxListViewText);
                    }
                    else
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(0);
                    }
                }
                else if (Clipboard.ContainsFileDropList())
                {
                    var fileDropList = Clipboard.GetFileDropList();
                    if (fileDropList.Count == 1)
                    {
                        ShowStatus(LanguageSettings.Current.General.PleaseWait, false);
                        OpenSubtitle(fileDropList[0], null);
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.X && e.Modifiers == Keys.Control) //Ctrl+X = Cut to clipboard
            {
                var tmp = new Subtitle { Header = _subtitle?.Header };
                foreach (int i in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        tmp.Paragraphs.Add(new Paragraph(p));
                    }
                }

                e.SuppressKeyPress = true;
                _cutText = IsAssa() ? tmp.ToText(new AdvancedSubStationAlpha()) : tmp.ToText(new SubRip());
                ToolStripMenuItemDeleteClick(null, null);
            }
            else if (e.KeyCode == Keys.A && e.Modifiers == Keys.Control)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                SubtitleListview1.SelectAll();
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.D && e.Modifiers == Keys.Control)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                SubtitleListview1.SelectFirstSelectedItemOnly();
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.Delete && SubtitleListview1.SelectedItems.Count > 0) //Delete
            {
                ToolStripMenuItemDeleteClick(null, null);
            }
            else if (e.KeyData == _shortcuts.MainInsertBefore)
            {
                InsertBefore();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainInsertAfter)
            {
                InsertAfter(string.Empty, true);
                e.SuppressKeyPress = true;
            }
            else if ((e.Modifiers == Keys.Control && e.KeyCode == Keys.Home) ||
                     (e.Modifiers == Keys.Alt && e.KeyCode == Keys.Home) ||
                     (e.Modifiers == Keys.None && e.KeyCode == Keys.Home))
            {
                SelectListViewIndexAndEnsureVisible(0);
                e.SuppressKeyPress = true;
            }
            else if ((e.Modifiers == Keys.Control && e.KeyCode == Keys.End) ||
                     (e.Modifiers == Keys.Alt && e.KeyCode == Keys.End) ||
                     (e.Modifiers == Keys.None && e.KeyCode == Keys.End))
            {
                SelectListViewIndexAndEnsureVisible(SubtitleListview1.Items.Count - 1);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.Enter)
            {
                SubtitleListview1_MouseDoubleClick(null, null);
            }
            else if (e.Modifiers == Keys.None && (e.KeyCode == Keys.Up || e.KeyCode == Keys.Down || e.KeyCode == Keys.PageUp || e.KeyCode == Keys.PageDown))
            {
                if (SubtitleListview1.SelectedIndices.Count > 1)
                {
                    SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                    SubtitleListview1.SelectNone();
                    SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                }
            }
        }

        private void RemoveTimeCodesFromSelectedLines()
        {
            MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.RemoveTimeCodes));

            var indices = new List<int>();
            foreach (ListViewItem item in SubtitleListview1.SelectedItems)
            {
                indices.Add(item.Index);
            }

            foreach (int i in indices)
            {
                if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                {
                    var original = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                        original.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    }
                }

                _subtitle.Paragraphs[i].StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                _subtitle.Paragraphs[i].EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
            }

            SaveSubtitleListviewIndices();
            _subtitleListViewIndex = -1;
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            UpdateSourceView();
            RestoreSubtitleListviewIndices();
        }

        private void SetAlignment(string tag, bool selectedLines)
        {
            if (selectedLines)
            {
                var indices = SubtitleListview1.GetSelectedIndices();
                if (indices.Length == 0)
                {
                    return;
                }

                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, tag));

                bool first = true;
                SubtitleListview1.BeginUpdate();
                foreach (int i in indices)
                {
                    if (first)
                    {
                        if (_subtitle.Paragraphs[i].Text.StartsWith(tag, StringComparison.Ordinal))
                        {
                            tag = string.Empty;
                        }

                        if (_subtitle.Paragraphs[i].Text.StartsWith(tag.Replace("}", "\\"), StringComparison.Ordinal))
                        {
                            tag = string.Empty;
                        }

                        first = false;
                    }

                    if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                    {
                        var original = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            original.Text = SetAlignTag(original.Text, tag);
                            SubtitleListview1.SetOriginalText(i, original.Text);
                        }
                    }

                    _subtitle.Paragraphs[i].Text = SetAlignTag(_subtitle.Paragraphs[i].Text, tag);
                    SubtitleListview1.SetText(i, _subtitle.Paragraphs[i].Text);
                }

                SubtitleListview1.EndUpdate();

                ShowStatus(string.Format(_language.TagXAdded, tag));
                UpdateSourceView();
                RefreshSelectedParagraph();
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            }
            else
            {
                var tb = GetFocusedTextBox();
                var pos = tb.SelectionStart;
                int oldLength = tb.Text.Length;
                bool atEnd = pos == oldLength;
                tb.Text = SetAlignTag(tb.Text, tag);
                if (atEnd)
                {
                    tb.SelectionStart = tb.Text.Length;
                }
                else if (pos == 0)
                {
                    tb.SelectionStart = 0;
                }
                else if (oldLength == tb.Text.Length)
                {
                    tb.SelectionStart = pos;
                }
                else if (pos + 5 <= tb.Text.Length)
                {
                    tb.SelectionStart = pos + 5;
                }
            }
        }

        private void GoToNextSyntaxError()
        {
            int idx = FirstSelectedIndex + 1;
            try
            {
                for (int i = idx; i < _subtitle.Paragraphs.Count; i++)
                {
                    var item = SubtitleListview1.Items[i];
                    if (item.SubItems[SubtitleListview1.ColumnIndexDuration].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor ||
                        item.SubItems[SubtitleListview1.ColumnIndexText].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor ||
                        item.SubItems[SubtitleListview1.ColumnIndexStart].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor ||
                        (SubtitleListview1.ColumnIndexCps >= 0 && item.SubItems[SubtitleListview1.ColumnIndexCps].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor) ||
                        (SubtitleListview1.ColumnIndexWpm >= 0 && item.SubItems[SubtitleListview1.ColumnIndexWpm].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor) ||
                        (SubtitleListview1.ColumnIndexGap >= 0 && item.SubItems[SubtitleListview1.ColumnIndexGap].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor))
                    {
                        SelectListViewIndexAndEnsureVisible(i);
                        if (mediaPlayer.VideoPlayer != null)
                        {
                            mediaPlayer.CurrentPosition = _subtitle.Paragraphs[i].StartTime.TotalSeconds;
                        }

                        return;
                    }
                }
            }
            catch
            {
            }
        }

        private void ListSyntaxErrors()
        {
            using (var form = new ErrorsGoTo(_subtitle))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    SelectListViewIndexAndEnsureVisible(form.ErrorIndex);
                    if (mediaPlayer.VideoPlayer != null)
                    {
                        mediaPlayer.CurrentPosition = _subtitle.Paragraphs[form.ErrorIndex].StartTime.TotalSeconds;
                    }
                }
            }
        }

        private void RestartHistory()
        {
            _listViewTextUndoLast = null;
            _listViewTextUndoIndex = -1;
            _listViewTextTicks = -1;
            _listViewOriginalTextUndoLast = null;
            _listViewOriginalTextTicks = -1;
            _undoIndex = _subtitle.HistoryItems.Count - 1;
            _makeHistoryPaused = false;
        }

        private void AdjustDisplayTimeForSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            AdjustDisplayTime(true);
        }

        private void FixCommonErrorsInSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            FixCommonErrors(true);
        }

        private void FindDoubleWordsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            var regex = new Regex(@"\b(\w+)\s+\1\b");
            _clearLastFind = true;
            if (_findHelper != null)
            {
                _clearLastFindType = _findHelper.FindReplaceType.FindType;
                _clearLastFindText = _findHelper.FindText;
            }

            _findHelper = new FindReplaceDialogHelper(new ReplaceType { FindType = FindType.RegEx }, string.Format(_language.DoubleWordsViaRegEx, regex), regex, string.Empty, _subtitleListViewIndex);
            _findHelper.FindReplaceType.SearchTranslation = true;
            _findHelper.FindReplaceType.SearchOriginal = _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0;

            ReloadFromSourceView();
            FindNext();
        }

        private void ChangeCasingForSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            ChangeCasing(true);
        }

        private void CenterFormOnCurrentScreen()
        {
            var screen = Screen.FromControl(this);
            Left = screen.Bounds.X + ((screen.Bounds.Width - Width) / 2);
            Top = screen.Bounds.Y + ((screen.Bounds.Height - Height) / 2);
        }

        private void SortSubtitle(SubtitleSortCriteria subtitleSortCriteria, string description)
        {
            var firstSelectedIndex = 0;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            }

            _subtitleListViewIndex = -1;
            MakeHistoryForUndo(string.Format(_language.BeforeSortX, description));
            _subtitle.Sort(subtitleSortCriteria);
            if (descendingToolStripMenuItem.Checked)
            {
                _subtitle.Paragraphs.Reverse();
            }

            UpdateSourceView();
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            ShowStatus(string.Format(_language.SortedByX, description));
        }

        private void SortNumberToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Number, (sender as ToolStripItem).Text);
        }

        private void SortStartTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.StartTime, (sender as ToolStripItem).Text);
        }

        private void SortEndTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.EndTime, (sender as ToolStripItem).Text);
        }

        private void SortDisplayTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Duration, (sender as ToolStripItem).Text);
        }

        private void SortByGapToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Gap, (sender as ToolStripItem).Text);
        }

        private void SortTextMaxLineLengthToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.TextMaxLineLength, (sender as ToolStripItem).Text);
        }

        private void SortTextTotalLengthToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.TextTotalLength, (sender as ToolStripItem).Text);
        }

        private void SortTextNumberOfLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.TextNumberOfLines, (sender as ToolStripItem).Text);
        }

        private void SortTextAlphabeticallytoolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Text, (sender as ToolStripItem).Text);
        }

        private void TextCharsSecToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.TextCharactersPerSeconds, (sender as ToolStripItem).Text);
        }

        private void ChangeLanguageToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var cl = new Options.ChooseLanguage())
            {
                if (cl.ShowDialog(this) == DialogResult.OK)
                {
                    SetLanguage(cl.CultureName);
                    Configuration.Settings.Save();
                }
            }
        }

        private void SetLanguage(string cultureName)
        {
            if (string.IsNullOrEmpty(cultureName))
            {
                cultureName = "en-US";
            }

            if (cultureName != "en-US")
            {
                try
                {
                    LanguageSettings.Current = Language.Load(Path.Combine(Configuration.BaseDirectory, "Languages", cultureName + ".xml"));
                }
                catch (Exception ex)
                {
                    var cap = "Language file load error";
                    var msg = "Could not load language file " + cultureName + ".xml" +
                              "\n\nError Message:\n" + ex.Message +
                              "\n\nStack Trace:\n" + ex.StackTrace;
                    MessageBox.Show(this, msg, cap);
                    cultureName = "en-US";
                }
            }

            if (cultureName == "en-US")
            {
                LanguageSettings.Current = new Language(); // default is en-US
            }

            Configuration.Settings.General.Language = cultureName;
            _languageGeneral = LanguageSettings.Current.General;
            _language = LanguageSettings.Current.Main;
            InitializeLanguage();
        }

        private void ToolStripMenuItemCompareClick(object sender, EventArgs e)
        {
            var compareForm = new Compare();
            if (_subtitleOriginal != null && _subtitleOriginalFileName != null && SubtitleListview1.IsOriginalTextColumnVisible)
            {
                compareForm.Initialize(_subtitle, _fileName, _subtitleOriginal, _subtitleOriginalFileName);
            }
            else
            {
                compareForm.Initialize(_subtitle, _fileName, _languageGeneral.CurrentSubtitle);
            }

            compareForm.Show(this);
            compareForm.Activate();
        }

        private void ToolStripMenuItemVerifyCompletenessClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            openFileDialog1.Title = LanguageSettings.Current.VerifyCompleteness.OpenControlSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) != DialogResult.OK)
            {
                return;
            }

            var controlSubtitle = VerifyCompleteness.LoadSubtitle(openFileDialog1.FileName);
            if (controlSubtitle.Paragraphs.Count > 0)
            {
                var verifyCompleteness = new VerifyCompleteness(
                    _subtitle,
                    controlSubtitle,
                    (timeSeconds) =>
                    {
                        // Invoke to not interfere with any inserting
                        BeginInvoke(new Action(() =>
                        {
                            GoToTimeAndSelectPrecedingParagraph(timeSeconds);
                        }));
                    },
                    (newParagraph) =>
                    {
                        // Synchronous, so it's (hopefully) done before the next seek
                        InsertAndSelectParagraph(newParagraph);
                    }
                );
                verifyCompleteness.Show(this);
                verifyCompleteness.Activate();
            }
            else
            {
                MessageBox.Show(this, LanguageSettings.Current.VerifyCompleteness.ControlSubtitleError, _languageGeneral.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void GoToTimeAndSelectPrecedingParagraph(double timeSeconds)
        {
            // Select correct paragraph
            var index = _subtitle.Paragraphs.Count - 1;

            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                if (_subtitle.Paragraphs[i].StartTime.TotalSeconds > timeSeconds)
                {
                    index = i - 1;
                    break;
                }
            }

            if (index < 0)
            {
                index = 0;
            }

            SelectListViewIndexAndEnsureVisible(index);

            // Seek in waveform
            if (mediaPlayer.VideoPlayer is null)
            {
                return;
            }

            mediaPlayer.Pause();
            mediaPlayer.CurrentPosition = timeSeconds;
            ShowSubtitle();

            double startPos = mediaPlayer.CurrentPosition - 1;
            if (startPos < 0)
            {
                startPos = 0;
            }

            SetWaveformPosition(startPos, mediaPlayer.CurrentPosition, index);
        }

        private void InsertAndSelectParagraph(Paragraph paragraph, bool selectInsertedParagraph = true)
        {
            MakeHistoryForUndo(_language.BeforeInsertLine);

            // Add paragraph to working subtitle
            _subtitle.InsertParagraphInCorrectTimeOrder(paragraph);
            _subtitle.Renumber();

            // Add paragraph to original subtitle, if any
            if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
            {
                _subtitleOriginal.InsertParagraphInCorrectTimeOrder(paragraph);
                _subtitleOriginal.Renumber();

                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            }
            else
            {
                SubtitleListview1.Fill(_subtitle);
            }

            // Select it if needed
            if (selectInsertedParagraph)
            {
                SelectListViewIndexAndEnsureVisible(paragraph);
            }

            UpdateSourceView();
            ShowStatus(_language.LineInserted);
        }

        private void ToolStripMenuItemAutoBreakLinesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var autoBreakUnbreakLines = new AutoBreakUnbreakLines())
            {
                var selectedLines = new Subtitle();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                }

                autoBreakUnbreakLines.Initialize(selectedLines, true);

                if (autoBreakUnbreakLines.ShowDialog() == DialogResult.OK && autoBreakUnbreakLines.FixedText.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeAutoBalanceSelectedLines);
                    SubtitleListview1.BeginUpdate();
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        var p = _subtitle.GetParagraphOrDefault(index);
                        if (autoBreakUnbreakLines.FixedText.ContainsKey(p.Id))
                        {
                            p.Text = autoBreakUnbreakLines.FixedText[p.Id];
                            SubtitleListview1.SetText(index, p.Text);
                            SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                        }
                    }

                    SubtitleListview1.EndUpdate();
                    RefreshSelectedParagraph();
                    ShowStatus(string.Format(_language.NumberOfLinesAutoBalancedX, autoBreakUnbreakLines.FixedText.Count));
                }
            }
        }

        private void ToolStripMenuItemEvenlyDistributeLinesClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count <= 0 || SubtitleListview1.SelectedItems.Count <= 0)
            {
                return;
            }

            var firstParagraph = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedIndices[0]);
            var lastParagraph = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedIndices[SubtitleListview1.SelectedItems.Count - 1]);
            var totalDuration = lastParagraph.EndTime.TotalMilliseconds - firstParagraph.StartTime.TotalMilliseconds;
            var totalDurationWithGaps = totalDuration - (MinGapBetweenLines * (SubtitleListview1.SelectedItems.Count - 1));

            decimal totalLength = 0;

            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.GetParagraphOrDefault(index);
                if (p != null)
                {
                    totalLength += p.Text.CountCharacters(true);
                }
            }

            var previousParagraphEndTime = firstParagraph.StartTime.TotalMilliseconds - MinGapBetweenLines;

            MakeHistoryForUndo(_language.BeforeEvenlyDistributeSelectedLines);
            SubtitleListview1.BeginUpdate();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.GetParagraphOrDefault(index);
                if (p != null)
                {
                    var length = p.Text.CountCharacters(true);
                    var lengthRatio = length / totalLength;

                    var newDuration = Convert.ToDouble(lengthRatio) * totalDurationWithGaps;

                    p.StartTime.TotalMilliseconds = previousParagraphEndTime + MinGapBetweenLines;
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + newDuration;

                    previousParagraphEndTime = p.EndTime.TotalMilliseconds;
                }
            }

            SubtitleListview1.EndUpdate();
            RefreshSelectedParagraphs();
            UpdateSourceView();
            UpdateListSyntaxColoring();
            ShowStatus(string.Format(_language.NumberOfLinesEvenlyDistributedX, SubtitleListview1.SelectedItems.Count));
        }

        private void ToolStripMenuItemUnbreakLinesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var autoBreakUnbreakLines = new AutoBreakUnbreakLines())
            {
                var selectedLines = new Subtitle();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                }

                autoBreakUnbreakLines.Initialize(selectedLines, false);

                if (autoBreakUnbreakLines.ShowDialog() == DialogResult.OK && autoBreakUnbreakLines.FixedText.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);

                    SubtitleListview1.BeginUpdate();
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        var p = _subtitle.GetParagraphOrDefault(index);
                        if (autoBreakUnbreakLines.FixedText.ContainsKey(p.Id))
                        {
                            p.Text = autoBreakUnbreakLines.FixedText[p.Id];
                            SubtitleListview1.SetText(index, p.Text);
                            SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                        }
                    }

                    SubtitleListview1.EndUpdate();
                    RefreshSelectedParagraph();
                    ShowStatus(string.Format(_language.NumberOfWithRemovedLineBreakX, autoBreakUnbreakLines.FixedText.Count));
                }
            }
        }

        private void MultipleReplaceToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var multipleReplace = new MultipleReplace())
            {
                multipleReplace.Initialize(_subtitle, this);
                if (multipleReplace.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeMultipleReplace);
                    SaveSubtitleListviewIndices();

                    for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
                    {
                        _subtitle.Paragraphs[i].Text = multipleReplace.FixedSubtitle.Paragraphs[i].Text;
                    }

                    _subtitle.RemoveParagraphsByIndices(multipleReplace.DeleteIndices);
                    _subtitle.Renumber();

                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    RefreshSelectedParagraph();
                    UpdateSourceView();
                    ShowStatus(string.Format(_language.NumberOfLinesReplacedX, multipleReplace.FixCount));
                }
            }
        }

        private void ToolStripMenuItemImportDvdSubtitlesClick(object sender, EventArgs e)
        {
            if (!ContinueNewOrExit())
            {
                return;
            }

            ImportDvdSubtitle(null);
        }

        private void ImportDvdSubtitle(string fileName)
        {
            using (var formSubRip = new DvdSubRip(Handle, fileName))
            {
                if (formSubRip.ShowDialog(this) == DialogResult.OK)
                {
                    using (var showSubtitles = new DvdSubRipChooseLanguage())
                    {
                        showSubtitles.Initialize(formSubRip.MergedVobSubPacks, formSubRip.Palette, formSubRip.Languages, formSubRip.SelectedLanguage);
                        if (formSubRip.Languages.Count == 1 || showSubtitles.ShowDialog(this) == DialogResult.OK)
                        {
                            using (var formSubOcr = new VobSubOcr())
                            {
                                var subs = formSubRip.MergedVobSubPacks;
                                if (showSubtitles.SelectedVobSubMergedPacks != null)
                                {
                                    subs = showSubtitles.SelectedVobSubMergedPacks;
                                }

                                formSubOcr.Initialize(subs, formSubRip.Palette, Configuration.Settings.VobSubOcr, formSubRip.SelectedLanguage);
                                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                                {
                                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);
                                    FileNew();
                                    _subtitle.Paragraphs.Clear();
                                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                                    {
                                        _subtitle.Paragraphs.Add(p);
                                    }

                                    UpdateSourceView();
                                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                                    _subtitleListViewIndex = -1;
                                    SubtitleListview1.FirstVisibleIndex = -1;
                                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                                    _fileName = string.Empty;
                                    SetTitle();

                                    Configuration.Settings.Save();
                                }
                            }
                        }
                    }
                }
            }
        }

        private void ToolStripMenuItemImportSubIdxClick(object sender, EventArgs e)
        {
            if (ContinueNewOrExit())
            {
                openFileDialog1.Title = _language.OpenVobSubFile;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = _language.VobSubFiles + "|*.sub";
                if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    ImportAndOcrVobSubSubtitleNew(openFileDialog1.FileName, false);
                    openFileDialog1.InitialDirectory = Path.GetDirectoryName(openFileDialog1.FileName);
                }
            }
        }

        private void SubtitleListview1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (Configuration.Settings.General.ListViewDoubleClickAction == 1)
            {
                GotoSubPositionAndPause();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 2)
            {
                GotoSubPositionAndPause();
                mediaPlayer.Play();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 3)
            {
                GotoSubPositionAndPause(-0.5);
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 4)
            {
                GotoSubPositionAndPause(-1.0);
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 5)
            {
                GotoSubPositionAndPause(-1.0);
                mediaPlayer.Play();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 6)
            {
                GotoSubPositionAndPause();
                textBoxListViewText.Focus();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 7)
            {
                textBoxListViewText.Focus();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 8)
            {
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        ShowSubtitle();
                        mediaPlayer.Play();
                        _endSeconds = p.EndTime.TotalSeconds;
                        _playSelectionIndex = _subtitle.GetIndex(p);
                        _playSelectionIndexLoopStart = -1;
                    }
                }
            }
        }

        private void AddWordToNameListToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var addToNamesList = new AddToNameList())
            {
                addToNamesList.Initialize(_subtitle, textBoxListViewText.SelectedText);
                if (addToNamesList.ShowDialog(this) == DialogResult.OK)
                {
                    ShowStatus(string.Format(_language.NameXAddedToNameList, addToNamesList.NewName));
                }
                else if (!string.IsNullOrEmpty(addToNamesList.NewName))
                {
                    ShowStatus(string.Format(_language.NameXNotAddedToNameList, addToNamesList.NewName));
                }
            }
        }

        private bool IsUnicode
        {
            get
            {
                var enc = GetCurrentEncoding();
                return enc == Encoding.UTF8 || enc == Encoding.Unicode || enc == Encoding.UTF7 || enc == Encoding.UTF32 || enc == Encoding.BigEndianUnicode;
            }
        }

        private void EditToolStripMenuItemDropDownOpening(object sender, EventArgs e)
        {
            toolStripMenuItemRemoveUnicodeControlChars.Visible = IsUnicode;
            toolStripMenuItemRtlUnicodeControlChars.Visible = IsUnicode;
            if (!IsUnicode || _subtitleListViewIndex == -1)
            {
                toolStripMenuItemInsertUnicodeCharacter.Visible = false;
                toolStripSeparatorInsertUnicodeCharacter.Visible = false;
            }
            else
            {
                if (toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count == 0)
                {
                    foreach (var s in Configuration.Settings.Tools.UnicodeSymbolsToInsert.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Add(s, null, InsertUnicodeGlyphAllowMultiLine);
                    }

                    UiUtil.FixFonts(toolStripMenuItemInsertUnicodeCharacter);
                }

                toolStripMenuItemInsertUnicodeCharacter.Visible = toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count > 0;
                toolStripSeparatorInsertUnicodeCharacter.Visible = toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count > 0;
            }

            lock (_syncUndo)
            {
                toolStripMenuItemUndo.Enabled = _subtitle != null && _subtitle.CanUndo && _undoIndex >= 0;
                toolStripMenuItemRedo.Enabled = _subtitle != null && _subtitle.CanUndo && _undoIndex < _subtitle.HistoryItems.Count - 1;
            }

            showHistoryforUndoToolStripMenuItem.Enabled = _subtitle != null && _subtitle.CanUndo;
            toolStripMenuItemShowOriginalInPreview.Visible = SubtitleListview1.IsOriginalTextColumnVisible;

            if (_networkSession != null)
            {
                toolStripMenuItemUndo.Enabled = false;
                toolStripMenuItemRedo.Enabled = false;
                showHistoryforUndoToolStripMenuItem.Enabled = false;
            }
        }

        private void InsertUnicodeGlyph(object sender, EventArgs e)
        {
            if (sender is ToolStripItem item)
            {
                PasteIntoActiveTextBox(item.Text);
            }
        }

        private void InsertUnicodeGlyphAllowMultiLine(object sender, EventArgs e)
        {
            if (sender is ToolStripItem item)
            {
                PasteIntoActiveTextBox(item.Text, true);
            }
        }

        private void ToolStripMenuItemAutoMergeShortLinesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var formMergeShortLines = new MergeShortLines())
            {
                formMergeShortLines.Initialize(_subtitle);
                if (formMergeShortLines.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeMergeShortLines);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in formMergeShortLines.MergedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    _subtitle.Renumber();

                    ShowStatus(string.Format(_language.MergedShortLinesX, formMergeShortLines.NumberOfMerges));
                    SaveSubtitleListviewIndices();
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    RefreshSelectedParagraph();
                }
            }
        }

        private void ToolStripMenuItemAutoSplitLongLinesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var splitLongLines = new SplitLongLines())
            {
                splitLongLines.Initialize(_subtitle);
                if (splitLongLines.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeSplitLongLines);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in splitLongLines.SplitSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.LongLinesSplitX, splitLongLines.NumberOfSplits));
                    SaveSubtitleListviewIndices();
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void SetMinimalDisplayTimeDifferenceToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var setMinDisplayDiff = new SetMinimumDisplayTimeBetweenParagraphs())
            {
                setMinDisplayDiff.Initialize(_subtitle);
                if (setMinDisplayDiff.ShowDialog() == DialogResult.OK && setMinDisplayDiff.FixCount > 0)
                {
                    MakeHistoryForUndo(_language.BeforeSetMinimumDisplayTimeBetweenParagraphs);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in setMinDisplayDiff.FixedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.XMinimumDisplayTimeBetweenParagraphsChanged, setMinDisplayDiff.FixCount));
                    SaveSubtitleListviewIndices();
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void ToolStripMenuItemImportTextClick(object sender, EventArgs e)
        {
            ImportPlainText(null);
        }

        private void ImportPlainText(string fileName)
        {
            using (var importText = new ImportText(fileName, _subtitle, this))
            {
                if (importText.ShowDialog(this) == DialogResult.OK)
                {
                    if (ContinueNewOrExit())
                    {
                        MakeHistoryForUndo(_language.BeforeImportText);

                        ResetSubtitle();
                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                        {
                            TryToFindAndOpenVideoFile(Utilities.GetPathAndFileNameWithoutExtension(importText.VideoFileName ?? fileName));
                        }

                        _fileName = Path.GetFileNameWithoutExtension(importText.VideoFileName);
                        _converted = true;
                        SetTitle();

                        _subtitleListViewIndex = -1;
                        if (importText.Format != null)
                        {
                            SetCurrentFormat(importText.Format);
                        }

                        _subtitle = new Subtitle(importText.FixedSubtitle.Paragraphs, _subtitle.HistoryItems);
                        ShowStatus(_language.TextImported);
                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }
                }
            }
        }

        private void ToolStripMenuItemPointSyncClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var pointSync = new SyncPointsSync())
            {
                pointSync.Initialize(_subtitle, _fileName, _videoFileName, VideoAudioTrackNumber);
                mediaPlayer.Pause();
                if (pointSync.ShowDialog(this) == DialogResult.OK)
                {
                    _subtitleListViewIndex = -1;
                    MakeHistoryForUndo(_language.BeforePointSynchronization);
                    var oldParagraphs = new List<Paragraph>(_subtitle.Paragraphs);
                    _subtitle.Paragraphs.Clear();
                    for (var index = 0; index < pointSync.FixedSubtitle.Paragraphs.Count; index++)
                    {
                        var p = pointSync.FixedSubtitle.Paragraphs[index];
                        _subtitle.Paragraphs.Add(p);
                        if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                        {
                            var oldP = oldParagraphs[index];
                            var original = Utilities.GetOriginalParagraph(index, oldP, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                original.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                                original.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                            }
                        }
                    }

                    ShowStatus(_language.PointSynchronizationDone);
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                }

                Activate();
                _videoFileName = pointSync.VideoFileName;
            }
        }

        private void PointSyncViaOtherSubtitleToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var pointSync = new SyncPointsSync())
            {
                openFileDialog1.Title = _language.OpenOtherSubtitle;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
                if (openFileDialog1.ShowDialog() == DialogResult.OK && File.Exists(openFileDialog1.FileName))
                {
                    var file = new FileInfo(openFileDialog1.FileName);
                    var fileName = file.FullName;
                    var extension = file.Extension.ToLowerInvariant();

                    // TODO: Check for mkv etc
                    if (extension == ".sub")
                    {
                        if (IsVobSubFile(fileName, false))
                        {
                            MessageBox.Show(_language.NoSupportHereVobSub);
                            return;
                        }
                    }

                    if (extension == ".sup")
                    {
                        if (FileUtil.IsBluRaySup(fileName))
                        {
                            MessageBox.Show(_language.NoSupportHereBluRaySup);
                            return;
                        }
                        else if (FileUtil.IsSpDvdSup(fileName))
                        {
                            MessageBox.Show(_language.NoSupportHereDvdSup);
                            return;
                        }
                    }

                    var sub = new Subtitle();
                    if (extension == ".mkv" || extension == ".mks")
                    {
                        using (var matroska = new MatroskaFile(fileName))
                        {
                            if (matroska.IsValid)
                            {
                                var subtitleList = matroska.GetTracks(true);
                                if (subtitleList.Count > 1)
                                {
                                    using (var subtitleChooser = new MatroskaSubtitleChooser("mkv"))
                                    {
                                        subtitleChooser.Initialize(subtitleList);
                                        if (_loading)
                                        {
                                            subtitleChooser.Icon = (Icon)Icon.Clone();
                                            subtitleChooser.ShowInTaskbar = true;
                                            subtitleChooser.ShowIcon = true;
                                        }

                                        if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                        {
                                            sub = LoadMatroskaSubtitleForSync(subtitleList[subtitleChooser.SelectedIndex], matroska);
                                        }
                                    }
                                }
                                else if (subtitleList.Count > 0)
                                {
                                    sub = LoadMatroskaSubtitleForSync(subtitleList[0], matroska);
                                }
                                else
                                {
                                    MessageBox.Show(_language.NoSubtitlesFound);
                                    return;
                                }
                            }
                        }
                    }

                    if (extension == ".divx" || extension == ".avi")
                    {
                        MessageBox.Show(_language.NoSupportHereDivx);
                        return;
                    }

                    if ((extension == ".mp4" || extension == ".m4v" || extension == ".mov" || extension == ".3gp") && file.Length > 10000)
                    {
                        var mp4Parser = new MP4Parser(fileName);
                        var mp4SubtitleTracks = mp4Parser.GetSubtitleTracks();
                        if (mp4SubtitleTracks.Count == 0)
                        {
                            MessageBox.Show(_language.NoSubtitlesFound);
                            return;
                        }
                        else if (mp4SubtitleTracks.Count == 1)
                        {
                            sub = LoadMp4SubtitleForSync(mp4SubtitleTracks[0]);
                        }
                        else
                        {
                            using (var subtitleChooser = new MatroskaSubtitleChooser("mp4"))
                            {
                                subtitleChooser.Initialize(mp4SubtitleTracks);
                                if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                {
                                    sub = LoadMp4SubtitleForSync(mp4SubtitleTracks[0]);
                                }
                            }
                        }
                    }

                    if (file.Length > 1024 * 1024 * 10 && sub.Paragraphs.Count == 0) // max 10 mb
                    {
                        var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, fileName);
                        if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                        {
                            return;
                        }
                    }

                    sub.Renumber();
                    if (sub.Paragraphs.Count == 0)
                    {
                        var f = sub.LoadSubtitle(fileName, out var enc, null);
                        if (f == null)
                        {
                            ShowUnknownSubtitle(fileName);
                            return;
                        }
                    }

                    pointSync.Initialize(_subtitle, _fileName, _videoFileName, VideoAudioTrackNumber, fileName, sub);
                    mediaPlayer.Pause();
                    if (pointSync.ShowDialog(this) == DialogResult.OK)
                    {
                        _subtitleListViewIndex = -1;
                        MakeHistoryForUndo(_language.BeforePointSynchronization);
                        var oldParagraphs = new List<Paragraph>(_subtitle.Paragraphs);
                        _subtitle.Paragraphs.Clear();
                        for (var index = 0; index < pointSync.FixedSubtitle.Paragraphs.Count; index++)
                        {
                            var p = pointSync.FixedSubtitle.Paragraphs[index];
                            _subtitle.Paragraphs.Add(p);
                            if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                            {
                                var oldP = oldParagraphs[index];
                                var original = Utilities.GetOriginalParagraph(index, oldP, _subtitleOriginal.Paragraphs);
                                if (original != null)
                                {
                                    original.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                                    original.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                                }
                            }
                        }

                        ShowStatus(_language.PointSynchronizationDone);
                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    }

                    _videoFileName = pointSync.VideoFileName;
                }
            }
        }

        private void ToolStripMenuItemImportTimeCodesClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                var timeCodeSubtitle = new Subtitle();
                SubtitleFormat format = null;

                if (format == null &&
                    openFileDialog1.FileName.EndsWith(".sup", StringComparison.OrdinalIgnoreCase) &&
                    FileUtil.IsBluRaySup(openFileDialog1.FileName))
                {
                    var log = new StringBuilder();
                    var subtitles = BluRaySupParser.ParseBluRaySup(openFileDialog1.FileName, log);
                    if (subtitles.Count > 0)
                    {
                        foreach (var sup in subtitles)
                        {
                            timeCodeSubtitle.Paragraphs.Add(new Paragraph(sup.StartTimeCode, sup.EndTimeCode, string.Empty));
                        }

                        format = new SubRip(); // just to set format to something
                    }
                }

                if (format == null)
                {
                    format = timeCodeSubtitle.LoadSubtitle(openFileDialog1.FileName, out var _, null);
                }

                if (format == null)
                {
                    var formats = SubtitleFormat.GetBinaryFormats(true).Union(SubtitleFormat.GetTextOtherFormats()).Union(new SubtitleFormat[]
                    {
                        new TimeCodesOnly1(),
                        new TimeCodesOnly2(),
                        new TimeCodesOnly3(),
                    }).ToArray();
                    format = SubtitleFormat.LoadSubtitleFromFile(formats, openFileDialog1.FileName, timeCodeSubtitle);
                }

                if (format == null)
                {
                    ShowUnknownSubtitle(openFileDialog1.FileName);
                    return;
                }

                if (_subtitle.Paragraphs.Count < 1)
                {
                    foreach (var p in timeCodeSubtitle.Paragraphs)
                    {
                        p.Text = string.Empty;
                    }

                    _subtitle.Paragraphs.AddRange(timeCodeSubtitle.Paragraphs);
                    _converted = true;
                    _fileName = string.Empty;
                    _subtitleListViewIndex = -1;
                    ShowStatus(string.Format(_language.LoadedSubtitleX, openFileDialog1.FileName));
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }

                if (timeCodeSubtitle.Paragraphs.Count != _subtitle.Paragraphs.Count)
                {
                    var text = string.Format(_language.ImportTimeCodesDifferentNumberOfLinesWarning, timeCodeSubtitle.Paragraphs.Count, _subtitle.Paragraphs.Count);
                    if (MessageBox.Show(this, text, _title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                MakeHistoryForUndo(_language.BeforeTimeCodeImport);

                int count = 0;
                for (int i = 0; i < timeCodeSubtitle.Paragraphs.Count; i++)
                {
                    var existing = _subtitle.GetParagraphOrDefault(i);

                    var newTimeCode = timeCodeSubtitle.GetParagraphOrDefault(i);
                    if (existing == null || newTimeCode == null)
                    {
                        break;
                    }

                    Paragraph original = null;
                    if (existing != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle &&
                        _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0 && SubtitleListview1.IsOriginalTextColumnVisible)
                    {
                        original = Utilities.GetOriginalParagraph(i, existing, _subtitleOriginal.Paragraphs);
                    }

                    existing.StartTime.TotalMilliseconds = newTimeCode.StartTime.TotalMilliseconds;
                    existing.EndTime.TotalMilliseconds = newTimeCode.EndTime.TotalMilliseconds;

                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = newTimeCode.StartTime.TotalMilliseconds;
                        original.EndTime.TotalMilliseconds = newTimeCode.EndTime.TotalMilliseconds;
                    }

                    count++;
                }

                ShowStatus(string.Format(_language.TimeCodeImportedFromXY, Path.GetFileName(openFileDialog1.FileName), count));
                SaveSubtitleListviewIndices();
                UpdateSourceView();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                RestoreSubtitleListviewIndices();
            }
        }

        private void ToolStripMenuItemTranslationModeClick(object sender, EventArgs e)
        {
            if (_subtitle == null || _subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            if (SubtitleListview1.IsOriginalTextColumnVisible)
            {
                RemoveOriginal(true, true);
            }
            else
            {
                OpenOriginalSubtitle();
                SetTitle();
            }
        }

        private void OpenOriginalSubtitle()
        {
            if (ContinueNewOrExitOriginal())
            {
                SaveSubtitleListviewIndices();
                openFileDialog1.Title = _languageGeneral.OpenOriginalSubtitleFile;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
                if (openFileDialog1.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                if (!LoadOriginalSubtitleFile(openFileDialog1.FileName))
                {
                    return;
                }

                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                RestoreSubtitleListviewIndices();

                saveOriginalToolStripMenuItem.Enabled = true;
                saveOriginalAstoolStripMenuItem.Enabled = true;
                removeOriginalToolStripMenuItem.Enabled = true;
                removeTranslationToolStripMenuItem.Enabled = true;

                Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                Configuration.Settings.Save();
                UpdateRecentFilesUI();
                MainResize();
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                RefreshSelectedParagraph();
            }
        }

        private bool LoadOriginalSubtitleFile(string fileName)
        {
            if (!File.Exists(fileName))
            {
                return false;
            }

            var file = new FileInfo(fileName);

            if (file.Extension.Equals(".sub", StringComparison.OrdinalIgnoreCase) && IsVobSubFile(fileName, false))
            {
                return false;
            }

            if (file.Length > 1024 * 1024 * 10) // max 10 mb
            {
                var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, fileName);
                if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return false;
                }
            }

            _subtitleOriginal = new Subtitle();
            _subtitleOriginalFileName = fileName;
            SubtitleFormat format = _subtitleOriginal.LoadSubtitle(fileName, out _, null);

            if (format == null)
            {
                foreach (var binaryFormat in SubtitleFormat.GetBinaryFormats(false))
                {
                    if (binaryFormat.IsMine(null, fileName))
                    {
                        binaryFormat.LoadSubtitle(_subtitleOriginal, null, fileName);
                        format = binaryFormat;
                        break;
                    }
                }
            }

            if (format == null)
            {
                var lines = FileUtil.ReadAllTextShared(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)).SplitToLines();
                foreach (var f in SubtitleFormat.GetTextOtherFormats())
                {
                    if (f.IsMine(lines, fileName))
                    {
                        f.LoadSubtitle(_subtitleOriginal, lines, fileName);
                        format = f;
                        break;
                    }
                }
            }

            if (format == null)
            {
                return false;
            }

            saveOriginalToolStripMenuItem.Enabled = true;
            saveOriginalAstoolStripMenuItem.Enabled = true;
            removeOriginalToolStripMenuItem.Enabled = true;
            removeTranslationToolStripMenuItem.Enabled = true;

            SetAssaResolution(_subtitleOriginal);
            SetupOriginalEdit();
            FixRightToLeftDependingOnLanguage();
            return true;
        }

        private void SetupOriginalEdit()
        {
            _isOriginalActive = true;

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal.Paragraphs.Count > 0)
            {
                InsertMissingParagraphs(_subtitle, _subtitleOriginal);
                InsertMissingParagraphs(_subtitleOriginal, _subtitle);
            }

            buttonUnBreak.Visible = false;
            buttonAutoBreak.Visible = false;
            buttonSplitLine.Visible = false;

            textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
            textBoxListViewText.Width = (groupBoxEdit.Width - (textBoxListViewText.Left + 10)) / 2;
            textBoxListViewTextOriginal.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
            textBoxListViewTextOriginal.Left = textBoxListViewText.Left + textBoxListViewText.Width + 3;
            textBoxListViewTextOriginal.Width = textBoxListViewText.Width;
            textBoxListViewTextOriginal.Visible = true;
            textBoxListViewTextOriginal.Enabled = Configuration.Settings.General.AllowEditOfOriginalSubtitle;
            labelOriginalText.Text = _languageGeneral.OriginalText;
            labelOriginalText.Visible = true;
            labelOriginalCharactersPerSecond.Visible = true;
            labelTextOriginalLineLengths.Visible = true;
            labelOriginalSingleLine.Visible = true;
            labelOriginalSingleLinePixels.Visible = true;
            labelTextOriginalLineTotal.Visible = true;

            labelCharactersPerSecond.Left = textBoxListViewText.Left + (textBoxListViewText.Width - labelCharactersPerSecond.Width);
            labelTextLineTotal.Left = textBoxListViewText.Left + (textBoxListViewText.Width - labelTextLineTotal.Width);
            Main_Resize(null, null);
            _changeOriginalSubtitleHash = GetFastSubtitleOriginalHash();

            SetTitle();

            SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
            SubtitleListview1.AutoSizeAllColumns(this);
            MainResize();
        }

        private static void InsertMissingParagraphs(Subtitle masterSubtitle, Subtitle insertIntoSubtitle)
        {
            int index = 0;
            foreach (var p in masterSubtitle.Paragraphs)
            {
                var insertParagraph = Utilities.GetOriginalParagraph(index, p, insertIntoSubtitle.Paragraphs);
                if (insertParagraph == null)
                {
                    insertParagraph = new Paragraph(p) { Text = string.Empty };
                    if (p.StartTime.IsMaxTime)
                    {
                        insertIntoSubtitle.Paragraphs.Add(new Paragraph(p, true) { Text = string.Empty });
                    }
                    else
                    {
                        insertIntoSubtitle.InsertParagraphInCorrectTimeOrder(insertParagraph);
                    }
                }

                index++;
            }

            insertIntoSubtitle.Renumber();
        }

        private void FixFfmpegWrongPath()
        {
            try
            {
                if (!Configuration.IsRunningOnWindows || (!string.IsNullOrWhiteSpace(Configuration.Settings.General.FFmpegLocation) && File.Exists(Configuration.Settings.General.FFmpegLocation)))
                {
                    return;
                }

                var defaultLocation = Path.Combine(Configuration.DataDirectory, "ffmpeg", "ffmpeg.exe");
                if (File.Exists(defaultLocation))
                {
                    Configuration.Settings.General.FFmpegLocation = defaultLocation;
                    return;
                }

                defaultLocation = Path.Combine(Configuration.DataDirectory, "ffmpeg.exe");
                if (File.Exists(defaultLocation))
                {
                    Configuration.Settings.General.FFmpegLocation = defaultLocation;
                }
            }
            catch
            {
                // ignore
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        private void OpenVideo(string fileName)
        {
            OpenVideo(fileName, VideoAudioTrackNumber);
        }

        private void OpenVideo(string fileName, int audioTrack)
        {
            if (Configuration.Settings.InitialLoad && LibMpvDynamic.IsInstalled)
            {
                Configuration.Settings.General.VideoPlayer = "MPV";
                Configuration.Settings.InitialLoad = false;
            }

            if (!_resetVideo)
            {
                return;
            }

            if (string.IsNullOrEmpty(fileName) || !File.Exists(fileName))
            {
                return;
            }

            if (_loading)
            {
                _videoFileName = fileName;
                VideoAudioTrackNumber = audioTrack;
                return;
            }

            var fi = new FileInfo(fileName);
            if (fi.Length < 1000)
            {
                return;
            }

            CheckSecondSubtitleReset();
            ShowSubtitleTimer.Stop();
            mediaPlayer.UsingFrontCenterAudioChannelOnly = false;
            Cursor = Cursors.WaitCursor;
            _videoFileName = fileName;
            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.PauseAndDisposePlayer();
            }

            ResetPlaySelection();

            _videoInfo = UiUtil.GetVideoInfo(fileName);
            if (_videoInfo.FramesPerSecond > 0)
            {
                toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", _videoInfo.FramesPerSecond);
            }

            string oldVideoPlayer = Configuration.Settings.General.VideoPlayer;
            var ok = UiUtil.InitializeVideoPlayerAndContainer(fileName, _videoInfo, mediaPlayer, VideoLoaded, VideoEnded);
            if (!ok && oldVideoPlayer != Configuration.Settings.General.VideoPlayer)
            {
                CloseVideoToolStripMenuItemClick(null, null);
                _videoFileName = fileName;
                _videoInfo = UiUtil.GetVideoInfo(fileName);
                UiUtil.InitializeVideoPlayerAndContainer(fileName, _videoInfo, mediaPlayer, VideoLoaded, VideoEnded);
            }

            if (!(mediaPlayer.VideoPlayer is LibMpvDynamic))
            {
                mediaPlayer.Volume = 0;
            }
            mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
            mediaPlayer.OnButtonClicked -= MediaPlayer_OnButtonClicked;
            mediaPlayer.OnButtonClicked += MediaPlayer_OnButtonClicked;
            closeVideoToolStripMenuItem.Enabled = true;
            toolStripMenuItemOpenKeepVideo.Enabled = true;

            if (_videoInfo == null)
            {
                return;
            }

            labelVideoInfo.Text = Path.GetFileName(fileName) + " ";
            if (_videoInfo.Width > 0 && _videoInfo.Height > 0)
            {
                labelVideoInfo.Text += _videoInfo.Width + "x" + _videoInfo.Height + " ";
            }
            if (_videoInfo.VideoCodec != null && Configuration.Settings.VideoControls.WaveformLabelShowCodec)
            {
                labelVideoInfo.Text += _videoInfo.VideoCodec.Trim() + " ";
            }
            if (_videoInfo.FramesPerSecond > 0)
            {
                labelVideoInfo.Text += string.Format("{0:0.0##}", _videoInfo.FramesPerSecond);
            }

            if (audioTrack > 0 && mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
            {
                try
                {
                    var audioTracks = libMpv.AudioTracks;
                    if (audioTracks.Count <= 1)
                    {
                        _videoAudioTrackNumber = -1;
                        audioTrack = 0;
                    }
                }
                catch
                {
                    // ignore
                }
            }

            var peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(fileName, audioTrack);
            var spectrogramFolder = WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(fileName, audioTrack);
            if (File.Exists(peakWaveFileName))
            {
                audioVisualizer.ZoomFactor = 1.0;
                audioVisualizer.VerticalZoomFactor = 1.0;
                SelectZoomTextInComboBox();
                audioVisualizer.WavePeaks = WavePeakData.FromDisk(peakWaveFileName);
                audioVisualizer.SetSpectrogram(SpectrogramData.FromDisk(spectrogramFolder));
                audioVisualizer.ShotChanges = ShotChangeHelper.FromDisk(_videoFileName);
                SetWaveformPosition(0, 0, 0);
                timerWaveform.Start();

                if (smpteTimeModedropFrameToolStripMenuItem.Checked)
                {
                    audioVisualizer.UseSmpteDropFrameTime();
                }
            }
            else
            {
                audioVisualizer.WavePeaks = null;
                audioVisualizer.SetSpectrogram(null);
                audioVisualizer.ShotChanges = new List<double>();
                audioVisualizer.Chapters = Array.Empty<MatroskaChapter>();

                if (Configuration.Settings.General.WaveformAutoGenWhenOpeningVideo)
                {
                    string targetFile = Path.Combine(Path.GetTempPath(), Guid.NewGuid() + ".wav");
                    Process process;
                    try
                    {
                        process = AddWaveform.GetCommandLineProcess(fileName, -1, targetFile, Configuration.Settings.General.VlcWaveTranscodeSettings, out var encoderName);
                        TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(25), () => ShowStatus(_language.GeneratingWaveformInBackground, true, 10_000));
                        var bw = new BackgroundWorker();
                        bw.DoWork += (sender, args) =>
                        {
                            var p = (Process)args.Argument;
                            process.Start();
                            while (!process.HasExited)
                            {
                                Application.DoEvents();
                            }

                            // check for delay in matroska files
                            var delayInMilliseconds = 0;
                            var audioTrackNames = new List<string>();
                            var mkvAudioTrackNumbers = new Dictionary<int, int>();
                            if (fileName.ToLowerInvariant().EndsWith(".mkv", StringComparison.OrdinalIgnoreCase))
                            {
                                try
                                {
                                    using (var matroska = new MatroskaFile(fileName))
                                    {
                                        if (matroska.IsValid)
                                        {
                                            foreach (var track in matroska.GetTracks())
                                            {
                                                if (track.IsAudio)
                                                {
                                                    if (track.CodecId != null && track.Language != null)
                                                    {
                                                        audioTrackNames.Add("#" + track.TrackNumber + ": " + track.CodecId.Replace("\0", string.Empty) + " - " + track.Language.Replace("\0", string.Empty));
                                                    }
                                                    else
                                                    {
                                                        audioTrackNames.Add("#" + track.TrackNumber);
                                                    }

                                                    mkvAudioTrackNumbers.Add(mkvAudioTrackNumbers.Count, track.TrackNumber);
                                                }
                                            }
                                            if (mkvAudioTrackNumbers.Count > 0)
                                            {
                                                delayInMilliseconds = (int)matroska.GetAudioTrackDelayMilliseconds(mkvAudioTrackNumbers[0]);
                                            }
                                        }
                                    }
                                }
                                catch (Exception exception)
                                {
                                    SeLogger.Error(exception, $"Error getting delay from mkv: {fileName}");
                                }
                            }

                            if (File.Exists(targetFile))
                            {
                                using (var waveFile = new WavePeakGenerator(targetFile))
                                {
                                    if (!string.IsNullOrEmpty(fileName) && File.Exists(fileName))
                                    {
                                        waveFile.GeneratePeaks(delayInMilliseconds, WavePeakGenerator.GetPeakWaveFileName(fileName));
                                        if (Configuration.Settings.VideoControls.GenerateSpectrogram)
                                        {
                                            waveFile.GenerateSpectrogram(delayInMilliseconds, WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(fileName));
                                        }
                                    }
                                }
                            }
                        };
                        bw.RunWorkerCompleted += (sender, args) =>
                        {
                            ShowStatus(string.Empty, false);
                            if (string.IsNullOrEmpty(_videoFileName) || !File.Exists(_videoFileName))
                            {
                                return;
                            }

                            var newPeakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(_videoFileName);
                            if (File.Exists(peakWaveFileName))
                            {
                                if (peakWaveFileName == newPeakWaveFileName)
                                {
                                    audioVisualizer.ZoomFactor = 1.0;
                                    audioVisualizer.VerticalZoomFactor = 1.0;
                                    SelectZoomTextInComboBox();
                                    audioVisualizer.WavePeaks = WavePeakData.FromDisk(peakWaveFileName);
                                    audioVisualizer.SetSpectrogram(SpectrogramData.FromDisk(spectrogramFolder));
                                    audioVisualizer.ShotChanges = ShotChangeHelper.FromDisk(_videoFileName);
                                    SetWaveformPosition(0, 0, 0);
                                    timerWaveform.Start();

                                    if (smpteTimeModedropFrameToolStripMenuItem.Checked)
                                    {
                                        audioVisualizer.UseSmpteDropFrameTime();
                                    }
                                }
                            }
                            else
                            {
                                var hasAudioTracks = HasAudioTracks(_videoFileName);
                                if (!hasAudioTracks)
                                {
                                    AddEmptyWaveform();
                                    return;
                                }

                                ShowStatus("Waveform load failed - install ffmpeg in Options - Settings - Waveform");
                            }
                        };
                        bw.RunWorkerAsync(process);

                        audioVisualizer.WaveformNotLoadedText = _language.GeneratingWaveformInBackground;
                        audioVisualizer.Invalidate();
                    }
                    catch (DllNotFoundException)
                    {
                        //TODO: display message
                        ShowStatus(string.Empty);
                        SetWaveFormNotLoadedText(LanguageSettings.Current.Waveform);
                    }
                }
            }

            Cursor = Cursors.Default;
            SetUndockedWindowsTitle();
            ShowSubtitleTimer.Start();
            SetAssaResolutionWithChecks();
        }

        private bool HasAudioTracks(string videoFileName)
        {
            try
            {
                if (FileUtil.IsMatroskaFile(videoFileName))
                {
                    var matroska = new MatroskaFile(videoFileName);
                    if (matroska.IsValid)
                    {
                        return matroska.GetTracks().Any(p => p.IsAudio);
                    }
                }

                if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
                {
                    return libMpv.AudioTracks.Count > 0;
                }

                var info = FfmpegMediaInfo.Parse(videoFileName);
                return info.Tracks.Any(p => p.TrackType == FfmpegTrackType.Audio);
            }
            catch
            {
                return true;
            }
        }

        private void SetAssaResolutionWithChecks()
        {
            if (Configuration.Settings.SubtitleSettings.AssaResolutionAutoNew &&
                string.IsNullOrEmpty(_subtitle?.Header) &&
                IsAssa() && _videoInfo?.Height > 0)
            {
                if (string.IsNullOrEmpty(_subtitle?.Header))
                {
                    _subtitle.Header = AdvancedSubStationAlpha.DefaultHeader;
                }

                var oldPlayResX = AdvancedSubStationAlpha.GetTagValueFromHeader("PlayResX", "[Script Info]", _subtitle.Header);
                var oldPlayResY = AdvancedSubStationAlpha.GetTagValueFromHeader("PlayResY", "[Script Info]", _subtitle.Header);

                if (oldPlayResX == _videoInfo.Width.ToString(CultureInfo.InvariantCulture) &&
                    oldPlayResY == _videoInfo.Height.ToString(CultureInfo.InvariantCulture))
                {
                    // all good - correct resolution
                }
                else if (oldPlayResX == null || oldPlayResY == null || _subtitle.Paragraphs.Count == 0)
                {
                    SetAssaResolution(_subtitle);
                    var styles = AdvancedSubStationAlpha.GetSsaStylesFromHeader(_subtitle.Header);
                    foreach (var style in styles)
                    {
                        if (style.FontSize <= 25)
                        {
                            const int defaultAssaHeight = 288;
                            style.FontSize = AssaResampler.Resample(defaultAssaHeight, _videoInfo.Height, style.FontSize);
                        }
                    }

                    _subtitle.Header = AdvancedSubStationAlpha.GetHeaderAndStylesFromAdvancedSubStationAlpha(_subtitle.Header, styles);
                }
                else if (Configuration.Settings.SubtitleSettings.AssaResolutionPromptChange)
                {
                    if (_subtitle.Paragraphs.Count == 0 && int.TryParse(oldPlayResX, out var sourceWidth) && int.TryParse(oldPlayResX, out var sourceHeight))
                    {
                        var styles = AdvancedSubStationAlpha.GetSsaStylesFromHeader(_subtitle.Header);
                        foreach (var style in styles)
                        {
                            style.FontSize = AssaResampler.Resample(sourceHeight, _videoInfo.Height, style.FontSize);

                            style.OutlineWidth = AssaResampler.Resample(sourceHeight, _videoInfo.Height, style.OutlineWidth);
                            style.ShadowWidth = AssaResampler.Resample(sourceHeight, _videoInfo.Height, style.ShadowWidth);
                            style.Spacing = AssaResampler.Resample(sourceWidth, _videoInfo.Width, style.Spacing);
                        }
                    }
                    else
                    {
                        ShowAssaResolutionChanger(true);
                    }
                }
            }
        }

        private void MediaPlayer_OnButtonClicked(object sender, EventArgs e)
        {
            if (sender is PictureBox pb && pb.Name == "_pictureBoxFullscreenOver")
            {
                if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed && _videoPlayerUndocked.IsFullscreen)
                {
                    _videoPlayerUndocked.NoFullscreen();
                }
                else
                {
                    GoFullscreen(false);
                }
            }
        }

        private void SetWaveformPosition(double startPositionSeconds, double currentVideoPositionSeconds, int subtitleIndex)
        {
            if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                int index = -1;
                if (SubtitleListview1.SelectedIndices.Count > 0 && _subtitle.Paragraphs.Count > 0)
                {
                    int i = SubtitleListview1.SelectedIndices[0];
                    var p = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleOriginal.Paragraphs);
                    index = _subtitleOriginal.GetIndex(p);
                }

                audioVisualizer.SetPosition(startPositionSeconds, _subtitleOriginal, currentVideoPositionSeconds, index, SubtitleListview1.SelectedIndices);
            }
            else
            {
                audioVisualizer.SetPosition(startPositionSeconds, _subtitle, currentVideoPositionSeconds, subtitleIndex, SubtitleListview1.SelectedIndices);
            }
        }

        private void VideoLoaded(object sender, EventArgs e)
        {
            if (_loading)
            {
                Application.DoEvents();
            }

            mediaPlayer.Volume = Configuration.Settings.General.VideoPlayerDefaultVolume;

            trackBarWaveformPosition.Maximum = (int)mediaPlayer.Duration;

            if (_videoLoadedGoToSubPosAndPause)
            {
                Application.DoEvents();
                _videoLoadedGoToSubPosAndPause = false;
                GotoSubPositionAndPause();
            }

            mediaPlayer.Pause();
            mediaPlayer.UpdatePlayerName();

            // Keep current play rate
            for (var index = 0; index < _contextMenuStripPlayRate.Items.Count; index++)
            {
                var item = (ToolStripMenuItem)_contextMenuStripPlayRate.Items[index];
                if (item.Checked)
                {
                    SetPlayRate(item, true);
                    break;
                }
            }

            if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv && !Configuration.Settings.General.MpvHandlesPreviewText)
            {
                libMpv?.RemoveSubtitle();
            }

            if (trackBarWaveformPosition.Maximum <= 0)
            {
                trackBarWaveformPosition.Maximum = (int)mediaPlayer.Duration;
            }

            textBoxSource.SelectionLength = 0;

            if (!_loading &&
                Configuration.Settings.General.AutoSetVideoSmpteForTtml &&
                !Configuration.Settings.General.CurrentVideoIsSmpte &&
                _subtitle.Header != null &&
                _subtitle.Header.Contains("frameRateMultiplier=\"1000 1001\"", StringComparison.OrdinalIgnoreCase) &&
                _subtitle.Header.Contains("timeBase=\"smpte\"", StringComparison.OrdinalIgnoreCase) &&
                _videoInfo != null &&
                !double.IsNaN(_videoInfo.FramesPerSecond) &&
                 ((decimal)_videoInfo.FramesPerSecond) % 1 != 0m &&
                (_currentSubtitleFormat?.Name == TimedText10.NameOfFormat ||
                _currentSubtitleFormat?.Name == NetflixTimedText.NameOfFormat ||
                _currentSubtitleFormat?.Name == ItunesTimedText.NameOfFormat))
            {
                if (!Configuration.Settings.General.AutoSetVideoSmpteForTtmlPrompt)
                {
                    SmpteTimeModedropFrameToolStripMenuItem_Click(null, null);
                    ShowStatus(_language.Menu.Video.SmptTimeMode);
                    return;
                }

                using (var form = new TimedTextSmpteTiming())
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        Configuration.Settings.General.AutoSetVideoSmpteForTtml = !form.Never;
                        return;
                    }

                    Configuration.Settings.General.AutoSetVideoSmpteForTtmlPrompt = !form.Always;
                    SmpteTimeModedropFrameToolStripMenuItem_Click(null, null);
                    ShowStatus(_language.Menu.Video.SmptTimeMode);
                }
            }

            if (VideoFileNameIsUrl)
            {
                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(2000), () => LoadVideoInfoAfterVideoFromUrlLoad());
                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(5000), () => LoadVideoInfoAfterVideoFromUrlLoad());
                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(10000), () => LoadVideoInfoAfterVideoFromUrlLoad());
            }

            if (VideoAudioTrackNumber > 0)
            {
                if (mediaPlayer.VideoPlayer is LibVlcDynamic libVlc)
                {
                    libVlc.AudioTrackNumber = VideoAudioTrackNumber;
                }
                else if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv2)
                {
                    libMpv2.AudioTrackNumber = VideoAudioTrackNumber;
                }
            }

            if (!VideoFileNameIsUrl &&
                Configuration.Settings.General.FFmpegUseCenterChannelOnly &&
                Configuration.Settings.General.MpvHandlesPreviewText &&
                mediaPlayer.VideoPlayer is LibMpvDynamic libMpv2a &&
                FfmpegMediaInfo.Parse(_videoFileName).HasFrontCenterAudio(VideoAudioTrackNumber))
            {
                libMpv2a.SetAudioChannelFrontCenter(); // front center
                mediaPlayer.UsingFrontCenterAudioChannelOnly = true;
            }
        }

        private void LoadVideoInfoAfterVideoFromUrlLoad()
        {
            if (VideoFileNameIsUrl && _videoInfo == null && mediaPlayer.VideoPlayer is LibMpvDynamic libMpv && libMpv.Duration > 0)
            {
                _videoInfo = new VideoInfo()
                {
                    Width = libMpv.VideoWidth,
                    Height = libMpv.VideoHeight,
                    TotalSeconds = libMpv.Duration,
                    TotalMilliseconds = libMpv.Duration * 1000.0,
                    FramesPerSecond = libMpv.VideoTotalFrames,
                    TotalFrames = libMpv.VideoFps,
                    Success = true,
                };
                mediaPlayer.VideoWidth = _videoInfo.Width;
                mediaPlayer.VideoHeight = _videoInfo.Height;
                mediaPlayer.SetSubtitleText(string.Empty, new Paragraph(), new Subtitle(), GetCurrentSubtitleFormat());
                UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());

                if (Configuration.Settings.General.WaveformAutoGenWhenOpeningVideo)
                {
                    AddEmptyWaveform();
                }
            }
        }

        private void VideoEnded(object sender, EventArgs e)
        {
            mediaPlayer.Pause();
        }

        private bool TryToFindAndOpenVideoFile(string fileNameNoExtension)
        {
            if (string.IsNullOrEmpty(fileNameNoExtension))
            {
                return false;
            }

            string movieFileName = null;

            foreach (var extension in Utilities.VideoFileExtensions.Concat(Utilities.AudioFileExtensions))
            {
                var fileName = fileNameNoExtension + extension;
                if (File.Exists(fileName))
                {
                    bool skipLoad = false;
                    if (extension == ".m2ts" && new FileInfo(fileName).Length < 2000000)
                    {
                        var textSt = new TextST();
                        skipLoad = textSt.IsMine(null, fileName); // don't load TextST files as video/audio file
                    }

                    if (!skipLoad)
                    {
                        movieFileName = fileName;
                        break;
                    }
                }
            }

            if (movieFileName != null)
            {
                OpenVideo(movieFileName);
                return true;
            }
            else
            {
                var index = fileNameNoExtension.LastIndexOf('.');
                if (index > 0 && TryToFindAndOpenVideoFile(fileNameNoExtension.Remove(index)))
                {
                    return true;
                }

                index = fileNameNoExtension.LastIndexOf('_');
                if (index > 0 && TryToFindAndOpenVideoFile(fileNameNoExtension.Remove(index)))
                {
                    return true;
                }
            }

            return false;
        }

        internal void GoBackSeconds(double seconds)
        {
            if (mediaPlayer.CurrentPosition > seconds)
            {
                mediaPlayer.CurrentPosition -= seconds;
            }
            else
            {
                mediaPlayer.CurrentPosition = 0;
            }

            ShowSubtitle();
        }

        private void ShowSubtitleTimerTick(object sender, EventArgs e)
        {
            if (_loading)
            {
                return;
            }

            ShowSubtitleTimer.Stop();

            if (_subtitle == null || _subtitle.Paragraphs.Count == 0)
            {
                ShowSubtitleTimer.Interval = 250;
            }
            else
            {
                ShowSubtitleTimer.Interval = 17;
            }

            if (mediaPlayer.VideoPlayer != null && !mediaPlayer.IsDisposed)
            {
                var currentPosition = mediaPlayer.CurrentPosition;
                int oldIndex = FirstSelectedIndex;
                int index = ShowSubtitle();
                if (index != -1 && oldIndex != index && checkBoxSyncListViewWithVideoWhilePlaying.Checked)
                {
                    if ((DateTime.UtcNow.Ticks - _lastTextKeyDownTicks) > 10000 * 700) // only if last typed char was entered > 700 milliseconds
                    {
                        if (_endSeconds <= 0 || !checkBoxAutoRepeatOn.Checked)
                        {
                            if (!timerAutoDuration.Enabled && !mediaPlayer.IsPaused && (currentPosition > 0.2 || index > 0))
                            {
                                SelectListViewIndexAndEnsureVisible(index);
                            }
                        }
                    }
                }

                if (!mediaPlayer.IsPaused)
                {
                    timeUpDownVideoPosition.Enabled = false;
                    timeUpDownVideoPositionAdjust.Enabled = false;
                    var autoOn = AutoRepeatContinueOn || AutoRepeatOn;
                    if (_endSeconds >= 0 && currentPosition >= _endSeconds && (!autoOn || _playSelectionIndex >= 0))
                    {
                        mediaPlayer.Pause();
                        if (_playSelectionIndex < 0)
                        {
                            if (_endSecondsNewPosition >= 0 && _endSecondsNewPositionTicks > DateTime.UtcNow.Ticks - (10000 * 900)) // 900 ms
                            {
                                mediaPlayer.CurrentPosition = _endSecondsNewPosition;
                            }
                            else
                            {
                                mediaPlayer.CurrentPosition = _endSeconds + EndDelay;
                            }
                        }


                        mediaPlayer.CurrentPosition = _endSeconds;
                        if (_playSelectionIndex >= 0)
                        {
                            var nextIndex = SubtitleListview1.GetSelectedIndices().OrderBy(pix => pix).FirstOrDefault(pix => pix > _playSelectionIndex);
                            var p = _subtitle.GetParagraphOrDefault(nextIndex);
                            if (p != null && _playSelectionIndex < nextIndex && SubtitleListview1.Items[nextIndex].Selected)
                            {
                                _endSeconds = p.EndTime.TotalSeconds;
                                mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(15), () =>
                                {
                                    UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());
                                    mediaPlayer.Play();
                                    _playSelectionIndex = nextIndex;
                                });
                            }
                            else
                            {
                                var first = _subtitle.GetParagraphOrDefault(_playSelectionIndexLoopStart);
                                if (first != null)
                                {
                                    _endSeconds = first.EndTime.TotalSeconds;
                                    mediaPlayer.CurrentPosition = first.StartTime.TotalSeconds;
                                    TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(151), () =>
                                    {
                                        UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());
                                        _endSeconds = first.EndTime.TotalSeconds;
                                        _playSelectionIndex = _playSelectionIndexLoopStart;
                                        mediaPlayer.Play();
                                    });
                                }
                                else
                                {
                                    ResetPlaySelection();
                                }
                            }
                        }
                        else
                        {
                            ResetPlaySelection();
                        }
                    }

                    if ((AutoRepeatContinueOn || AutoRepeatOn) && _playSelectionIndex < 0)
                    {
                        if (_endSeconds >= 0 && currentPosition >= _endSeconds && checkBoxAutoRepeatOn.Checked)
                        {
                            mediaPlayer.Pause();
                            _endSeconds = -1;

                            if (checkBoxAutoRepeatOn.Checked && _repeatCount > 0)
                            {
                                if (_repeatCount == 1)
                                {
                                    labelStatus.Text = _language.VideoControls.RepeatingLastTime;
                                }
                                else
                                {
                                    labelStatus.Text = string.Format(_language.VideoControls.RepeatingXTimesLeft, _repeatCount);
                                }

                                _repeatCount--;
                                if (_subtitleListViewIndex >= 0 && _subtitleListViewIndex < _subtitle.Paragraphs.Count)
                                {
                                    PlayPart(_subtitle.Paragraphs[_subtitleListViewIndex]);
                                }
                            }
                            else if (checkBoxAutoContinue.Checked)
                            {
                                _autoContinueDelayCount = int.Parse(comboBoxAutoContinue.Text);
                                if (_repeatCount == 1)
                                {
                                    labelStatus.Text = _language.VideoControls.AutoContinueInOneSecond;
                                }
                                else
                                {
                                    labelStatus.Text = string.Format(_language.VideoControls.AutoContinueInXSeconds, _autoContinueDelayCount);
                                }

                                if (_autoContinueDelayCount <= 0)
                                {
                                    TimerAutoContinueTick(null, null);
                                }
                                else
                                {
                                    timerAutoContinue.Start();
                                }
                            }
                            else if (Configuration.Settings.General.ReturnToStartAfterRepeat)
                            {
                                GotoSubPositionAndPause();
                            }
                        }
                    }
                }
                else
                {
                    timeUpDownVideoPosition.Enabled = true;
                    timeUpDownVideoPositionAdjust.Enabled = true;
                }

                var pos = currentPosition * TimeCode.BaseUnit;
                if (!timeUpDownVideoPosition.MaskedTextBox.Focused && timeUpDownVideoPosition.TimeCode.TotalMilliseconds != pos)
                {
                    timeUpDownVideoPosition.TimeCode = new TimeCode(pos);
                }

                if (!timeUpDownVideoPositionAdjust.MaskedTextBox.Focused && timeUpDownVideoPositionAdjust.TimeCode.TotalMilliseconds != pos)
                {
                    timeUpDownVideoPositionAdjust.TimeCode = new TimeCode(pos);
                }


                if (labelNextWord.Visible && _labelNextTicks + 100000000 < DateTime.UtcNow.Ticks)
                {
                    labelNextWord.Visible = false;
                }

                if (audioVisualizer.WavePeaks == null)
                {
                    if (mediaPlayer.IsPaused)
                    {
                        if (!toolStripButtonWaveformPlay.Visible)
                        {
                            toolStripButtonWaveformPause.Visible = false;
                            toolStripButtonWaveformPlay.Visible = true;
                        }
                    }
                    else if (!toolStripButtonWaveformPause.Visible)
                    {
                        toolStripButtonWaveformPause.Visible = true;
                        toolStripButtonWaveformPlay.Visible = false;
                    }
                }
            }

            var currentChanged = _changeSubtitleHash != GetFastSubtitleHash();
            var originalActive = Configuration.Settings.General.AllowEditOfOriginalSubtitle &&
                                 _subtitleOriginal != null &&
                                 _subtitleOriginal.Paragraphs.Count > 0;
            var originalChanged = originalActive && _changeOriginalSubtitleHash != GetFastSubtitleOriginalHash();
            if (currentChanged || originalChanged)
            {
                AddTitleBarChangeAsterisk(currentChanged, originalChanged, originalActive);
                AutoSave();
            }
            else if (Text.IndexOf('*') >= 0)
            {
                Text = Text.RemoveChar('*').TrimEnd();
            }

            if (InSourceView && _sourceTextTicks != -1 && (DateTime.UtcNow.Ticks - _sourceTextTicks) > 10000 * 700) // only if last typed char was entered > 700 milliseconds
            {
                ReloadFromSourceInSourceView();
                _sourceTextTicks = -1;
                audioVisualizer.Invalidate();
            }

            if (_dictateForm != null && VoskDictate.RecordingOn)
            {
                pictureBoxRecord.Invalidate();
            }

            ShowSubtitleTimer.Start();
        }

        private void AddTitleBarChangeAsterisk(bool currentChanged, bool originalChanged, bool originalActive)
        {
            if (Configuration.Settings.General.TitleBarAsterisk.Equals("before", StringComparison.Ordinal))
            {
                if (Text.IndexOf('*') < 0)
                {
                    Text = "*" + Text;
                }
            }
            else if (Configuration.Settings.General.TitleBarAsterisk.Equals("after", StringComparison.Ordinal))
            {
                var s = Text.RemoveChar('*').TrimEnd();
                if (currentChanged && !originalActive || originalChanged)
                {
                    var length = Title.Length;
                    if (s.Length > length)
                    {
                        s = s.Substring(0, s.Length - length).TrimEnd(' ', '*', '-') + "* - " + Title;
                    }
                }

                if (currentChanged)
                {
                    s = s.Replace(" + ", "* + ");
                }

                Text = s;
            }
        }

        private void HideVideoPlayer()
        {
            mediaPlayer.Pause();

            int textHeight = splitContainerListViewAndText.Height - splitContainerListViewAndText.SplitterDistance;

            splitContainer1.Panel2Collapsed = true;
            splitContainerMain.Panel2Collapsed = true;
            Main_Resize(null, null);

            try
            {
                splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - textHeight;
            }
            catch
            {
                // ignore
            }
        }

        private void ShowVideoPlayer()
        {
            int textHeight = splitContainerListViewAndText.Height - splitContainerListViewAndText.SplitterDistance;
            if (_isVideoControlsUndocked)
            {
                ShowHideUndockedVideoControls();
            }
            else
            {
                tabControlModes.Visible = Configuration.Settings.General.ShowVideoControls;
                var left = 5;
                if (Configuration.Settings.General.ShowVideoControls)
                {
                    left = tabControlModes.Left + tabControlModes.Width + 5;
                }
                splitContainerMain.Panel2Collapsed = false;
                if (IsVideoVisible)
                {
                    if (audioVisualizer.Visible)
                    {
                        audioVisualizer.Left = left;
                    }
                    else
                    {
                        panelVideoPlayer.Left = left;
                    }
                }
                else if (audioVisualizer.Visible)
                {
                    audioVisualizer.Left = left;
                }

                checkBoxSyncListViewWithVideoWhilePlaying.Left = left;
                audioVisualizer.Width = groupBoxVideo.Width - (audioVisualizer.Left + 10);
                panelWaveformControls.Left = audioVisualizer.Left;
                trackBarWaveformPosition.Left = panelWaveformControls.Left + panelWaveformControls.Width + 5;
                trackBarWaveformPosition.Width = audioVisualizer.Left + audioVisualizer.Width - trackBarWaveformPosition.Left + 5;
            }

            if (mediaPlayer.VideoPlayer == null && !string.IsNullOrEmpty(_fileName) && string.IsNullOrEmpty(_videoFileName) && !Configuration.Settings.General.DisableVideoAutoLoading)
            {
                TryToFindAndOpenVideoFile(Utilities.GetPathAndFileNameWithoutExtension(_fileName));
            }

            Main_Resize(null, null);

            if (!_isVideoControlsUndocked)
            {
                try
                {
                    splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - textHeight;
                }
                catch
                {
                    // ignore
                }
            }
        }

        private void ShowHideUndockedVideoControls()
        {
            if (_videoPlayerUndocked == null || _videoPlayerUndocked.IsDisposed)
            {
                UnDockVideoPlayer();
            }

            _videoPlayerUndocked.Visible = false;
            if (IsVideoVisible)
            {
                _videoPlayerUndocked.Show(this);
                if (_videoPlayerUndocked.WindowState == FormWindowState.Minimized)
                {
                    _videoPlayerUndocked.WindowState = FormWindowState.Normal;
                }
            }

            if (_waveformUndocked == null || _waveformUndocked.IsDisposed)
            {
                UnDockWaveform();
            }

            _waveformUndocked.Visible = false;
            if (IsVideoVisible)
            {
                _waveformUndocked.Show(this);
                if (_waveformUndocked.WindowState == FormWindowState.Minimized)
                {
                    _waveformUndocked.WindowState = FormWindowState.Normal;
                }
            }

            if (IsVideoVisible)
            {
                if (_videoControlsUndocked == null || _videoControlsUndocked.IsDisposed)
                {
                    UnDockVideoButtons();
                }

                _videoControlsUndocked.Visible = false;
                _videoControlsUndocked.Show(this);
            }
            else
            {
                if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
                {
                    _videoControlsUndocked.Visible = false;
                }
            }
        }

        private void MoveVideoUp()
        {
            if (splitContainer1.Panel2.Controls.Count == 0)
            {
                var control = panelVideoPlayer;
                groupBoxVideo.Controls.Remove(control);
                splitContainer1.Panel2.Controls.Add(control);
            }

            panelVideoPlayer.Top = 0;
            panelVideoPlayer.Left = 0;
            panelVideoPlayer.Height = splitContainer1.Panel2.Height - 2;
            panelVideoPlayer.Width = splitContainer1.Panel2.Width - 2;
        }

        private void MoveVideoDown()
        {
            if (splitContainer1.Panel2.Controls.Count > 0)
            {
                var control = panelVideoPlayer;
                splitContainer1.Panel2.Controls.Clear();
                groupBoxVideo.Controls.Add(control);
            }

            panelVideoPlayer.Top = 32;
            panelVideoPlayer.Left = tabControlModes.Left + tabControlModes.Width + 5;
            panelVideoPlayer.Height = groupBoxVideo.Height - (panelVideoPlayer.Top + 5);
            panelVideoPlayer.Width = groupBoxVideo.Width - (panelVideoPlayer.Left + 5);
        }

        private void FixLargeFonts()
        {
            using (var graphics = CreateGraphics())
            {
                var textSize = graphics.MeasureString(buttonPlayPrevious.Text, Font);
                if (textSize.Height > buttonPlayPrevious.Height - 4)
                {
                    int newButtonHeight = 23;
                    UiUtil.SetButtonHeight(this, newButtonHeight, -4);

                    // List view
                    SubtitleListview1.InitializeTimestampColumnWidths(this);
                    const int adjustUp = 8;
                    SubtitleListview1.Height -= adjustUp;
                    groupBoxEdit.Top -= adjustUp;
                    groupBoxEdit.Height += adjustUp;
                    numericUpDownDuration.Left = timeUpDownStartTime.Left + timeUpDownStartTime.Width;
                    numericUpDownDuration.Width += 5;
                    labelDuration.Left = numericUpDownDuration.Left;

                    // Video controls - Create
                    timeUpDownVideoPosition.Left = labelVideoPosition.Left + labelVideoPosition.Width;
                    int buttonWidth = labelVideoPosition.Width + timeUpDownVideoPosition.Width;
                    buttonInsertNewText.Width = buttonWidth;
                    buttonBeforeText.Width = buttonWidth;
                    buttonGotoSub.Width = buttonWidth;
                    buttonSetStartTime.Width = buttonWidth;
                    buttonSetEnd.Width = buttonWidth;
                    int FKeyLeft = buttonInsertNewText.Left + buttonInsertNewText.Width;
                    labelCreateF9.Left = FKeyLeft;
                    labelCreateF10.Left = FKeyLeft;
                    labelCreateF11.Left = FKeyLeft;
                    labelCreateF12.Left = FKeyLeft;
                    buttonForward1.Left = buttonInsertNewText.Left + buttonInsertNewText.Width - buttonForward1.Width;
                    numericUpDownSec1.Width = buttonInsertNewText.Width - (numericUpDownSec1.Left + buttonForward1.Width);
                    buttonForward2.Left = buttonInsertNewText.Left + buttonInsertNewText.Width - buttonForward2.Width;
                    numericUpDownSec2.Width = buttonInsertNewText.Width - (numericUpDownSec2.Left + buttonForward2.Width);

                    // Video controls - Adjust
                    timeUpDownVideoPositionAdjust.Left = labelVideoPosition2.Left + labelVideoPosition2.Width;
                    buttonSetStartAndOffsetRest.Width = buttonWidth;
                    buttonSetEndAndGoToNext.Width = buttonWidth;
                    buttonAdjustSetStartTime.Width = buttonWidth;
                    buttonAdjustSetEndTime.Width = buttonWidth;
                    buttonAdjustPlayBefore.Width = buttonWidth;
                    buttonAdjustGoToPosAndPause.Width = buttonWidth;
                    labelAdjustF9.Left = FKeyLeft;
                    labelAdjustF10.Left = FKeyLeft;
                    labelAdjustF11.Left = FKeyLeft;
                    labelAdjustF12.Left = FKeyLeft;
                    buttonAdjustSecForward1.Left = buttonInsertNewText.Left + buttonInsertNewText.Width - buttonAdjustSecForward1.Width;
                    numericUpDownSecAdjust1.Width = buttonInsertNewText.Width - (numericUpDownSecAdjust2.Left + buttonAdjustSecForward1.Width);
                    buttonAdjustSecForward2.Left = buttonInsertNewText.Left + buttonInsertNewText.Width - buttonAdjustSecForward2.Width;
                    numericUpDownSecAdjust2.Width = buttonInsertNewText.Width - (numericUpDownSecAdjust2.Left + buttonAdjustSecForward2.Width);

                    TabControlModes_SelectedIndexChanged(null, null);
                }
            }
        }

        private void Main_Resize(object sender, EventArgs e)
        {
            if (_loading)
            {
                return;
            }

            if (_textHeightResize >= 1)
            {
                try
                {
                    splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - _textHeightResize;
                }
                catch
                {
                    // ignore
                }
            }

            _textHeightResizeIgnoreUpdate = DateTime.UtcNow.Ticks;
            SubtitleListview1.AutoSizeAllColumns(this);

            if (WindowState == FormWindowState.Maximized ||
                WindowState == FormWindowState.Normal && _lastFormWindowState == FormWindowState.Maximized)
            {
                TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(25), () =>
                {
                    MainResize();
                    if (_textHeightResize >= 1)
                    {
                        try
                        {
                            splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - _textHeightResize;
                        }
                        catch
                        {
                            // ignore
                        }
                    }

                    _lastFormWindowState = WindowState;
                });
            }

            panelVideoPlayer.Invalidate();
        }

        private int _textHeightResize = -1;
        private long _textHeightResizeIgnoreUpdate = 0;

        private void Main_ResizeBegin(object sender, EventArgs e)
        {
            _textHeightResizeIgnoreUpdate = DateTime.UtcNow.Ticks;
            if (_loading)
            {
                return;
            }

            _textHeightResize = splitContainerListViewAndText.Height - splitContainerListViewAndText.SplitterDistance;
        }

        private void Main_ResizeEnd(object sender, EventArgs e)
        {
            _textHeightResizeIgnoreUpdate = 0;
            if (_loading)
            {
                return;
            }

            SuspendLayout();
            MainResize();

            if (_textHeightResize >= 1)
            {
                try
                {
                    splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - _textHeightResize;
                }
                catch
                {
                    // ignore
                }
            }

            // Due to strange bug in listview when maximizing
            SaveSubtitleListviewIndices();
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            RestoreSubtitleListviewIndices();
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);

            ResumeLayout();
        }

        private void MainResize()
        {
            if (_loading)
            {
                return;
            }

            var tbText = textBoxListViewText;
            var tbOriginal = textBoxListViewTextOriginal;
            int firstLeft = numericUpDownDuration.Right + 9;

            var lbText = labelText;
            var lbTextOriginal = labelOriginalText;

            var lbSingleLine = labelTextLineLengths;
            var lbSingleLineOriginal = labelTextOriginalLineLengths;

            var lbTotal = labelTextLineTotal;
            var lbTotalOriginal = labelTextOriginalLineTotal;

            var lbCps = labelCharactersPerSecond;
            var lbCpsOriginal = labelOriginalCharactersPerSecond;

            tbText.Left = firstLeft;
            tbOriginal.Left = firstLeft;
            lbText.Left = firstLeft;
            lbTextOriginal.Left = firstLeft;
            tbText.Width = groupBoxEdit.Width - (tbText.Left + 10 + (groupBoxEdit.Width - buttonUnBreak.Left));

            bool switchTextBoxes = Configuration.Settings.General.RightToLeftMode && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0;
            if (Configuration.Settings.General.TextAndOrigianlTextBoxesSwitched)
            {
                if (SubtitleListview1.ColumnIndexText < SubtitleListview1.ColumnIndexTextOriginal)
                {
                    SubtitleListview1.SwapTextAndOriginalText(_subtitle, _subtitleOriginal);
                }

                switchTextBoxes = !switchTextBoxes;
            }
            else
            {
                if (SubtitleListview1.ColumnIndexText > SubtitleListview1.ColumnIndexTextOriginal)
                {
                    SubtitleListview1.SwapTextAndOriginalText(_subtitle, _subtitleOriginal);
                }
            }

            if (switchTextBoxes)
            {
                tbText = textBoxListViewTextOriginal;
                tbOriginal = textBoxListViewText;

                lbText = labelOriginalText;
                lbTextOriginal = labelText;

                lbSingleLine = labelTextOriginalLineLengths;
                lbSingleLineOriginal = labelTextLineLengths;

                lbTotal = labelTextOriginalLineTotal;
                lbTotalOriginal = labelTextLineTotal;

                lbCps = labelOriginalCharactersPerSecond;
                lbCpsOriginal = labelCharactersPerSecond;
            }
            else
            {
                labelTextLineLengths.Left = firstLeft;
            }

            tbText.Left = firstLeft;
            lbText.Left = firstLeft;
            lbSingleLine.Left = firstLeft;

            if (_isOriginalActive)
            {
                tbText.Width = (groupBoxEdit.Width - (tbText.Left + 10)) / 2;
                tbOriginal.Left = tbText.Left + tbText.Width + 3;
                lbTextOriginal.Left = tbOriginal.Left;

                tbOriginal.Width = tbText.Width;

                labelOriginalCharactersPerSecond.Left = tbOriginal.Left + (tbOriginal.Width - labelOriginalCharactersPerSecond.Width);
                lbSingleLineOriginal.Left = tbOriginal.Left;
                labelOriginalSingleLine.Left = labelTextOriginalLineLengths.Left + labelTextOriginalLineLengths.Width;
                labelOriginalSingleLinePixels.Left = labelOriginalSingleLine.Left + labelOriginalSingleLine.Width + 10;
                lbTotalOriginal.Left = tbOriginal.Left + (tbOriginal.Width - lbTotalOriginal.Width);
                if (textBoxListViewText.Width / 2.1 < labelTextLineLengths.Width)
                {
                    lbTotalOriginal.Visible = false;
                }
                else
                {
                    lbTotalOriginal.Visible = true;
                }

                if (textBoxListViewText.Width / 3 < labelTextLineLengths.Width)
                {
                    labelOriginalSingleLinePixels.Visible = false;
                }
                else
                {
                    labelOriginalSingleLinePixels.Visible = Configuration.Settings.Tools.ListViewSyntaxColorWideLines;
                }
            }

            lbCpsOriginal.Top = lbCps.Top;
            lbCps.Left = tbText.Left + (tbText.Width - lbCps.Width);
            lbTotal.Left = tbText.Left + (tbText.Width - lbTotal.Width);
            SubtitleListview1.AutoSizeAllColumns(this);

            if (textBoxListViewText.Width / 2.1 < labelTextLineLengths.Width)
            {
                lbTotal.Visible = false;
            }
            else
            {
                lbTotal.Visible = true;
            }

            if (textBoxListViewText.Width / 3 < labelTextLineLengths.Width)
            {
                labelSingleLinePixels.Visible = false;
            }
            else
            {
                labelSingleLinePixels.Visible = Configuration.Settings.Tools.ListViewSyntaxColorWideLines;
            }

            FixRightToLeftDependingOnLanguage();

            if (tabControlModes.Visible)
            {
                tabControlModes.Height = tabControlModes.Parent.Height - 2 - tabControlModes.Top;
            }

            tbText.Height = groupBoxEdit.Height - tbText.Top - 32;
            tbOriginal.Height = tbText.Height;

            labelVideoInfo.Left = checkBoxSyncListViewWithVideoWhilePlaying.Right;
            labelVideoInfo.Width = labelVideoInfo.Parent.Width - labelVideoInfo.Left - 10;

            pictureBoxBookmark.Left = numericUpDownDuration.Right - pictureBoxBookmark.Width + 4;
        }

        private void FixRightToLeftDependingOnLanguage()
        {
            if (Configuration.Settings.General.RightToLeftMode)
            {
                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    if (LanguageAutoDetect.CouldBeRightToLeftLanguage(_subtitleOriginal))
                    {
                        textBoxListViewTextOriginal.RightToLeft = RightToLeft.Yes;
                    }
                    else
                    {
                        textBoxListViewTextOriginal.RightToLeft = RightToLeft.No;
                    }
                }

                if (LanguageAutoDetect.CouldBeRightToLeftLanguage(_subtitle))
                {
                    textBoxListViewText.RightToLeft = RightToLeft.Yes;
                    textBoxSource.RightToLeft = RightToLeft.Yes;
                }
                else
                {

                    textBoxListViewText.RightToLeft = RightToLeft.No;
                    textBoxSource.RightToLeft = RightToLeft.No;
                }
            }
            else
            {
                textBoxListViewText.RightToLeft = RightToLeft.No;
                textBoxSource.RightToLeft = RightToLeft.No;

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    textBoxListViewTextOriginal.RightToLeft = RightToLeft.No;
                }
            }
        }

        private void PlayCurrent()
        {
            if (_subtitleListViewIndex >= 0)
            {
                GotoSubtitleIndex(_subtitleListViewIndex);
                textBoxListViewText.Focus();
                ReadyAutoRepeat();
                PlayPart(_subtitle.Paragraphs[_subtitleListViewIndex]);
            }
        }

        private void ReadyAutoRepeat()
        {
            if (checkBoxAutoRepeatOn.Checked)
            {
                _repeatCount = int.Parse(comboBoxAutoRepeat.Text);
            }
            else
            {
                _repeatCount = -1;
            }

            if (mediaPlayer.VideoPlayer != null)
            {
                labelStatus.Text = _language.VideoControls.Playing;
            }
        }

        private void PlayNext()
        {
            int newIndex = _subtitleListViewIndex + 1;
            if (newIndex < _subtitle.Paragraphs.Count)
            {
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    item.Selected = false;
                }

                SubtitleListview1.Items[newIndex].Selected = true;
                SubtitleListview1.Items[newIndex].EnsureVisible();
                SubtitleListview1.Items[newIndex].Focused = true;
                textBoxListViewText.Focus();
                textBoxListViewText.SelectAll();
                _subtitleListViewIndex = newIndex;
                GotoSubtitleIndex(newIndex);
                ShowSubtitle();
                PlayCurrent();
            }
        }

        private void PlayPrevious()
        {
            if (_subtitleListViewIndex > 0)
            {
                int newIndex = _subtitleListViewIndex - 1;
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    item.Selected = false;
                }

                SubtitleListview1.Items[newIndex].Selected = true;
                SubtitleListview1.Items[newIndex].EnsureVisible();
                SubtitleListview1.Items[newIndex].Focused = true;
                textBoxListViewText.Focus();
                textBoxListViewText.SelectAll();
                GotoSubtitleIndex(newIndex);
                ShowSubtitle();
                _subtitleListViewIndex = newIndex;
                PlayCurrent();
            }
        }

        private void GotoSubtitleIndex(int index)
        {
            if (mediaPlayer.VideoPlayer != null && mediaPlayer.Duration > 0)
            {
                mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
            }
        }

        private void PlayPart(Paragraph paragraph)
        {
            if (mediaPlayer.VideoPlayer != null)
            {
                double startSeconds = paragraph.StartTime.TotalSeconds;
                if (startSeconds > 0.05)
                {
                    startSeconds -= 0.05; // go a little back
                }

                ResetPlaySelection();
                _endSeconds = paragraph.EndTime.TotalSeconds;
                if (mediaPlayer.Duration > _endSeconds + 0.05)
                {
                    _endSeconds += 0.05; // go a little forward
                }

                mediaPlayer.CurrentPosition = startSeconds;
                ShowSubtitle();
                mediaPlayer.Play();
            }
        }

        private void PlaySelectedLines(bool loop)
        {
            var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
            if (p != null)
            {
                mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                ShowSubtitle();
                mediaPlayer.Play();
                _endSeconds = p.EndTime.TotalSeconds;
                _playSelectionIndex = _subtitle.GetIndex(p);

                if (loop)
                {
                    _playSelectionIndexLoopStart = SubtitleListview1.SelectedItems[0].Index;
                }
                else
                {
                    _playSelectionIndexLoopStart = -1;
                }
            }
        }

        private void ButtonSetStartTimeClick(object sender, EventArgs e)
        {
            SetStartTime(false, mediaPlayer.CurrentPosition);
        }

        private void SetStartTime(bool adjustEndTime, double videoPosition)
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                int index = SubtitleListview1.SelectedItems[0].Index;
                var p = _subtitle.Paragraphs[index];
                var oldParagraph = new Paragraph(p, false);
                if (oldParagraph.StartTime.IsMaxTime || oldParagraph.EndTime.IsMaxTime)
                {
                    adjustEndTime = true;
                }

                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));

                timeUpDownStartTime.TimeCode = TimeCode.FromSeconds(videoPosition);

                var duration = p.DurationTotalMilliseconds;

                p.StartTime.TotalMilliseconds = videoPosition * TimeCode.BaseUnit;
                if (adjustEndTime)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
                }

                if (oldParagraph.StartTime.IsMaxTime)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(p.Text);
                }

                SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                timeUpDownStartTime.TimeCode = p.StartTime;
                timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;

                if (!adjustEndTime)
                {
                    SetDurationInSeconds(p.DurationTotalSeconds);
                }

                UpdateOriginalTimeCodes(oldParagraph);
                UpdateSourceView();
                RefreshSelectedParagraph();
            }
        }

        private void VideoSetStartForAppropriateLine(double videoPosition)
        {
            var p = _subtitle.Paragraphs.LastOrDefault(paragraph => videoPosition > paragraph.StartTime.TotalSeconds);
            if (p != null)
            {
                var index = _subtitle.Paragraphs.IndexOf(p);
                if (videoPosition < p.EndTime.TotalSeconds)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    SetStartTime(false, videoPosition);
                }
                else
                {
                    var next = _subtitle.GetParagraphOrDefault(index + 1);
                    if (next != null)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.IndexOf(next), true);
                        SetStartTime(false, videoPosition);
                    }
                }
            }
            else if (_subtitle.Paragraphs.Count > 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                SetStartTime(false, videoPosition);
            }
        }

        private void ButtonSetEndClick(object sender, EventArgs e)
        {
            SetEndTime();
        }

        private void SetEndTime()
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                double videoPosition = mediaPlayer.CurrentPosition;
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                int index = SubtitleListview1.SelectedItems[0].Index;
                MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + _subtitle.Paragraphs[index].Number + " " + _subtitle.Paragraphs[index].Text));

                if (_subtitle.Paragraphs[index].StartTime.IsMaxTime)
                {
                    timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                    _subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                    _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(_subtitle.Paragraphs[index].Text);
                    if (_subtitle.Paragraphs[index].StartTime.TotalMilliseconds < 0)
                    {
                        _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = 0;
                    }

                    timeUpDownStartTime.TimeCode = _subtitle.Paragraphs[index].StartTime;
                    SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                }
                else
                {
                    _subtitle.Paragraphs[index].EndTime = TimeCode.FromSeconds(videoPosition);
                }

                SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                SetDurationInSeconds(_subtitle.Paragraphs[index].DurationTotalSeconds);
                UpdateSourceView();
            }
        }

        private void VideoSetEndForAppropriateLine(double videoPosition)
        {
            var p = _subtitle.Paragraphs.LastOrDefault(paragraph => videoPosition > paragraph.StartTime.TotalSeconds);
            if (p != null)
            {
                var index = _subtitle.Paragraphs.IndexOf(p);
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                SetEndTime();
            }
        }

        private void ButtonInsertNewTextClick(object sender, EventArgs e)
        {
            mediaPlayer.Pause();

            var newParagraph = InsertNewTextAtVideoPosition(false, mediaPlayer.CurrentPosition * TimeCode.BaseUnit);

            if (!InSourceView)
            {
                textBoxListViewText.Focus();
                if (Configuration.Settings.General.NewEmptyUseAutoDuration)
                {
                    timerAutoDuration.Start();
                }
            }

            ShowStatus(string.Format(_language.VideoControls.NewTextInsertAtX, newParagraph.StartTime.ToShortString()));
        }

        private Paragraph InsertNewTextAtVideoPosition(bool maxDuration, double videoPositionInMilliseconds)
        {
            if (!mediaPlayer.IsPaused && videoPositionInMilliseconds > Configuration.Settings.General.SetStartEndHumanDelay)
            {
                videoPositionInMilliseconds -= Configuration.Settings.General.SetStartEndHumanDelay;
            }

            var tc = new TimeCode(videoPositionInMilliseconds);

            MakeHistoryForUndo(_language.BeforeInsertSubtitleAtVideoPosition + "  " + tc);
            return InsertNewParagraphAtPosition(videoPositionInMilliseconds, maxDuration);
        }

        private Paragraph InsertNewParagraphAtPosition(double positionInMilliseconds, bool maxDuration)
        {
            // find index where to insert
            int index = 0;
            foreach (var p in _subtitle.Paragraphs)
            {
                if (p.StartTime.TotalMilliseconds > positionInMilliseconds)
                {
                    break;
                }

                index++;
            }

            // prevent overlap
            var endTotalMilliseconds = positionInMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs;
            if (maxDuration && mediaPlayer.VideoPlayer != null)
            {
                endTotalMilliseconds = mediaPlayer.Duration * 1000.0;
            }

            var next = _subtitle.GetParagraphOrDefault(index);
            if (next != null)
            {
                if (endTotalMilliseconds > next.StartTime.TotalMilliseconds - MinGapBetweenLines)
                {
                    endTotalMilliseconds = next.StartTime.TotalMilliseconds - MinGapBetweenLines;
                }
            }

            // create and insert
            var newParagraph = new Paragraph(string.Empty, positionInMilliseconds, endTotalMilliseconds);
            SetStyleForNewParagraph(newParagraph, index);
            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), index, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(index, newParagraph);

                // check if original is available - and insert new paragraph in the original too
                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                    _subtitleOriginal.Renumber();
                }

                _subtitleListViewIndex = -1;
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            UpdateSourceView();
            return newParagraph;
        }

        private void TimerAutoDurationTick(object sender, EventArgs e)
        {
            labelAutoDuration.Visible = !labelAutoDuration.Visible;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                try
                {
                    int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                    var currentParagraph = _subtitle.Paragraphs[firstSelectedIndex];
                    var nextParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1);
                    double duration = Utilities.GetOptimalDisplayMilliseconds(textBoxListViewText.Text);
                    if (currentParagraph.StartTime.TotalMilliseconds + duration + MinGapBetweenLines > nextParagraph?.StartTime.TotalMilliseconds)
                    {
                        var newEndTime = nextParagraph.StartTime.TotalMilliseconds - MinGapBetweenLines;
                        if (newEndTime - currentParagraph.StartTime.TotalMilliseconds > 100)
                        {
                            duration = newEndTime - currentParagraph.StartTime.TotalMilliseconds;
                        }
                        else
                        {
                            return; // too close to next subtitle
                        }
                    }

                    if (duration == currentParagraph.Duration.TotalMilliseconds)
                    {
                        return;
                    }

                    SetDurationInSeconds(duration / TimeCode.BaseUnit);
                    currentParagraph.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + duration;
                    SubtitleListview1.SetDuration(firstSelectedIndex, currentParagraph, _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1));
                }
                catch
                {
                    // ignore
                }
            }
        }

        private void ButtonBeforeTextClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                int index = SubtitleListview1.SelectedItems[0].Index;

                mediaPlayer.Pause();
                double pos = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                if (pos > 1)
                {
                    mediaPlayer.CurrentPosition = (_subtitle.Paragraphs[index].StartTime.TotalSeconds) - 0.5;
                }
                else
                {
                    mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                }

                mediaPlayer.Play();
            }
        }

        private void GotoSubPositionAndPause()
        {
            GotoSubPositionAndPause(0);
        }

        private void GotoSubPositionAndPause(double adjustSeconds)
        {
            if (mediaPlayer.VideoPlayer is null)
            {
                return;
            }

            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                int index = SubtitleListview1.SelectedItems[0].Index;
                if (index == -1 || index >= _subtitle.Paragraphs.Count)
                {
                    return;
                }

                var p = _subtitle.Paragraphs[index];
                mediaPlayer.Pause();
                if (p.StartTime.IsMaxTime)
                {
                    return;
                }

                double newPos = p.StartTime.TotalSeconds + adjustSeconds;
                if (newPos < 0)
                {
                    newPos = 0;
                }

                mediaPlayer.CurrentPosition = newPos;
                ShowSubtitle();

                double startPos = mediaPlayer.CurrentPosition - 1;
                if (startPos < 0)
                {
                    startPos = 0;
                }

                SetWaveformPosition(startPos, mediaPlayer.CurrentPosition, index);
            }
        }

        private void ButtonGotoSubClick(object sender, EventArgs e)
        {
            GotoSubPositionAndPause();
        }

        private void ButtonOpenVideoClick(object sender, EventArgs e)
        {
            OpenVideoDialog();
        }

        private bool OpenVideoDialog()
        {
            if (string.IsNullOrEmpty(openFileDialog1.InitialDirectory) && !string.IsNullOrEmpty(_fileName))
            {
                openFileDialog1.InitialDirectory = Path.GetDirectoryName(_fileName);
            }

            openFileDialog1.Title = _languageGeneral.OpenVideoFileTitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.GetVideoFileFilter(true);

            openFileDialog1.FileName = string.Empty;
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                if (openFileDialog1.FileName == _videoFileName)
                {
                    return false;
                }

                openFileDialog1.InitialDirectory = Path.GetDirectoryName(openFileDialog1.FileName);
                if (!IsVideoVisible)
                {
                    _layout = 0;
                    SetLayout(_layout, false);
                }

                OpenVideo(openFileDialog1.FileName);
                return true;
            }

            return false;
        }

        private void ToolStripButtonLayoutChooseClick(object sender, EventArgs e)
        {
            using (var form = new LayoutPicker(_layout, Configuration.Settings.General.ShowVideoControls))
            {
                if (form.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                _layout = form.GetLayout();
                SetLayout(_layout, false);

                RefreshSelectedParagraph();
                if (Configuration.Settings.General.ShowVideoControls != form.ShowVideoControls)
                {
                    Configuration.Settings.General.ShowVideoControls = form.ShowVideoControls;
                    ToggleVideoControlsOnOff(form.ShowVideoControls);
                }
            }
        }

        private void SetLayout(int layout, bool undock)
        {
            if (!undock && _isVideoControlsUndocked)
            {
                RedockVideoControlsToolStripMenuItemClick(null, null);
            }

            var isLarge = _subtitle.Paragraphs.Count > 1000;
            if (isLarge)
            {
                SubtitleListview1.Items.Clear(); // for performance
            }

            var oldLayout = LayoutManager.LastLayout;
            LayoutManager.SetLayout(layout, this, panelVideoPlayer, SubtitleListview1, groupBoxVideo, groupBoxEdit, SplitContainerListViewAndTextSplitterMoved);

            if (isLarge)
            {
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal); // for performance
            }

            MainResize();

            if (!string.IsNullOrEmpty(_fileName) &&
                string.IsNullOrEmpty(_videoFileName) &&
                !Configuration.Settings.General.DisableVideoAutoLoading &&
                mediaPlayer.Visible)
            {
                TryToFindAndOpenVideoFile(Utilities.GetPathAndFileNameWithoutExtension(_fileName));
            }

            if (_subtitleListViewIndex >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);
                if (layout != LayoutManager.LayoutNoVideo && oldLayout == LayoutManager.LayoutNoVideo)
                {
                    GotoSubPosAndPause();
                }
            }
        }

        public void ShowEarlierOrLater(double adjustMilliseconds, SelectionChoice selection)
        {
            var tc = new TimeCode(adjustMilliseconds);
            MakeHistoryForUndo(_language.BeforeShowSelectedLinesEarlierLater + ": " + tc);
            if (adjustMilliseconds < 0)
            {
                if (selection == SelectionChoice.AllLines)
                {
                    ShowStatus(string.Format(_language.ShowAllLinesXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionOnly)
                {
                    ShowStatus(string.Format(_language.ShowSelectedLinesXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionAndForward)
                {
                    ShowStatus(string.Format(_language.ShowSelectionAndForwardXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
            }
            else
            {
                if (selection == SelectionChoice.AllLines)
                {
                    ShowStatus(string.Format(_language.ShowAllLinesXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionOnly)
                {
                    ShowStatus(string.Format(_language.ShowSelectedLinesXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionAndForward)
                {
                    ShowStatus(string.Format(_language.ShowSelectionAndForwardXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
            }

            int startFrom = 0;
            if (selection == SelectionChoice.SelectionAndForward)
            {
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    startFrom = SubtitleListview1.SelectedItems[0].Index;
                }
                else
                {
                    startFrom = _subtitle.Paragraphs.Count;
                }
            }

            // don't overlap previous/next
            if (selection == SelectionChoice.SelectionOnly && SubtitleListview1.SelectedItems.Count == 1 &&
                !Configuration.Settings.VideoControls.WaveformAllowOverlap &&
                GetCurrentSubtitleFormat().GetType() != typeof(AdvancedSubStationAlpha))
            {
                var current = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                if (current != null)
                {
                    if (adjustMilliseconds >= 0)
                    {
                        var next = _subtitle.GetParagraphOrDefault(FirstSelectedIndex + 1);
                        if (next != null && current.EndTime.TotalMilliseconds + MinGapBetweenLines > next.StartTime.TotalMilliseconds - adjustMilliseconds)
                        {
                            var newAdjustMs = next.StartTime.TotalMilliseconds - MinGapBetweenLines - current.EndTime.TotalMilliseconds;
                            if (newAdjustMs > 0)
                            {
                                adjustMilliseconds = newAdjustMs;
                            }
                            else
                            {
                                return;
                            }
                        }
                    }
                    else
                    {
                        var prev = _subtitle.GetParagraphOrDefault(FirstSelectedIndex - 1);
                        if (prev != null && current.StartTime.TotalMilliseconds - MinGapBetweenLines + adjustMilliseconds < prev.EndTime.TotalMilliseconds)
                        {
                            var newAdjustMs = prev.EndTime.TotalMilliseconds + MinGapBetweenLines - current.StartTime.TotalMilliseconds;
                            if (newAdjustMs < 0)
                            {
                                adjustMilliseconds = newAdjustMs;
                            }
                            else
                            {
                                return;
                            }
                        }
                    }
                }
            }

            for (int i = startFrom; i < _subtitle.Paragraphs.Count; i++)
            {
                switch (selection)
                {
                    case SelectionChoice.SelectionOnly:
                        if (SubtitleListview1.Items[i].Selected)
                        {
                            ShowEarlierOrLaterParagraph(adjustMilliseconds, i);
                        }

                        break;
                    case SelectionChoice.AllLines:
                    case SelectionChoice.SelectionAndForward:
                        ShowEarlierOrLaterParagraph(adjustMilliseconds, i);
                        break;
                }
            }

            lock (_updateShowEarlierLock)
            {
                _updateShowEarlier = true;
            }

            RefreshSelectedParagraph();
            UpdateSourceView();
            UpdateListSyntaxColoring();
        }

        private void ShowEarlierOrLaterParagraph(double adjustMilliseconds, int i)
        {
            var p = _subtitle.GetParagraphOrDefault(i);
            if (p != null && !p.StartTime.IsMaxTime)
            {
                if (_subtitleOriginal != null)
                {
                    var original = Utilities.GetOriginalParagraph(i, p, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds += adjustMilliseconds;
                        original.EndTime.TotalMilliseconds += adjustMilliseconds;
                    }
                }

                p.StartTime.TotalMilliseconds += adjustMilliseconds;
                p.EndTime.TotalMilliseconds += adjustMilliseconds;
            }
        }

        private void UpdateSourceView()
        {
            if (!InSourceView)
            {
                return;
            }

            var textBoxSourceFocused = textBoxSource.Focused;
            var caretPosition = textBoxSource.SelectionStart;
            ShowSource();
            textBoxSource.SelectionStart = caretPosition;
            textBoxSource.ScrollToCaret();
            if (textBoxSourceFocused)
            {
                textBoxSource.Focus();
            }
        }

        private void ToolStripMenuItemAdjustAllTimesClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count > 1)
            {
                ShowSelectedLinesEarlierlaterToolStripMenuItemClick(null, null);
                return;
            }

            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            mediaPlayer.Pause();

            if (_showEarlierOrLater != null && !_showEarlierOrLater.IsDisposed)
            {
                _showEarlierOrLater.WindowState = FormWindowState.Normal;
                _showEarlierOrLater.Focus();
                return;
            }

            _showEarlierOrLater = new ShowEarlierLater();
            if (!_showEarlierOrLater.IsPositionAndSizeSaved)
            {
                _showEarlierOrLater.Top = Top + 100;
                _showEarlierOrLater.Left = Left + Width / 2 - _showEarlierOrLater.Width / 3;
            }

            SaveSubtitleListviewIndices();
            _showEarlierOrLater.Initialize(ShowEarlierOrLater, false);
            _showEarlierOrLater.Show(this);
        }

        private void StopAutoDuration()
        {
            timerAutoDuration.Stop();
            labelAutoDuration.Visible = false;
        }

        private void StartAutoDuration()
        {
            timerAutoDuration.Start();
            labelAutoDuration.Visible = true;
        }

        private void TextBoxListViewTextLeave(object sender, EventArgs e)
        {
            StopAutoDuration();
        }

        private void TimerAutoContinueTick(object sender, EventArgs e)
        {
            if (_playSelectionIndex >= 0)
            {
                return;
            }

            _autoContinueDelayCount--;

            if (_autoContinueDelayCount <= 0)
            {
                timerAutoContinue.Stop();

                if ((DateTime.UtcNow.Ticks - _lastTextKeyDownTicks) > 10000 * 700) // only if last typed char was entered > 700 milliseconds
                {
                    labelStatus.Text = string.Empty;
                    PlayNext();
                }
                else
                {
                    labelStatus.Text = _language.VideoControls.StillTypingAutoContinueStopped;
                }
            }
            else
            {
                if (_repeatCount == 1)
                {
                    labelStatus.Text = _language.VideoControls.AutoContinueInOneSecond;
                }
                else
                {
                    labelStatus.Text = string.Format(_language.VideoControls.AutoContinueInXSeconds, _autoContinueDelayCount);
                }
            }
        }

        private void TextBoxListViewTextMouseMove(object sender, MouseEventArgs e)
        {
            if ((AutoRepeatContinueOn || AutoRepeatOn) && !textBoxSearchWord.Focused && textBoxListViewText.Focused)
            {
                string selectedText = textBoxListViewText.SelectedText;
                if (!string.IsNullOrEmpty(selectedText))
                {
                    selectedText = selectedText.Trim();
                    selectedText = selectedText.TrimEnd('.', ',', '!', '?');
                    selectedText = selectedText.TrimEnd();
                    if (!string.IsNullOrEmpty(selectedText) && selectedText != textBoxSearchWord.Text)
                    {
                        textBoxSearchWord.Text = HtmlUtil.RemoveHtmlTags(selectedText);
                    }
                }
            }
        }

        private void TextBoxListViewTextKeyUp(object sender, KeyEventArgs e)
        {
            TextBoxListViewTextMouseMove(sender, null);
            textBoxListViewText.ClearUndo();
            UpdatePositionAndTotalLength(labelTextLineTotal, textBoxListViewText);
        }

        public void RunTranslateSearch(Action<string> act)
        {
            string text;
            if (!string.IsNullOrWhiteSpace(textBoxSearchWord.Text) &&
                !textBoxListViewText.Focused &&
                !textBoxListViewTextOriginal.Focused)
            {
                text = textBoxSearchWord.Text;
            }
            else
            {
                var tb = GetFocusedTextBox();
                if (tb.SelectionLength == 0)
                {
                    text = tb.Text;
                }
                else
                {
                    text = tb.SelectedText;
                }
            }

            if (!string.IsNullOrWhiteSpace(text))
            {
                act(text);
            }
        }

        private void ButtonGoogleItClick(object sender, EventArgs e)
        {
            RunTranslateSearch((text) => { UiUtil.OpenUrl("https://www.google.com/search?q=" + Utilities.UrlEncode(text)); });
        }

        private void ButtonGoogleTranslateItClick(object sender, EventArgs e)
        {
            RunTranslateSearch((text) =>
            {
                string languageId = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                UiUtil.OpenUrl("https://translate.google.com/#auto|" + languageId + "|" + Utilities.UrlEncode(text));
            });
        }

        private void ButtonPlayCurrentClick(object sender, EventArgs e)
        {
            PlayCurrent();
        }

        private void ButtonPlayNextClick(object sender, EventArgs e)
        {
            PlayNext();
        }

        private void ButtonPlayPreviousClick(object sender, EventArgs e)
        {
            PlayPrevious();
        }

        private void ButtonStopClick(object sender, EventArgs e)
        {
            ResetPlaySelection();
            timerAutoContinue.Stop();
            mediaPlayer.Pause();
            labelStatus.Text = string.Empty;
        }

        private void FileToolStripMenuItemDropDownOpening(object sender, EventArgs e)
        {
            toolStripMenuItemOpenContainingFolder.Enabled = !string.IsNullOrEmpty(_fileName) && File.Exists(_fileName);
            bool subtitleLoaded = IsSubtitleLoaded;
            toolStripMenuItemVerifyCompleteness.Enabled = subtitleLoaded;
            toolStripMenuItemStatistics.Enabled = subtitleLoaded;
            toolStripMenuItemExport.Enabled = subtitleLoaded;
            toolStripMenuItemOpenKeepVideo.Enabled = _videoFileName != null;
            if (subtitleLoaded && Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                saveOriginalToolStripMenuItem.Enabled = true;
                saveOriginalAstoolStripMenuItem.Enabled = true;
                removeOriginalToolStripMenuItem.Enabled = true;
                removeTranslationToolStripMenuItem.Enabled = true;
            }
            else
            {
                saveOriginalToolStripMenuItem.Enabled = false;
                saveOriginalAstoolStripMenuItem.Enabled = false;
                if (subtitleLoaded && SubtitleListview1.IsOriginalTextColumnVisible && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    removeOriginalToolStripMenuItem.Enabled = true;
                    removeTranslationToolStripMenuItem.Enabled = true;
                }
                else
                {
                    removeOriginalToolStripMenuItem.Enabled = false;
                    removeTranslationToolStripMenuItem.Enabled = false;
                }
            }

            toolStripMenuItemFileFormatProperties.Visible = false;
            var format = GetCurrentSubtitleFormat();
            var ft = format.GetType();
            if (ft == typeof(AdvancedSubStationAlpha))
            {
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
                toolStripMenuItemFileFormatProperties.Visible = true;

                toolStripMenuItemAssStyles.Visible = true;
                toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.AdvancedSubStationAlphaStyles;

                toolStripMenuItemAssaStyles.Visible = true;
                toolStripMenuItemAssaStyles.Text = _language.Menu.ContextMenu.AdvancedSubStationAlphaStyles;
            }
            else if (ft == typeof(SubStationAlpha))
            {
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
                toolStripMenuItemFileFormatProperties.Visible = true;

                toolStripMenuItemAssStyles.Visible = true;
                toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.SubStationAlphaStyles;

                toolStripMenuItemAssaStyles.Visible = true;
                toolStripMenuItemAssaStyles.Text = _language.Menu.ContextMenu.SubStationAlphaStyles;
            }
            else
            {
                toolStripMenuItemAssStyles.Visible = false;
                toolStripMenuItemAssaStyles.Visible = false;
            }

            if (ft == typeof(Ebu))
            {
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
                toolStripMenuItemFileFormatProperties.Visible = true;
            }

            if (ft == typeof(DvdStudioPro) || ft == typeof(DvdStudioProSpace) || ft == typeof(DvdStudioProSpaceOne) || ft == typeof(DvdStudioProSpaceOneSemicolon))
            {
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
                toolStripMenuItemFileFormatProperties.Visible = true;
            }

            if (ft == typeof(DCinemaInterop) || ft == typeof(DCinemaSmpte2014) || ft == typeof(DCinemaSmpte2010) || ft == typeof(DCinemaSmpte2007))
            {
                toolStripMenuItemFileFormatProperties.Visible = true;
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
            }

            if (ft == typeof(TimedText10) || ft == typeof(ItunesTimedText) || ft == typeof(TimedTextImsc11))
            {
                toolStripMenuItemFileFormatProperties.Visible = true;
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
            }

            if (ft == typeof(WebVTT) || ft == typeof(WebVTTFileWithLineNumber))
            {
                toolStripMenuItemFileFormatProperties.Visible = true;
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
            }

            if (ft == typeof(FinalCutProXml))
            {
                toolStripMenuItemFileFormatProperties.Visible = true;
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
            }

            if (format.Name == "Nuendo")
            {
                toolStripMenuItemFileFormatProperties.Visible = true;
                toolStripMenuItemFileFormatProperties.Text = string.Format(_language.Menu.File.FormatXProperties, format.Name);
            }
        }

        private void ToolStripMenuItemOpenContainingFolderClick(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(_fileName) && File.Exists(_fileName))
            {
                UiUtil.OpenFolderFromFileName(_fileName);
            }
            else
            {
                toolStripMenuItemOpenContainingFolder.Enabled = false;
            }
        }

        private void TabControlModes_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (tabControlModes.SelectedIndex == 0)
            {
                tabControlModes.Width = groupBoxTranslateSearch.Left + groupBoxTranslateSearch.Width + 12;
                Configuration.Settings.VideoControls.LastActiveTab = "Translate";
                if (!comboBoxAutoRepeat.Visible)
                {
                    TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(250), () =>
                    {
                        try
                        {
                            comboBoxAutoRepeat.Visible = true;
                        }
                        catch
                        {
                            // Ignore
                        }
                    });
                }
            }
            else if (tabControlModes.SelectedIndex == 1)
            {
                tabControlModes.Width = buttonInsertNewText.Left + buttonInsertNewText.Width + 33;
                Configuration.Settings.VideoControls.LastActiveTab = "Create";
            }
            else if (tabControlModes.SelectedIndex == 2)
            {
                tabControlModes.Width = buttonInsertNewText.Left + buttonInsertNewText.Width + 33;
                Configuration.Settings.VideoControls.LastActiveTab = "Adjust";
            }

            if (!_isVideoControlsUndocked)
            {
                if (IsVideoVisible)
                {
                    audioVisualizer.Left = tabControlModes.Left + tabControlModes.Width + 5;
                }

                if (panelVideoPlayer.Parent == groupBoxVideo)
                {
                    panelVideoPlayer.Left = tabControlModes.Left + tabControlModes.Width + 5;
                    panelVideoPlayer.Width = groupBoxVideo.Width - (panelVideoPlayer.Left + 10);
                }

                audioVisualizer.Width = groupBoxVideo.Width - (audioVisualizer.Left + 10);
                panelWaveformControls.Left = audioVisualizer.Left;
                trackBarWaveformPosition.Left = panelWaveformControls.Left + panelWaveformControls.Width + 5;
                trackBarWaveformPosition.Width = groupBoxVideo.Width - (trackBarWaveformPosition.Left + 10);
                checkBoxSyncListViewWithVideoWhilePlaying.Left = tabControlModes.Left + tabControlModes.Width + 5;

                if (!_loading)
                {
                    Refresh();
                }
            }
            else if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
            {
                _videoControlsUndocked.Width = tabControlModes.Width + 20;
                _videoControlsUndocked.Height = tabControlModes.Height + 65;
            }
        }

        private void ButtonSecBack1Click(object sender, EventArgs e)
        {
            GoBackSeconds((double)numericUpDownSec1.Value);
        }

        private void ButtonForward1Click(object sender, EventArgs e)
        {
            GoBackSeconds(-(double)numericUpDownSec1.Value);
        }

        private void ButtonSetStartAndOffsetRestClick(object sender, EventArgs e)
        {
            SetStartAndOffsetTheRest(mediaPlayer.CurrentPosition);
        }

        private void SetStartAndOffsetTheRest(double videoPosition)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                bool oldSync = checkBoxSyncListViewWithVideoWhilePlaying.Checked;
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = false;

                timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                int index = SubtitleListview1.SelectedItems[0].Index;
                int lastLineNumber = SubtitleListview1.SelectedItems.Count == 1 ? SubtitleListview1.Items.Count : index + SubtitleListview1.SelectedItems.Count;
                var oldP = new Paragraph(_subtitle.Paragraphs[index]);
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                var tc = TimeCode.FromSeconds(videoPosition);
                timeUpDownStartTime.TimeCode = tc;

                MakeHistoryForUndo(_language.BeforeSetStartTimeAndOffsetTheRest + @"  " + oldP.Number + @" - " + tc);

                double offset = oldP.StartTime.TotalMilliseconds - tc.TotalMilliseconds;

                if (oldP.StartTime.IsMaxTime)
                {
                    _subtitle.Paragraphs[index].StartTime.TotalSeconds = videoPosition;
                    _subtitle.Paragraphs[index].EndTime.TotalMilliseconds = _subtitle.Paragraphs[index].StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(_subtitle.Paragraphs[index].Text);
                    SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                    timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                    RefreshSelectedParagraph();
                    return;
                }

                _subtitle.Paragraphs[index].StartTime = new TimeCode(_subtitle.Paragraphs[index].StartTime.TotalMilliseconds - offset);
                _subtitle.Paragraphs[index].EndTime = new TimeCode(_subtitle.Paragraphs[index].EndTime.TotalMilliseconds - offset);

                SubtitleListview1.BeginUpdate();
                for (int i = index + 1; i < lastLineNumber; i++)
                {
                    if (!_subtitle.Paragraphs[i].StartTime.IsMaxTime)
                    {
                        _subtitle.Paragraphs[i].StartTime = new TimeCode(_subtitle.Paragraphs[i].StartTime.TotalMilliseconds - offset);
                        _subtitle.Paragraphs[i].EndTime = new TimeCode(_subtitle.Paragraphs[i].EndTime.TotalMilliseconds - offset);

                        SubtitleListview1.SetStartTimeAndEndTimeSameDuration(i, _subtitle.Paragraphs[i]);
                    }
                }

                SubtitleListview1.SetStartTimeAndDuration(index - 1, _subtitle.GetParagraphOrDefault(index - 1), _subtitle.GetParagraphOrDefault(index), _subtitle.GetParagraphOrDefault(index - 2));
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index - 1, _subtitle.GetParagraphOrDefault(index - 1));
                SubtitleListview1.EndUpdate();
                UpdateSourceView();

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    var original = Utilities.GetOriginalParagraph(index, oldP, _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        index = _subtitleOriginal.GetIndex(original);
                        for (int i = index; i < _subtitleOriginal.Paragraphs.Count; i++)
                        {
                            if (!_subtitleOriginal.Paragraphs[i].StartTime.IsMaxTime)
                            {
                                _subtitleOriginal.Paragraphs[i].StartTime = new TimeCode(_subtitleOriginal.Paragraphs[i].StartTime.TotalMilliseconds - offset);
                                _subtitleOriginal.Paragraphs[i].EndTime = new TimeCode(_subtitleOriginal.Paragraphs[i].EndTime.TotalMilliseconds - offset);
                            }
                        }
                    }
                }

                checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                RefreshSelectedParagraph();
            }
        }

        private void SetStartAndOffsetTheWholeSubtitle()
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                var idx = SubtitleListview1.SelectedItems[0].Index;
                var p = _subtitle.GetParagraphOrDefault(idx);
                if (p is null)
                {
                    return;
                }

                var videoPosition = mediaPlayer.CurrentPosition;
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                var offset = TimeCode.FromSeconds(videoPosition).TotalMilliseconds - p.StartTime.TotalMilliseconds;
                ShowEarlierOrLater(offset, SelectionChoice.AllLines);
            }
        }

        private void SetEndAndOffsetTheRest(bool goToNext)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                bool oldSync = checkBoxSyncListViewWithVideoWhilePlaying.Checked;
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = false;

                int index = SubtitleListview1.SelectedItems[0].Index;
                int lastLineNumber = SubtitleListview1.SelectedItems.Count == 1 ? SubtitleListview1.Items.Count : index + SubtitleListview1.SelectedItems.Count;
                double videoPosition = mediaPlayer.CurrentPosition;
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                var tc = TimeCode.FromSeconds(videoPosition);

                double offset = tc.TotalMilliseconds - _subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                if (_subtitle.Paragraphs[index].StartTime.TotalMilliseconds + 100 > tc.TotalMilliseconds)
                {
                    return;
                }

                MakeHistoryForUndo(_language.BeforeSetEndTimeAndOffsetTheRest + @"  " + _subtitle.Paragraphs[index].Number + @" - " + tc);

                numericUpDownDuration.ValueChanged -= NumericUpDownDurationValueChanged;
                _subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                SubtitleListview1.SetDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                numericUpDownDuration.Value = (decimal)_subtitle.Paragraphs[index].DurationTotalSeconds;
                numericUpDownDuration.ValueChanged += NumericUpDownDurationValueChanged;
                RefreshSelectedParagraph();

                SubtitleListview1.BeginUpdate();
                for (int i = index + 1; i < lastLineNumber; i++)
                {
                    if (!_subtitle.Paragraphs[i].StartTime.IsMaxTime)
                    {
                        _subtitle.Paragraphs[i].StartTime = new TimeCode(_subtitle.Paragraphs[i].StartTime.TotalMilliseconds + offset);
                        _subtitle.Paragraphs[i].EndTime = new TimeCode(_subtitle.Paragraphs[i].EndTime.TotalMilliseconds + offset);
                        SubtitleListview1.SetStartTimeAndEndTimeSameDuration(i, _subtitle.Paragraphs[i]);
                    }
                }
                SubtitleListview1.EndUpdate();

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index], _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        index = _subtitleOriginal.GetIndex(original);
                        for (int i = index; i < lastLineNumber; i++)
                        {
                            if (!_subtitleOriginal.Paragraphs[i].StartTime.IsMaxTime)
                            {
                                _subtitleOriginal.Paragraphs[i].StartTime = new TimeCode(_subtitleOriginal.Paragraphs[i].StartTime.TotalMilliseconds + offset);
                                _subtitleOriginal.Paragraphs[i].EndTime = new TimeCode(_subtitleOriginal.Paragraphs[i].EndTime.TotalMilliseconds + offset);
                            }
                        }
                    }
                }

                checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;

                if (goToNext)
                {
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
                    if (mediaPlayer.IsPaused && index + 1 < _subtitle.Paragraphs.Count)
                    {
                        mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index + 1].StartTime.TotalSeconds;
                    }
                }
            }
        }

        private void ButtonSetEndAndGoToNextClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                int index = SubtitleListview1.SelectedItems[0].Index;
                double videoPosition = mediaPlayer.CurrentPosition;
                var temp = new Paragraph(_subtitle.Paragraphs[index]);
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                if (videoPosition < temp.StartTime.TotalSeconds + 0.025)
                {
                    return;
                }

                string oldDuration = _subtitle.Paragraphs[index].Duration.ToString();
                temp.EndTime.TotalMilliseconds = TimeCode.FromSeconds(videoPosition).TotalMilliseconds;
                MakeHistoryForUndo(string.Format(_language.DisplayTimeAdjustedX, "#" + _subtitle.Paragraphs[index].Number + ": " + oldDuration + " -> " + temp.Duration));
                _makeHistoryPaused = true;

                if (_subtitle.Paragraphs[index].StartTime.IsMaxTime)
                {
                    timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                    _subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                    _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(_subtitle.Paragraphs[index].Text);
                    if (_subtitle.Paragraphs[index].StartTime.TotalMilliseconds < 0)
                    {
                        _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = 0;
                    }

                    timeUpDownStartTime.TimeCode = _subtitle.Paragraphs[index].StartTime;
                    SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                }
                else
                {
                    _subtitle.Paragraphs[index].EndTime = TimeCode.FromSeconds(videoPosition);
                }

                SubtitleListview1.SetDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                SetDurationInSeconds(_subtitle.Paragraphs[index].DurationTotalSeconds);

                if (index + 1 < _subtitle.Paragraphs.Count)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
                }

                _makeHistoryPaused = false;
                UpdateSourceView();
            }
        }

        private void ButtonAdjustSecBackClick(object sender, EventArgs e)
        {
            GoBackSeconds((double)numericUpDownSecAdjust1.Value);
        }

        private void ButtonAdjustSecForwardClick(object sender, EventArgs e)
        {
            GoBackSeconds(-(double)numericUpDownSecAdjust1.Value);
        }

        private void StartOrStopAutoBackup()
        {
            _timerAutoBackup?.Dispose();
            if (Configuration.Settings.General.AutoBackupSeconds > 0)
            {
                _timerAutoBackup = new Timer();
                _timerAutoBackup.Tick += TimerAutoBackupTick;
                _timerAutoBackup.Interval = 1000 * Configuration.Settings.General.AutoBackupSeconds; // take backup every x second if changes were made
                _timerAutoBackup.Start();
            }
        }

        private void Main_Shown(object sender, EventArgs e)
        {
            splitContainerListViewAndText.SplitterMoved += SplitContainerListViewAndTextSplitterMoved;
            splitContainerListViewAndText.SizeChanged += SlitContainerListViewAndTextSizeChanged;
            textBoxListViewText.SizeChanged += TextBoxListViewText_SizeChanged;
            textBoxListViewTextOriginal.SizeChanged += TextBoxListViewTextOriginal_SizeChanged;

            imageListBookmarks.Images.Add(pictureBoxBookmark.Image);
            SetListViewStateImages();
            if (_subtitle != null && _subtitle.Paragraphs.Any(p => p.Bookmark != null))
            {
                SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width + 18;
            }

            StartOrStopAutoBackup();
            StartOrStopLiveSpellCheckTimer();

            SetPositionFromXYString(Configuration.Settings.General.UndockedVideoPosition, "VideoPlayerUndocked");
            SetPositionFromXYString(Configuration.Settings.General.UndockedWaveformPosition, "WaveformUndocked");
            SetPositionFromXYString(Configuration.Settings.General.UndockedVideoControlsPosition, "VideoControlsUndocked");
            if (Configuration.Settings.General.Undocked && Configuration.Settings.General.StartRememberPositionAndSize)
            {
                Configuration.Settings.General.Undocked = false;
                UndockVideoControlsToolStripMenuItemClick(null, null);
                if (Configuration.Settings.General.UndockedVideoFullscreen)
                {
                    GoFullscreen(true);
                }
            }

            Main_Resize(null, null);

            toolStripButtonLockCenter.Checked = Configuration.Settings.General.WaveformCenter;
            audioVisualizer.Locked = toolStripButtonLockCenter.Checked;

            numericUpDownSec1.Value = (decimal)(Configuration.Settings.General.SmallDelayMilliseconds / TimeCode.BaseUnit);
            numericUpDownSec2.Value = (decimal)(Configuration.Settings.General.LargeDelayMilliseconds / TimeCode.BaseUnit);

            numericUpDownSecAdjust1.Value = (decimal)(Configuration.Settings.General.SmallDelayMilliseconds / TimeCode.BaseUnit);
            numericUpDownSecAdjust2.Value = (decimal)(Configuration.Settings.General.LargeDelayMilliseconds / TimeCode.BaseUnit);

            SetShortcuts();
            MainResize();
            _loading = false;

            LayoutManager.MainSplitContainer = splitContainerMain;
            _layout = Configuration.Settings.General.LayoutNumber;
            if (_layout != 0)
            {
                SetLayout(_layout, false);
            }
            if (Configuration.Settings.General.StartRememberPositionAndSize)
            {
                LayoutManager.RestoreLayout(Configuration.Settings.General.LayoutSizes);
            }

            if (!Configuration.Settings.General.ShowVideoControls)
            {
                ToggleVideoControlsOnOff(Configuration.Settings.General.ShowVideoControls);
            }

            menuStrip1.Refresh();
            toolStrip1.Refresh();

            OpenVideo(_videoFileName, VideoAudioTrackNumber);
            ShowSubtitleTimer.Stop();
            lock (_syncUndo)
            {
                timerTextUndo.Start();
                timerOriginalTextUndo.Start();
            }

            _timerDoSyntaxColoring.Interval = 100;
            _timerDoSyntaxColoring.Tick += TimerDoSyntaxColoring_Tick;

            var showBeta = Configuration.Settings.General.ShowBetaStuff;
            generateDatetimeInfoFromVideoToolStripMenuItem.Visible = showBeta;
            toolStripMenuItemExportCaptionInc.Visible = showBeta;
            toolStripMenuItemExportUltech130.Visible = showBeta;
            toolStripMenuItemSpellCheckFromCurrentLine.Visible = showBeta;
            toolStripMenuItemImportOcrHardSub.Visible = showBeta;
            toolStripMenuItemOpenDvd.Visible = showBeta;

            if (Configuration.Settings.General.StartRememberPositionAndSize)
            {
                try
                {
                    _textHeightResizeIgnoreUpdate = DateTime.UtcNow.Ticks;
                    _textHeightResize = splitContainerListViewAndText.Height - splitContainerListViewAndText.SplitterDistance;
                }
                catch
                {
                    // ignore
                }
            }

            mediaPlayer.InitializeVolume(Configuration.Settings.General.VideoPlayerDefaultVolume);
            splitContainer1.Panel1.Invalidate();

            Utilities.SetSecurityProtocol();
            if (string.IsNullOrEmpty(LanguageSettings.Current.CheckForUpdates.CheckingForUpdates))
            {
                checkForUpdatesToolStripMenuItem.Visible = false;
                toolStripMenuItemSplitterCheckForUpdates.Visible = false;
            }
            else if (Configuration.Settings.General.CheckForUpdates && Configuration.Settings.General.LastCheckForUpdates < DateTime.Now.AddDays(-5))
            {
                _checkForUpdatesHelper = new CheckForUpdatesHelper();
                _checkForUpdatesHelper.CheckForUpdates(false);
                _timerCheckForUpdates = new Timer { Interval = 7000 };
                _timerCheckForUpdates.Tick += TimerCheckForUpdatesTick;
                _timerCheckForUpdates.Start();
                Configuration.Settings.General.LastCheckForUpdates = DateTime.Now;
            }

            _dragAndDropTimer.Interval = 50;
            _dragAndDropTimer.Tick += DoSubtitleListview1Drop;

            _dragAndDropVideoTimer.Interval = 50;
            _dragAndDropVideoTimer.Tick += DropVideoTick;

            if (_exitWhenLoaded)
            {
                Application.Exit();
            }

            // Fix some large fonts issues
            if (numericUpDownDuration.Left + numericUpDownDuration.Width > textBoxListViewText.Left)
            {
                numericUpDownDuration.Left = timeUpDownStartTime.Left + timeUpDownStartTime.Width + 5;
                numericUpDownDuration.Width = textBoxListViewText.Left - numericUpDownDuration.Left - 5;
                labelDuration.Left = numericUpDownDuration.Left;
            }

            if (string.IsNullOrEmpty(_fileName) && (_subtitle == null || _subtitle.Paragraphs.Count == 0))
            {
                _changeSubtitleHash = GetFastSubtitleHash();
            }

            InitializePlayRateDropDown();

            LoadPlugins();

            mediaPlayer.OnEmptyPlayerClicked += MediaPlayer_OnEmptyPlayerClicked;
            mediaPlayer.OnPlayerClicked += MediaPlayer_OnPlayerClicked;
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);
            if (Configuration.Settings.General.StartInSourceView)
            {
                textBoxSource.Focus();
            }
            else
            {
                SubtitleListview1.Focus();
            }

            _lastTextKeyDownTicks = DateTime.UtcNow.Ticks;
            if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                var idx = _subtitleListViewIndex;
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                SubtitleListview1.SelectIndexAndEnsureVisibleFaster(idx);
            }

            SetTitle();
            labelSingleLine.Left = labelTextLineLengths.Left + labelTextLineLengths.Width - 6;
            RemoveNotExistingFilesFromRecentFilesUI();

            if (Configuration.Settings.General.ShowBetaStuff)
            {
                toolStripMenuItemExport.DropDownItems.Add("Export SE job...", null, ExportSeJobClick);
            }

            groupBoxVideo.MouseClick += GroupBoxVideo_MouseClick;

            textBoxListViewText.MouseDown += TextBoxListViewText_MouseDown;

            ShowSubtitleTimer.Start();
            textBoxSource.SelectionLength = 0;
            _timerSlow.Interval = 150;
            _timerSlow.Tick += TimerSlowTick;
            _timerSlow.Start();

            trackBarWaveformPosition.MouseWheel += TrackBarWaveformPosition_MouseWheel;

            pictureBoxRecord.Paint += PictureBoxRecord_Paint;
        }

        private void PictureBoxRecord_Paint(object sender, PaintEventArgs e)
        {
            if (_dictateForm != null && VoskDictate.RecordingOn)
            {
                var len = pictureBoxRecord.Height - (int)Math.Round(VoskDictate.RecordingVolumePercent * pictureBoxRecord.Height / 100.0);
                using (var pen = new Pen(Color.DodgerBlue, 5))
                {
                    e.Graphics.DrawLine(pen, pictureBoxRecord.Width - 6, pictureBoxRecord.Height - 1, pictureBoxRecord.Width - 6, len);
                    e.Graphics.DrawLine(pen, 4, pictureBoxRecord.Height - 1, 4, len);
                }
            }
        }

        private void TrackBarWaveformPosition_MouseWheel(object sender, MouseEventArgs e)
        {
            ((HandledMouseEventArgs)e).Handled = true; //disable default mouse wheel

            var delta = e.Delta;
            if (!Configuration.Settings.VideoControls.WaveformMouseWheelScrollUpIsForward)
            {
                delta = -delta;
            }

            if (delta > 0)
            {
                if (trackBarWaveformPosition.Value < trackBarWaveformPosition.Maximum)
                {
                    trackBarWaveformPosition.Value++;
                }
            }
            else
            {
                if (trackBarWaveformPosition.Value > trackBarWaveformPosition.Minimum)
                {
                    trackBarWaveformPosition.Value--;
                }
            }
        }

        private void ExportSeJobClick(object sender, EventArgs e)
        {
            using (var form = new SeJobExport(_subtitle, _subtitleOriginal, GetCurrentSubtitleFormat(), _videoFileName, audioVisualizer.WavePeaks, audioVisualizer.ShotChanges))
            {
                form.ShowDialog(this);
            }
        }

        private void TextBoxListViewText_MouseDown(object sender, MouseEventArgs e)
        {
            if (!textBoxListViewText.Enabled)
            {
                if (!string.IsNullOrEmpty(_videoFileName) &&
                    audioVisualizer.WavePeaks != null &&
                    audioVisualizer.NewSelectionParagraph != null &&
                    audioVisualizer.NewSelectionParagraph.Duration.TotalMilliseconds > 100 &&
                    audioVisualizer.NewSelectionParagraph.Duration.TotalMilliseconds < 10_000)
                {
                    AddParagraphHereToolStripMenuItemClick(null, null);
                    return;
                }

                InsertLineToolStripMenuItemClick(null, null);
            }
        }

        private bool _updateShowEarlier;
        private readonly object _updateShowEarlierLock = new object();

        string _lastTranslationDebugError = string.Empty;
        private void TimerSlowTick(object sender, EventArgs e)
        {
            _timerSlow.Stop();

            if (Configuration.Settings.General.DebugTranslationSync)
            {
                if (_subtitle?.Paragraphs.Count == _subtitleOriginal?.Paragraphs.Count)
                {
                    bool ok = true;
                    for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
                    {
                        var error = string.Empty;
                        var p = _subtitle.Paragraphs[i];
                        var o = _subtitleOriginal.Paragraphs[i];
                        if (Math.Abs(p.StartTime.TotalMilliseconds - o.StartTime.TotalMilliseconds) > 0.001)
                        {
                            tabControlModes.TabPages[0].Text = "Sync start error at: " + i;
                            ok = false;
                            var errorMessage = "Sync start time error at: " + i;
                            if (errorMessage != _lastTranslationDebugError)
                            {
                                ShowStatus(errorMessage, true, 0, true);
                                _lastTranslationDebugError = errorMessage;
                            }

                            break;
                        }
                        if (Math.Abs(p.EndTime.TotalMilliseconds - o.EndTime.TotalMilliseconds) > 0.001)
                        {
                            tabControlModes.TabPages[0].Text = "Sync end error at: " + i;
                            ok = false;
                            var errorMessage = "Sync end time error at: " + i;
                            if (errorMessage != _lastTranslationDebugError)
                            {
                                ShowStatus(errorMessage, true, 0, true);
                                _lastTranslationDebugError = errorMessage;
                            }

                            break;
                        }
                    }

                    if (ok)
                    {
                        tabControlModes.TabPages[0].Text = "OK";
                    }
                }
                else
                {
                    tabControlModes.TabPages[0].Text = "Count does not match";
                }
            }

            if (mediaPlayer.VideoPlayer != null && !mediaPlayer.IsDisposed)
            {
                mediaPlayer.RefreshProgressBar();

                trackBarWaveformPosition.ValueChanged -= TrackBarWaveformPositionValueChanged;
                int value = (int)mediaPlayer.CurrentPosition;
                if (value > trackBarWaveformPosition.Maximum)
                {
                    value = trackBarWaveformPosition.Maximum;
                }
                else if (value < trackBarWaveformPosition.Minimum)
                {
                    value = trackBarWaveformPosition.Minimum;
                }

                trackBarWaveformPosition.Value = value;
                trackBarWaveformPosition.ValueChanged += TrackBarWaveformPositionValueChanged;
            }


            if (_updateShowEarlier)
            {
                lock (_updateShowEarlierLock)
                {
                    SubtitleListview1.BeginUpdate();
                    for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
                    {
                        var p = _subtitle.Paragraphs[i];
                        SubtitleListview1.SetStartTimeAndDuration(i, p, _subtitle.GetParagraphOrDefault(i + 1), _subtitle.GetParagraphOrDefault(i - 1));
                    }

                    SubtitleListview1.EndUpdate();
                    _updateShowEarlier = false;
                }
            }

            if (_updateSelectedCountStatusBar)
            {
                var profile = Configuration.Settings.General.CurrentProfile + "   ";
                if (!ShowProfileInStatusBar)
                {
                    profile = string.Empty;
                }

                _updateSelectedCountStatusBar = false;
                var selectedIndices = SubtitleListview1.GetSelectedIndices();
                if (selectedIndices.Length == 1)
                {
                    toolStripSelected.Text = profile + string.Format("{0}/{1}", SubtitleListview1.SelectedIndices[0] + 1, _subtitle.Paragraphs.Count);
                }
                else if (selectedIndices.Length >= 2 && selectedIndices.Length <= 4)
                {
                    var list = new List<Paragraph>();
                    foreach (var selectedIndex in selectedIndices)
                    {
                        list.Add(_subtitle.GetParagraphOrDefault(selectedIndex));
                    }

                    var isConsecutive = !selectedIndices.Select((i, j) => i - j).Distinct().Skip(1).Any();

                    if (isConsecutive && list.All(px => px != null && !px.StartTime.IsMaxTime && !px.EndTime.IsMaxTime))
                    {
                        var minMs = list.Min(px => px.StartTime.TotalMilliseconds);
                        var maxMs = list.Max(px => px.EndTime.TotalMilliseconds);
                        var mergedTime = new TimeCode(maxMs - minMs);
                        toolStripSelected.Text = profile + string.Format(_language.XLinesSelected + "/{1}  {2}", selectedIndices.Length, _subtitle.Paragraphs.Count, mergedTime.ToShortDisplayString());
                    }
                    else
                    {
                        toolStripSelected.Text = profile + string.Format(_language.XLinesSelected + "/{1}", selectedIndices.Length, _subtitle.Paragraphs.Count);
                    }
                }
                else
                {
                    toolStripSelected.Text = profile + string.Format(_language.XLinesSelected + "/{1}", selectedIndices.Length, _subtitle.Paragraphs.Count);
                }
            }

            _timerSlow.Start();
        }

        private void TextBoxListViewText_SizeChanged(object sender, EventArgs e)
        {
            FixVerticalScrollBars(textBoxListViewText);
        }

        private void TextBoxListViewTextOriginal_SizeChanged(object sender, EventArgs e)
        {
            FixVerticalScrollBars(textBoxListViewTextOriginal);
        }

        private void InitializePlayRateDropDown()
        {
            var foreColor = UiUtil.ForeColor;
            var backColor = UiUtil.BackColor;
            _contextMenuStripPlayRate.Items.Clear();
            var items = new List<ToolStripMenuItem>(28);
            for (int i = 30; i <= 300; i += 10)
            {
                items.Add(new ToolStripMenuItem(i + "%", null, SetPlayRate, i.ToString()) { Checked = i == 100, BackColor = backColor, ForeColor = foreColor });
            }
            _contextMenuStripPlayRate.Items.AddRange(items.ToArray());
        }

        private void MediaPlayer_OnEmptyPlayerClicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_videoFileName))
            {
                ButtonOpenVideoClick(sender, e);
            }
        }

        private void MediaPlayer_OnPlayerClicked(object sender, EventArgs e)
        {
            ResetPlaySelection();
        }

        private void SetPlayRateAndPlay(int playRate, bool play = true)
        {
            SetPlayRate(_contextMenuStripPlayRate.Items[playRate.ToString()], false, true);
            if (play)
            {
                mediaPlayer.Play();
            }
        }

        private void SetPlayRate(object sender, EventArgs e)
        {
            SetPlayRate(sender, false);
        }

        private void SetPlayRate(object sender, bool skipStatusMessage, bool playedWithCustomSpeed = false)
        {
            if (!(sender is ToolStripMenuItem playRateDropDownItem) || mediaPlayer == null || mediaPlayer.VideoPlayer == null)
            {
                return;
            }

            foreach (ToolStripMenuItem item in _contextMenuStripPlayRate.Items)
            {
                item.Checked = false;
            }

            var percentText = playRateDropDownItem.Text.TrimEnd('%');
            var factor = double.Parse(percentText) / 100.0;
            if (!skipStatusMessage)
            {
                ShowStatus(string.Format(_language.SetPlayRateX, percentText));
            }

            if (!playedWithCustomSpeed)
            {
                playRateDropDownItem.Checked = true;
                if (Math.Abs(factor - 1) < 0.01)
                {
                    toolStripSplitButtonPlayRate.Checked = false;
                }
                else
                {
                    toolStripSplitButtonPlayRate.Checked = true;
                }
            }

            try
            {
                mediaPlayer.VideoPlayer.PlayRate = factor;
                mediaPlayer.PlayedWithCustomSpeed = playedWithCustomSpeed;
            }
            catch
            {
                if (Configuration.Settings.General.VideoPlayer != "MPV")
                {
                    using (var form = new SettingsMpv())
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }

                        Configuration.Settings.General.VideoPlayer = "MPV";
                    }
                }
            }
        }

        private void TimerCheckForUpdatesTick(object sender, EventArgs e)
        {
            _timerCheckForUpdates.Stop();
            if (_checkForUpdatesHelper.IsUpdateAvailable())
            {
                ShowCheckForUpdates();
            }

            _checkForUpdatesHelper = null;
            _timerCheckForUpdates = null;
        }

        private void TimerDoSyntaxColoring_Tick(object sender, EventArgs e)
        {
            UpdateListSyntaxColoring();
            _timerDoSyntaxColoring.Stop();
        }

        private static void SetPositionFromXYString(string positionAndSize, string name)
        {
            var parts = positionAndSize.Split(';');
            if (parts.Length == 4)
            {
                if (int.TryParse(parts[0], out var left)
                    && int.TryParse(parts[1], out var top)
                    && int.TryParse(parts[2], out var width)
                    && int.TryParse(parts[3], out var height))
                {
                    PositionAndSizeForm.SetPositionAndSize(name, new Rectangle(left, top, width, height));
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("Could not set position and size for '{0}'.", name);
                }
            }
        }

        private void SetShortcuts()
        {
            _shortcuts.SetShortcuts();
            newToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileNew);
            openToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileOpen);
            toolStripMenuItemOpenKeepVideo.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileOpenKeepVideo);
            saveToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSave);
            saveOriginalToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveOriginal);
            saveOriginalAstoolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveOriginalAs);
            saveAsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveAs);
            openOriginalToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileOpenOriginal);
            removeOriginalToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileCloseOriginal);
            removeTranslationToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileCloseTranslation);
            toolStripMenuItemOpenContainingFolder.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.OpenContainingFolder);
            toolStripMenuItemCompare.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileCompare);
            toolStripMenuItemVerifyCompleteness.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileVerifyCompleteness);
            toolStripMenuItemImportText.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileImportPlainText);
            toolStripMenuItemImportBluraySupFileForEdit.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileImportBdSupForEdit);
            toolStripMenuItemImportTimeCodes.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileImportTimeCodes);
            toolStripMenuItemExportEBUSTL.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExportEbu);
            toolStripMenuItemExportPACScreenElectronics.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExportPac);
            toolStripMenuItemExportBluraySup.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExportBdSup);
            toolStripMenuItemExportEdlClipName.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExportEdlClip);
            toolStripMenuItemExportPlainText.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExportPlainText);
            exitToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExit);

            toolStripMenuItemUndo.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditUndo);
            toolStripMenuItemRedo.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditRedo);
            findToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditFind);
            findNextToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditFindNext);
            replaceToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditReplace);
            multipleReplaceToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditMultipleReplace);
            gotoLineNumberToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditGoToLineNumber);
            toolStripMenuItemRightToLeftMode.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditRightToLeft);
            toolStripMenuItemShowOriginalInPreview.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditToggleTranslationOriginalInPreviews);
            toolStripMenuItemInverseSelection.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditInverseSelection);
            toolStripMenuItemModifySelection.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditModifySelection);

            adjustDisplayTimeToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsAdjustDuration);
            toolStripMenuItemApplyDurationLimits.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsAdjustDurationLimits);
            fixToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsFixCommonErrors);
            toolStripMenuItemAutoMergeShortLines.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMergeShortLines);
            toolStripMenuItemMergeDuplicateText.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMergeDuplicateText);
            toolStripMenuItemMergeLinesWithSameTimeCodes.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMergeSameTimeCodes);
            toolStripMenuItemMakeEmptyFromCurrent.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMakeEmptyFromCurrent);
            toolStripMenuItemAutoSplitLongLines.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsSplitLongLines);
            toolStripMenuItemSubtitlesBridgeGaps.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsDurationsBridgeGap);
            setMinimumDisplayTimeBetweenParagraphsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMinimumDisplayTimeBetweenParagraphs);
            startNumberingFromToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsRenumber);
            removeTextForHearImpairedToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsRemoveTextForHI);
            convertColorsToDialogToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsConvertColorsToDialog);
            ChangeCasingToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsChangeCasing);
            toolStripMenuItemShowOriginalInPreview.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditToggleTranslationOriginalInPreviews);
            toolStripMenuItemBatchConvert.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsBatchConvert);
            toolStripMenuItemMeasurementConverter.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMeasurementConverter);
            splitToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsSplit);
            appendTextVisuallyToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsAppend);
            joinSubtitlesToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsJoin);
            toolStripMenuItemAssStyles.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsStyleManager);
            listErrorsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewListErrors);

            openVideoToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoOpen);
            closeVideoToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoClose);
            toolStripMenuItemListShotChanges.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.WaveformListShotChanges);
            toolStripMenuItemBookmark.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralToggleBookmarksWithText);
            toolStripMenuItemGoToSourceView.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralToggleView);
            toolStripMenuItemEmptyGoToSourceView.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralToggleView);
            toolStripMenuItemGoToListView.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralToggleView);
            sortNumberToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByNumber);
            sortStartTimeToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByStartTime);
            sortEndTimeToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByEndTime);
            sortDisplayTimeToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByDuration);
            sortByGapToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByGap);
            sortTextAlphabeticallytoolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByText);
            sortTextMaxLineLengthToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortBySingleLineMaxLen);
            sortTextTotalLengthToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByTextTotalLength);
            textCharssecToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByCps);
            textWordsPerMinutewpmToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByWpm);
            sortTextNumberOfLinesToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByNumberOfLines);
            actorToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByActor);
            styleToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSortByStyle);

            spellCheckToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheck);
            findDoubleWordsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheckFindDoubleWords);
            addWordToNameListToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheckAddWordToNames);

            toolStripMenuItemAdjustAllTimes.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationAdjustTimes);
            visualSyncToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationVisualSync);
            toolStripMenuItemPointSync.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationPointSync);
            pointSyncViaOtherSubtitleToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationPointSyncViaFile);
            toolStripMenuItemChangeFrameRate2.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationChangeFrameRate);
            italicToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewItalic);
            italicToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewItalic);
            removeAllFormattingsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainRemoveFormatting);
            normalToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainRemoveFormatting);
            boldToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewBold);
            boldToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewBold);
            underlineToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewUnderline);
            underlineToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewUnderline);
            boxToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewBox);
            boxToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewBox);
            splitLineToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSplit);
            toolStripMenuItemSurroundWithMusicSymbols.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewToggleMusicSymbols);
            toolStripMenuItemAlignment.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewAlignment);
            copyOriginalTextToCurrentToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewCopyTextFromOriginalToCurrent);
            columnDeleteTextOnlyToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnDeleteText);
            toolStripMenuItemColumnDeleteText.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnDeleteTextAndShiftUp);
            ShiftTextCellsDownToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnInsertText);
            toolStripMenuItemPasteSpecial.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnPaste);
            toolStripMenuItemRuby.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxSelectionToRuby);
            moveTextUpToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnTextUp);
            moveTextDownToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnTextDown);
            toolStripMenuItemReverseRightToLeftStartEnd.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditReverseStartAndEndingForRTL);
            autotranslateNLLBToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainTranslateAuto);
            genericTranslateToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainTranslateAutoSelectedLines);
            applyCustomStylesToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralApplyAssaOverrideTags);
            setPositionToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralSetAssaPosition);
            colorPickerToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralColorPicker);
            toolStripMenuItemAutoBreakLines.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainAutoBalanceSelectedLines);
            toolStripMenuItemEvenlyDistributeLines.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEvenlyDistributeSelectedLines);
            generateBackgroundBoxToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralSetAssaBgBox);
            colorToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColorChoose);
            colorToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColorChoose);

            audioVisualizer.InsertAtVideoPositionShortcut = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainWaveformInsertAtCurrentPosition);
            audioVisualizer.Move100MsLeft = UiUtil.GetKeys(Configuration.Settings.Shortcuts.Waveform100MsLeft);
            audioVisualizer.Move100MsRight = UiUtil.GetKeys(Configuration.Settings.Shortcuts.Waveform100MsRight);
            audioVisualizer.MoveOneSecondLeft = UiUtil.GetKeys(Configuration.Settings.Shortcuts.Waveform1000MsLeft);
            audioVisualizer.MoveOneSecondRight = UiUtil.GetKeys(Configuration.Settings.Shortcuts.Waveform1000MsRight);

            UiUtil.HelpKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralHelp);
            helpToolStripMenuItem1.ShortcutKeys = UiUtil.HelpKeys;


            // shortcut hints
            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2) && Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2.Length < 5)
            {
                labelAdjustF9.Text = Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2;
            }
            else if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest) && Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest.Length < 5)
            {
                labelAdjustF9.Text = Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest;
            }
            else
            {
                labelAdjustF9.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext) && Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext.Length < 5)
            {
                labelAdjustF10.Text = Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext;
            }
            else
            {
                labelAdjustF10.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainCreateSetStart) && Configuration.Settings.Shortcuts.MainCreateSetStart.Length < 5)
            {
                labelAdjustF11.Text = Configuration.Settings.Shortcuts.MainCreateSetStart;
                labelCreateF11.Text = Configuration.Settings.Shortcuts.MainCreateSetStart;
            }
            else
            {
                labelAdjustF11.Text = string.Empty;
                labelCreateF11.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainCreateSetEnd) && Configuration.Settings.Shortcuts.MainCreateSetEnd.Length < 5)
            {
                labelAdjustF12.Text = Configuration.Settings.Shortcuts.MainCreateSetEnd;
                labelCreateF12.Text = Configuration.Settings.Shortcuts.MainCreateSetEnd;
            }
            else
            {
                labelAdjustF12.Text = string.Empty;
                labelCreateF12.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos) && Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos.Length < 5)
            {
                labelCreateF9.Text = Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos;
            }
            else
            {
                labelCreateF9.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore) && Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore.Length < 5)
            {
                labelCreateF10.Text = Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore;
            }
            else
            {
                labelCreateF10.Text = string.Empty;
            }
        }

        public static object GetPropertiesAndDoAction(string pluginFileName, out string name, out string text, out decimal version, out string description, out string actionType, out string shortcut, out System.Reflection.MethodInfo mi)
        {
            name = null;
            text = null;
            version = 0;
            description = null;
            actionType = null;
            shortcut = null;
            mi = null;
            Assembly assembly;
            try
            {
                assembly = Assembly.Load(File.ReadAllBytes(pluginFileName));
            }
            catch (Exception exception)
            {
                SeLogger.Error(exception);

                try
                {
                    assembly = Assembly.Load(pluginFileName);
                }
                catch (Exception e)
                {
                    SeLogger.Error(e);
                }

                return null;
            }

            // note: *objectName must not include path or file extension
            string objectName = Path.GetFileNameWithoutExtension(pluginFileName);
            if (assembly != null)
            {
                Type pluginType = assembly.GetType("Nikse.SubtitleEdit.PluginLogic." + objectName);
                if (pluginType == null)
                {
                    return null;
                }

                object pluginObject = Activator.CreateInstance(pluginType);

                // IPlugin
                var t = pluginType.GetInterface("IPlugin");
                if (t == null)
                {
                    return null;
                }

                PropertyInfo pi = t.GetProperty("Name");
                if (pi != null)
                {
                    name = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Text");
                if (pi != null)
                {
                    text = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Description");
                if (pi != null)
                {
                    description = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Version");
                if (pi != null)
                {
                    version = Convert.ToDecimal(pi.GetValue(pluginObject, null));
                }

                pi = t.GetProperty("ActionType");
                if (pi != null)
                {
                    actionType = (string)pi.GetValue(pluginObject, null);
                }

                mi = t.GetMethod("DoAction");

                pi = t.GetProperty("Shortcut");
                if (pi != null)
                {
                    shortcut = (string)pi.GetValue(pluginObject, null);
                }

                return pluginObject;
            }

            return null;
        }

        private void LoadPlugins()
        {
            var path = Configuration.PluginsDirectory.TrimEnd(Path.DirectorySeparatorChar);
            if (!Directory.Exists(path))
            {
                return;
            }

            UiUtil.CleanUpMenuItemPlugin(fileToolStripMenuItem);
            UiUtil.CleanUpMenuItemPlugin(toolsToolStripMenuItem);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemSpellCheckMain);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemSynchronization);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemAutoTranslate);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemTranslateSelected);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemAssaTools);

            var fileMenuItems = new List<ToolStripMenuItem>();
            var toolsMenuItems = new List<ToolStripMenuItem>();
            var translateMenuItems = new List<ToolStripMenuItem>();
            var translateSelectedLinesMenuItems = new List<ToolStripMenuItem>();
            var syncMenuItems = new List<ToolStripMenuItem>();
            var spellCheckMenuItems = new List<ToolStripMenuItem>();
            var assaToolMenuItems = new List<ToolStripMenuItem>();

            foreach (var pluginFileName in Configuration.GetPlugins())
            {
                try
                {
                    GetPropertiesAndDoAction(pluginFileName, out var name, out var text, out var version, out var description, out var actionType, out var shortcut, out var mi);
                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(actionType) && mi != null)
                    {
                        var item = new ToolStripMenuItem { Text = text, Tag = pluginFileName };
                        UiUtil.FixFonts(item);

                        if (!string.IsNullOrEmpty(shortcut))
                        {
                            item.ShortcutKeys = UiUtil.GetKeys(shortcut);
                        }

                        var shortcutCustom = Configuration.Settings.Shortcuts.PluginShortcuts.FirstOrDefault(p => p.Name == name);
                        if (shortcutCustom != null)
                        {
                            item.ShortcutKeys = UiUtil.GetKeys(shortcutCustom.Shortcut);
                        }

                        if (actionType.Equals("File", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(fileMenuItems.Count, fileToolStripMenuItem, 2);
                            item.Click += PluginToolClick;
                            fileMenuItems.Add(item);
                        }
                        else if (actionType.Equals("Tool", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(toolsMenuItems.Count, toolsToolStripMenuItem);
                            item.Click += PluginToolClick;
                            toolsMenuItems.Add(item);
                        }
                        else if (actionType.Equals("Sync", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(syncMenuItems.Count, toolStripMenuItemSynchronization);
                            item.Click += PluginToolClick;
                            syncMenuItems.Add(item);
                        }
                        else if (actionType.Equals("Translate", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(translateMenuItems.Count, toolStripMenuItemAutoTranslate);
                            item.Click += PluginClickTranslate;
                            translateMenuItems.Add(item);

                            // selected lines
                            item = new ToolStripMenuItem
                            {
                                Text = text,
                                Tag = pluginFileName
                            };
                            UiUtil.FixFonts(item);
                            AddSeparator(translateMenuItems.Count - 1, toolStripMenuItemTranslateSelected);
                            item.Click += PluginClickTranslateSelectedLines;
                            translateSelectedLinesMenuItems.Add(item);
                        }
                        else if (actionType.Equals("SpellCheck", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(spellCheckMenuItems.Count, toolStripMenuItemSpellCheckMain);
                            item.Click += PluginClickNoFormatChange;
                            spellCheckMenuItems.Add(item);
                        }
                        else if (actionType.Equals("AssaTool", StringComparison.OrdinalIgnoreCase))
                        {
                            item.Click += CallPluginAssa;
                            assaToolMenuItems.Add(item);
                        }
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show(string.Format(_language.ErrorLoadingPluginXErrorY, pluginFileName, exception.Message));
                }
            }

            foreach (var fileMenuItem in fileMenuItems)
            {
                fileToolStripMenuItem.DropDownItems.Insert(fileToolStripMenuItem.DropDownItems.Count - 2, fileMenuItem);
            }

            toolsToolStripMenuItem.DropDownItems.AddRange(toolsMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemAutoTranslate.DropDownItems.AddRange(translateMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemTranslateSelected.DropDownItems.AddRange(translateSelectedLinesMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemSynchronization.DropDownItems.AddRange(syncMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemSpellCheckMain.DropDownItems.AddRange(spellCheckMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemAssaTools.DropDownItems.AddRange(assaToolMenuItems.OrderBy(p => p.Text).ToArray());
        }

        private void AddSeparator(int pluginCount, ToolStripMenuItem parent, int? relativeOffset = null)
        {
            if (pluginCount == 0)
            {
                var tss = new ToolStripSeparator();
                if (relativeOffset == null)
                {
                    if (parent.DropDownItems.Count > 0 && parent.DropDownItems[parent.DropDownItems.Count - 1].GetType() == typeof(ToolStripSeparator))
                    {
                        return; // don't app separator after separator
                    }

                    parent.DropDownItems.Add(tss);
                }
                else
                {
                    if (parent.DropDownItems.Count - relativeOffset.Value >= 0 &&
                        relativeOffset.Value < parent.DropDownItems.Count &&
                        parent.DropDownItems.Count > 0 &&
                        parent.DropDownItems[parent.DropDownItems.Count - relativeOffset.Value].GetType() == typeof(ToolStripSeparator))
                    {
                        return; // don't app separator after separator
                    }

                    parent.DropDownItems.Insert(parent.DropDownItems.Count - relativeOffset.Value, tss);
                }

                UiUtil.FixFonts(tss);
            }
        }

        private void PluginToolClick(object sender, EventArgs e)
        {
            CallPlugin(sender, true, false);
        }

        private void PluginClickNoFormatChange(object sender, EventArgs e)
        {
            CallPlugin(sender, false, false);
        }

        private void PluginClickTranslate(object sender, EventArgs e)
        {
            CallPlugin(sender, false, true);
        }

        private void PluginClickTranslateSelectedLines(object sender, EventArgs e)
        {
            CallPluginTranslateSelectedLines(sender);
        }

        private void CallPlugin(object sender, bool allowChangeFormat, bool translate)
        {
            try
            {
                var item = (ToolStripItem)sender;
                var pluginObject = GetPropertiesAndDoAction(item.Tag.ToString(), out var name, out var text, out var version, out var description, out var actionType, out var shortcut, out var mi);
                if (mi == null)
                {
                    return;
                }

                string rawText = null;
                var format = GetCurrentSubtitleFormat();
                if (format != null)
                {
                    rawText = _subtitle.ToText(format);
                }

                string pluginResult = (string)mi.Invoke(pluginObject,
                    new object[]
                    {
                        this,
                        _subtitle.ToText(new SubRip()),
                        Configuration.Settings.General.CurrentFrameRate,
                        Configuration.Settings.General.ListViewLineSeparatorString,
                        _fileName,
                        _videoFileName,
                        rawText
                    });

                if (!string.IsNullOrEmpty(pluginResult) && pluginResult.Length > 10 && text != pluginResult)
                {
                    var lines = new List<string>(pluginResult.SplitToLines());

                    MakeHistoryForUndo(string.Format(_language.BeforeRunningPluginXVersionY, name, version));

                    var s = new Subtitle();
                    SubtitleFormat newFormat = null;
                    foreach (var subtitleFormat in SubtitleFormat.AllSubtitleFormats)
                    {
                        if (subtitleFormat.IsMine(lines, null))
                        {
                            subtitleFormat.LoadSubtitle(s, lines, null);
                            newFormat = subtitleFormat;
                            break;
                        }
                    }

                    if (translate)
                    {
                        _subtitleOriginal = new Subtitle(_subtitle);
                        _subtitleOriginalFileName = _fileName;

                        var language = LanguageAutoDetect.AutoDetectGoogleLanguageOrNull(s);
                        if (language != null && !string.IsNullOrEmpty(_fileName))
                        {
                            _fileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
                            var oldLang = "." + LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal);
                            if (oldLang.Length == 3 && _fileName.EndsWith(oldLang, StringComparison.OrdinalIgnoreCase))
                            {
                                _fileName = _fileName.Remove(_fileName.Length - 3);
                            }

                            _fileName += "." + language + GetCurrentSubtitleFormat().Extension;
                        }
                        else
                        {
                            _fileName = null;
                        }

                        _subtitle.Paragraphs.Clear();
                        foreach (var p in s.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        ShowStatus(_language.SubtitleTranslated);
                        UpdateSourceView();
                        SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
                        SubtitleListview1.AutoSizeAllColumns(this);
                        SetupOriginalEdit();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        ResetHistory();
                        RestoreSubtitleListviewIndices();
                        _converted = true;
                        SetTitle();
                        return;
                    }

                    if (newFormat != null)
                    {
                        if (allowChangeFormat && newFormat.GetType() == typeof(SubRip) && IsOnlyTextChanged(_subtitle, s))
                        {
                            allowChangeFormat = false;
                        }

                        if (!allowChangeFormat && IsOnlyTextChanged(_subtitle, s))
                        {
                            for (int k = 0; k < s.Paragraphs.Count; k++)
                            {
                                _subtitle.Paragraphs[k].Text = s.Paragraphs[k].Text;
                            }
                        }
                        else
                        {
                            _subtitle.Paragraphs.Clear();
                            _subtitle.Header = s.Header;
                            _subtitle.Footer = s.Footer;
                            foreach (var p in s.Paragraphs)
                            {
                                _subtitle.Paragraphs.Add(p);
                            }
                        }

                        if (allowChangeFormat)
                        {
                            SetCurrentFormat(newFormat);
                        }

                        SaveSubtitleListviewIndices();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        RestoreSubtitleListviewIndices();
                        UpdateSourceView();

                        ShowStatus(string.Format(_language.PluginXExecuted, name));
                    }
                    else
                    {
                        MessageBox.Show(_language.UnableToReadPluginResult);
                    }
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message + Environment.NewLine + exception.StackTrace);
                if (exception.InnerException != null)
                {
                    MessageBox.Show(exception.InnerException.Message + Environment.NewLine + exception.InnerException.StackTrace);
                }
            }
        }

        private void CallPluginTranslateSelectedLines(object sender)
        {
            try
            {
                var item = (ToolStripItem)sender;
                var pluginObject = GetPropertiesAndDoAction(item.Tag.ToString(), out var name, out var text, out var version, out var description, out var actionType, out var shortcut, out var mi);
                if (mi == null)
                {
                    return;
                }

                SaveSubtitleListviewIndices();
                var selectedLines = new Subtitle();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.Paragraphs[index];
                    if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                    {
                        var original = Utilities.GetOriginalParagraph(index, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            p = original;
                        }
                        else
                        {
                            p = new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds);
                        }
                    }

                    selectedLines.Paragraphs.Add(p);
                }

                string rawText = null;
                SubtitleFormat format = GetCurrentSubtitleFormat();
                if (format != null)
                {
                    rawText = selectedLines.ToText(format);
                }

                string pluginResult = (string)mi.Invoke(pluginObject,
                    new object[]
                    {
                        this,
                        selectedLines.ToText(new SubRip()),
                        Configuration.Settings.General.CurrentFrameRate,
                        Configuration.Settings.General.ListViewLineSeparatorString,
                        _fileName,
                        _videoFileName,
                        rawText
                    });

                if (!string.IsNullOrEmpty(pluginResult) && pluginResult.Length > 10 && text != pluginResult)
                {
                    var lines = new List<string>(pluginResult.SplitToLines());
                    MakeHistoryForUndo(string.Format(_language.BeforeRunningPluginXVersionY, name, version));
                    var s = new Subtitle();
                    var f = new SubRip();
                    if (f.IsMine(lines, null))
                    {
                        f.LoadSubtitle(s, lines, null);

                        // we only update selected lines
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            var currentP = _subtitle.Paragraphs[index];
                            var translatedP = s.Paragraphs.FirstOrDefault(p => Math.Abs(p.StartTime.TotalMilliseconds - currentP.StartTime.TotalMilliseconds) < 0.001 &&
                                                                               Math.Abs(p.EndTime.TotalMilliseconds - currentP.EndTime.TotalMilliseconds) < 0.001);
                            if (translatedP != null)
                            {
                                currentP.Text = translatedP.Text;
                            }
                        }

                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        RestoreSubtitleListviewIndices();
                        ShowStatus(string.Format(_language.PluginXExecuted, name));
                    }
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message + Environment.NewLine + exception.StackTrace);
                if (exception.InnerException != null)
                {
                    MessageBox.Show(exception.InnerException.Message + Environment.NewLine + exception.InnerException.StackTrace);
                }
            }
        }

        private void CallPluginAssa(object sender, EventArgs e)
        {
            try
            {
                var item = (ToolStripItem)sender;
                var pluginObject = GetPropertiesAndDoAction(item.Tag.ToString(), out var name, out var text, out var version, out var description, out var actionType, out var shortcut, out var mi);
                if (mi == null)
                {
                    return;
                }

                SaveSubtitleListviewIndices();
                var beforeParagraphCount = _subtitle.Paragraphs.Count;

                // Add "SelectedLines" and "VideoFilePositionMs" to [Script Info] section
                var selectedLines = SubtitleListview1.GetSelectedIndices();
                var sub = new Subtitle(_subtitle);
                SubtitleFormat format = new AdvancedSubStationAlpha();
                var selectedIndicesText = string.Join(",", selectedLines);
                if (string.IsNullOrEmpty(sub.Header))
                {
                    sub.Header = AdvancedSubStationAlpha.DefaultHeader;
                }

                sub.Header = AdvancedSubStationAlpha.AddTagToHeader("SelectedLines", $"SelectedLines: {selectedIndicesText}", "[Script Info]", sub.Header);
                if (!string.IsNullOrEmpty(_videoFileName))
                {
                    var ms = (int)Math.Round(mediaPlayer.CurrentPosition * 1000.0);
                    sub.Header = AdvancedSubStationAlpha.AddTagToHeader("VideoFilePositionMs", $"VideoFilePositionMs: {ms}", "[Script Info]", sub.Header);
                }

                var rawText = sub.ToText(format);

                string pluginResult = (string)mi.Invoke(pluginObject,
                    new object[]
                    {
                        this,
                        sub.ToText(new SubRip()),
                        Configuration.Settings.General.CurrentFrameRate,
                        Configuration.Settings.General.ListViewLineSeparatorString,
                        _fileName,
                        _videoFileName,
                        rawText
                    });

                if (!string.IsNullOrEmpty(pluginResult) && pluginResult.Length > 10 && text != pluginResult)
                {
                    var lines = new List<string>(pluginResult.SplitToLines());
                    MakeHistoryForUndo(string.Format(_language.BeforeRunningPluginXVersionY, name, version));
                    var s = new Subtitle();
                    var f = new AdvancedSubStationAlpha();
                    if (f.IsMine(lines, null))
                    {
                        f.LoadSubtitle(s, lines, null);

                        _subtitle.Paragraphs.Clear();
                        _subtitle.Paragraphs.AddRange(s.Paragraphs);
                        _subtitle.Header = AdvancedSubStationAlpha.RemoveTagFromHeader("SelectedLines", "[Script Info]", s.Header);
                        _subtitle.Header = AdvancedSubStationAlpha.RemoveTagFromHeader("VideoFilePositionMs", "[Script Info]", s.Header);
                        _subtitle.Footer = s.Footer;

                        UpdateSourceView();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        _subtitleListViewIndex = -1;

                        if (beforeParagraphCount == _subtitle.Paragraphs.Count)
                        {
                            RestoreSubtitleListviewIndices();
                        }
                        else if (_selectedIndices.Count > 0)
                        {
                            SubtitleListview1.SelectIndexAndEnsureVisible(_selectedIndices.First());
                        }
                        else
                        {
                            SubtitleListview1.SelectIndexAndEnsureVisible(0);
                        }

                        ShowStatus(string.Format(_language.PluginXExecuted, name));
                    }
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message + Environment.NewLine + exception.StackTrace);
                if (exception.InnerException != null)
                {
                    MessageBox.Show(exception.InnerException.Message + Environment.NewLine + exception.InnerException.StackTrace);
                }
            }
        }

        private bool IsOnlyTextChanged(Subtitle s1, Subtitle s2)
        {
            if (s1.Paragraphs.Count != s2.Paragraphs.Count)
            {
                return false;
            }

            for (int i = 0; i < s1.Paragraphs.Count; i++)
            {
                var p1 = s1.Paragraphs[i];
                var p2 = s2.Paragraphs[i];
                if (Math.Abs(p1.StartTime.TotalMilliseconds - p2.StartTime.TotalMilliseconds) > 0.01)
                {
                    return false;
                }

                if (Math.Abs(p1.EndTime.TotalMilliseconds - p2.EndTime.TotalMilliseconds) > 0.01)
                {
                    return false;
                }
            }

            return true;
        }

        private string _lastWrittenAutoBackup = string.Empty;
        private void TimerAutoBackupTick(object sender, EventArgs e)
        {
            if (_openSaveCounter > 0)
            {
                return;
            }

            string currentText = string.Empty;
            if (_subtitle != null && _subtitle.Paragraphs.Count > 0)
            {
                var saveFormat = GetCurrentSubtitleFormat();
                if (!saveFormat.IsTextBased)
                {
                    saveFormat = new SubRip();
                }

                currentText = _subtitle.ToText(saveFormat);
                if (_textAutoBackup == null)
                {
                    _textAutoBackup = currentText;
                }

                if ((Configuration.Settings.General.AutoSave ||
                     !string.IsNullOrEmpty(_textAutoBackup) && currentText.Trim() != _textAutoBackup.Trim() && !string.IsNullOrWhiteSpace(currentText)) &&
                    _lastWrittenAutoBackup != currentText)
                {
                    RestoreAutoBackup.SaveAutoBackup(_subtitle, saveFormat, currentText);
                    _lastWrittenAutoBackup = currentText;

                    if (!_cleanupHasRun)
                    {
                        // let the cleanup process be handled by worker thread
                        Task.Factory.StartNew(() => { RestoreAutoBackup.CleanAutoBackupFolder(Configuration.AutoBackupDirectory, Configuration.Settings.General.AutoBackupDeleteAfterMonths); });
                        _cleanupHasRun = true;
                    }
                }
            }

            _textAutoBackup = currentText;

            if (_subtitleOriginalFileName != null && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                var saveFormat = GetCurrentSubtitleFormat();
                if (!saveFormat.IsTextBased)
                {
                    saveFormat = new SubRip();
                }

                string currentTextOriginal = _subtitleOriginal.ToText(saveFormat);
                if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    if (_textAutoBackupOriginal == null)
                    {
                        _textAutoBackupOriginal = currentTextOriginal;
                    }

                    if (Configuration.Settings.General.AutoSave ||
                        !string.IsNullOrEmpty(_textAutoBackupOriginal) && currentTextOriginal.Trim() != _textAutoBackupOriginal.Trim() && !string.IsNullOrWhiteSpace(currentTextOriginal))
                    {
                        RestoreAutoBackup.SaveAutoBackup(_subtitleOriginal, saveFormat, currentTextOriginal);
                    }
                }

                _textAutoBackupOriginal = currentTextOriginal;
            }
        }

        private void DropVideoTick(object sender, EventArgs e)
        {
            _dragAndDropVideoTimer.Stop();
            OpenVideo(_videoFileName);
        }

        private void MediaPlayerDragDrop(object sender, DragEventArgs e)
        {
            mediaPlayer.Pause();
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length == 1)
            {
                string fileName = files[0];
                string ext = Path.GetExtension(fileName).ToLowerInvariant();
                if (UiUtil.GetVideoFileFilter(true).Contains(ext))
                {
                    if (string.IsNullOrEmpty(_fileName))
                    {
                        var dirName = Path.GetDirectoryName(fileName);
                        saveFileDialog1.InitialDirectory = dirName;
                        openFileDialog1.InitialDirectory = dirName;
                    }

                    if (fileName == _videoFileName)
                    {
                        return;
                    }

                    _videoFileName = fileName;
                    _dragAndDropVideoTimer.Start();
                }
                else
                {
                    try
                    {
                        var fi = new FileInfo(fileName);
                        if (fi.Length < Subtitle.MaxFileSize)
                        {
                            var lines = new List<string>(File.ReadAllLines(fileName));
                            foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                            {
                                if (format.IsMine(lines, fileName))
                                {
                                    OpenSubtitle(fileName, null);
                                    return;
                                }
                            }
                        }
                    }
                    catch
                    {
                        // ignore
                    }

                    MessageBox.Show(string.Format(_language.DropFileXNotAccepted, fileName));
                }
            }
            else
            {
                MessageBox.Show(_language.DropOnlyOneFile);
            }
        }

        private void MediaPlayerDragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        private void ButtonSecBack2Click(object sender, EventArgs e)
        {
            GoBackSeconds((double)numericUpDownSec2.Value);
        }

        private void ButtonForward2Click(object sender, EventArgs e)
        {
            GoBackSeconds(-(double)numericUpDownSec2.Value);
        }

        private void ButtonAdjustSecBack2Click(object sender, EventArgs e)
        {
            GoBackSeconds((double)numericUpDownSecAdjust2.Value);
        }

        private void ButtonAdjustSecForward2Click(object sender, EventArgs e)
        {
            GoBackSeconds(-(double)numericUpDownSecAdjust2.Value);
        }

        private void AudioWaveform_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WaveformNotLoadedText == _language.GeneratingWaveformInBackground)
            {
                return;
            }

            if (audioVisualizer.WavePeaks == null)
            {
                if (VideoFileNameIsUrl)
                {
                    AddEmptyWaveform();
                    return;
                }

                FixFfmpegWrongPath();

                if (string.IsNullOrEmpty(_videoFileName) || !File.Exists(_videoFileName))
                {
                    if (!OpenVideoDialog())
                    {
                        return;
                    }

                    if (string.IsNullOrEmpty(_videoFileName))
                    {
                        return;
                    }

                    if (audioVisualizer.WavePeaks != null && File.Exists(WavePeakGenerator.GetPeakWaveFileName(_videoFileName)))
                    {
                        return; // waveform already exists and is loaded
                    }
                }

                mediaPlayer.Pause();
                using (var addWaveform = new AddWaveform())
                {
                    var isVlc = mediaPlayer.VideoPlayer is LibVlcDynamic;
                    var oldVideoFileName = _videoFileName;
                    if (isVlc)
                    {
                        CloseVideoToolStripMenuItemClick(sender, e);
                    }

                    var videoAudioTrackNumber = VideoAudioTrackNumber;
                    if (isVlc && VideoAudioTrackNumber != -1)
                    {
                        videoAudioTrackNumber -= 1;
                    }

                    var peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(oldVideoFileName, videoAudioTrackNumber);
                    var spectrogramFolder = WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(oldVideoFileName, videoAudioTrackNumber);

                    if (WavePeakGenerator.IsFileValidForVisualizer(oldVideoFileName))
                    {
                        addWaveform.InitializeViaWaveFile(oldVideoFileName, peakWaveFileName, spectrogramFolder);
                    }
                    else
                    {
                        addWaveform.Initialize(oldVideoFileName, peakWaveFileName, spectrogramFolder, videoAudioTrackNumber);
                    }

                    var dialogResult = addWaveform.ShowDialog();

                    if (isVlc)
                    {
                        OpenVideo(oldVideoFileName);
                    }

                    if (dialogResult == DialogResult.OK)
                    {
                        audioVisualizer.ZoomFactor = 1.0;
                        audioVisualizer.VerticalZoomFactor = 1.0;
                        SelectZoomTextInComboBox();
                        audioVisualizer.WavePeaks = addWaveform.Peaks;
                        if (smpteTimeModedropFrameToolStripMenuItem.Checked)
                        {
                            audioVisualizer.UseSmpteDropFrameTime();
                        }

                        audioVisualizer.SetSpectrogram(addWaveform.Spectrogram);
                        timerWaveform.Start();
                    }

                    if (videoAudioTrackNumber != addWaveform.AudioTrackNumber)
                    {
                        if (mediaPlayer.VideoPlayer is LibVlcDynamic libVlc)
                        {
                            libVlc.AudioTrackNumber = addWaveform.AudioTrackNumber + 1;
                            VideoAudioTrackNumber = addWaveform.AudioTrackNumber + 1;
                        }
                        else if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
                        {
                            libMpv.AudioTrackNumber = addWaveform.AudioTrackNumber;
                            VideoAudioTrackNumber = addWaveform.AudioTrackNumber;
                        }
                    }
                }

                if (mediaPlayer.Chapters?.Length > 0)
                {
                    audioVisualizer.Chapters = mediaPlayer.Chapters;
                }
            }
        }

        private void AddEmptyWaveform()
        {
            if (mediaPlayer.Duration > 0)
            {
                var peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(_videoFileName);
                audioVisualizer.ZoomFactor = 1.0;
                audioVisualizer.VerticalZoomFactor = 1.0;
                SelectZoomTextInComboBox();
                audioVisualizer.WavePeaks = WavePeakGenerator.GenerateEmptyPeaks(peakWaveFileName, (int)mediaPlayer.Duration);
                if (smpteTimeModedropFrameToolStripMenuItem.Checked)
                {
                    audioVisualizer.UseSmpteDropFrameTime();
                }

                timerWaveform.Start();
            }
        }

        private void ReloadWaveform(string fileName, int audioTrackNumber)
        {
            if (audioVisualizer.WavePeaks != null)
            {
                audioVisualizer.WavePeaks = null;
                audioVisualizer.SetSpectrogram(null);
                audioVisualizer.ShotChanges = new List<double>();
                audioVisualizer.Chapters = Array.Empty<MatroskaChapter>();
            }

            if (mediaPlayer.VideoPlayer is LibVlcDynamic && audioTrackNumber != -1)
            {
                audioTrackNumber -= 1;
            }

            if (VideoFileNameIsUrl)
            {
                if (mediaPlayer.Duration > 0)
                {
                    ShowStatus(LanguageSettings.Current.AddWaveform.GeneratingPeakFile);
                    var peakWaveFileName1 = WavePeakGenerator.GetPeakWaveFileName(_videoFileName);
                    audioVisualizer.ZoomFactor = 1.0;
                    audioVisualizer.VerticalZoomFactor = 1.0;
                    SelectZoomTextInComboBox();
                    audioVisualizer.WavePeaks = WavePeakGenerator.GenerateEmptyPeaks(peakWaveFileName1, (int)mediaPlayer.Duration);
                    if (smpteTimeModedropFrameToolStripMenuItem.Checked)
                    {
                        audioVisualizer.UseSmpteDropFrameTime();
                    }

                    timerWaveform.Start();
                }

                return;
            }

            if (!File.Exists(_videoFileName))
            {
                return;
            }

            var peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(fileName, audioTrackNumber);
            var spectrogramFolder = WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(_videoFileName, audioTrackNumber);

            if (File.Exists(peakWaveFileName))
            {
                audioVisualizer.ZoomFactor = 1.0;
                audioVisualizer.VerticalZoomFactor = 1.0;
                SelectZoomTextInComboBox();
                audioVisualizer.WavePeaks = WavePeakData.FromDisk(peakWaveFileName);
                audioVisualizer.SetSpectrogram(SpectrogramData.FromDisk(spectrogramFolder));
                audioVisualizer.ShotChanges = ShotChangeHelper.FromDisk(_videoFileName);
                SetWaveformPosition(0, 0, 0);
                timerWaveform.Start();
            }

            if (smpteTimeModedropFrameToolStripMenuItem.Checked)
            {
                audioVisualizer.UseSmpteDropFrameTime();
            }
        }

        private void TimerWaveformTick(object sender, EventArgs e)
        {
            if (audioVisualizer.Visible && mediaPlayer.VideoPlayer != null && audioVisualizer.WavePeaks != null)
            {
                int index = -1;
                if (SubtitleListview1.SelectedIndices.Count > 0)
                {
                    index = SubtitleListview1.SelectedIndices[0];
                }

                if (audioVisualizer.Locked)
                {
                    double startPos = mediaPlayer.CurrentPosition - ((audioVisualizer.EndPositionSeconds - audioVisualizer.StartPositionSeconds) / 2.0);
                    if (startPos < 0)
                    {
                        startPos = 0;
                    }

                    SetWaveformPosition(startPos, mediaPlayer.CurrentPosition, index);
                }
                else if (mediaPlayer.CurrentPosition > audioVisualizer.EndPositionSeconds || mediaPlayer.CurrentPosition < audioVisualizer.StartPositionSeconds)
                {
                    double startPos = mediaPlayer.CurrentPosition - 0.01;
                    if (startPos < 0)
                    {
                        startPos = 0;
                    }

                    audioVisualizer.ClearSelection();
                    SetWaveformPosition(startPos, mediaPlayer.CurrentPosition, index);
                }
                else
                {
                    SetWaveformPosition(audioVisualizer.StartPositionSeconds, mediaPlayer.CurrentPosition, index);
                }

                bool paused = mediaPlayer.IsPaused;
                toolStripButtonWaveformPause.Visible = !paused;
                toolStripButtonWaveformPlay.Visible = paused;
            }
            else if (audioVisualizer.WavePeaks != null)
            {
                if (mediaPlayer.IsPaused)
                {
                    if (!toolStripButtonWaveformPlay.Visible)
                    {
                        toolStripButtonWaveformPause.Visible = false;
                        toolStripButtonWaveformPlay.Visible = true;
                    }
                }
                else if (!toolStripButtonWaveformPause.Visible)
                {
                    toolStripButtonWaveformPause.Visible = true;
                    toolStripButtonWaveformPlay.Visible = false;
                }
            }
        }

        private void AddParagraphHereToolStripMenuItemClick(object sender, EventArgs e)
        {
            audioVisualizer.ClearSelection();
            var newParagraph = new Paragraph(audioVisualizer.NewSelectionParagraph);

            mediaPlayer.Pause();

            // find index where to insert
            int index = 0;
            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                var p = _subtitle.Paragraphs[i];
                if (p.StartTime.TotalMilliseconds > newParagraph.StartTime.TotalMilliseconds &&
                    (!p.StartTime.IsMaxTime || !HasSmallerStartTimes(_subtitle, i + 1, newParagraph.StartTime.TotalMilliseconds)))
                {
                    break;
                }

                index++;
            }

            SetStyleForNewParagraph(newParagraph, index);

            MakeHistoryForUndo(_language.BeforeInsertLine);

            // create and insert
            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), index, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(index, newParagraph);

                if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                    _subtitleOriginal.Renumber();
                }

                _subtitleListViewIndex = -1;
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);

            textBoxListViewText.Focus();
            audioVisualizer.NewSelectionParagraph = null;
            UpdateSourceView();

            ShowStatus(string.Format(_language.VideoControls.NewTextInsertAtX, newParagraph.StartTime.ToShortString()));
            audioVisualizer.Invalidate();
        }

        private static bool HasSmallerStartTimes(Subtitle subtitle, int startIndex, double startMs)
        {
            for (int i = startIndex; i < subtitle.Paragraphs.Count; i++)
            {
                var p = subtitle.Paragraphs[i];
                if (startMs > p.StartTime.TotalMilliseconds && !p.StartTime.IsMaxTime)
                {
                    return true;
                }
            }

            return false;
        }

        private void AddParagraphAndPasteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AddParagraphHereToolStripMenuItemClick(sender, e);
            if (InSourceView)
            {
                var idx = FirstSelectedIndex;
                if (FirstSelectedIndex >= 0)
                {
                    _subtitle.Paragraphs[idx].Text = Clipboard.GetText();
                }

                UpdateSourceView();
            }
            else
            {
                textBoxListViewText.Text = Clipboard.GetText();
            }
        }

        private void MergeWithPreviousToolStripMenuItemClick(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                MergeBeforeToolStripMenuItemClick(null, null);
            }

            audioVisualizer.Invalidate();
        }

        private void DeleteParagraphToolStripMenuItemClick(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                ToolStripMenuItemDeleteClick(null, null);
            }

            audioVisualizer.Invalidate();
        }

        private void SplitToolStripMenuItem1Click(object sender, EventArgs e)
        {
            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                if (audioVisualizer.RightClickedParagraph.StartTime.TotalMilliseconds == _subtitle.Paragraphs[i].StartTime.TotalMilliseconds &&
                    audioVisualizer.RightClickedParagraph.EndTime.TotalMilliseconds == _subtitle.Paragraphs[i].EndTime.TotalMilliseconds)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(i, true);
                    SplitSelectedParagraph(_audioWaveformRightClickSeconds, null);
                    break;
                }
            }

            audioVisualizer.Invalidate();
        }

        private void MergeWithNextToolStripMenuItemClick(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                MergeAfterToolStripMenuItemClick(null, null);
            }

            audioVisualizer.Invalidate();
        }

        private void ExtendToPreviousToolStripMenuItemClick(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                ExtendSelectedLinesToPreviousLine();
            }

            audioVisualizer.Invalidate();
        }

        private void ExtendToNextToolStripMenuItemClick(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                ExtendSelectedLinesToNextLine();
            }

            audioVisualizer.Invalidate();
        }

        private void GoToPreviousSubtitleToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (audioVisualizer.RightClickedParagraph != null)
            {
                GoToPreviousSubtitle(audioVisualizer.RightClickedParagraph.StartTime.TotalMilliseconds);
            }
            else
            {
                GoToPreviousSubtitle(mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
            }
        }

        private void GoToNextSubtitleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.RightClickedParagraph != null)
            {
                GoToNextSubtitle(audioVisualizer.RightClickedParagraph.StartTime.TotalMilliseconds);
            }
            else
            {
                GoToNextSubtitle(mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
            }
        }

        private void ToolStripMenuItemWaveformPlaySelectionClick(object sender, EventArgs e)
        {
            WaveformPlaySelection();
        }

        private void WaveformPlaySelection(bool nearEnd = false)
        {
            if (mediaPlayer.VideoPlayer != null)
            {
                var p =
                    audioVisualizer.NewSelectionParagraph ??
                    audioVisualizer.SelectedParagraph;

                if (p != null)
                {
                    double startSeconds = p.StartTime.TotalSeconds;
                    _endSeconds = p.EndTime.TotalSeconds;
                    _playSelectionIndex = _subtitle.GetIndex(p);
                    _playSelectionIndexLoopStart = -1;

                    if (nearEnd)
                    {
                        startSeconds = Math.Max(startSeconds, _endSeconds - 1.0);
                    }

                    mediaPlayer.CurrentPosition = startSeconds;
                    UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());
                    mediaPlayer.Play();
                }
            }
        }

        private void ToolStripButtonWaveformZoomInClick(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks != null && audioVisualizer.Visible)
            {
                audioVisualizer.ZoomFactor += 0.1;
                SelectZoomTextInComboBox();
            }
        }

        private void ToolStripButtonWaveformZoomOut_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks != null && audioVisualizer.Visible)
            {
                audioVisualizer.ZoomFactor -= 0.1;
                SelectZoomTextInComboBox();
            }
        }

        private void ToolStripComboBoxWaveformSelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (toolStripComboBoxWaveform.SelectedItem is ComboBoxZoomItem item)
                {
                    audioVisualizer.ZoomFactor = item.ZoomFactor;
                }
            }
            catch
            {
                // ignore
            }
        }

        private void SelectZoomTextInComboBox()
        {
            int i = 0;
            foreach (ComboBoxZoomItem item in toolStripComboBoxWaveform.Items)
            {
                if (Math.Abs(audioVisualizer.ZoomFactor - item.ZoomFactor) < 0.001)
                {
                    toolStripComboBoxWaveform.SelectedIndex = i;
                    return;
                }

                i++;
            }
        }

        private void ToolStripButtonWaveformPauseClick(object sender, EventArgs e)
        {
            mediaPlayer.Pause();
        }

        private void ToolStripButtonWaveformPlayClick(object sender, EventArgs e)
        {
            mediaPlayer.Play();
        }

        private void ToolStripButtonLockCenterClick(object sender, EventArgs e)
        {
            toolStripButtonLockCenter.Checked = !toolStripButtonLockCenter.Checked;
            audioVisualizer.Locked = toolStripButtonLockCenter.Checked;
            Configuration.Settings.General.WaveformCenter = audioVisualizer.Locked;
        }

        private void TrackBarWaveformPositionValueChanged(object sender, EventArgs e)
        {
            mediaPlayer.CurrentPosition = trackBarWaveformPosition.Value;
        }

        private void ButtonCustomUrl_Click(object sender, EventArgs e)
        {
            RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl1);
        }

        private void ButtonCustomUrl2Click(object sender, EventArgs e)
        {
            RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl2);
        }

        private void ShowhideWaveformToolStripMenuItemClick(object sender, EventArgs e)
        {
            ToolStripButtonLayoutChooseClick(null, null);
        }

        private void AudioWaveformDragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        private void AudioWaveformDragDrop(object sender, DragEventArgs e)
        {
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length != 1)
            {
                MessageBox.Show(_language.DropOnlyOneFile);
                return;
            }

            string fileName = files[0];
            string ext = Path.GetExtension(fileName).ToLowerInvariant();
            if (ext != ".wav" || !WavePeakGenerator.IsFileValidForVisualizer(fileName))
            {
                if (audioVisualizer.WavePeaks == null && (Utilities.VideoFileExtensions.Contains(ext) || Utilities.AudioFileExtensions.Contains(ext)))
                {
                    _videoFileName = fileName;
                    AudioWaveform_Click(null, null);
                    OpenVideo(_videoFileName);
                    return;
                }

                try
                {
                    var fi = new FileInfo(fileName);
                    if (fi.Length < 1024 * 500)
                    {
                        var lines = new List<string>(File.ReadAllLines(fileName));
                        foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                        {
                            if (format.IsMine(lines, fileName))
                            {
                                OpenSubtitle(fileName, null);
                                return;
                            }
                        }
                    }
                }
                catch
                {
                }
            }

            if (ext != ".wav")
            {
                MessageBox.Show(".wav only!");
                return;
            }

            if (_videoFileName == null)
            {
                OpenVideo(fileName);
                return;
            }

            using (var addWaveform = new AddWaveform())
            {
                string peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(_videoFileName);
                string spectrogramFolder = WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(_videoFileName);
                addWaveform.InitializeViaWaveFile(fileName, peakWaveFileName, spectrogramFolder);
                if (addWaveform.ShowDialog() == DialogResult.OK)
                {
                    audioVisualizer.WavePeaks = addWaveform.Peaks;
                    audioVisualizer.SetSpectrogram(addWaveform.Spectrogram);
                    timerWaveform.Start();
                }
            }
        }

        private void ToolStripMenuItemImportBluRaySupClick(object sender, EventArgs e)
        {
            if (ContinueNewOrExit())
            {
                openFileDialog1.Title = _language.OpenBluRaySupFile;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = _language.BluRaySupFiles + "|*.sup";
                if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    if (!FileUtil.IsBluRaySup(openFileDialog1.FileName) && FileUtil.IsSpDvdSup(openFileDialog1.FileName))
                    {
                        ImportAndOcrSpDvdSup(openFileDialog1.FileName, false);
                        return;
                    }

                    ImportAndOcrBluRaySup(openFileDialog1.FileName, false);
                }
            }
        }

        private void ImportAndOcrBluRaySup(string fileName, bool showInTaskbar)
        {
            var log = new StringBuilder();
            var subtitles = BluRaySupParser.ParseBluRaySup(fileName, log);
            if (subtitles.Count == 0)
            {
                string msg = _language.BlurayNotSubtitlesFound + Environment.NewLine + Environment.NewLine + log.ToString();
                if (msg.Length > 800)
                {
                    msg = msg.Substring(0, 800);
                }

                MessageBox.Show(msg.Trim() + "...");
                return;
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                vobSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName);
                vobSubOcr.FileName = Path.GetFileName(fileName);
                if (vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBluRaySupFile);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    RefreshSelectedParagraph();
                    _fileName = Path.ChangeExtension(fileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                    _imageSubFileName = fileName;

                    Configuration.Settings.Save();
                }
                else
                {
                    _exitWhenLoaded = _loading;
                }
            }
        }

        private void ImportAndInlineBase64(Subtitle subtitle, bool showInTaskbar, string fileName)
        {
            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                IList<IBinaryParagraphWithPosition> list = new List<IBinaryParagraphWithPosition>();
                foreach (var p in subtitle.Paragraphs)
                {
                    var x = new TimedTextBase64Image.Base64PngImage()
                    {
                        Text = p.Text,
                        StartTimeCode = p.StartTime,
                        EndTimeCode = p.EndTime,
                    };
                    using (var bitmap = x.GetBitmap())
                    {
                        var nikseBmp = new NikseBitmap(bitmap);
                        var nonTransparentHeight = nikseBmp.GetNonTransparentHeight();
                        if (nonTransparentHeight > 1)
                        {
                            list.Add(x);
                        }
                    }
                }

                vobSubOcr.Initialize(list, Configuration.Settings.VobSubOcr, fileName, "");
                vobSubOcr.FileName = Path.GetFileName(fileName);
                if (vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBluRaySupFile);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    UpdateSourceView();
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    RefreshSelectedParagraph();
                    _fileName = Path.ChangeExtension(fileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;

                    Configuration.Settings.Save();
                }
                else
                {
                    _exitWhenLoaded = _loading;
                }
            }
        }

        private void SelectAllToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (InSourceView)
            {
                textBoxSource.SelectAll();
            }
            else
            {
                GetFocusedTextBox().SelectAll();
            }
        }

        private void ToolStripMenuItemSpellCheckSkipOnceClick(object sender, EventArgs e)
        {
            textBoxListViewText.DoAction(SpellCheckAction.Skip);
        }

        private void ToolStripMenuItemSpellCheckSkipAllClick(object sender, EventArgs e)
        {
            textBoxListViewText.DoAction(SpellCheckAction.SkipAll);
        }

        private void ToolStripMenuItemSpellCheckAddToDictionaryClick(object sender, EventArgs e)
        {
            textBoxListViewText.DoAction(SpellCheckAction.AddToDictionary);
        }

        private void ToolStripMenuItemSpellCheckAddToNamesClick(object sender, EventArgs e)
        {
            textBoxListViewText.DoAction(SpellCheckAction.AddToNames);
        }

        private void CutToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (InSourceView)
            {
                textBoxSource.Cut();
            }
            else
            {
                GetFocusedTextBox().Cut();
            }
        }

        private void CopyToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (InSourceView)
            {
                textBoxSource.Copy();
            }
            else
            {
                GetFocusedTextBox().Copy();
            }
        }

        private void PasteToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (InSourceView)
            {
                if (textBoxSource.Enabled)
                {
                    textBoxSource.Paste();
                }
            }
            else if (GetFocusedTextBox().Enabled)
            {
                GetFocusedTextBox().Paste();
            }
        }

        private void DeleteToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (InSourceView)
            {
                textBoxSource.SelectedText = string.Empty;
            }
            else
            {
                GetFocusedTextBox().SelectedText = string.Empty;
            }
        }

        private void NormalToolStripMenuItem1Click(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            if (tb.SelectionLength == 0)
            {
                var allText = HtmlUtil.RemoveHtmlTags(tb.Text, true);
                allText = NetflixImsc11Japanese.RemoveTags(allText);
                tb.Text = allText;
                return;
            }

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = HtmlUtil.RemoveHtmlTags(text, true);
            text = NetflixImsc11Japanese.RemoveTags(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        private SETextBox GetFocusedTextBox()
        {
            if (!textBoxListViewTextOriginal.Visible)
            {
                return textBoxListViewText;
            }

            return textBoxListViewTextOriginal.Focused ? textBoxListViewTextOriginal : textBoxListViewText;
        }

        private void TextBoxListViewToggleTag(string tag)
        {
            var tb = GetFocusedTextBox();

            string text;
            int selectionStart = tb.SelectionStart;
            var isAssa = IsAssa();

            // No text selected.
            if (tb.SelectedText.Length == 0)
            {
                text = tb.Text;

                // Split lines (split a subtitle into its lines).
                var lines = text.SplitToLines();

                // Get current line index (the line where the cursor is current located).
                int numberOfNewLines = 0;
                for (int i = 0; i < tb.SelectionStart && i < text.Length; i++)
                {
                    if (text[i] == '\n')
                    {
                        numberOfNewLines++;
                    }
                }

                int selectedLineIdx = numberOfNewLines; // Do not use 'GetLineFromCharIndex' as it also counts when lines are wrapped

                // Get line from index.
                string selectedLine = lines[selectedLineIdx];

                // Test if line at where cursor is current at is a dialog.
                bool isDialog = selectedLine.StartsWith('-') ||
                                selectedLine.StartsWith("<" + tag + ">-", StringComparison.OrdinalIgnoreCase);

                // Will be used keep cursor in its previous location after toggle/untoggle.
                int textLen = text.Length;

                // 1st set the cursor position to zero.
                tb.SelectionStart = 0;

                // If is dialog, only toggle/Untoggle line where caret/cursor is current at.
                if (isDialog)
                {
                    lines[selectedLineIdx] = HtmlUtil.ToggleTag(selectedLine, tag, false, isAssa);
                    text = string.Join(Environment.NewLine, lines);
                }
                else
                {
                    text = HtmlUtil.ToggleTag(text, tag, false, isAssa);
                }

                tb.Text = text;
                // Note: Math.Max will prevent blowing if caret is at the begining and tag was untoggled.
                tb.SelectionStart = textLen > text.Length ? Math.Max(selectionStart - 3, 0) : selectionStart + 3;
            }
            else
            {
                string post = string.Empty;
                string pre = string.Empty;
                // There is text selected
                text = tb.SelectedText;
                while (text.EndsWith(' ') || text.EndsWith(Environment.NewLine, StringComparison.Ordinal) || text.StartsWith(' ') || text.StartsWith(Environment.NewLine, StringComparison.Ordinal))
                {
                    if (text.EndsWith(' '))
                    {
                        post += " ";
                        text = text.Remove(text.Length - 1);
                    }

                    if (text.EndsWith(Environment.NewLine, StringComparison.Ordinal))
                    {
                        post += Environment.NewLine;
                        text = text.Remove(text.Length - 2);
                    }

                    if (text.StartsWith(' '))
                    {
                        pre += " ";
                        text = text.Remove(0, 1);
                    }

                    if (text.StartsWith(Environment.NewLine, StringComparison.Ordinal))
                    {
                        pre += Environment.NewLine;
                        text = text.Remove(0, 2);
                    }
                }

                text = HtmlUtil.ToggleTag(text, tag, false, isAssa);
                // Update text and maintain selection.
                if (pre.Length > 0)
                {
                    text = pre + text;
                    selectionStart += pre.Length;
                }

                if (post.Length > 0)
                {
                    text += post;
                }

                tb.SelectedText = text;
                tb.SelectionStart = selectionStart;
                tb.SelectionLength = text.Length;
            }
        }

        private bool IsAssa()
        {
            return GetCurrentSubtitleFormat().GetType() == typeof(AdvancedSubStationAlpha);
        }

        private void BoldToolStripMenuItem1Click(object sender, EventArgs e)
        {
            TextBoxListViewToggleTag(HtmlUtil.TagBold);
        }

        private void ItalicToolStripMenuItem1Click(object sender, EventArgs e)
        {
            TextBoxListViewToggleTag(HtmlUtil.TagItalic);
        }

        private void UnderlineToolStripMenuItem1Click(object sender, EventArgs e)
        {
            TextBoxListViewToggleTag(HtmlUtil.TagUnderline);
        }

        private void ColorToolStripMenuItem1Click(object sender, EventArgs e)
        {
            string color;
            var formatType = GetCurrentSubtitleFormat().GetType();
            if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(WebVTT) || formatType == typeof(WebVTTFileWithLineNumber))
            {
                using (var form = new ColorChooser { Color = Configuration.Settings.General.LastColorPickerColor })
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }

                    color = Utilities.ColorToHexWithTransparency(form.Color);
                    Configuration.Settings.General.LastColorPickerColor = form.Color;
                }
            }
            else if (formatType == typeof(Ebu))
            {
                using (var form = new EbuColorPicker(true))
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }

                    color = form.Color;
                }
            }
            else if (formatType == typeof(ScenaristClosedCaptions) || formatType == typeof(ScenaristClosedCaptionsDropFrame))
            {
                using (var form = new EbuColorPicker(false))
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }

                    color = form.Color;
                }
            }
            else
            {
                using (var form = new ColorChooser { Color = GetColorFromFirstLine(Configuration.Settings.General.LastColorPickerColor), ShowAlpha = false })
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }

                    color = Utilities.ColorToHex(form.Color);
                    Configuration.Settings.General.LastColorPickerColor = form.Color;
                }
            }

            SetSelectedTextColor(color);
        }

        private void FontNameToolStripMenuItemClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            // font name
            string text = tb.SelectedText;
            bool allSelected;
            if (string.IsNullOrEmpty(text) && tb.Text.Length > 0)
            {
                text = tb.Text;
                tb.SelectAll();
                allSelected = true;
            }
            else
            {
                allSelected = tb.Text.Length == tb.SelectionLength;
            }

            int selectionStart = tb.SelectionStart;

            using (var form = new ChooseFontName())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    bool done = false;

                    if (IsAssa())
                    {
                        if (allSelected)
                        {
                            text = $"{{\\fn{form.FontName}}}{text}";
                        }
                        else
                        {
                            var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                            if (p != null)
                            {
                                var style = AdvancedSubStationAlpha.GetSsaStyle(p.Extra, _subtitle.Header);
                                text = $"{{\\fn{form.FontName}}}{text}{{\\fn{style.FontName}}}";
                            }
                        }

                        tb.SelectedText = text;
                        tb.SelectionStart = selectionStart;
                        tb.SelectionLength = text.Length;
                        return;
                    }

                    string pre = string.Empty;
                    if (selectionStart == 0 && text.StartsWith("{\\", StringComparison.Ordinal) && text.IndexOf('}') >= 0)
                    {
                        int endIndex = text.IndexOf('}') + 1;
                        pre = text.Substring(0, endIndex);
                        text = text.Remove(0, endIndex);
                    }

                    if (text.StartsWith("<font ", StringComparison.OrdinalIgnoreCase))
                    {
                        int end = text.IndexOf('>');
                        if (end > 0)
                        {
                            string f = text.Substring(0, end);
                            if (f.Contains(" color=", StringComparison.OrdinalIgnoreCase) && !f.Contains(" face=", StringComparison.OrdinalIgnoreCase))
                            {
                                var start = text.IndexOf(" color=", StringComparison.OrdinalIgnoreCase);
                                text = text.Insert(start, string.Format(" face=\"{0}\"", form.FontName));
                                done = true;
                            }
                            else if (f.Contains(" face=", StringComparison.OrdinalIgnoreCase))
                            {
                                int faceStart = f.IndexOf(" face=", StringComparison.OrdinalIgnoreCase);
                                if (text.IndexOf('"', faceStart + " face=".Length + 1) > 0)
                                {
                                    end = text.IndexOf('"', faceStart + " face=".Length + 1);
                                }

                                text = text.Substring(0, faceStart) + string.Format(" face=\"{0}", form.FontName) + text.Substring(end);
                                done = true;
                            }
                        }
                    }

                    if (!done)
                    {
                        text = $"{pre}<font face=\"{form.FontName}\">{text}</font>";
                    }
                    else
                    {
                        text = pre + text;
                    }

                    tb.SelectedText = text;
                    tb.SelectionStart = selectionStart;
                    tb.SelectionLength = text.Length;
                }
            }
        }

        public void SetSubtitle(Subtitle subtitle, string message)
        {
            _subtitle = subtitle;
            SubtitleListview1.Fill(subtitle, _subtitleOriginal);
            ShowStatus(message);
        }

        #region Networking

        private void StartServerToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var networkNew = new NetworkStart())
            {
                _networkSession = new NikseWebServiceSession(_subtitle, _subtitleOriginal, TimerWebServiceTick, OnUpdateUserLogEntries);
                networkNew.Initialize(_networkSession, _fileName);
                if (networkNew.ShowDialog(this) == DialogResult.OK)
                {
                    _networkSession.AppendToLog(string.Format(_language.XStartedSessionYAtZ, _networkSession.CurrentUser.UserName, _networkSession.SessionId, DateTime.Now.ToLongTimeString()));
                    toolStripStatusNetworking.Visible = true;
                    toolStripStatusNetworking.Text = _language.NetworkMode;
                    EnableDisableControlsNotWorkingInNetworkMode(false);
                    SubtitleListview1.ShowNetworkColumn(_language.UserAndAction);
                    SubtitleListview1.AutoSizeAllColumns(this);
                    TimerWebServiceTick(null, null);
                }
                else
                {
                    _networkSession = null;
                }
            }
        }

        private void JoinSessionToolStripMenuItemClick(object sender, EventArgs e)
        {
            _networkSession = new NikseWebServiceSession(_subtitle, _subtitleOriginal, TimerWebServiceTick, OnUpdateUserLogEntries);
            using (var networkJoin = new NetworkJoin())
            {
                networkJoin.Initialize(_networkSession);

                if (networkJoin.ShowDialog(this) == DialogResult.OK)
                {
                    _subtitle = _networkSession.Subtitle;
                    _subtitleOriginal = _networkSession.OriginalSubtitle;
                    if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                    {
                        SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
                    }

                    _fileName = networkJoin.FileName;
                    SetTitle();
                    toolStripStatusNetworking.Visible = true;
                    toolStripStatusNetworking.Text = _language.NetworkMode;
                    EnableDisableControlsNotWorkingInNetworkMode(false);
                    _networkSession.AppendToLog(string.Format(_language.XStartedSessionYAtZ, _networkSession.CurrentUser.UserName, _networkSession.SessionId, DateTime.Now.ToLongTimeString()));
                    SubtitleListview1.ShowNetworkColumn(_language.UserAndAction);
                    SubtitleListview1.AutoSizeAllColumns(this);
                    _subtitleListViewIndex = -1;
                    _oldSelectedParagraph = null;

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                    {
                        buttonUnBreak.Visible = false;
                        buttonAutoBreak.Visible = false;
                        buttonSplitLine.Visible = false;

                        textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                        textBoxListViewText.Width = (groupBoxEdit.Width - (textBoxListViewText.Left + 10)) / 2;
                        textBoxListViewTextOriginal.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                        textBoxListViewTextOriginal.Left = textBoxListViewText.Left + textBoxListViewText.Width + 3;
                        textBoxListViewTextOriginal.Width = textBoxListViewText.Width;
                        textBoxListViewTextOriginal.Visible = true;
                        labelOriginalText.Text = _languageGeneral.OriginalText;
                        labelOriginalText.Visible = true;
                        labelOriginalCharactersPerSecond.Visible = true;
                        labelTextOriginalLineLengths.Visible = true;
                        labelOriginalSingleLine.Visible = true;
                        labelOriginalSingleLinePixels.Visible = true;
                        labelTextOriginalLineTotal.Visible = true;

                        labelCharactersPerSecond.Left = textBoxListViewText.Left + (textBoxListViewText.Width - labelCharactersPerSecond.Width);
                        labelTextLineTotal.Left = textBoxListViewText.Left + (textBoxListViewText.Width - labelTextLineTotal.Width);
                        AddOriginal();
                        Main_Resize(null, null);
                        _changeOriginalSubtitleHash = GetFastSubtitleOriginalHash();
                    }
                    else
                    {
                        RemoveOriginal(false, true);
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    TimerWebServiceTick(null, null);
                }
                else
                {
                    _networkSession = null;
                }
            }
        }

        private void EnableDisableControlsNotWorkingInNetworkMode(bool enabled)
        {
            //Top menu
            newToolStripMenuItem.Enabled = enabled;
            openToolStripMenuItem.Enabled = enabled;
            reopenToolStripMenuItem.Enabled = enabled;
            toolStripMenuItemOpenContainingFolder.Enabled = enabled;
            toolStripMenuItemCompare.Enabled = enabled;
            toolStripMenuItemVerifyCompleteness.Enabled = enabled;
            toolStripMenuItemImportFromVideo.Enabled = enabled;
            toolStripMenuItemImportDvdSubtitles.Enabled = enabled;
            toolStripMenuItemImportSubIdx.Enabled = enabled;
            toolStripMenuItemImportBluRaySup.Enabled = enabled;
            toolStripMenuItemImportManualAnsi.Enabled = enabled;
            toolStripMenuItemImportText.Enabled = enabled;
            toolStripMenuItemImportTimeCodes.Enabled = enabled;

            showHistoryforUndoToolStripMenuItem.Enabled = enabled;
            multipleReplaceToolStripMenuItem.Enabled = enabled;

            toolsToolStripMenuItem.Enabled = enabled;

            toolStripMenuItemSynchronization.Enabled = enabled;

            toolStripMenuItemAutoTranslate.Enabled = enabled;

            //Toolbar
            toolStripButtonFileNew.Enabled = enabled;
            toolStripButtonFileOpen.Enabled = enabled;
            toolStripMenuItemOpenKeepVideo.Enabled = enabled;
            toolStripMenuItemRestoreAutoBackup.Enabled = enabled;
            toolStripButtonVisualSync.Enabled = enabled;

            // textbox source
            textBoxSource.ReadOnly = !enabled;
        }

        internal void TimerWebServiceTick(object sender, EventArgs e)
        {
            if (_networkSession == null)
            {
                return;
            }

            List<int> deleteIndices = new List<int>();
            NetworkGetSendUpdates(deleteIndices, 0, null);
        }

        private void NetworkGetSendUpdates(List<int> deleteIndices, int insertIndex, Paragraph insertParagraph)
        {
            _networkSession.TimerStop();

            bool doReFill = false;
            bool updateListViewStatus = false;
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            string message = string.Empty;

            int numberOfLines = 0;
            List<SeNetworkService.SeUpdate> updates = null;
            int numberOfRetries = 10;
            while (numberOfRetries > 0)
            {
                numberOfRetries--;
                try
                {
                    updates = _networkSession.GetUpdates(out message, out numberOfLines);
                    numberOfRetries = 0;
                }
                catch (Exception exception)
                {
                    if (numberOfRetries <= 0)
                    {
                        if (exception.InnerException != null)
                        {
                            MessageBox.Show(string.Format(_language.NetworkUnableToConnectToServer, exception.InnerException.Message + Environment.NewLine + exception.InnerException.StackTrace));
                        }
                        else
                        {
                            MessageBox.Show(string.Format(_language.NetworkUnableToConnectToServer, exception.Message + Environment.NewLine + exception.StackTrace));
                        }

                        _networkSession.TimerStop();
                        if (_networkChat != null && !_networkChat.IsDisposed)
                        {
                            _networkChat.Close();
                            _networkChat = null;
                        }

                        _networkSession = null;
                        EnableDisableControlsNotWorkingInNetworkMode(true);
                        toolStripStatusNetworking.Visible = false;
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Network);
                        _networkChat = null;
                        return;
                    }

                    Application.DoEvents();
                    Thread.Sleep(250);
                }
            }

            int currentSelectedIndex = -1;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                currentSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            }

            int oldCurrentSelectedIndex = currentSelectedIndex;
            if (message == "OK")
            {
                foreach (var update in updates)
                {
                    if (!string.IsNullOrEmpty(update.Text))
                    {
                        if (!update.Text.Contains(Environment.NewLine))
                        {
                            update.Text = update.Text.Replace("\n", Environment.NewLine);
                        }

                        update.Text = WebUtility.HtmlDecode(update.Text).Replace("<br />", Environment.NewLine);
                    }

                    if (update.User.Ip != _networkSession.CurrentUser.Ip || update.User.UserName != _networkSession.CurrentUser.UserName)
                    {
                        if (update.Action == "USR")
                        {
                            _networkSession.Users.Add(update.User);
                            if (_networkChat != null && !_networkChat.IsDisposed)
                            {
                                _networkChat.AddUser(update.User);
                            }

                            _networkSession.AppendToLog(string.Format(_language.NetworkNewUser, update.User.UserName, update.User.Ip));
                        }
                        else if (update.Action == "MSG")
                        {
                            _networkSession.ChatLog.Add(new NikseWebServiceSession.ChatEntry { User = update.User, Message = update.Text });
                            if (_networkChat == null || _networkChat.IsDisposed)
                            {
                                _networkChat = new NetworkChat();
                                _networkChat.Initialize(_networkSession);
                                _networkChat.Show(this);
                            }
                            else
                            {
                                _networkChat.AddChatMessage(update.User, update.Text);
                            }

                            if (!string.IsNullOrEmpty(Configuration.Settings.NetworkSettings.NewMessageSound) && File.Exists(Configuration.Settings.NetworkSettings.NewMessageSound))
                            {
                                try
                                {
                                    using (var soundPlayer = new System.Media.SoundPlayer(Configuration.Settings.NetworkSettings.NewMessageSound))
                                    {
                                        soundPlayer.Play();
                                    }
                                }
                                catch
                                {
                                }
                            }

                            _networkSession.AppendToLog(string.Format(_language.NetworkMessage, update.User.UserName, update.User.Ip, update.Text));
                        }
                        else if (update.Action == "DEL")
                        {
                            doReFill = true;
                            _subtitle.Paragraphs.RemoveAt(update.Index);
                            _networkSession.LastSubtitle?.Paragraphs.RemoveAt(update.Index);

                            _networkSession.AppendToLog(string.Format(_language.NetworkDelete, update.User.UserName, update.User.Ip, update.Index));
                            _networkSession.AdjustUpdateLogToDelete(update.Index);

                            if (deleteIndices.Count > 0)
                            {
                                for (int i = deleteIndices.Count - 1; i >= 0; i--)
                                {
                                    int index = deleteIndices[i];
                                    if (index == update.Index)
                                    {
                                        deleteIndices.RemoveAt(i);
                                    }
                                    else if (index > update.Index)
                                    {
                                        deleteIndices[i] = index - 1;
                                    }
                                }
                            }

                            if (insertIndex > update.Index)
                            {
                                insertIndex--;
                            }

                            if (currentSelectedIndex >= 0 && currentSelectedIndex > update.Index)
                            {
                                currentSelectedIndex--;
                            }
                        }
                        else if (update.Action == "INS")
                        {
                            doReFill = true;
                            var p = new Paragraph(update.Text, update.StartMilliseconds, update.EndMilliseconds);
                            _subtitle.Paragraphs.Insert(update.Index, p);
                            _networkSession.LastSubtitle?.Paragraphs.Insert(update.Index, new Paragraph(p));

                            _networkSession.AppendToLog(string.Format(_language.NetworkInsert, update.User.UserName, update.User.Ip, update.Index, UiUtil.GetListViewTextFromString(update.Text)));
                            _networkSession.AddToWsUserLog(update.User, update.Index, update.Action, false);
                            updateListViewStatus = true;
                            _networkSession.AdjustUpdateLogToInsert(update.Index);

                            if (deleteIndices.Count > 0)
                            {
                                for (int i = deleteIndices.Count - 1; i >= 0; i--)
                                {
                                    int index = deleteIndices[i];
                                    if (index > update.Index)
                                    {
                                        deleteIndices[i] = index + 1;
                                    }
                                }
                            }

                            if (insertIndex > update.Index)
                            {
                                insertIndex++;
                            }

                            if (currentSelectedIndex >= 0 && currentSelectedIndex > update.Index)
                            {
                                currentSelectedIndex++;
                            }
                        }
                        else if (update.Action == "UPD")
                        {
                            updateListViewStatus = true;
                            var p = _subtitle.GetParagraphOrDefault(update.Index);
                            if (p != null)
                            {
                                p.StartTime.TotalMilliseconds = update.StartMilliseconds;
                                p.EndTime.TotalMilliseconds = update.EndMilliseconds;
                                p.Text = update.Text;
                                SubtitleListview1.SetTimeAndText(update.Index, p, _subtitle.GetParagraphOrDefault(update.Index + 1));
                                _networkSession.AppendToLog(string.Format(_language.NetworkUpdate, update.User.UserName, update.User.Ip, update.Index, UiUtil.GetListViewTextFromString(update.Text)));
                                _networkSession.AddToWsUserLog(update.User, update.Index, update.Action, true);
                                updateListViewStatus = true;
                            }

                            if (_networkSession.LastSubtitle != null)
                            {
                                p = _networkSession.LastSubtitle.GetParagraphOrDefault(update.Index);
                                if (p != null)
                                {
                                    p.StartTime.TotalMilliseconds = update.StartMilliseconds;
                                    p.EndTime.TotalMilliseconds = update.EndMilliseconds;
                                    p.Text = update.Text;
                                }
                            }
                        }
                        else if (update.Action == "BYE")
                        {
                            if (_networkChat != null && !_networkChat.IsDisposed)
                            {
                                _networkChat.RemoveUser(update.User);
                            }

                            SeNetworkService.SeUser removeUser = null;
                            foreach (var user in _networkSession.Users)
                            {
                                if (user.UserName == update.User.UserName)
                                {
                                    removeUser = user;
                                    break;
                                }
                            }

                            if (removeUser != null)
                            {
                                _networkSession.Users.Remove(removeUser);
                            }

                            _networkSession.AppendToLog(string.Format(_language.NetworkByeUser, update.User.UserName, update.User.Ip));
                        }
                        else
                        {
                            _networkSession.AppendToLog("UNKNOWN ACTION: " + update.Action + " by " + update.User.UserName + " (" + update.User.Ip + ")");
                        }
                    }
                }

                if (numberOfLines != _subtitle.Paragraphs.Count)
                {
                    _subtitle = _networkSession.ReloadSubtitle();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    UpdateListviewWithUserLogEntries();
                    _networkSession.LastSubtitle = new Subtitle(_subtitle);
                    _oldSelectedParagraph = null;
                    SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                    _networkSession.TimerStart();
                    RefreshSelectedParagraph();
                    return;
                }

                if (deleteIndices.Count > 0)
                {
                    deleteIndices.Sort();
                    deleteIndices.Reverse();
                    foreach (int i in deleteIndices)
                    {
                        _subtitle.Paragraphs.RemoveAt(i);
                        if (_networkSession.LastSubtitle != null && i < _networkSession.LastSubtitle.Paragraphs.Count)
                        {
                            _networkSession.LastSubtitle.Paragraphs.RemoveAt(i);
                        }
                    }

                    _networkSession.DeleteLines(deleteIndices);
                    doReFill = true;
                }

                if (insertIndex >= 0 && insertParagraph != null)
                {
                    _subtitle.Paragraphs.Insert(insertIndex, insertParagraph);
                    if (_networkSession.LastSubtitle != null && insertIndex < _networkSession.LastSubtitle.Paragraphs.Count)
                    {
                        _networkSession.LastSubtitle.Paragraphs.Insert(insertIndex, insertParagraph);
                    }

                    _networkSession.InsertLine(insertIndex, insertParagraph);
                    doReFill = true;
                }

                _networkSession.CheckForAndSubmitUpdates(); // updates only (no inserts/deletes)
            }
            else
            {
                if (message == "Session not found!")
                {
                    message = _networkSession.Restart();
                    if (message == "Reload")
                    {
                        _subtitle = _networkSession.ReloadSubtitle();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        UpdateListviewWithUserLogEntries();
                        _networkSession.LastSubtitle = new Subtitle(_subtitle);
                        _oldSelectedParagraph = null;
                        SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                        _networkSession.TimerStart();
                        RefreshSelectedParagraph();
                        return;
                    }

                    if (message == "OK")
                    {
                        _networkSession.TimerStart();
                        RefreshSelectedParagraph();
                        return;
                    }
                }
                else if (message == "User not found!")
                {
                    message = _networkSession.ReJoin();
                    if (message == "Reload")
                    {
                        _subtitle = _networkSession.ReloadSubtitle();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        UpdateListviewWithUserLogEntries();
                        _networkSession.LastSubtitle = new Subtitle(_subtitle);
                        _oldSelectedParagraph = null;
                        SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                        _networkSession.TimerStart();
                        RefreshSelectedParagraph();
                        return;
                    }
                }

                MessageBox.Show(message);
                LeaveSessionToolStripMenuItemClick(null, null);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                return;
            }

            if (doReFill)
            {
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                UpdateListviewWithUserLogEntries();

                if (oldCurrentSelectedIndex != currentSelectedIndex)
                {
                    _oldSelectedParagraph = null;
                    _subtitleListViewIndex = currentSelectedIndex;
                    SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex);
                }
                else if (_oldSelectedParagraph != null)
                {
                    var p = _subtitle.GetFirstAlike(_oldSelectedParagraph);
                    if (p == null)
                    {
                        var tmp = new Paragraph(_oldSelectedParagraph) { Text = textBoxListViewText.Text };
                        p = _subtitle.GetFirstAlike(tmp);
                    }

                    if (p == null)
                    {
                        int idx = oldCurrentSelectedIndex;
                        if (idx >= _subtitle.Paragraphs.Count)
                        {
                            idx = _subtitle.Paragraphs.Count - 1;
                        }

                        if (idx >= 0 && idx < _subtitle.Paragraphs.Count)
                        {
                            SubtitleListview1.SelectIndexAndEnsureVisible(idx);
                            _listViewTextUndoIndex = -1;
                            SubtitleListView1SelectedIndexChange();
                            textBoxListViewText.Text = _subtitle.Paragraphs[idx].Text;
                        }
                    }
                    else
                    {
                        _subtitleListViewIndex = _subtitle.GetIndex(p);
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex);
                        _listViewTextUndoIndex = -1;
                        SubtitleListView1SelectedIndexChange();
                    }
                }
            }
            else if (updateListViewStatus)
            {
                UpdateListviewWithUserLogEntries();
            }

            _networkSession.LastSubtitle = new Subtitle(_subtitle);
            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            _networkSession.TimerStart();
        }

        private void UpdateListviewWithUserLogEntries()
        {
            SubtitleListview1.BeginUpdate();
            foreach (UpdateLogEntry entry in _networkSession.UpdateLog)
            {
                SubtitleListview1.SetNetworkText(entry.Index, entry.ToString(), Utilities.GetColorFromUserName(entry.UserName));
            }

            SubtitleListview1.EndUpdate();
        }

        private void LeaveSessionToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                _networkSession.Leave();
            }

            if (_networkChat != null && !_networkChat.IsDisposed)
            {
                _networkChat.Close();
                _networkChat = null;
            }

            _networkSession = null;
            EnableDisableControlsNotWorkingInNetworkMode(true);
            toolStripStatusNetworking.Visible = false;
            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Network);
            _networkChat = null;
        }

        private void ToolStripMenuItemNetworkingDropDownOpening(object sender, EventArgs e)
        {
            startServerToolStripMenuItem.Visible = _networkSession == null;
            joinSessionToolStripMenuItem.Visible = _networkSession == null;
            showSessionKeyLogToolStripMenuItem.Visible = _networkSession != null;
            leaveSessionToolStripMenuItem.Visible = _networkSession != null;
            chatToolStripMenuItem.Visible = _networkSession != null;
        }

        internal void OnUpdateUserLogEntries(object sender, EventArgs e)
        {
            UpdateListviewWithUserLogEntries();
        }

        private void ToolStripStatusNetworkingClick(object sender, EventArgs e)
        {
            ShowSessionKeyLogToolStripMenuItemClick(null, null);
        }

        private void ShowSessionKeyLogToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var networkLog = new NetworkLogAndInfo())
            {
                networkLog.Initialize(_networkSession);
                networkLog.ShowDialog(this);
            }
        }

        private void ChatToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_networkSession != null)
            {
                if (_networkChat == null || _networkChat.IsDisposed)
                {
                    _networkChat = new NetworkChat();
                    _networkChat.Initialize(_networkSession);
                    _networkChat.Show(this);
                }
                else
                {
                    _networkChat.WindowState = FormWindowState.Normal;
                }
            }
        }

        #endregion Networking


        private Control _videoPlayerUndockParent;

        private void UnDockVideoPlayer()
        {
            bool firstUndock = _videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed;

            _videoPlayerUndocked = new VideoPlayerUndocked(this, mediaPlayer);

            if (firstUndock)
            {
                Configuration.Settings.General.UndockedVideoPosition = _videoPlayerUndocked.Left + @";" + _videoPlayerUndocked.Top + @";" + _videoPlayerUndocked.Width + @";" + _videoPlayerUndocked.Height;
            }

            Control control = mediaPlayer;
            _videoPlayerUndockParent = control.Parent;
            if (control.Parent != null)
            {
                control.Parent.Controls.Remove(control);
            }

            if (control != null)
            {
                control.Top = 0;
                control.Left = 0;
                control.Width = _videoPlayerUndocked.PanelContainer.Width;
                control.Height = _videoPlayerUndocked.PanelContainer.Height;
                _videoPlayerUndocked.PanelContainer.Dock = DockStyle.Fill;
                _videoPlayerUndocked.PanelContainer.Controls.Add(control);
                control.Dock = DockStyle.Fill;
            }
        }

        public void ReDockVideoPlayer(Control control)
        {
            if (_videoPlayerUndockParent != null)
            {
                _videoPlayerUndockParent.Controls.Add(control);
                control.Dock = DockStyle.Fill;
            }

            mediaPlayer.FontSizeFactor = 1.0F;
            mediaPlayer.SetSubtitleFont();
            mediaPlayer.SubtitleText = string.Empty;
        }

        private Control _waveformUndockParent;

        private void UnDockWaveform()
        {
            _waveformUndocked = new WaveformUndocked(this);

            var control = audioVisualizer;
            _waveformUndockParent = control.Parent;
            if (_waveformUndockParent != null)
            {
                _waveformUndockParent.Controls.Remove(control);
            }

            control.Top = 0;
            control.Left = 0;
            control.Width = _waveformUndocked.PanelContainer.Width;
            control.Height = _waveformUndocked.PanelContainer.Height - panelWaveformControls.Height;
            _waveformUndocked.PanelContainer.Controls.Add(control);

            var control2 = (Control)panelWaveformControls;
            groupBoxVideo.Controls.Remove(control2);
            control2.Top = control.Height;
            control2.Left = 0;
            _waveformUndocked.PanelContainer.Controls.Add(control2);

            var control3 = (Control)trackBarWaveformPosition;
            groupBoxVideo.Controls.Remove(control3);
            control3.Top = control.Height;
            control3.Left = control2.Width + 2;
            control3.Width = _waveformUndocked.PanelContainer.Width - control3.Left;
            _waveformUndocked.PanelContainer.Controls.Add(control3);
        }

        public void ReDockWaveform(Control waveform, Control buttons, Control trackBar)
        {
            groupBoxVideo.Controls.Add(waveform);
            waveform.Top = 30;
            waveform.Height = groupBoxVideo.Height - (waveform.Top + buttons.Height + 10);

            groupBoxVideo.Controls.Add(buttons);
            buttons.Top = waveform.Top + waveform.Height + 5;

            groupBoxVideo.Controls.Add(trackBar);
            trackBar.Top = buttons.Top;
        }

        private void UnDockVideoButtons()
        {
            _videoControlsUndocked = new VideoControlsUndocked(this);
            var control = tabControlModes;
            groupBoxVideo.Controls.Remove(control);
            control.Top = 25;
            control.Left = 0;
            control.Height = _videoControlsUndocked.PanelContainer.Height - 4;
            _videoControlsUndocked.PanelContainer.Controls.Add(control);

            groupBoxVideo.Controls.Remove(checkBoxSyncListViewWithVideoWhilePlaying);
            _videoControlsUndocked.PanelContainer.Controls.Add(checkBoxSyncListViewWithVideoWhilePlaying);
            checkBoxSyncListViewWithVideoWhilePlaying.Top = 5;
            checkBoxSyncListViewWithVideoWhilePlaying.Left = 5;

            splitContainerMain.Panel2Collapsed = true;
            splitContainer1.Panel2Collapsed = true;
        }

        public void ReDockVideoButtons(Control videoButtons, Control checkBoxSyncSubWithVideo)
        {
            groupBoxVideo.Controls.Add(videoButtons);
            videoButtons.Top = 12;
            videoButtons.Left = 5;

            groupBoxVideo.Controls.Add(checkBoxSyncSubWithVideo);
            checkBoxSyncSubWithVideo.Top = 11;
            checkBoxSyncSubWithVideo.Left = videoButtons.Left + videoButtons.Width + 5;
        }

        private void UndockVideoControlsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (Configuration.Settings.General.Undocked)
            {
                return;
            }

            Configuration.Settings.General.Undocked = true;
            var top = Math.Max(Top, 0);
            var left = Math.Max(Left, 0);
            UnDockVideoPlayer();
            try
            {
                splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - 109;
            }
            catch
            {
                // ignore
            }

            if (IsVideoVisible)
            {
                _videoPlayerUndocked.Show(this);
                if (_videoPlayerUndocked.Top < 0 || _videoPlayerUndocked.Left < 0)
                {
                    _videoPlayerUndocked.WindowState = FormWindowState.Normal;
                    _videoPlayerUndocked.Top = top + 40;
                    _videoPlayerUndocked.Left = Math.Abs(left - 20);
                    _videoPlayerUndocked.Width = 600;
                    _videoPlayerUndocked.Height = 400;
                }
            }

            UnDockWaveform();
            if (IsVideoVisible)
            {
                _waveformUndocked.Show(this);
                if (_waveformUndocked.Top < 0 || _waveformUndocked.Left < 0)
                {
                    _waveformUndocked.WindowState = FormWindowState.Normal;
                    _waveformUndocked.Top = top + 60;
                    _waveformUndocked.Left = Math.Abs(left - 15);
                    _waveformUndocked.Width = 600;
                    _waveformUndocked.Height = 200;
                }
            }

            UnDockVideoButtons();
            _videoControlsUndocked.Show(this);
            if (_videoControlsUndocked.Top < 0 || _videoControlsUndocked.Left < 0)
            {
                _videoControlsUndocked.WindowState = FormWindowState.Normal;
                _videoControlsUndocked.Top = top + 40;
                _videoControlsUndocked.Left = Math.Abs(left - 10);
                _videoControlsUndocked.Width = tabControlModes.Width + 20;
                _videoControlsUndocked.Height = tabControlModes.Height + 65;
            }

            _isVideoControlsUndocked = true;
            SetUndockedWindowsTitle();

            undockVideoControlsToolStripMenuItem.Visible = false;
            redockVideoControlsToolStripMenuItem.Visible = true;

            TabControlModes_SelectedIndexChanged(null, null);
            _videoControlsUndocked.Refresh();

            SetLayout(LayoutManager.LayoutNoVideo, true);
        }

        public void RedockVideoControlsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!Configuration.Settings.General.Undocked)
            {
                return;
            }

            _textHeightResizeIgnoreUpdate = DateTime.UtcNow.Ticks;
            mediaPlayer.ShowNonFullScreenControls();

            SaveUndockedPositions();

            Configuration.Settings.General.Undocked = false;

            if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
            {
                var control = _videoControlsUndocked.PanelContainer.Controls[0];
                control.Dock = DockStyle.None;
                var controlCheckBox = _videoControlsUndocked.PanelContainer.Controls[1];
                _videoControlsUndocked.PanelContainer.Controls.Clear();
                ReDockVideoButtons(control, controlCheckBox);
                _videoControlsUndocked.Close();
                _videoControlsUndocked = null;
            }

            if (_waveformUndocked != null && !_waveformUndocked.IsDisposed)
            {
                var controlWaveform = _waveformUndocked.PanelContainer.Controls[0];
                var controlButtons = _waveformUndocked.PanelContainer.Controls[1];
                var controlTrackBar = _waveformUndocked.PanelContainer.Controls[2];
                _waveformUndocked.PanelContainer.Controls.Clear();
                ReDockWaveform(controlWaveform, controlButtons, controlTrackBar);
                _waveformUndocked.Close();
                _waveformUndocked = null;
            }

            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                var control = mediaPlayer;
                if (mediaPlayer.Parent != null)
                {
                    mediaPlayer.Parent.Controls.Remove(control);
                }

                ReDockVideoPlayer(control);
                _videoPlayerUndocked.Close();
                _videoPlayerUndocked = null;
                mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
            }

            _isVideoControlsUndocked = false;
            _videoPlayerUndocked = null;
            _waveformUndocked = null;
            _videoControlsUndocked = null;
            ShowVideoPlayer();
            SetLayout(_layout, true);
            mediaPlayer.Invalidate();
            Refresh();

            undockVideoControlsToolStripMenuItem.Visible = true;
            redockVideoControlsToolStripMenuItem.Visible = false;
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);

            _textHeightResizeIgnoreUpdate = 0;
            Main_ResizeEnd(null, null);
        }

        private void ToolStripMenuItemInsertSubtitleClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                if (!File.Exists(openFileDialog1.FileName))
                {
                    return;
                }

                var fi = new FileInfo(openFileDialog1.FileName);
                if (fi.Length > 1024 * 1024 * 10) // max 10 mb
                {
                    var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, openFileDialog1.FileName);
                    if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                MakeHistoryForUndo(string.Format(_language.BeforeInsertLine, openFileDialog1.FileName));

                var subtitle = new Subtitle();
                SubtitleFormat format = subtitle.LoadSubtitle(openFileDialog1.FileName, out var _, null);

                if (format != null)
                {
                    SaveSubtitleListviewIndices();
                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        subtitle.RemoveEmptyLines();
                    }

                    int index = FirstSelectedIndex + 1;
                    if (index < 0)
                    {
                        index = 0;
                    }

                    var last = _subtitle.GetParagraphOrDefault(index - 1);
                    var newFirst = subtitle.GetParagraphOrDefault(0);
                    if (last != null && newFirst != null && newFirst.StartTime.TotalMilliseconds < last.EndTime.TotalMilliseconds)
                    {
                        var addMilliseconds = last.EndTime.TotalMilliseconds - newFirst.StartTime.TotalMilliseconds + MinGapBetweenLines;
                        subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(addMilliseconds));
                    }

                    foreach (var p in subtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Insert(index, new Paragraph(p));
                        index++;
                    }

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                    {
                        index = FirstSelectedIndex;
                        if (index < 0)
                        {
                            index = 0;
                        }

                        var current = _subtitle.GetParagraphOrDefault(index);
                        if (current != null)
                        {
                            var original = Utilities.GetOriginalParagraph(index, current, _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                index = _subtitleOriginal.GetIndex(original);
                                foreach (var p in subtitle.Paragraphs)
                                {
                                    _subtitleOriginal.Paragraphs.Insert(index, new Paragraph(p));
                                    index++;
                                }

                                if (subtitle.Paragraphs.Count > 0)
                                {
                                    _subtitleOriginal.Renumber();
                                }
                            }
                        }
                    }

                    _subtitle.Renumber();
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void InsertLineToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle == null || _subtitle.Paragraphs.Count == 0)
            {
                InsertBefore();
                textBoxListViewText.Focus();
            }
            else
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.Count - 1, true);
                InsertAfter(string.Empty, true);
                SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.Count - 1, true);
            }
        }

        private void CloseVideoToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.PauseAndDisposePlayer();
            }

            mediaPlayer.SetPlayerName(string.Empty);
            mediaPlayer.ResetTimeLabel();
            mediaPlayer.VideoPlayer = null;
            mediaPlayer.CurrentPosition = 0;
            _videoFileName = null;
            _videoInfo = null;
            VideoAudioTrackNumber = -1;
            labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
            audioVisualizer.WavePeaks = null;
            audioVisualizer.SetSpectrogram(null);
            audioVisualizer.ShotChanges = new List<double>();
            audioVisualizer.Chapters = Array.Empty<MatroskaChapter>();
            trackBarWaveformPosition.Value = 0;
            timeUpDownVideoPositionAdjust.TimeCode = new TimeCode();
            timeUpDownVideoPositionAdjust.Enabled = false;
            timeUpDownVideoPosition.TimeCode = new TimeCode();
            timeUpDownVideoPosition.Enabled = false;
            closeVideoToolStripMenuItem.Enabled = false;
            CheckSecondSubtitleReset();
        }

        private void ToolStripMenuItemVideoDropDownOpening(object sender, EventArgs e)
        {
            if (_isVideoControlsUndocked)
            {
                redockVideoControlsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoToggleVideoControls);
                undockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            }
            else
            {
                undockVideoControlsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoToggleVideoControls);
                redockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            }

            closeVideoToolStripMenuItem.Enabled = !string.IsNullOrEmpty(_videoFileName);
            setVideoOffsetToolStripMenuItem.Enabled = !string.IsNullOrEmpty(_videoFileName);
            smpteTimeModedropFrameToolStripMenuItem.Enabled = !string.IsNullOrEmpty(_videoFileName);
            if (!string.IsNullOrEmpty(_videoFileName))
            {
                if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
                {
                    setVideoOffsetToolStripMenuItem.Text = string.Format("{0} [{1}]", _language.Menu.Video.SetVideoOffset, new TimeCode(Configuration.Settings.General.CurrentVideoOffsetInMs).ToShortDisplayString());
                }
                else
                {
                    setVideoOffsetToolStripMenuItem.Text = _language.Menu.Video.SetVideoOffset;
                }

                smpteTimeModedropFrameToolStripMenuItem.Checked = Configuration.Settings.General.CurrentVideoIsSmpte;
            }

            toolStripMenuItemSetAudioTrack.Visible = false;
            openSecondSubtitleToolStripMenuItem.Visible = false;
            if (mediaPlayer.VideoPlayer is LibVlcDynamic libVlc)
            {
                try
                {
                    openSecondSubtitleToolStripMenuItem.Visible = true;
                    var audioTracks = libVlc.GetAudioTracks();
                    VideoAudioTrackNumber = libVlc.AudioTrackNumber;
                    if (audioTracks.Count > 1)
                    {
                        toolStripMenuItemSetAudioTrack.DropDownItems.Clear();
                        for (int i = 0; i < audioTracks.Count; i++)
                        {
                            var at = audioTracks[i];
                            toolStripMenuItemSetAudioTrack.DropDownItems.Add(string.IsNullOrWhiteSpace(at.Value) ? at.Key.ToString(CultureInfo.InvariantCulture) : at.Value, null, ChooseAudioTrack);
                            toolStripMenuItemSetAudioTrack.DropDownItems[toolStripMenuItemSetAudioTrack.DropDownItems.Count - 1].Tag = at.Key.ToString(CultureInfo.InvariantCulture);
                            if (at.Key == VideoAudioTrackNumber)
                            {
                                ((ToolStripMenuItem)toolStripMenuItemSetAudioTrack.DropDownItems[toolStripMenuItemSetAudioTrack.DropDownItems.Count - 1]).Checked = true;
                            }
                        }

                        toolStripMenuItemSetAudioTrack.Visible = true;
                        UiUtil.FixFonts(toolStripMenuItemSetAudioTrack);
                    }
                }
                catch (Exception exception)
                {
                    openSecondSubtitleToolStripMenuItem.Visible = false;
                    toolStripMenuItemSetAudioTrack.Visible = false;
                    SeLogger.Error(exception, "VideoDropDownOpening failed getting audio tracks from vlc");
                }
            }
            else if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
            {
                try
                {
                    openSecondSubtitleToolStripMenuItem.Visible = true;
                    var audioTracks = libMpv.AudioTracks;
                    VideoAudioTrackNumber = libMpv.AudioTrackNumber;
                    if (audioTracks.Count > 1)
                    {
                        toolStripMenuItemSetAudioTrack.DropDownItems.Clear();
                        for (int i = 0; i < audioTracks.Count; i++)
                        {
                            var at = audioTracks[i];
                            var trackText = string.IsNullOrWhiteSpace(at.Value) ? at.Key.ToString(CultureInfo.InvariantCulture) : "Track " + at.Key + " - " + char.ToUpper(at.Value[0]) + at.Value.Substring(1);
                            toolStripMenuItemSetAudioTrack.DropDownItems.Add(trackText, null, ChooseAudioTrack);
                            toolStripMenuItemSetAudioTrack.DropDownItems[toolStripMenuItemSetAudioTrack.DropDownItems.Count - 1].Tag = at.Key.ToString(CultureInfo.InvariantCulture);
                            if (i == VideoAudioTrackNumber)
                            {
                                ((ToolStripMenuItem)toolStripMenuItemSetAudioTrack.DropDownItems[toolStripMenuItemSetAudioTrack.DropDownItems.Count - 1]).Checked = true;
                            }
                        }

                        toolStripMenuItemSetAudioTrack.Visible = true;
                        UiUtil.FixFonts(toolStripMenuItemSetAudioTrack);
                    }
                }
                catch (Exception exception)
                {
                    toolStripMenuItemSetAudioTrack.Visible = false;
                    openSecondSubtitleToolStripMenuItem.Visible = false;
                    toolStripMenuItemSetAudioTrack.Visible = false;
                    SeLogger.Error(exception, "VideoDropDownOpening failed getting audio tracks from mpv");
                }
            }

            if (mediaPlayer.VideoPlayer != null && audioVisualizer.WavePeaks != null && audioVisualizer.WavePeaks.Peaks.Count > 0)
            {
                toolStripMenuItemImportShotChanges.Visible = true;
                toolStripMenuItemListShotChanges.Visible = audioVisualizer.ShotChanges.Count > 0;
            }
            else
            {
                toolStripMenuItemImportShotChanges.Visible = false;
                toolStripMenuItemListShotChanges.Visible = false;
            }

            if (mediaPlayer.VideoPlayer != null && _videoFileName != null && _videoFileName.EndsWith(".mkv", StringComparison.OrdinalIgnoreCase))
            {
                toolStripMenuItemImportChapters.Visible = true;
            }
            else
            {
                toolStripMenuItemImportChapters.Visible = false;
            }
        }

        private void ChooseAudioTrack(object sender, EventArgs e)
        {
            if (mediaPlayer.VideoPlayer is LibVlcDynamic libVlc)
            {
                var item = sender as ToolStripItem;
                var number = int.Parse(item.Tag.ToString());
                libVlc.AudioTrackNumber = number;
                VideoAudioTrackNumber = number;
            }
            else if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
            {
                var item = sender as ToolStripItem;
                var number = int.Parse(item.Tag.ToString());
                number--;
                libMpv.AudioTrackNumber = number;
                VideoAudioTrackNumber = number;
            }
        }

        private void textBoxListViewTextOriginal_TextChanged(object sender, EventArgs e)
        {
            if (_subtitleOriginal == null || _subtitleOriginal.Paragraphs.Count < 1)
            {
                return;
            }

            if (_subtitleListViewIndex >= 0)
            {
                var original = Utilities.GetOriginalParagraph(_subtitleListViewIndex, _subtitle.Paragraphs[_subtitleListViewIndex], _subtitleOriginal.Paragraphs);
                if (original != null)
                {
                    string text = textBoxListViewTextOriginal.Text.TrimEnd();

                    // update _subtitle + listview
                    original.Text = text;
                    UpdateListViewTextInfo(labelTextOriginalLineLengths, labelOriginalSingleLine, labelOriginalSingleLinePixels, labelTextOriginalLineTotal, labelOriginalCharactersPerSecond, original, textBoxListViewTextOriginal);
                    SubtitleListview1.SetOriginalText(_subtitleListViewIndex, text);
                    FixVerticalScrollBars(textBoxListViewTextOriginal);
                }
            }
        }

        private void TextBoxListViewTextOriginalKeyDown(object sender, KeyEventArgs e)
        {
            _listViewOriginalTextTicks = DateTime.UtcNow.Ticks;
            if (_subtitleOriginal == null || _subtitleOriginal.Paragraphs.Count < 1)
            {
                return;
            }

            if (e.Modifiers == Keys.Shift && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == (Keys.LButton | Keys.ShiftKey))
            { // surround ctrl+v action with history (for undo)
                _listViewOriginalTextTicks = 0;
                TimerOriginalTextUndoTick(sender, e);
                Application.DoEvents();
                Thread.Sleep(50);
                Application.DoEvents();
                _listViewOriginalTextTicks = 0;
                TimerOriginalTextUndoTick(sender, e);
                return;
            }

            if (_shortcuts.MainTextBoxAssaIntellisense == e.KeyData)
            {
                _intellisenceListOriginal = DoIntellisense(textBoxListViewTextOriginal, _intellisenceListOriginal);
                e.SuppressKeyPress = true;
                return;
            }
            else if (_shortcuts.MainTextBoxAssaRemoveTag == e.KeyData)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Settings.MainTextBoxAssaRemoveTag));
                AssaTagHelper.RemoveTagAtCursor(textBoxListViewTextOriginal);
                e.SuppressKeyPress = true;
                return;
            }

            int numberOfLines = Utilities.GetNumberOfLines(textBoxListViewTextOriginal.Text);

            if (e.Modifiers == Keys.None && e.KeyCode == Keys.Enter && numberOfLines >= Configuration.Settings.General.MaxNumberOfLines + Configuration.Settings.General.MaxNumberOfLinesPlusAbort)
            {
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxBreakAtCursorPosition)
            {
                AutoBreakAtFirstSpaceFromPos(textBoxListViewTextOriginal);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxBreakAtCursorPositionAndGoToNext)
            {
                AutoBreakAtFirstSpaceFromPos(textBoxListViewTextOriginal, true);
                e.SuppressKeyPress = true;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                textBoxListViewTextOriginal.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSelectionToLower == e.KeyData) // selection to lowercase
            {
                if (textBoxListViewTextOriginal.SelectionLength > 0)
                {
                    int start = textBoxListViewTextOriginal.SelectionStart;
                    int length = textBoxListViewTextOriginal.SelectionLength;
                    textBoxListViewTextOriginal.SelectedText = textBoxListViewTextOriginal.SelectedText.ToLowerInvariant();
                    textBoxListViewTextOriginal.SelectionStart = start;
                    textBoxListViewTextOriginal.SelectionLength = length;
                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainTextBoxSelectionToUpper == e.KeyData) // selection to uppercase
            {
                if (textBoxListViewTextOriginal.SelectionLength > 0)
                {
                    var start = textBoxListViewTextOriginal.SelectionStart;
                    var length = textBoxListViewTextOriginal.SelectionLength;
                    textBoxListViewTextOriginal.SelectedText = textBoxListViewTextOriginal.SelectedText.ToUpperInvariant();
                    textBoxListViewTextOriginal.SelectionStart = start;
                    textBoxListViewTextOriginal.SelectionLength = length;
                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainTextBoxSplitAtCursor == e.KeyData && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
            {
                ToolStripMenuItemSplitTextAtCursorClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitAtCursorAndVideoPos == e.KeyData && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
            {
                ToolStripMenuItemSplitViaWaveformClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN1)
            {
                SetAlignment("{\\an1}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN2)
            {
                SetAlignment("", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN3)
            {
                SetAlignment("{\\an3}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN4)
            {
                SetAlignment("{\\an4}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN5)
            {
                SetAlignment("{\\an5}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN6)
            {
                SetAlignment("{\\an6}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN7)
            {
                SetAlignment("{\\an7}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN8)
            {
                SetAlignment("{\\an8}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN9)
            {
                SetAlignment("{\\an9}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor1)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color1), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor2)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color2), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor3)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color3), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor4)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color4), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor5)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color5), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor6)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color6), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor7)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color7), true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewColor8)
            {
                SetColor(ColorTranslator.ToHtml(Configuration.Settings.Tools.Color8), true);
                e.SuppressKeyPress = true;
            }

            //TODO: add these two to custom shortcuts
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.Home)
            {
                SelectListViewIndexAndEnsureVisible(0);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.End)
            {
                SelectListViewIndexAndEnsureVisible(SubtitleListview1.Items.Count - 1);
                e.SuppressKeyPress = true;
            }

            // last key down in text
            _lastTextKeyDownTicks = DateTime.UtcNow.Ticks;

            UpdatePositionAndTotalLength(labelTextOriginalLineTotal, textBoxListViewTextOriginal);
        }

        private void OpenOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            OpenOriginalSubtitle();
        }

        private void SaveOriginalAstoolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitleOriginal == null || _subtitleOriginal.Paragraphs.Count == 0)
            {
                return;
            }

            SubtitleFormat currentFormat = GetCurrentSubtitleFormat() ?? new SubRip();

            UiUtil.SetSaveDialogFilter(saveFileDialog1, currentFormat);

            saveFileDialog1.Title = _language.SaveOriginalSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else if (!string.IsNullOrEmpty(_subtitleOriginalFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_subtitleOriginalFileName);
            }
            else
            {
                saveFileDialog1.FileName = string.Empty;
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                _subtitleOriginalFileName = saveFileDialog1.FileName;
                SaveOriginalSubtitle(currentFormat);
                SetTitle();
                if (_fileName != null)
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                }
            }
        }

        private void SaveOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_subtitleOriginalFileName))
            {
                SaveOriginalAstoolStripMenuItemClick(null, null);
                return;
            }

            try
            {
                SaveOriginalSubtitle(GetCurrentSubtitleFormat());
            }
            catch
            {
                MessageBox.Show(string.Format(_language.UnableToSaveSubtitleX, _subtitleOriginalFileName));
            }
        }

        private void RemoveOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (ContinueNewOrExitOriginal())
            {
                RemoveOriginal(true, true);
            }
        }

        private void RemoveOriginal(bool removeFromListView, bool updateRecentFiles)
        {
            _isOriginalActive = false;
            if (removeFromListView)
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.TextOriginal);
                SubtitleListview1.AutoSizeAllColumns(this);
                _subtitleOriginal = new Subtitle();
                _subtitleOriginalFileName = null;

                if (_fileName != null && updateRecentFiles)
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, VideoAudioTrackNumber, _subtitleOriginalFileName, Configuration.Settings.General.CurrentVideoOffsetInMs, Configuration.Settings.General.CurrentVideoIsSmpte);
                    Configuration.Settings.Save();
                    UpdateRecentFilesUI();
                }
            }

            buttonUnBreak.Visible = true;
            buttonAutoBreak.Visible = true;
            textBoxListViewTextOriginal.Visible = false;
            labelOriginalText.Visible = false;
            labelOriginalCharactersPerSecond.Visible = false;
            labelTextOriginalLineLengths.Visible = false;
            labelOriginalSingleLine.Visible = false;
            labelOriginalSingleLinePixels.Visible = false;
            labelTextOriginalLineTotal.Visible = false;
            textBoxListViewText.Width = (groupBoxEdit.Width - (textBoxListViewText.Left + 8 + buttonUnBreak.Width));
            textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom;
            labelTextLineTotal.Left = 236;
            labelTextOriginalLineTotal.Left = 236;

            saveOriginalToolStripMenuItem.Enabled = false;
            saveOriginalAstoolStripMenuItem.Enabled = false;
            removeOriginalToolStripMenuItem.Enabled = false;

            MainResize();
            SetTitle();
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);
        }

        private void ToolStripMenuItemSpellCheckMainDropDownOpening(object sender, EventArgs e)
        {
            addWordToNameListToolStripMenuItem.Visible = true;
        }

        private void SplitContainer1SplitterMoved(object sender, SplitterEventArgs e)
        {
            Main_Resize(null, null);
        }

        private void ButtonSplitLineClick(object sender, EventArgs e)
        {
            SplitSelectedParagraph(null, null);
        }

        private void ToolStripMenuItemCopySourceTextClick(object sender, EventArgs e)
        {
            var selectedLines = new Subtitle(_subtitle);
            selectedLines.Paragraphs.Clear();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                selectedLines.Paragraphs.Add(new Paragraph(_subtitle.Paragraphs[index]));
            }

            if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
            {
                selectedLines.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(Configuration.Settings.General.CurrentVideoOffsetInMs));
            }

            ClipboardSetText(selectedLines.ToText(GetCurrentSubtitleFormat()).TrimEnd());
        }

        public void SetEndMinusGapAndStartNextHere(int index)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            if (mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            var oldParagraph = new Paragraph(p, false);

            double totalMillisecondsEnd = mediaPlayer.CurrentPosition * TimeCode.BaseUnit - MinGapBetweenLines;
            var newDurationMs = totalMillisecondsEnd - p.StartTime.TotalMilliseconds;
            if (!p.StartTime.IsMaxTime &&
                newDurationMs < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds &&
                newDurationMs > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
            {
                return;
            }

            var tc = new TimeCode(totalMillisecondsEnd);
            MakeHistoryForUndo(_language.BeforeSetEndAndVideoPosition + "  " + tc);
            _makeHistoryPaused = true;

            if (p.StartTime.IsMaxTime)
            {
                p.EndTime.TotalMilliseconds = totalMillisecondsEnd;
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }
            else
            {
                p.EndTime.TotalMilliseconds = totalMillisecondsEnd;
            }

            timeUpDownStartTime.TimeCode = p.StartTime;
            var durationInSeconds = (decimal)p.DurationTotalSeconds;
            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
            {
                SetDurationInSeconds((double)durationInSeconds);
            }

            RestartHistory();

            var next = _subtitle.GetParagraphOrDefault(index + 1);
            Paragraph oldNextParagraph = null;
            if (next != null)
            {
                oldNextParagraph = new Paragraph(next, false);
                next.StartTime.TotalMilliseconds = totalMillisecondsEnd + MinGapBetweenLines;
            }

            UpdateOriginalTimeCodes(oldParagraph, oldNextParagraph);
            SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
            SubtitleListview1.SetStartTimeAndDuration(index - 1, _subtitle.GetParagraphOrDefault(index - 1), _subtitle.GetParagraphOrDefault(index), _subtitle.GetParagraphOrDefault(index - 2));
            SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.GetParagraphOrDefault(index), _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
            SubtitleListview1.SetStartTimeAndDuration(index + 1, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index + 2), _subtitle.GetParagraphOrDefault(index));
            RefreshSelectedParagraph();
            ShowStatus(string.Format(_language.VideoControls.AdjustedViaEndTime, p.StartTime.ToShortString()));
            audioVisualizer.Invalidate();
            UpdateSourceView();
        }

        public void MainAdjustSetEndAndStartOfNextPlusGap(int index)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            if (mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            double totalMillisecondsEnd = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
            var oldParagraph = new Paragraph(p, false);
            var newDurationMs = totalMillisecondsEnd - p.StartTime.TotalMilliseconds;
            if (!p.StartTime.IsMaxTime &&
                newDurationMs < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds &&
                newDurationMs > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
            {
                return;
            }

            var tc = new TimeCode(totalMillisecondsEnd);
            MakeHistoryForUndo(_language.BeforeSetEndAndVideoPosition + "  " + tc);
            _makeHistoryPaused = true;

            if (p.StartTime.IsMaxTime)
            {
                p.EndTime.TotalMilliseconds = totalMillisecondsEnd;
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }
            else
            {
                p.EndTime.TotalMilliseconds = totalMillisecondsEnd;
            }

            timeUpDownStartTime.TimeCode = p.StartTime;
            var durationInSeconds = (decimal)p.DurationTotalSeconds;
            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
            {
                SetDurationInSeconds((double)durationInSeconds);
            }

            var next = _subtitle.GetParagraphOrDefault(index + 1);
            Paragraph oldNextParagraph = null;
            if (next != null && (next.StartTime.IsMaxTime || next.StartTime.TotalMilliseconds - totalMillisecondsEnd < 5_000))
            {
                oldNextParagraph = new Paragraph(next, false);
                next.StartTime.TotalMilliseconds = totalMillisecondsEnd + MinGapBetweenLines;

                if (next.StartTime.IsMaxTime)
                {
                    next.EndTime.TotalMilliseconds = totalMillisecondsEnd + MinGapBetweenLines + Configuration.Settings.General.NewEmptyDefaultMs;
                }
            }

            RestartHistory();

            UpdateOriginalTimeCodes(oldParagraph, oldNextParagraph);
            SubtitleListview1.SetStartTimeAndDuration(index - 1, _subtitle.GetParagraphOrDefault(index - 1), _subtitle.GetParagraphOrDefault(index), _subtitle.GetParagraphOrDefault(index - 2));
            SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.GetParagraphOrDefault(index), _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
            SubtitleListview1.SetStartTimeAndDuration(index + 1, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index + 2), _subtitle.GetParagraphOrDefault(index));
            RefreshSelectedParagraph();
            ShowStatus(string.Format(_language.VideoControls.AdjustedViaEndTime, p.StartTime.ToShortString()));
            audioVisualizer.Invalidate();
            UpdateSourceView();
        }

        public void SetCurrentViaEndPositionAndGotoNext(int index, bool goToNext)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            if (mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            var oldParagraph = new Paragraph(p, false);

            //if (autoDuration)
            //{
            //    // TODO: auto duration
            //    // TODO: Search for start via wave file (must only be minor adjustment)
            //}

            // current movie Position
            double durationTotalMilliseconds = p.DurationTotalMilliseconds;
            double totalMillisecondsEnd = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;

            var tc = new TimeCode(totalMillisecondsEnd - durationTotalMilliseconds);
            MakeHistoryForUndo(_language.BeforeSetEndAndVideoPosition + "  " + tc);
            _makeHistoryPaused = true;

            if (p.StartTime.IsMaxTime)
            {
                p.EndTime.TotalSeconds = mediaPlayer.CurrentPosition;
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }
            else
            {
                p.StartTime.TotalMilliseconds = totalMillisecondsEnd - durationTotalMilliseconds;
                p.EndTime.TotalMilliseconds = totalMillisecondsEnd;
            }

            timeUpDownStartTime.TimeCode = p.StartTime;
            var durationInSeconds = (decimal)(p.DurationTotalSeconds);
            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
            {
                SetDurationInSeconds((double)durationInSeconds);
            }

            UpdateOriginalTimeCodes(oldParagraph);
            RestartHistory();

            if (goToNext)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
            }

            ShowStatus(string.Format(_language.VideoControls.AdjustedViaEndTime, p.StartTime.ToShortString()));
            audioVisualizer.Invalidate();
            UpdateSourceView();
        }

        public void SetCurrentStartAutoDurationAndGotoNext(int index)
        {
            var prev = _subtitle.GetParagraphOrDefault(index - 1);
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            double videoPosition = mediaPlayer.CurrentPosition;
            if (prev != null && Math.Abs(prev.StartTime.TotalSeconds - videoPosition) < 0.3)
            {
                ShowStatus("Subtitle already here");
                return;
            }

            ShowNextSubtitleLabel();

            if (mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));

            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            var oldParagraph = new Paragraph(_subtitle.Paragraphs[index], false);
            if (!mediaPlayer.IsPaused)
            {
                videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
            }

            timeUpDownStartTime.TimeCode = TimeCode.FromSeconds(videoPosition);

            double duration = Utilities.GetOptimalDisplayMilliseconds(textBoxListViewText.Text);

            _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = TimeSpan.FromSeconds(videoPosition).TotalMilliseconds;
            if (prev != null && prev.EndTime.TotalMilliseconds > _subtitle.Paragraphs[index].StartTime.TotalMilliseconds)
            {
                int minDiff = MinGapBetweenLines + 1;
                if (minDiff < 1)
                {
                    minDiff = 1;
                }

                prev.EndTime.TotalMilliseconds = _subtitle.Paragraphs[index].StartTime.TotalMilliseconds - minDiff;
            }

            _subtitle.Paragraphs[index].EndTime.TotalMilliseconds = _subtitle.Paragraphs[index].StartTime.TotalMilliseconds + duration;
            SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
            timeUpDownStartTime.TimeCode = _subtitle.Paragraphs[index].StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            UpdateOriginalTimeCodes(oldParagraph);
            _subtitleListViewIndex = -1;
            SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
            audioVisualizer.Invalidate();
            UpdateSourceView();
        }

        public void SetCurrentEndNextStartAndGoToNext(int index)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            var next = _subtitle.GetParagraphOrDefault(index + 1);
            if (p == null)
            {
                return;
            }

            if (mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));
            var p1 = new Paragraph(p, false);
            Paragraph p2 = null;
            if (next != null)
            {
                p2 = new Paragraph(next, false);
            }

            double videoPosition = mediaPlayer.CurrentPosition;
            if (!mediaPlayer.IsPaused)
            {
                videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
            }

            p.EndTime = TimeCode.FromSeconds(videoPosition);
            if (p.StartTime.IsMaxTime)
            {
                timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
                if (p.StartTime.TotalMilliseconds < 0)
                {
                    p.StartTime.TotalMilliseconds = 0;
                }

                timeUpDownStartTime.TimeCode = p.StartTime;
                SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            }

            if (p.DurationTotalSeconds < 0)
            {
                p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }

            SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));

            SetDurationInSeconds(_subtitle.Paragraphs[index].DurationTotalSeconds + 0.001);
            if (next != null)
            {
                int addMilliseconds = MinGapBetweenLines;
                if (addMilliseconds < 1 || addMilliseconds > 500)
                {
                    addMilliseconds = 1;
                }

                var oldDuration = next.DurationTotalMilliseconds;
                if (next.StartTime.IsMaxTime || next.EndTime.IsMaxTime)
                {
                    oldDuration = Utilities.GetOptimalDisplayMilliseconds(p.Text);
                }

                next.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + addMilliseconds;
                next.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds + oldDuration;
                SubtitleListview1.SetStartTimeAndDuration(index + 1, next, _subtitle.GetParagraphOrDefault(index + 2), _subtitle.GetParagraphOrDefault(index));
                SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
            }

            UpdateOriginalTimeCodes(p1, p2);
            audioVisualizer.Invalidate();
            UpdateSourceView();
        }

        private void EditSelectAllToolStripMenuItemClick(object sender, EventArgs e)
        {
            for (int i = 0; i < SubtitleListview1.Items.Count; i++)
            {
                SubtitleListview1.Items[i].Selected = true;
            }
        }

        private void ToolStripMenuItemSplitTextAtCursorClick(object sender, EventArgs e)
        {
            SplitTextAtCursor(false);
        }

        private void SplitTextAtCursor(bool autoBreak)
        {
            var tb = GetFocusedTextBox();

            int? pos = null;
            if (tb.SelectionStart > 1 && tb.SelectionStart < tb.Text.Length - 1)
            {
                pos = tb.SelectionStart;
            }

            SplitSelectedParagraph(null, pos, autoBreak);
            tb.Focus();
            tb.SelectionStart = tb.Text.Length;
        }

        private void ToolStripMenuItemSplitViaWaveformClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();
            int? pos = tb.SelectionStart;
            SplitSelectedParagraph(mediaPlayer.CurrentPosition, pos);
            tb.Focus();
            tb.SelectionStart = tb.Text.Length;
        }

        private void ContextMenuStripTextBoxListViewOpening(object sender, CancelEventArgs e)
        {
            var tb = GetFocusedTextBox();
            toolStripMenuItemSplitTextAtCursor.Visible = tb.Text.Length > 1;

            if (IsLiveSpellCheckEnabled && InListView)
            {
                var sourceTextBox = ((ContextMenuStrip)sender).SourceControl.Parent;
                if (sourceTextBox == textBoxListViewText && textBoxListViewText.IsWrongWord)
                {
                    var oldItems = new ToolStripItem[contextMenuStripTextBoxListView.Items.Count];
                    contextMenuStripTextBoxListView.Items.CopyTo(oldItems, 0);
                    contextMenuStripTextBoxListView.Items.Clear();
                    tb.AddSuggestionsToMenu();
                    contextMenuStripTextBoxListView.Items.AddRange(oldItems);
                    toolStripSeparatorSpellCheckSuggestions.Visible = true;
                    toolStripMenuItemSpellCheckSkipOnce.Visible = true;
                    toolStripMenuItemSpellCheckSkipAll.Visible = true;
                    toolStripMenuItemSpellCheckAddToDictionary.Visible = true;
                    toolStripMenuItemSpellCheckAddToNames.Visible = true;
                    toolStripSeparatorSpellCheck.Visible = true;
                }
            }

            if (IsUnicode)
            {
                if (toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count == 0)
                {
                    foreach (var s in Configuration.Settings.Tools.UnicodeSymbolsToInsert.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Add(s, null, InsertUnicodeGlyph);
                    }

                    UiUtil.FixFonts(toolStripMenuItemInsertUnicodeSymbol);
                }

                if (insertUnicodeCharactersToolStripMenuItem.DropDownItems.Count == 0)
                {
                    foreach (var s in Configuration.Settings.Tools.UnicodeSymbolsToInsert.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        insertUnicodeCharactersToolStripMenuItem.DropDownItems.Add(s, null, InsertUnicodeGlyph);
                    }

                    UiUtil.FixFonts(insertUnicodeCharactersToolStripMenuItem);
                }

                toolStripMenuItemInsertUnicodeSymbol.Visible = toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count > 0;
                toolStripSeparator25.Visible = toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count > 0;
                toolStripSeparatorInsertUnicode.Visible = insertUnicodeCharactersToolStripMenuItem.DropDownItems.Count > 0;

                superscriptToolStripMenuItem.Visible = tb.SelectionLength > 0;
                subscriptToolStripMenuItem.Visible = tb.SelectionLength > 0;
                toolStripMenuItemInsertUnicodeControlCharacters.Visible = true;
            }
            else
            {
                toolStripMenuItemInsertUnicodeSymbol.Visible = false;
                toolStripSeparator25.Visible = false;
                toolStripSeparatorInsertUnicode.Visible = false;
                superscriptToolStripMenuItem.Visible = false;
                subscriptToolStripMenuItem.Visible = false;
                toolStripMenuItemInsertUnicodeControlCharacters.Visible = false;
            }

            var formatType = GetCurrentSubtitleFormat().GetType();
            if (formatType == typeof(WebVTT) && tb.SelectionLength > 0)
            {
                toolStripSeparatorWebVTT.Visible = true;
                toolStripMenuItemWebVttVoice.Visible = true;
                var voices = WebVTT.GetVoices(_subtitle);
                toolStripMenuItemWebVttVoice.DropDownItems.Clear();
                foreach (var style in voices)
                {
                    toolStripMenuItemWebVttVoice.DropDownItems.Add(style, null, WebVTTSetVoiceTextBox);
                }

                if (voices.Count > 0)
                {
                    var tss = new ToolStripSeparator();
                    UiUtil.FixFonts(tss);
                    toolStripMenuItemWebVttVoice.DropDownItems.Add(tss);
                }

                toolStripMenuItemWebVttVoice.DropDownItems.Add(_language.Menu.ContextMenu.WebVTTSetNewVoice, null, WebVTTSetNewVoiceTextBox);
                UiUtil.FixFonts(toolStripMenuItemWebVttVoice);
            }
            else
            {
                toolStripSeparatorWebVTT.Visible = false;
                toolStripMenuItemWebVttVoice.Visible = false;
            }

            if (formatType == typeof(NetflixImsc11Japanese))
            {
                boldToolStripMenuItem1.Visible = false;
                underlineToolStripMenuItem1.Visible = false;
                colorToolStripMenuItem1.Visible = false;
                fontNameToolStripMenuItem.Visible = false;
                toolStripMenuItemHorizontalDigits.Visible = true;
                if (tb.SelectionLength > 0)
                {
                    toolStripMenuItemBouten.Visible = true;
                    toolStripMenuItemRuby.Visible = true;
                }
                else
                {
                    toolStripMenuItemBouten.Visible = false;
                    toolStripMenuItemRuby.Visible = true;
                }

                if (tb.SelectionLength > 1 && tb.SelectionLength < 8)
                {
                    toolStripMenuItemHorizontalDigits.Visible = true;
                }
                else
                {
                    toolStripMenuItemHorizontalDigits.Visible = false;
                }
            }
            else if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
            {
                boldToolStripMenuItem1.Visible = true;
                underlineToolStripMenuItem1.Visible = true;
                colorToolStripMenuItem1.Visible = true;
                fontNameToolStripMenuItem.Visible = true;
                toolStripMenuItemHorizontalDigits.Visible = false;
                toolStripMenuItemBouten.Visible = false;
                if (tb.SelectionLength > 0)
                {
                    toolStripMenuItemRuby.Visible = true;
                }
                else
                {
                    toolStripMenuItemRuby.Visible = true;
                }
            }
            else if (formatType == typeof(Ebu))
            {
                Ebu.EbuGeneralSubtitleInformation header;
                if (_subtitle != null && _subtitle.Header != null && (_subtitle.Header.Contains("STL2") || _subtitle.Header.Contains("STL3")))
                {
                    header = Ebu.ReadHeader(Encoding.UTF8.GetBytes(_subtitle.Header));
                }
                else
                {
                    header = new Ebu.EbuGeneralSubtitleInformation();
                }

                var open = header.DisplayStandardCode != "1" && header.DisplayStandardCode != "2";
                boxToolStripMenuItem.Visible = open;
            }
            else
            {
                boxToolStripMenuItem1.Visible = false;
                boldToolStripMenuItem1.Visible = true;
                underlineToolStripMenuItem1.Visible = true;
                colorToolStripMenuItem1.Visible = true;
                fontNameToolStripMenuItem.Visible = true;
                toolStripMenuItemBouten.Visible = false;
                toolStripMenuItemRuby.Visible = false;
                toolStripMenuItemHorizontalDigits.Visible = false;
            }

            if (tb.SelectionStart > 1 && tb.SelectionStart < tb.Text.Length - 1 && !string.IsNullOrEmpty(_videoFileName) && mediaPlayer != null &&
                _subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                var splitSeconds = mediaPlayer.CurrentPosition;
                if (splitSeconds > (currentParagraph.StartTime.TotalSeconds + 0.2) && splitSeconds < (currentParagraph.EndTime.TotalSeconds - 0.2))
                {
                    toolStripMenuItemSplitViaWaveform.Visible = true;
                }
                else
                {
                    toolStripMenuItemSplitViaWaveform.Visible = false;
                }
            }
            else
            {
                toolStripMenuItemSplitViaWaveform.Visible = false;
            }
        }

        private void ContextMenuStripTextBoxListViewClosing(object sender, ToolStripDropDownClosingEventArgs e)
        {
            if (IsLiveSpellCheckEnabled && textBoxListViewText.IsWrongWord
                                        && sender is ContextMenuStrip textBoxContextMenu && textBoxContextMenu.Name == "contextMenuStripTextBoxListView")
            {
                var firstSpellCheckItemIndex = textBoxContextMenu.Items.IndexOfKey("toolStripSeparatorSpellCheckSuggestions");
                if (firstSpellCheckItemIndex > 0)
                {
                    for (int i = 0; i < firstSpellCheckItemIndex; i++)
                    {
                        textBoxContextMenu.Items.RemoveAt(0);
                    }
                }

                toolStripSeparatorSpellCheckSuggestions.Visible = false;
                toolStripMenuItemSpellCheckSkipOnce.Visible = false;
                toolStripMenuItemSpellCheckSkipAll.Visible = false;
                toolStripMenuItemSpellCheckAddToDictionary.Visible = false;
                toolStripMenuItemSpellCheckAddToNames.Visible = false;
                toolStripSeparatorSpellCheck.Visible = false;
            }
        }

        private void ToolStripMenuItemExportPngXmlClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), "BDNXML", _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripComboBoxFrameRateTextChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.CurrentFrameRate = CurrentFrameRate;
            if (_loading)
            {
                return;
            }

            SubtitleListview1.UpdateFrames(_subtitle);
            UpdateSourceView();
        }

        private void ToolStripMenuItemGoogleMicrosoftTranslateSelLineClick(object sender, EventArgs e)
        {
            int firstSelectedIndex = FirstSelectedIndex;
            if (firstSelectedIndex >= 0)
            {
                var p = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (p != null)
                {
                    string defaultFromLanguage = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                    if (_subtitleOriginal != null)
                    {
                        var o = Utilities.GetOriginalParagraph(firstSelectedIndex, p, _subtitleOriginal.Paragraphs);
                        if (o != null)
                        {
                            p = o;
                            defaultFromLanguage = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleOriginal);
                        }
                    }

                    Cursor = Cursors.WaitCursor;
                    if (_googleOrMicrosoftTranslate == null || _googleOrMicrosoftTranslate.IsDisposed)
                    {
                        _googleOrMicrosoftTranslate = new GoogleOrMicrosoftTranslate();
                        _googleOrMicrosoftTranslate.InitializeFromLanguage(defaultFromLanguage);
                    }

                    _googleOrMicrosoftTranslate.Initialize(p);
                    Cursor = Cursors.Default;
                    if (_googleOrMicrosoftTranslate.ShowDialog() == DialogResult.OK)
                    {
                        textBoxListViewText.Text = _googleOrMicrosoftTranslate.TranslatedText;
                    }
                }
            }
        }

        private void NumericUpDownSec1ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.SmallDelayMilliseconds = (int)(numericUpDownSec1.Value * 1000);
        }

        private void NumericUpDownSec2ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.LargeDelayMilliseconds = (int)(numericUpDownSec2.Value * 1000);
        }

        private void NumericUpDownSecAdjust1ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.SmallDelayMilliseconds = (int)(numericUpDownSecAdjust1.Value * 1000);
        }

        private void NumericUpDownSecAdjust2ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.LargeDelayMilliseconds = (int)(numericUpDownSecAdjust2.Value * 1000);
        }

        private void ToolStripMenuItemMakeEmptyFromCurrentClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            if (ContinueNewOrExit())
            {
                bool isOriginalVisible = SubtitleListview1.IsOriginalTextColumnVisible;
                _subtitleOriginal = new Subtitle(_subtitle);
                _subtitleOriginalFileName = null;
                int oldIndex = FirstSelectedIndex;
                if (oldIndex < 0)
                {
                    oldIndex = 0;
                }

                foreach (var p in _subtitle.Paragraphs)
                {
                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening && string.IsNullOrEmpty(Configuration.Settings.Tools.NewEmptyTranslationText))
                    {
                        p.Text = "-";
                    }
                    else if (Configuration.Settings.Tools.NewEmptyTranslationText != null)
                    {
                        p.Text = Configuration.Settings.Tools.NewEmptyTranslationText;
                    }
                    else
                    {
                        p.Text = string.Empty;
                    }
                }

                SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
                _subtitleListViewIndex = -1;
                _isOriginalActive = true;
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                SubtitleListview1.SelectIndexAndEnsureVisible(oldIndex, true);
                textBoxListViewText.Focus();
                Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = true;

                _subtitleOriginalFileName = _fileName;
                _fileName = null;
                SetupOriginalEdit();
                ResetHistory();
                SetTitle();

                if (!isOriginalVisible || toolStripMenuItemShowOriginalInPreview.Checked)
                {
                    toolStripMenuItemShowOriginalInPreview.Checked = false;
                    Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = false;
                    audioVisualizer.Invalidate();
                }
            }
        }

        private void ToolStripMenuItemShowOriginalInPreviewClick(object sender, EventArgs e)
        {
            toolStripMenuItemShowOriginalInPreview.Checked = !toolStripMenuItemShowOriginalInPreview.Checked;
            Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = toolStripMenuItemShowOriginalInPreview.Checked;
        }

        private void ToolStripMenuItemVideoDropDownClosed(object sender, EventArgs e)
        {
            redockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            undockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
        }

        private void ToolsToolStripMenuItemDropDownOpening(object sender, EventArgs e)
        {
            if (_subtitle?.Paragraphs.Count > 0 && _networkSession == null)
            {
                toolStripSeparator22.Visible = true;
                toolStripMenuItemMakeEmptyFromCurrent.Visible = !SubtitleListview1.IsOriginalTextColumnVisible;
                toolStripMenuItemShowOriginalInPreview.Checked = Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable;
            }
            else
            {
                toolStripSeparator22.Visible = false;
                toolStripMenuItemMakeEmptyFromCurrent.Visible = false;
                toolStripMenuItemShowOriginalInPreview.Checked = false;
            }

            var f = GetCurrentSubtitleFormat();
            styleToolStripMenuItem.Visible = f.HasStyleSupport;
            var formatType = f.GetType();
            actorToolStripMenuItem.Visible = formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha);

            convertColorsToDialogToolStripMenuItem.Visible = _subtitle.Paragraphs.Any(p => p.Text.Contains("<font color") || p.Text.Contains("<c."));
        }

        private void ContextMenuStripWaveformOpening(object sender, CancelEventArgs e)
        {
            if (audioVisualizer.IsSpectrogramAvailable)
            {
                if (audioVisualizer.ShowSpectrogram && audioVisualizer.ShowWaveform)
                {
                    showWaveformAndSpectrogramToolStripMenuItem.Visible = false;
                    showOnlyWaveformToolStripMenuItem.Visible = true;
                    showOnlySpectrogramToolStripMenuItem.Visible = true;
                    toolStripSeparatorGuessTimeCodes.Visible = true;
                }
                else if (audioVisualizer.ShowSpectrogram)
                {
                    showWaveformAndSpectrogramToolStripMenuItem.Visible = true;
                    showOnlyWaveformToolStripMenuItem.Visible = true;
                    showOnlySpectrogramToolStripMenuItem.Visible = false;
                    toolStripSeparatorGuessTimeCodes.Visible = true;
                }
                else
                {
                    showWaveformAndSpectrogramToolStripMenuItem.Visible = true;
                    showOnlyWaveformToolStripMenuItem.Visible = false;
                    showOnlySpectrogramToolStripMenuItem.Visible = true;
                    toolStripSeparatorGuessTimeCodes.Visible = true;
                }
            }
            else
            {
                toolStripSeparator23.Visible = false;
                showWaveformAndSpectrogramToolStripMenuItem.Visible = false;
                showOnlyWaveformToolStripMenuItem.Visible = false;
                showOnlySpectrogramToolStripMenuItem.Visible = false;
                toolStripSeparatorGuessTimeCodes.Visible = false;
            }

            insertSubtitleHereToolStripMenuItem.Visible = !_subtitle.Paragraphs.Any(p => p.StartTime.TotalSeconds <= mediaPlayer.CurrentPosition + 1.0 &&
                                                                                         p.EndTime.TotalSeconds <= mediaPlayer.CurrentPosition + 1.0 &&
                                                                                         p.EndTime.TotalSeconds >= mediaPlayer.CurrentPosition);
        }

        private void ShowWaveformAndSpectrogramToolStripMenuItemClick(object sender, EventArgs e)
        {
            audioVisualizer.ShowSpectrogram = true;
            audioVisualizer.ShowWaveform = true;
        }

        private void ShowOnlyWaveformToolStripMenuItemClick(object sender, EventArgs e)
        {
            audioVisualizer.ShowSpectrogram = false;
            audioVisualizer.ShowWaveform = true;
        }

        private void ShowOnlySpectrogramToolStripMenuItemClick(object sender, EventArgs e)
        {
            audioVisualizer.ShowSpectrogram = true;
            audioVisualizer.ShowWaveform = false;
        }

        private void SplitContainerMainSplitterMoved(object sender, SplitterEventArgs e)
        {
            if (_textHeightResize >= 1)
            {
                try
                {
                    splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - _textHeightResize;
                }
                catch
                {
                    // ignore
                }

                mediaPlayer.Invalidate();
            }
        }

        private void FindDoubleLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            for (int i = FirstSelectedIndex + 1; i < _subtitle.Paragraphs.Count; i++)
            {
                var current = _subtitle.GetParagraphOrDefault(i);
                var next = _subtitle.GetParagraphOrDefault(i + 1);
                if (current != null && next != null)
                {
                    if (current.Text.Trim().Equals(next.Text.Trim(), StringComparison.OrdinalIgnoreCase))
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(i, true);
                        SubtitleListview1.Items[i + 1].Selected = true;
                        break;
                    }
                }
            }
        }

        private void TextBoxListViewTextOriginalMouseMove(object sender, MouseEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && MouseButtons == MouseButtons.Left)
            {
                if (!string.IsNullOrEmpty(textBoxListViewTextOriginal.SelectedText))
                {
                    textBoxListViewTextOriginal.DoDragDrop(textBoxListViewTextOriginal.SelectedText, DragDropEffects.Copy);
                }
                else
                {
                    textBoxListViewTextOriginal.DoDragDrop(textBoxListViewTextOriginal.Text, DragDropEffects.Copy);
                }
            }
            else if ((AutoRepeatContinueOn || AutoRepeatOn) && !textBoxSearchWord.Focused && textBoxListViewTextOriginal.Focused)
            {
                string selectedText = textBoxListViewTextOriginal.SelectedText;
                if (!string.IsNullOrEmpty(selectedText))
                {
                    selectedText = selectedText.Trim();
                    selectedText = selectedText.TrimEnd('.', ',', '!', '?').TrimEnd();
                    if (!string.IsNullOrEmpty(selectedText) && selectedText != textBoxSearchWord.Text)
                    {
                        textBoxSearchWord.Text = HtmlUtil.RemoveHtmlTags(selectedText);
                    }
                }
            }
        }

        private void ToolStripMenuItemExportEBUSTLClick(object sender, EventArgs e)
        {
            var ebu = new Ebu();
            saveFileDialog1.Filter = ebu.Name + "|*" + ebu.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + ebu.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(ebu.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += ebu.Extension;
                }

                new Ebu().Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void ToolStripMenuItemExportCavena890Click(object sender, EventArgs e)
        {
            var cavena890 = new Cavena890();
            saveFileDialog1.Filter = cavena890.Name + "|*" + cavena890.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + cavena890.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(cavena890.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += cavena890.Extension;
                }

                using (var form = new Cavena890SaveOptions(_subtitle, _fileName))
                {
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        cavena890.Save(fileName, GetSaveSubtitle(_subtitle));
                    }
                }
            }
        }

        private void ToolStripMenuItemExportPACScreenElectronicsClick(object sender, EventArgs e)
        {
            var pac = new Pac();
            saveFileDialog1.Filter = pac.Name + "|*" + pac.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + pac.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(pac.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += pac.Extension;
                }

                pac.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void ToolStripMenuItemExportUniPacClick(object sender, EventArgs e)
        {
            var uniPac = new PacUnicode();
            saveFileDialog1.Filter = uniPac.Name + "|*" + uniPac.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + uniPac.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(uniPac.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += uniPac.Extension;
                }

                uniPac.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void ToolStripMenuItemExportAyatoClick(object sender, EventArgs e)
        {
            var ayato = new Ayato();
            saveFileDialog1.Filter = ayato.Name + "|*" + ayato.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + ayato.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(ayato.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += ayato.Extension;
                }

                ayato.Save(fileName, _videoFileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void TextBoxListViewTextEnter(object sender, EventArgs e)
        {
            if (_findHelper != null)
            {
                _findHelper.MatchInOriginal = false;
            }

            if (_measurementConverter != null)
            {
                _measurementConverter.IsOriginalActive = false;
            }
        }

        private void TextBoxListViewTextOriginalEnter(object sender, EventArgs e)
        {
            if (_findHelper != null)
            {
                _findHelper.MatchInOriginal = true;
            }

            if (_measurementConverter != null)
            {
                _measurementConverter.IsOriginalActive = true;
            }
        }

        private void ToolStripMenuItemExportPlainTextClick(object sender, EventArgs e)
        {
            using (var exportText = new ExportText())
            {
                exportText.Initialize(GetSaveSubtitle(_subtitle), _fileName);
                if (exportText.ShowDialog() == DialogResult.OK)
                {
                    ShowStatus(_language.SubtitleExported);
                }
            }
        }

        private void ToolStripMenuItemExportBluraySupClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.BluraySup, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemExportVobSubSubIdxClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.VobSub, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void TextBoxListViewTextOriginalKeyUp(object sender, KeyEventArgs e)
        {
            textBoxListViewTextOriginal.ClearUndo();
            UpdatePositionAndTotalLength(labelTextOriginalLineTotal, textBoxListViewTextOriginal);
        }

        private void TimerTextUndoTick(object sender, EventArgs e)
        {
            if (_subtitle == null || _subtitle.Paragraphs.Count == 0 || _listViewTextTicks == -1 || !CanFocus)
            {
                return;
            }

            // progress check
            ShowTranslationProgress();

            // text undo
            int index = _listViewTextUndoIndex;
            if (index == -1)
            {
                index = _subtitleListViewIndex;
            }

            if (index < 0 || index >= _subtitle.Paragraphs.Count)
            {
                return;
            }

            if ((DateTime.UtcNow.Ticks - _listViewTextTicks) > 10000 * 700) // only if last typed char was entered > 700 milliseconds
            {
                var p = _subtitle.GetParagraphOrDefault(index);
                if (p == null)
                {
                    return;
                }

                string newText = p.Text.TrimEnd();
                string oldText = _listViewTextUndoLast;
                if (oldText == null)
                {
                    return;
                }

                if (_listViewTextUndoLast != newText)
                {
                    MakeHistoryForUndo(_languageGeneral.Text + ": " + _listViewTextUndoLast.TrimEnd() + " -> " + newText, false);

                    int hidx = _subtitle.HistoryItems.Count - 1;
                    if (hidx >= 0 && hidx < _subtitle.HistoryItems.Count)
                    {
                        var historyParagraph = _subtitle.HistoryItems[hidx].Subtitle.GetParagraphOrDefault(index);
                        if (historyParagraph != null)
                        {
                            historyParagraph.Text = _listViewTextUndoLast;
                        }
                    }

                    _listViewTextUndoLast = newText;
                    _listViewTextUndoIndex = -1;
                }
            }
        }

        private void ShowTranslationProgress()
        {
            if (Configuration.Settings.General.ShowProgress)
            {
                if (_subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
                {
                    int numberOfNonBlankLines = 0;
                    foreach (var paragraph in _subtitle.Paragraphs)
                    {
                        if (!string.IsNullOrWhiteSpace(paragraph.Text))
                        {
                            numberOfNonBlankLines++;
                        }
                    }

                    int percent = (int)Math.Round(numberOfNonBlankLines * 100.0 / _subtitle.Paragraphs.Count);
                    toolStripStatusLabelProgress.Text = string.Format("{0}% completed", percent);
                    if (!toolStripStatusLabelProgress.Visible)
                    {
                        toolStripStatusLabelProgress.Visible = true;
                    }
                }
                else if (_subtitle.Paragraphs.Count > 0 && !string.IsNullOrWhiteSpace(_videoFileName) && mediaPlayer != null && mediaPlayer.VideoPlayer != null && mediaPlayer.VideoPlayer.Duration > 0)
                {
                    var last = _subtitle.Paragraphs.LastOrDefault();
                    if (last != null && !last.StartTime.IsMaxTime)
                    {
                        var subtitleEndSeconds = last.EndTime.TotalSeconds;
                        var videoEndSeconds = mediaPlayer.VideoPlayer.Duration;
                        int percent = (int)Math.Round(subtitleEndSeconds * 100.0 / videoEndSeconds);
                        toolStripStatusLabelProgress.Text = string.Format("{0}% completed", percent);
                        if (!toolStripStatusLabelProgress.Visible)
                        {
                            toolStripStatusLabelProgress.Visible = true;
                        }
                    }
                }
                else
                {
                    toolStripStatusLabelProgress.Visible = false;
                }
            }
        }

        private void TimerOriginalTextUndoTick(object sender, EventArgs e)
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                int index = _listViewTextUndoIndex;
                if (index == -1)
                {
                    index = _subtitleListViewIndex;
                }

                if (_listViewOriginalTextTicks == -1 || !CanFocus || _subtitleOriginal == null || _subtitleOriginal.Paragraphs.Count == 0 || index < 0 || index >= _subtitleOriginal.Paragraphs.Count)
                {
                    return;
                }

                if ((DateTime.UtcNow.Ticks - _listViewOriginalTextTicks) > 10000 * 700) // only if last typed char was entered > 700 milliseconds
                {
                    var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index], _subtitleOriginal.Paragraphs);
                    if (original != null)
                    {
                        index = _subtitleOriginal.Paragraphs.IndexOf(original);
                    }
                    else
                    {
                        return;
                    }

                    string newText = _subtitleOriginal.Paragraphs[index].Text.TrimEnd();
                    string oldText = _listViewOriginalTextUndoLast;
                    if (oldText == null || index < 0)
                    {
                        return;
                    }

                    if (_listViewOriginalTextUndoLast != newText && _subtitle.HistoryItems.Count > 0 &&
                        index < _subtitle.HistoryItems[_subtitle.HistoryItems.Count - 1].OriginalSubtitle.Paragraphs.Count)
                    {
                        MakeHistoryForUndo(_languageGeneral.Text + ": " + _listViewOriginalTextUndoLast.TrimEnd() + " -> " + newText, false);
                        _subtitle.HistoryItems[_subtitle.HistoryItems.Count - 1].OriginalSubtitle.Paragraphs[index].Text = _listViewOriginalTextUndoLast;

                        _listViewOriginalTextUndoLast = newText;
                        _listViewTextUndoIndex = -1;
                    }
                }
            }
        }

        private void UpdatePositionAndTotalLength(Label lineTotal, SETextBox textBox)
        {
            var text = textBox.Text;
            if (string.IsNullOrEmpty(text))
            {
                lineTotal.Text = string.Empty;
                return;
            }

            int extraNewLineLength = Environment.NewLine.Length - 1;

            int lineBreakPos = text.IndexOf(Environment.NewLine, StringComparison.Ordinal);
            int pos = textBox.SelectionStart;
            var textNoHtml = HtmlUtil.RemoveHtmlTags(text, true);
            var s = textNoHtml.Replace(Environment.NewLine, string.Empty); // we don't count new line in total length... correct?
            var totalLength = s.CountCharacters(false);
            string totalL;

            if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
            {
                var totalLengthPixels = TextWidth.CalcPixelWidth(textNoHtml.RemoveChar('\r', '\n'));
                totalL = "     " + string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", totalLength, totalLengthPixels));
            }
            else
            {
                totalL = "     " + string.Format(_languageGeneral.TotalLengthX, totalLength);
            }

            if (textBox.SelectionLength > 0)
            {
                var len = textBox.SelectedText.CountCharacters(false);
                if (len > 0)
                {
                    lineTotal.Text = textBox.SelectionLength.ToString(CultureInfo.InvariantCulture) + totalL;
                    lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                    return;
                }
            }

            if (lineBreakPos < 0 || pos <= lineBreakPos)
            {
                lineTotal.Text = "1," + (pos + 1) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int secondLineBreakPos = text.IndexOf(Environment.NewLine, lineBreakPos + 1, StringComparison.Ordinal);
            if (secondLineBreakPos < 0 || pos <= secondLineBreakPos + extraNewLineLength)
            {
                lineTotal.Text = "2," + (pos - (lineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int thirdLineBreakPos = text.IndexOf(Environment.NewLine, secondLineBreakPos + 1, StringComparison.Ordinal);
            if (thirdLineBreakPos < 0 || pos < thirdLineBreakPos + (extraNewLineLength * 2))
            {
                lineTotal.Text = "3," + (pos - (secondLineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int forthLineBreakPos = text.IndexOf(Environment.NewLine, thirdLineBreakPos + 1, StringComparison.Ordinal);
            if (forthLineBreakPos < 0 || pos < forthLineBreakPos + (extraNewLineLength * 3))
            {
                lineTotal.Text = "4," + (pos - (thirdLineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            lineTotal.Text = string.Empty;
        }

        private void TextBoxListViewTextMouseClick(object sender, MouseEventArgs e)
        {
            UpdatePositionAndTotalLength(labelTextLineTotal, textBoxListViewText);
        }

        private void TextBoxListViewTextOriginalMouseClick(object sender, MouseEventArgs e)
        {
            UpdatePositionAndTotalLength(labelTextOriginalLineTotal, textBoxListViewTextOriginal);
        }

        public void GotoNextSubPosFromVideoPos()
        {
            if (mediaPlayer.VideoPlayer != null && _subtitle != null)
            {
                double ms = Math.Round(mediaPlayer.CurrentPosition * TimeCode.BaseUnit, MidpointRounding.AwayFromZero);
                foreach (var p in _subtitle.Paragraphs)
                {
                    if (p.EndTime.TotalMilliseconds > ms && p.StartTime.TotalMilliseconds < ms)
                    {
                        // current sub
                    }
                    else if (p.DurationTotalSeconds < 10 && p.StartTime.TotalMilliseconds > ms)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(p), true);
                        return;
                    }
                }
            }
        }

        public void GotoPrevSubPosFromvideoPos()
        {
            if (mediaPlayer.VideoPlayer != null && _subtitle != null)
            {
                double ms = Math.Round(mediaPlayer.CurrentPosition * TimeCode.BaseUnit, MidpointRounding.AwayFromZero);
                int i = _subtitle.Paragraphs.Count - 1;
                while (i >= 0)
                {
                    var p = _subtitle.Paragraphs[i];
                    if (p.EndTime.TotalMilliseconds > ms && p.StartTime.TotalMilliseconds < ms)
                    {
                        // current sub
                    }
                    else if (p.DurationTotalSeconds < 10 && p.StartTime.TotalMilliseconds < ms)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(p), true);
                        return;
                    }

                    i--;
                }
            }
        }

        private void ToolStripMenuItemExportAdobeEncoreFABImageScriptClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Fab, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemMergeDialogClick(object sender, EventArgs e)
        {
            MergeDialogs();
        }

        private void MainKeyUp(object sender, KeyEventArgs e)
        {
            if (_mainCreateStartDownEndUpParagraph != null)
            {
                var p = _subtitle.Paragraphs[_subtitleListViewIndex];
                if (p.ToString() == _mainCreateStartDownEndUpParagraph.ToString())
                {
                    SetEndTime();
                }

                _mainCreateStartDownEndUpParagraph = null;
            }
            else if (_mainAdjustStartDownEndUpAndGoToNextParagraph != null)
            {
                var p = _subtitle.Paragraphs[_subtitleListViewIndex];
                if (p.ToString() == _mainAdjustStartDownEndUpAndGoToNextParagraph.ToString())
                {
                    double videoPositionInSeconds = mediaPlayer.CurrentPosition;
                    if (p.StartTime.TotalSeconds + 0.1 < videoPositionInSeconds)
                    {
                        SetEndTime();
                    }

                    SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex + 1, true);
                }

                _mainAdjustStartDownEndUpAndGoToNextParagraph = null;
            }
            else if (_dictateTextBox != null && _dictateForm != null)
            {
                pictureBoxRecord.Visible = false;
                Application.DoEvents();
                Cursor = Cursors.WaitCursor;
                ShowStatus(LanguageSettings.Current.AudioToText.Transcribing);
                var text = _dictateForm.RecordingToText();
                Cursor = Cursors.Default;
                if (!string.IsNullOrWhiteSpace(text))
                {
                    if (_dictateTextBox is TextBox tb)
                    {
                        tb.Paste(text);
                    }
                    else if (_dictateTextBox is AdvancedTextBox atb)
                    {
                        atb.SelectedText = text;
                    }
                }

                ShowStatus(string.Empty);
                _dictateTextBox = null;
            }
        }

        private void ToolStripMenuItemSurroundWithMusicSymbolsClick(object sender, EventArgs e)
        {
            string tag = Configuration.Settings.Tools.MusicSymbol;
            SurroundWithTag(tag, tag);
        }

        private void SurroundWithTag(string tag, string endTag = "", bool selectedTextOnly = false)
        {
            if (selectedTextOnly)
            {
                var tb = GetFocusedTextBox();
                var text = tb.SelectedText;
                if (string.IsNullOrEmpty(text) && tb.Text.Length > 0)
                {
                    text = tb.Text;
                    tb.SelectAll();
                }

                int selectionStart = tb.SelectionStart;
                text = Utilities.ToggleSymbols(tag, text, endTag, out var _);
                tb.SelectedText = text;
                tb.SelectionStart = selectionStart;
                tb.SelectionLength = text.Length;
            }
            else
            {
                if (string.IsNullOrWhiteSpace(tag) && string.IsNullOrEmpty(endTag))
                {
                    return;
                }

                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
                {
                    SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                    MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, tag));

                    var indices = new List<int>();
                    foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                    {
                        indices.Add(item.Index);
                    }

                    SubtitleListview1.BeginUpdate();
                    var first = true;
                    var addTags = true;
                    foreach (int i in indices)
                    {
                        if (first)
                        {
                            _subtitle.Paragraphs[i].Text = Utilities.ToggleSymbols(tag, _subtitle.Paragraphs[i].Text, endTag, out var added);
                            addTags = added;
                            first = false;
                        }


                        if (addTags)
                        {
                            _subtitle.Paragraphs[i].Text = Utilities.AddSymbols(tag, _subtitle.Paragraphs[i].Text, endTag);
                        }
                        else
                        {
                            _subtitle.Paragraphs[i].Text = Utilities.RemoveSymbols(tag, _subtitle.Paragraphs[i].Text, endTag);
                        }

                        SubtitleListview1.SetText(i, _subtitle.Paragraphs[i].Text);

                        if (IsOriginalEditable)
                        {
                            var original = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleOriginal.Paragraphs);
                            if (original != null)
                            {
                                if (addTags)
                                {
                                    original.Text = Utilities.AddSymbols(tag, original.Text, endTag);
                                }
                                else
                                {
                                    original.Text = Utilities.RemoveSymbols(tag, original.Text, endTag);
                                }

                                SubtitleListview1.SetOriginalText(i, original.Text);
                            }
                        }
                    }

                    SubtitleListview1.EndUpdate();

                    ShowStatus(string.Format(_language.TagXAdded, tag));
                    UpdateSourceView();
                    RefreshSelectedParagraph();
                    SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                }
            }
        }

        private void SuperscriptToolStripMenuItemClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = Utilities.ToSuperscript(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        private void SubscriptToolStripMenuItemClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = Utilities.ToSubscript(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        private void ToolStripMenuItemExportImagePerFrameClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.ImageFrame, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemApplyDisplayTimeLimitsClick(object sender, EventArgs e)
        {
            ApplyDisplayTimeLimits(false);
        }

        private void ApplyDisplayTimeLimits(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var applyDurationLimits = new ApplyDurationLimits())
            {
                if (onlySelectedLines)
                {
                    var selectedLines = new Subtitle();
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                    }

                    applyDurationLimits.Initialize(selectedLines, audioVisualizer.ShotChanges);
                }
                else
                {
                    applyDurationLimits.Initialize(_subtitle, audioVisualizer.ShotChanges);
                }

                if (applyDurationLimits.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);

                    if (onlySelectedLines)
                    { // we only update selected lines
                        int i = 0;
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index] = applyDurationLimits.FixedSubtitle.Paragraphs[i];
                            i++;
                        }

                        ShowStatus(_language.VisualSyncPerformedOnSelectedLines);
                        SubtitleListview1.SyntaxColorAllLines(_subtitle);
                    }
                    else
                    {
                        SaveSubtitleListviewIndices();
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in applyDurationLimits.FixedSubtitle.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        RestoreSubtitleListviewIndices();
                    }

                    UpdateSourceView();
                }
            }
        }

        private void GenerateDatetimeInfoFromVideoToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            using (var extractDateTimeInfo = new ExtractDateTimeInfo())
            {
                if (extractDateTimeInfo.ShowDialog(this) == DialogResult.OK)
                {
                    if (ContinueNewOrExit())
                    {
                        MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);

                        ResetSubtitle();
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in extractDateTimeInfo.DateTimeSubtitle.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                        UpdateSourceView();
                        OpenVideo(extractDateTimeInfo.VideoFileName);
                    }
                }
            }
        }

        private void ToolStripMenuItemRightToLeftModeClick(object sender, EventArgs e)
        {
            var focusedItem = SubtitleListview1.FocusedItem;
            toolStripMenuItemRightToLeftMode.Checked = !toolStripMenuItemRightToLeftMode.Checked;
            if (!toolStripMenuItemRightToLeftMode.Checked)
            {
                RightToLeft = RightToLeft.No;
                SubtitleListview1.RightToLeft = RightToLeft.No;
                SubtitleListview1.RightToLeftLayout = false;
                textBoxSource.RightToLeft = RightToLeft.No;
                mediaPlayer.TextRightToLeft = RightToLeft.No;
                textBoxSearchWord.RightToLeft = RightToLeft.No;
                Configuration.Settings.General.RightToLeftMode = false;
            }
            else
            {
                //RightToLeft = RightToLeft.Yes; - is this better? TimeUpDown custom control needs to support RTL before enabling this
                SubtitleListview1.RightToLeft = RightToLeft.Yes;
                SubtitleListview1.RightToLeftLayout = true;
                textBoxSource.RightToLeft = RightToLeft.Yes;
                mediaPlayer.TextRightToLeft = RightToLeft.Yes;
                textBoxSearchWord.RightToLeft = RightToLeft.Yes;
                Configuration.Settings.General.RightToLeftMode = true;
            }

            MainResize();
            TextBoxListViewTextTextChanged(null, null);
            textBoxListViewTextOriginal_TextChanged(null, null);
            if (focusedItem != null)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(focusedItem.Index, true);
            }

            if (mediaPlayer?.VideoPlayer is LibMpvDynamic)
            {
                // refresh mpv text
                mediaPlayer.SetSubtitleText(string.Empty, new Paragraph(), new Subtitle(), GetCurrentSubtitleFormat());
                UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());
            }
        }

        private void JoinSubtitlesToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            using (var joinSubtitles = new JoinSubtitles())
            {
                if (joinSubtitles.ShowDialog(this) == DialogResult.OK && joinSubtitles.JoinedSubtitle != null && joinSubtitles.JoinedSubtitle.Paragraphs.Count > 0 && ContinueNewOrExit())
                {
                    MakeHistoryForUndo(_language.BeforeDisplaySubtitleJoin);

                    ResetSubtitle();
                    _subtitle.Paragraphs.Clear();
                    _subtitle.Paragraphs.AddRange(joinSubtitles.JoinedSubtitle.Paragraphs);
                    _subtitle.Header = joinSubtitles.JoinedSubtitle.Header;
                    SetCurrentFormat(joinSubtitles.JoinedFormat);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    UpdateSourceView();
                    ShowStatus(_language.SubtitlesJoined);
                }
            }
        }

        private void ToolStripMenuItemReverseRightToLeftStartEndClick(object sender, EventArgs e)
        {
            ReverseStartAndEndingForRtl();
        }

        private void ToolStripMenuItemExportCapMakerPlusClick(object sender, EventArgs e)
        {
            var capMakerPlus = new CapMakerPlus();
            saveFileDialog1.Filter = capMakerPlus.Name + "|*" + capMakerPlus.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + capMakerPlus.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(capMakerPlus.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += capMakerPlus.Extension;
                }

                CapMakerPlus.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void ToolStripMenuItemExportCheetahCapClick(object sender, EventArgs e)
        {
            var cheetahCaption = new CheetahCaption();
            saveFileDialog1.Filter = cheetahCaption.Name + "|*" + cheetahCaption.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + cheetahCaption.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(cheetahCaption.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += cheetahCaption.Extension;
                }

                CheetahCaption.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void ToolStripMenuItemExportCaptionIncClick(object sender, EventArgs e)
        {
            var captionInc = new CaptionsInc();
            saveFileDialog1.Filter = captionInc.Name + "|*" + captionInc.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + captionInc.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(captionInc.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += captionInc.Extension;
                }

                CaptionsInc.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void ToolStripMenuItemExportUltech130Click(object sender, EventArgs e)
        {
            var ultech130 = new Ultech130();
            saveFileDialog1.Filter = ultech130.Name + "|*" + ultech130.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + ultech130.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(ultech130.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += ultech130.Extension;
                }

                Ultech130.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void ToolStripMenuItemAssStylesClick(object sender, EventArgs e)
        {
            var format = GetCurrentSubtitleFormat();
            var formatType = format.GetType();
            if (formatType == typeof(AdvancedSubStationAlpha))
            {
                var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                var currentStyleName = p == null ? string.Empty : p.Extra;
                var timerWaveformEnabled = timerWaveform.Enabled;
                timerWaveform.Stop();
                using (var assaStyles = new Assa.AssaStyles(_subtitle, format, this, currentStyleName))
                {
                    if (assaStyles.ShowDialog(this) == DialogResult.OK)
                    {
                        ApplyAssaStyles(assaStyles);
                    }
                }

                if (timerWaveformEnabled)
                {
                    timerWaveform.Start();
                }
            }
            else if (formatType == typeof(SubStationAlpha))
            {
                using (var styles = new SubStationAlphaStyles(_subtitle, format, this))
                {
                    if (styles.ShowDialog(this) == DialogResult.OK)
                    {
                        ApplySsaStyles(styles);
                    }
                }
            }
            else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText) || formatType == typeof(TimedTextImsc11))
            {
                using (var styles = new TimedTextStyles(_subtitle))
                {
                    if (styles.ShowDialog(this) == DialogResult.OK)
                    {
                        if (_subtitle.Header != styles.Header)
                        {
                            MakeHistoryForUndo(styles.Text);
                        }

                        _subtitle.Header = styles.Header;
                    }
                }
            }
            else if (formatType == typeof(WebVTT) || formatType == typeof(WebVTTFileWithLineNumber))
            {
                using (var styles = new WebVttStyleManager(_subtitle, FirstSelectedIndex))
                {
                    if (styles.ShowDialog(this) == DialogResult.OK)
                    {
                        if (_subtitle.Header != styles.Header)
                        {
                            MakeHistoryForUndo(styles.Text);
                            _subtitle.Header = styles.Header;
                        }
                    }
                }
            }

            mediaPlayer.LastParagraph = null;
            UiUtil.ShowSubtitle(_subtitle, mediaPlayer, GetCurrentSubtitleFormat());
        }

        public void ApplySsaStyles(StylesForm styles)
        {
            if (_subtitle.Header != styles.Header)
            {
                MakeHistoryForUndo(styles.Text);
            }

            _subtitle.Header = styles.Header;
            var styleList = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
            if ((styles as SubStationAlphaStyles).RenameActions.Count > 0)
            {
                foreach (var renameAction in (styles as SubStationAlphaStyles).RenameActions)
                {
                    for (var i = 0; i < _subtitle.Paragraphs.Count; i++)
                    {
                        var p = _subtitle.Paragraphs[i];
                        if (p.Extra == renameAction.OldName)
                        {
                            p.Extra = renameAction.NewName;
                        }
                    }
                }

                CleanRemovedStyles(styleList, false);
                SaveSubtitleListviewIndices();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                RestoreSubtitleListviewIndices();
            }
            else
            {
                CleanRemovedStyles(styleList, true);
            }
        }

        public void ApplyAssaStyles(AssaStyles styles)
        {
            if (_subtitle.Header != styles.Header)
            {
                MakeHistoryForUndo(styles.Text);
            }

            _subtitle.Header = styles.Header;
            var styleList = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
            if (styles.RenameActions.Count > 0)
            {
                foreach (var renameAction in styles.RenameActions)
                {
                    for (var i = 0; i < _subtitle.Paragraphs.Count; i++)
                    {
                        var p = _subtitle.Paragraphs[i];
                        if (p.Extra == renameAction.OldName)
                        {
                            p.Extra = renameAction.NewName;
                        }
                    }
                }

                CleanRemovedStyles(styleList, false);
                SaveSubtitleListviewIndices();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                RestoreSubtitleListviewIndices();
            }
            else
            {
                CleanRemovedStyles(styleList, true);
            }
        }

        private void CleanRemovedStyles(List<string> styleList, bool updateListView)
        {
            var largeUpdate = false;
            if (updateListView)
            {
                if (_subtitle.Paragraphs.Count > 1000)
                {
                    largeUpdate = true;
                }
                else
                {
                    SubtitleListview1.BeginUpdate();
                }
            }

            for (var i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                var p = _subtitle.Paragraphs[i];
                if (p.Extra == null || !styleList.Any(s => s.Equals(p.Extra == "*Default" ? "Default" : p.Extra, StringComparison.OrdinalIgnoreCase)))
                {
                    p.Extra = styleList[0];

                    if (updateListView && !largeUpdate)
                    {
                        SubtitleListview1.SetExtraText(i, p.Extra, SubtitleListview1.ForeColor);
                    }
                }
            }

            if (updateListView)
            {
                if (largeUpdate)
                {
                    SaveSubtitleListviewIndices();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();

                }
                else
                {
                    SubtitleListview1.EndUpdate();
                }
            }
        }

        private static string SetAlignTag(string s, string tag)
        {
            var text = HtmlUtil.RemoveAssAlignmentTags(s);
            if (text.StartsWith("{\\", StringComparison.Ordinal) && text.Contains('}'))
            {
                if (!string.IsNullOrEmpty(tag))
                {
                    return text.Insert(1, "\\" + tag.TrimStart('{').TrimStart('\\').TrimEnd('}'));
                }

                return text;
            }
            else
            {
                return string.Format(@"{0}{1}", tag, text);
            }
        }

        private void ToolStripMenuItemAlignmentClick(object sender, EventArgs e)
        {
            var formatType = GetCurrentSubtitleFormat().GetType();

            if (formatType == typeof(NetflixImsc11Japanese))
            {
                using (var f = new AlignmentPickerJapanese(textBoxListViewText.Text))
                {
                    if (f.ShowDialog(this) == DialogResult.OK)
                    {
                        SetAlignment(f.ContentAlignment, true);
                    }
                }

                return;
            }

            using (var f = new AlignmentPicker(textBoxListViewText.Text))
            {
                f.TopMost = true;
                f.StartPosition = FormStartPosition.Manual;
                f.Left = Cursor.Position.X - 150;
                f.Top = Cursor.Position.Y - 75;
                if (f.ShowDialog(this) == DialogResult.OK)
                {
                    string tag = string.Empty;
                    if (formatType == typeof(SubStationAlpha))
                    {
                        //1: Bottom left
                        //2: Bottom center
                        //3: Bottom right
                        //9: Middle left
                        //10: Middle center
                        //11: Middle right
                        //5: Top left
                        //6: Top center
                        //7: Top right
                        switch (f.Alignment)
                        {
                            case ContentAlignment.BottomLeft:
                                tag = "{\\a1}";
                                break;
                            case ContentAlignment.BottomCenter:
                                tag = "{\\a2}";
                                break;
                            case ContentAlignment.BottomRight:
                                tag = "{\\a3}";
                                break;
                            case ContentAlignment.MiddleLeft:
                                tag = "{\\a9}";
                                break;
                            case ContentAlignment.MiddleCenter:
                                tag = "{\\a10}";
                                break;
                            case ContentAlignment.MiddleRight:
                                tag = "{\\a11}";
                                break;
                            case ContentAlignment.TopLeft:
                                tag = "{\\a5}";
                                break;
                            case ContentAlignment.TopCenter:
                                tag = "{\\a6}";
                                break;
                            case ContentAlignment.TopRight:
                                tag = "{\\a7}";
                                break;
                        }
                    }
                    else
                    {
                        //1: Bottom left
                        //2: Bottom center
                        //3: Bottom right
                        //4: Middle left
                        //5: Middle center
                        //6: Middle right
                        //7: Top left
                        //8: Top center
                        //9: Top right
                        switch (f.Alignment)
                        {
                            case ContentAlignment.BottomLeft:
                                tag = "{\\an1}";
                                break;
                            case ContentAlignment.BottomCenter:
                                if (formatType == typeof(SubRip))
                                {
                                    tag = string.Empty;
                                }
                                else
                                {
                                    tag = "{\\an2}";
                                }

                                break;
                            case ContentAlignment.BottomRight:
                                tag = "{\\an3}";
                                break;
                            case ContentAlignment.MiddleLeft:
                                tag = "{\\an4}";
                                break;
                            case ContentAlignment.MiddleCenter:
                                tag = "{\\an5}";
                                break;
                            case ContentAlignment.MiddleRight:
                                tag = "{\\an6}";
                                break;
                            case ContentAlignment.TopLeft:
                                tag = "{\\an7}";
                                break;
                            case ContentAlignment.TopCenter:
                                tag = "{\\an8}";
                                break;
                            case ContentAlignment.TopRight:
                                tag = "{\\an9}";
                                break;
                        }
                    }

                    if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
                    {
                        SetAlignment(tag, true);
                    }
                }
            }
        }

        private void ToolStripMenuItemRestoreAutoBackupClick(object sender, EventArgs e)
        {
            _lastDoNotPrompt = -1;
            using (var restoreAutoBackup = new RestoreAutoBackup())
            {
                if (restoreAutoBackup.ShowDialog(this) == DialogResult.OK && !string.IsNullOrEmpty(restoreAutoBackup.AutoBackupFileName))
                {
                    if (ContinueNewOrExit())
                    {
                        Interlocked.Increment(ref _openSaveCounter);
                        OpenSubtitle(restoreAutoBackup.AutoBackupFileName, null);
                        _fileName = _fileName.Remove(0, Configuration.AutoBackupDirectory.Length).TrimStart(Path.DirectorySeparatorChar);
                        _converted = true;
                        SetTitle();
                        Interlocked.Decrement(ref _openSaveCounter);
                    }
                }
            }
        }

        private void LabelStatusClick(object sender, EventArgs e)
        {
            if (_statusLog.Count == 0)
            {
                return;
            }

            if (_statusLogForm == null || _statusLogForm.IsDisposed)
            {
                _statusLogForm = new StatusLog(_statusLog);
                _statusLogForm.Show(this);
            }
            else
            {
                _statusLogForm.Show();
            }
        }

        private void ToolStripMenuItemStatisticsClick(object sender, EventArgs e)
        {
            using (var stats = new Statistics(_subtitle, _fileName, GetCurrentSubtitleFormat()))
            {
                stats.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemFileFormatPropertiesClick(object sender, EventArgs e)
        {
            if (InSourceView)
            {
                ReloadFromSourceView();
            }

            var format = GetCurrentSubtitleFormat();
            var ft = format.GetType();
            if (ft == typeof(DCinemaInterop) || ft == typeof(DCinemaSmpte2014) || ft == typeof(DCinemaSmpte2010) || ft == typeof(DCinemaSmpte2007))
            {
                PositionAndSizeForm properties = null;
                try
                {
                    if (GetCurrentSubtitleFormat().GetType() == typeof(DCinemaInterop))
                    {
                        properties = new DCinema.DCinemaPropertiesInterop();
                    }
                    else
                    {
                        properties = new DCinema.DCinemaPropertiesSmpte();
                    }

                    properties.ShowDialog(this);
                }
                finally
                {
                    properties?.Dispose();
                }

                return;
            }

            if (ft == typeof(AdvancedSubStationAlpha))
            {
                using (var properties = new AssaProperties(_subtitle, _videoFileName, _videoInfo, _fileName))
                {
                    if (properties.ShowDialog(this) == DialogResult.OK)
                    {
                        UpdateSourceView();
                    }
                }

                return;
            }

            if (ft == typeof(SubStationAlpha))
            {
                using (var properties = new SubStationAlphaProperties(_subtitle, GetCurrentSubtitleFormat(), _videoFileName, _videoInfo, _fileName))
                {
                    if (properties.ShowDialog(this) == DialogResult.OK)
                    {
                        UpdateSourceView();
                    }
                }

                return;
            }

            if (ft == typeof(Ebu))
            {
                using (var properties = new EbuSaveOptions())
                {
                    if (_subtitle != null && _subtitle.Header != null && (_subtitle.Header.Contains("STL2") || _subtitle.Header.Contains("STL3")))
                    {
                        var encoding = Ebu.GetEncoding(_subtitle.Header.Substring(0, 3));
                        var buffer = encoding.GetBytes(_subtitle.Header);
                        var header = Ebu.ReadHeader(buffer);
                        properties.Initialize(header, Ebu.EbuUiHelper.JustificationCode, null, _subtitle);
                    }
                    else
                    {
                        var header = new Ebu.EbuGeneralSubtitleInformation();
                        if (!string.IsNullOrEmpty(_fileName) && new Ebu().IsMine(null, _fileName))
                        {
                            properties.Initialize(header, Ebu.EbuUiHelper.JustificationCode, _fileName, _subtitle);
                        }
                        else
                        {
                            properties.Initialize(header, Ebu.EbuUiHelper.JustificationCode, null, _subtitle);
                        }
                    }

                    if (properties.ShowDialog(this) == DialogResult.OK)
                    {
                        Ebu.EbuUiHelper.JustificationCode = properties.JustificationCode;
                    }
                }

                return;
            }

            if (ft == typeof(DvdStudioPro) || ft == typeof(DvdStudioProSpace) || ft == typeof(DvdStudioProSpaceOne) || ft == typeof(DvdStudioProSpaceOneSemicolon))
            {
                using (var form = new DvdStudioProProperties())
                {
                    form.ShowDialog(this);
                }

                return;
            }

            if (ft == typeof(TimedText10))
            {
                using (var properties = new TimedTextProperties(_subtitle))
                {
                    properties.ShowDialog(this);
                }

                return;
            }

            if (ft == typeof(TimedTextImsc11))
            {
                var oldFr = Configuration.Settings.General.CurrentFrameRate;
                using (var properties = new TimedTextPropertiesImsc11(_subtitle))
                {
                    properties.ShowDialog(this);

                    if (oldFr != Configuration.Settings.General.CurrentFrameRate)
                    {
                        toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();
                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        RefreshSelectedParagraph();
                    }
                }

                return;
            }

            if (ft == typeof(ItunesTimedText))
            {
                using (var properties = new TimedTextPropertiesItunes(_subtitle))
                {
                    properties.ShowDialog(this);
                }

                return;
            }

            if (ft == typeof(WebVTT) || ft == typeof(WebVTTFileWithLineNumber))
            {
                using (var properties = new WebVttProperties())
                {
                    properties.ShowDialog(this);
                }

                return;
            }

            if (ft == typeof(FinalCutProXml))
            {
                using (var form = new FcpProperties())
                {
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        Configuration.Settings.SubtitleSettings.FcpFontSize = form.FcpFontSize;
                        Configuration.Settings.SubtitleSettings.FcpFontName = form.FcpFontName;
                    }
                }

                return;
            }

            if (format.Name == "Nuendo")
            {
                using (var form = new NuendoProperties())
                {
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        Configuration.Settings.SubtitleSettings.NuendoCharacterListFile = form.CharacterListFile;
                    }
                }

                return;
            }
        }

        private void ToolStripMenuItemExportTextTimeCodePairClick(object sender, EventArgs e)
        {
            if (saveFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                saveFileDialog1.Filter = _language.TextFiles + "|*.txt";
                saveFileDialog1.Title = _language.SaveSubtitleAs;
                saveFileDialog1.DefaultExt = "*.txt";
                saveFileDialog1.AddExtension = true;

                string fname = saveFileDialog1.FileName;
                if (string.IsNullOrEmpty(fname))
                {
                    fname = "ATS";
                }

                if (!fname.EndsWith(".txt", StringComparison.Ordinal))
                {
                    fname += ".txt";
                }

                string fileNameTimeCode = fname.Insert(fname.Length - 4, "_timecode");
                string fileNameText = fname.Insert(fname.Length - 4, "_text");

                var timeCodeLines = new StringBuilder();
                var textLines = new StringBuilder();

                const string timeCodeWriteFormat = "{0:00}:{1:00}:{2:00}:{3:00}";
                foreach (var p in GetSaveSubtitle(_subtitle).Paragraphs)
                {
                    timeCodeLines.AppendFormat(timeCodeWriteFormat, p.StartTime.Hours, p.StartTime.Minutes, p.StartTime.Seconds, SubtitleFormat.MillisecondsToFramesMaxFrameRate(p.StartTime.Milliseconds)).AppendLine();
                    timeCodeLines.AppendFormat(timeCodeWriteFormat, p.EndTime.Hours, p.EndTime.Minutes, p.EndTime.Seconds, SubtitleFormat.MillisecondsToFramesMaxFrameRate(p.EndTime.Milliseconds)).AppendLine();

                    textLines.AppendLine(HtmlUtil.RemoveHtmlTags(p.Text).Replace(Environment.NewLine, "|"));
                    textLines.AppendLine();
                }

                File.WriteAllText(fileNameTimeCode, timeCodeLines.ToString(), Encoding.UTF8);
                File.WriteAllText(fileNameText, textLines.ToString(), Encoding.UTF8);
            }
        }

        private void TextWordsPerMinutewpmToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.WordsPerMinute, (sender as ToolStripItem).Text);
        }

        private void ToolStripMenuItemSaveSelectedLinesClick(object sender, EventArgs e)
        {
            var newSub = new Subtitle(_subtitle) { Header = _subtitle.Header };
            newSub.Paragraphs.Clear();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                newSub.Paragraphs.Add(_subtitle.Paragraphs[index]);
            }

            SubtitleFormat currentFormat = GetCurrentSubtitleFormat();
            UiUtil.SetSaveDialogFilter(saveFileDialog1, currentFormat);
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            saveFileDialog1.AddExtension = true;
            if (!string.IsNullOrEmpty(_fileName))
            {
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_fileName);
            }

            if (saveFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                int index = 0;
                foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                {
                    if (saveFileDialog1.FilterIndex == index + 1)
                    {
                        // only allow current extension or ".txt"
                        string fileName = saveFileDialog1.FileName;
                        string ext = Path.GetExtension(fileName).ToLowerInvariant();
                        bool extOk = ext.Equals(format.Extension, StringComparison.OrdinalIgnoreCase) || format.AlternateExtensions.Contains(ext) || ext == ".txt";
                        if (!extOk)
                        {
                            if (fileName.EndsWith('.'))
                            {
                                fileName = fileName.TrimEnd('.');
                            }

                            fileName += format.Extension;
                        }

                        if (format.IsTextBased)
                        {
                            string allText = GetSaveSubtitle(newSub).ToText(format);
                            File.WriteAllText(fileName, allText, GetCurrentEncoding());
                            ShowStatus(string.Format(_language.XLinesSavedAsY, newSub.Paragraphs.Count, fileName));
                            return;
                        }
                        else if (format.GetType() == typeof(Ebu))
                        {
                            new Ebu().Save(fileName, GetSaveSubtitle(newSub));
                            ShowStatus(string.Format(_language.XLinesSavedAsY, newSub.Paragraphs.Count, fileName));
                            return;
                        }
                    }

                    index++;
                }
            }
        }

        private void GuessTimeCodesToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var form = new WaveformGenerateTimeCodes())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndoOnlyIfNotRecent(string.Format(_language.BeforeGuessingTimeCodes));

                    double startFromSeconds = 0;
                    if (form.StartFromVideoPosition)
                    {
                        startFromSeconds = mediaPlayer.CurrentPosition;
                    }

                    if (form.DeleteAll)
                    {
                        _subtitle.Paragraphs.Clear();
                    }
                    else if (form.DeleteForward)
                    {
                        for (int i = _subtitle.Paragraphs.Count - 1; i > 0; i--)
                        {
                            if (_subtitle.Paragraphs[i].EndTime.TotalSeconds + 1 > startFromSeconds)
                            {
                                _subtitle.Paragraphs.RemoveAt(i);
                            }
                        }
                    }

                    audioVisualizer.GenerateTimeCodes(_subtitle, startFromSeconds, form.BlockSize, form.VolumeMinimum, form.VolumeMaximum, form.DefaultMilliseconds);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RefreshSelectedParagraph();
                    if (FirstSelectedIndex < 0)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(0);
                    }
                }
            }
        }

        private void ToolStripMenuItemExportDvdStudioProStlClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), "STL", _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemPluginsClick(object sender, EventArgs e)
        {
            using (var form = new PluginsGet())
            {
                form.ShowDialog(this);
                LoadPlugins();
                UpdateToolbarButtonsToCurrentFormat(GetCurrentSubtitleFormat());
            }
        }

        private void ToolStripMenuItemUndoClick(object sender, EventArgs e)
        {
            UndoToIndex(true);
        }

        private void ToolStripMenuItemRedoClick(object sender, EventArgs e)
        {
            UndoToIndex(false);
        }

        private void SeekSilenceToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks == null)
            {
                return;
            }

            using (var form = new SeekSilence())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    if (form.SeekForward)
                    {
                        audioVisualizer.FindDataBelowThreshold(form.VolumeBelow, form.SecondsDuration);
                    }
                    else
                    {
                        audioVisualizer.FindDataBelowThresholdBack(form.VolumeBelow, form.SecondsDuration);
                    }
                }
            }
        }

        private void ToolStripMenuItemPasteSpecialClick(object sender, EventArgs e)
        {
            string text = Clipboard.GetText();
            var tmp = new Subtitle();
            var list = new List<string>(text.SplitToLines());
            SubtitleFormat format = new SubRip();
            if (new AdvancedSubStationAlpha().IsMine(list, null))
            {
                format = new AdvancedSubStationAlpha();
            }
            format.LoadSubtitle(tmp, list, null);
            if (tmp.Paragraphs.Count == 0)
            {
                tmp = SubtitleFormat.LoadSubtitleFromLines(list, null) ?? new Subtitle();
            }

            if (SubtitleListview1.SelectedItems.Count == 1 && text.Length > 0)
            {
                var form = new ColumnPaste(SubtitleListview1.IsOriginalTextColumnVisible && IsOriginalEditable, tmp.Paragraphs.Count == 0);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeColumnPaste);

                    if (tmp.Paragraphs.Count == 0)
                    {
                        foreach (var line in text.SplitToLines())
                        {
                            tmp.Paragraphs.Add(new Paragraph(line, 0, 0));
                        }
                    }

                    int index = FirstSelectedIndex;

                    if (!form.PasteOverwrite)
                    {
                        for (int i = 0; i < tmp.Paragraphs.Count; i++)
                        {
                            if (form.PasteAll)
                            {
                                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                                {
                                    _subtitle.Paragraphs[k + 1] = new Paragraph(_subtitle.Paragraphs[k]);
                                }

                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    _subtitle.Paragraphs[index + i].Text = string.Empty;
                                }
                            }
                            else if (form.PasteTimeCodesOnly)
                            {
                                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                                {
                                    _subtitle.Paragraphs[k + 1].StartTime.TotalMilliseconds = _subtitle.Paragraphs[k].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[k + 1].EndTime.TotalMilliseconds = _subtitle.Paragraphs[k].EndTime.TotalMilliseconds;
                                }
                            }
                            else if (form.PasteTextOnly)
                            {
                                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                                {
                                    _subtitle.Paragraphs[k + 1].Text = _subtitle.Paragraphs[k].Text;
                                }
                            }
                            else if (form.PasteOriginalTextOnly)
                            {
                                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                                {
                                    var original = Utilities.GetOriginalParagraph(k, _subtitle.Paragraphs[k], _subtitleOriginal.Paragraphs);
                                    var originalNext = Utilities.GetOriginalParagraph(k + 1, _subtitle.Paragraphs[k + 1], _subtitleOriginal.Paragraphs);
                                    if (original != null)
                                    {
                                        originalNext.Text = original.Text;
                                    }
                                }

                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index + i], _subtitleOriginal.Paragraphs);
                                    if (original != null)
                                    {
                                        original.Text = string.Empty;
                                    }
                                }
                            }
                        }
                    }

                    if (form.PasteOverwrite)
                    {
                        for (int i = 0; i < tmp.Paragraphs.Count; i++)
                        {
                            if (form.PasteAll)
                            {
                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                                    _subtitle.Paragraphs[index + i].StartTime.TotalMilliseconds = tmp.Paragraphs[i].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[index + i].EndTime.TotalMilliseconds = tmp.Paragraphs[i].EndTime.TotalMilliseconds;
                                }
                            }
                            else if (form.PasteTimeCodesOnly)
                            {
                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    _subtitle.Paragraphs[index + i].StartTime.TotalMilliseconds = tmp.Paragraphs[i].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[index + i].EndTime.TotalMilliseconds = tmp.Paragraphs[i].EndTime.TotalMilliseconds;
                                }
                            }
                            else if (form.PasteTextOnly)
                            {
                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                                }
                            }
                            else if (form.PasteOriginalTextOnly)
                            {
                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    var original = Utilities.GetOriginalParagraph(index + i, _subtitle.Paragraphs[index + i], _subtitleOriginal.Paragraphs);
                                    if (original != null)
                                    {
                                        original.Text = tmp.Paragraphs[i].Text;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var isAssa = IsAssa();
                        var assaStyles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                        for (var i = 0; i + index < _subtitle.Paragraphs.Count && i < tmp.Paragraphs.Count; i++)
                        {
                            if (index + i < _subtitle.Paragraphs.Count)
                            {
                                if (form.PasteAll)
                                {
                                    _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                                    _subtitle.Paragraphs[index + i].StartTime.TotalMilliseconds = tmp.Paragraphs[i].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[index + i].EndTime.TotalMilliseconds = tmp.Paragraphs[i].EndTime.TotalMilliseconds;
                                    if (isAssa && format.GetType() == typeof(AdvancedSubStationAlpha))
                                    {
                                        _subtitle.Paragraphs[index + i].Extra = tmp.Paragraphs[i].Extra;
                                        _subtitle.Paragraphs[index + i].Actor = tmp.Paragraphs[i].Actor;

                                        if (!string.IsNullOrWhiteSpace(tmp.Paragraphs[i].Extra) &&
                                            !assaStyles.Any(p => p.Equals(tmp.Paragraphs[i].Extra, StringComparison.OrdinalIgnoreCase)))
                                        {
                                            var s = AdvancedSubStationAlpha.GetSsaStyle(tmp.Paragraphs[i].Extra, tmp.Header);
                                            _subtitle.Header = AdvancedSubStationAlpha.AddSsaStyle(s, _subtitle.Header);
                                            assaStyles.Add(s.Name);
                                        }
                                    }
                                }
                                else if (form.PasteTimeCodesOnly)
                                {
                                    _subtitle.Paragraphs[index + i].StartTime.TotalMilliseconds = tmp.Paragraphs[i].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[index + i].EndTime.TotalMilliseconds = tmp.Paragraphs[i].EndTime.TotalMilliseconds;
                                }
                                else if (form.PasteTextOnly)
                                {
                                    _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                                }
                                else if (form.PasteOriginalTextOnly)
                                {
                                    var original = Utilities.GetOriginalParagraph(index + i, _subtitle.Paragraphs[index + i], _subtitleOriginal.Paragraphs);
                                    if (original != null)
                                    {
                                        original.Text = tmp.Paragraphs[i].Text;
                                    }
                                }
                            }
                        }
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    RefreshSelectedParagraph();
                }

                form.Dispose();
            }
        }

        private void DeleteAndShiftCellsUpToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            int first = FirstSelectedIndex;
            List<int> list = new List<int>();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                list.Add(index);
            }

            list.Sort();
            list.Reverse();

            MakeHistoryForUndo(_language.BeforeColumnDelete);
            foreach (int index in list)
            {
                for (int k = index; k < _subtitle.Paragraphs.Count - 1; k++)
                {
                    _subtitle.Paragraphs[k].Text = _subtitle.Paragraphs[k + 1].Text;
                }

                _subtitle.Paragraphs[_subtitle.Paragraphs.Count - 1].Text = string.Empty;
            }

            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            SubtitleListview1.SelectIndexAndEnsureVisible(first, true);
            RefreshSelectedParagraph();
        }

        private void ToolStripMenuItemColumnImportTextClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            using (var importText = new ImportText(null, _subtitle, null))
            {
                if (importText.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeColumnImportText);
                    int index = FirstSelectedIndex;
                    for (int i = 0; i < importText.FixedSubtitle.Paragraphs.Count; i++)
                    {
                        for (int k = _subtitle.Paragraphs.Count - 2; k > index; k--)
                        {
                            _subtitle.Paragraphs[k + 1].Text = _subtitle.Paragraphs[k].Text;
                        }

                        if (index + i < _subtitle.Paragraphs.Count)
                        {
                            _subtitle.Paragraphs[index + i].Text = string.Empty;
                        }
                    }

                    for (int i = 0; i + index < _subtitle.Paragraphs.Count && i < importText.FixedSubtitle.Paragraphs.Count; i++)
                    {
                        _subtitle.Paragraphs[index + i].Text = importText.FixedSubtitle.Paragraphs[i].Text;
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    RefreshSelectedParagraph();
                }
            }
        }

        private void ShiftTextCellsDownToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            int index = FirstSelectedIndex;
            int count = SubtitleListview1.SelectedIndices.Count;
            MakeHistoryForUndo(_language.BeforeColumnShiftCellsDown);
            for (int i = 0; i < count; i++)
            {
                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                {
                    _subtitle.Paragraphs[k + 1].Text = _subtitle.Paragraphs[k].Text;
                }

                if (index + i < _subtitle.Paragraphs.Count)
                {
                    _subtitle.Paragraphs[index + i].Text = string.Empty;
                }
            }

            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            RefreshSelectedParagraph();
        }

        private void ToolStripMenuItemInsertTextFromSubClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                if (!File.Exists(openFileDialog1.FileName))
                {
                    return;
                }

                var fi = new FileInfo(openFileDialog1.FileName);
                if (fi.Length > 1024 * 1024 * 10) // max 10 mb
                {
                    var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, openFileDialog1.FileName);
                    if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                var tmp = new Subtitle();
                SubtitleFormat format = tmp.LoadSubtitle(openFileDialog1.FileName, out var _, null);
                if (format != null)
                {
                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        tmp.RemoveEmptyLines();
                    }

                    if (SubtitleListview1.SelectedIndices.Count < 1)
                    {
                        return;
                    }

                    MakeHistoryForUndo(_language.BeforeColumnShiftCellsDown);

                    int index = FirstSelectedIndex;
                    for (int i = 0; i < tmp.Paragraphs.Count; i++)
                    {
                        {
                            for (int k = _subtitle.Paragraphs.Count - 2; k > index; k--)
                            {
                                _subtitle.Paragraphs[k + 1].Text = _subtitle.Paragraphs[k].Text;
                            }
                        }
                    }

                    for (int i = 0; i + index < _subtitle.Paragraphs.Count && i < tmp.Paragraphs.Count; i++)
                    {
                        _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    RefreshSelectedParagraph();
                }
            }
        }

        private void ToolStripMenuItemOpenKeepVideoClick(object sender, EventArgs e)
        {
            Interlocked.Increment(ref _openSaveCounter);
            openToolStripMenuItem.Enabled = false;
            ReloadFromSourceView();
            _resetVideo = false;
            OpenNewFile();
            _resetVideo = true;
            openToolStripMenuItem.Enabled = true;
            Interlocked.Decrement(ref _openSaveCounter);
        }

        private void ChangeSpeedInPercentToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var form = new ChangeSpeedInPercent(SubtitleListview1.SelectedItems.Count))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeAdjustSpeedInPercent + $" ({form.Percentage})");
                    SaveSubtitleListviewIndices();
                    if (form.AdjustAllLines)
                    {
                        _subtitle = form.AdjustAllParagraphs(_subtitle);
                        if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                        {
                            _subtitleOriginal = form.AdjustAllParagraphs(_subtitleOriginal);
                        }
                    }
                    else
                    {
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            var p = _subtitle.GetParagraphOrDefault(index);
                            if (p != null)
                            {
                                form.AdjustParagraph(p);
                                if (IsOriginalEditable && SubtitleListview1.IsOriginalTextColumnVisible)
                                {
                                    var original = Utilities.GetOriginalParagraph(index, p, _subtitle.Paragraphs);
                                    if (original != null)
                                    {
                                        form.AdjustParagraph(original);
                                    }
                                }
                            }
                        }
                    }

                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void ToolStripMenuItemExportAvidStlClick(object sender, EventArgs e)
        {
            var avidStl = new AvidStl();
            saveFileDialog1.Filter = avidStl.Name + "|*" + avidStl.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + avidStl.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(avidStl.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += avidStl.Extension;
                }

                AvidStl.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private Subtitle GetSaveSubtitle(Subtitle subtitle)
        {
            var sub = new Subtitle(subtitle);
            if (string.IsNullOrEmpty(sub.FileName))
            {
                sub.FileName = "Untitled";
            }

            if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
            {
                sub.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(Configuration.Settings.General.CurrentVideoOffsetInMs));
            }

            return sub;
        }

        private void ColumnDeleteTextOnlyToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            MakeHistoryForUndo(_language.BeforeColumnDelete);
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                _subtitle.Paragraphs[index].Text = string.Empty;
                SubtitleListview1.SetText(index, string.Empty);
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, _subtitle.Paragraphs[index]);
            }

            RefreshSelectedParagraph();
        }

        private void ToolStripMenuItemBatchConvertClick(object sender, EventArgs e)
        {
            Visible = false;
            using (var form = new BatchConvert(Icon))
            {
                form.ShowDialog(this);
            }

            Visible = true;
        }

        private void CopyOriginalTextToCurrentToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitleOriginal == null || !SubtitleListview1.IsOriginalTextColumnVisible || SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            bool first = true;
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index], _subtitleOriginal.Paragraphs);
                if (original != null)
                {
                    if (first)
                    {
                        MakeHistoryForUndo(_language.BeforeColumnPaste);
                    }

                    SubtitleListview1.SetText(index, original.Text);
                    _subtitle.Paragraphs[index].Text = original.Text;
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, _subtitle.Paragraphs[index]);
                    first = false;
                }
            }

            RefreshSelectedParagraph();
        }

        private void ToolStripMenuItemColumnDropDownOpening(object sender, EventArgs e)
        {
            copyOriginalTextToCurrentToolStripMenuItem.Visible = !string.IsNullOrEmpty(copyOriginalTextToCurrentToolStripMenuItem.Text) &&
                                                                 SubtitleListview1.IsOriginalTextColumnVisible &&
                                                                 _subtitleOriginal != null;
        }

        private void ToolStripMenuItemMergeDuplicateTextClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var form = new MergeDoubleLines())
            {
                form.Initialize(_subtitle);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeMergeLinesWithSameText);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in form.MergedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.MergedShortLinesX, form.NumberOfMerges));
                    SaveSubtitleListviewIndices();
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void ToolStripMenuItemMergeLinesWithSameTimeCodesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var form = new MergeTextWithSameTimeCodes())
            {
                form.Initialize(_subtitle);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeMergeLinesWithSameText);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in form.MergedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.MergedShortLinesX, form.NumberOfMerges));
                    SaveSubtitleListviewIndices();
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void ToolStripMenuItemExportSpumuxClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Spumux, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemModifySelectionClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var form = new ModifySelection(_subtitle, GetCurrentSubtitleFormat(), SubtitleListview1))
            {
                form.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemInverseSelectionClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            SubtitleListview1.BeginUpdate();
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            foreach (ListViewItem item in SubtitleListview1.Items)
            {
                item.Selected = !item.Selected;
            }

            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.EndUpdate();
            SubtitleListView1SelectedIndexChange();
        }

        private void ToolStripMenuItemSpellCheckFromCurrentLineClick(object sender, EventArgs e)
        {
            _spellCheckForm = null;
            SpellCheck(true, FirstSelectedIndex);
        }

        private void ToolStripMenuItemImportFromVideoClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _language.OpenSubtitleVideoFile;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = _language.VideoFiles + "|*.mkv;*.mks;*.mp4;*.mov;*.ts;*.m2ts;*.mpeg;*.divx;*.avi";
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = Path.GetDirectoryName(openFileDialog1.FileName);
                OpenSubtitle(openFileDialog1.FileName, null);
            }
        }

        private void ToolStripMenuItemImportOcrHardSubClick(object sender, EventArgs e)
        {
            using (var form = new HardSubExtract(_videoFileName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    if (!string.IsNullOrEmpty(form.OcrFileName))
                    {
                        MakeHistoryForUndo(_language.BeforeAutoBalanceSelectedLines);
                        OpenSubtitle(form.OcrFileName, null);
                    }
                }
            }
        }

        private void ToolStripMenuItemExportFcpIImageClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Fcp, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemExportDostClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Dost, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemMeasurementConverterClick(object sender, EventArgs e)
        {
            var selectedText = string.Empty;
            if (InSourceView)
            {
                selectedText = textBoxSource.SelectedText;
            }
            else
            {
                selectedText = GetFocusedTextBox().SelectedText;
            }

            if (_measurementConverter != null && !_measurementConverter.IsDisposed)
            {
                _measurementConverter.WindowState = FormWindowState.Normal;
                _measurementConverter.Input = selectedText;
                _measurementConverter.IsOriginalActive = GetFocusedTextBox() == textBoxListViewTextOriginal;
                _measurementConverter.Focus();
                return;
            }

            _measurementConverter = new MeasurementConverter
            {
                Input = selectedText,
                IsOriginalActive = GetFocusedTextBox() == textBoxListViewTextOriginal,
            };
            _measurementConverter.OnInsertClicked += MeasurementConverterInsertClicked;
            _measurementConverter.Show(this);
        }

        private void MeasurementConverterInsertClicked(object sender, MeasurementConverter.InsertEventArgs e)
        {
            if (IsSubtitleLoaded)
            {
                var tb = e.IsOriginalActive ? textBoxListViewTextOriginal : textBoxListViewText;
                tb.SelectedText = e.Result;
            }
        }

        private async void ToolStripMenuItemImportChaptersClick(object sender, EventArgs e)
        {
            toolStripMenuItemImportChapters.Enabled = false;
            ShowStatus(_language.ImportingChapters);

            var chaps = new List<MatroskaChapter>();
            using (var matroska = new MatroskaFile(_videoFileName))
            {
                chaps = await Task.Run(() => matroska.GetChapters());
            }

            if (chaps?.Count > 0)
            {
                mediaPlayer.Chapters = chaps.ToArray();

                if (audioVisualizer.WavePeaks != null)
                {
                    audioVisualizer.Chapters = chaps.ToArray();
                }

                ShowStatus(string.Format(_language.XChaptersImported, chaps?.Count));
            }
            else
            {
                ShowStatus(_language.NoChapters);
                MessageBox.Show(_language.NoChapters, Title);
            }

            toolStripMenuItemImportChapters.Enabled = true;
        }

        private void ToolStripMenuItemImportShotChangesClick(object sender, EventArgs e)
        {
            using (var form = new ImportShotChanges(_videoInfo, _videoFileName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    audioVisualizer.ShotChanges = form.ShotChangesInSeconds;
                    ShotChangeHelper.SaveShotChanges(_videoFileName, audioVisualizer.ShotChanges);
                    ShowStatus(string.Format(_language.XShotChangesImported, form.ShotChangesInSeconds.Count));
                }
            }
        }

        private void ToolStripMenuItemListShotChangesClick(object sender, EventArgs e)
        {
            using (var form = new ShotChangesList(_fileName, audioVisualizer.ShotChanges))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    audioVisualizer.ShotChanges = form.ShotChanges;
                    ShotChangeHelper.SaveShotChanges(_videoFileName, audioVisualizer.ShotChanges);
                    if (mediaPlayer.VideoPlayer != null && form.ShotChangeSeconds >= 0)
                    {
                        mediaPlayer.CurrentPosition = form.ShotChangeSeconds;
                    }
                }
            }
        }

        private void ToolStripMenuItemBridgeGapsBetweenSubtitlesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var form = new DurationsBridgeGaps(_subtitle))
            {
                if (form.ShowDialog(this) == DialogResult.OK && form.FixedCount > 0)
                {
                    int index = FirstSelectedIndex;
                    if (index < 0)
                    {
                        index = 0;
                    }

                    MakeHistoryForUndo(_language.BeforeDurationsBridgeGap);
                    SaveSubtitleListviewIndices();
                    _subtitle.Paragraphs.Clear();
                    _subtitle.Paragraphs.AddRange(form.FixedSubtitle.Paragraphs);

                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void ToolStripMenuItemOpenDvdClick(object sender, EventArgs e)
        {
            using (var form = new OpenVideoDvd())
            {
                if (form.ShowDialog(this) == DialogResult.OK && !string.IsNullOrEmpty(form.DvdPath))
                {
                    _videoFileName = form.DvdPath;
                    if (mediaPlayer.VideoPlayer != null)
                    {
                        mediaPlayer.PauseAndDisposePlayer();
                    }

                    ResetPlaySelection();

                    _videoInfo = new VideoInfo
                    {
                        Width = 720,
                        Height = 576,
                        FramesPerSecond = 25,
                        VideoCodec = "MPEG2"
                    };
                    toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", _videoInfo.FramesPerSecond);

                    var oldVideoPlayer = Configuration.Settings.General.VideoPlayer;
                    try
                    {
                        Configuration.Settings.General.VideoPlayer = "VLC";
                        UiUtil.InitializeVideoPlayerAndContainer(_videoFileName, _videoInfo, mediaPlayer, VideoLoaded, VideoEnded);
                        mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
                        mediaPlayer.OnButtonClicked -= MediaPlayer_OnButtonClicked;
                        mediaPlayer.OnButtonClicked += MediaPlayer_OnButtonClicked;
                        mediaPlayer.Volume = 0;
                        labelVideoInfo.Text = string.Format("DVD {0}x{1} {2}", _videoInfo.Width, _videoInfo.Height, _videoInfo.VideoCodec.Trim());
                        if (_videoInfo.FramesPerSecond > 0)
                        {
                            labelVideoInfo.Text += string.Format(" {0:0.0##}", _videoInfo.FramesPerSecond);
                        }
                    }
                    finally
                    {
                        Configuration.Settings.General.VideoPlayer = oldVideoPlayer;
                    }
                }
            }
        }

        private void StyleToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Style, (sender as ToolStripItem).Text);
        }

        private void ToolStripMenuItemFocusTextboxClick(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            }

            textBoxListViewText.Focus();
            textBoxListViewText.SelectAll();
        }

        private void AscendingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            descendingToolStripMenuItem.Checked = false;
            AscendingToolStripMenuItem.Checked = true;
            toolsToolStripMenuItem.ShowDropDown();
            toolStripMenuItemSortBy.ShowDropDown();
        }

        private void DescendingToolStripMenuItemClick(object sender, EventArgs e)
        {
            AscendingToolStripMenuItem.Checked = false;
            descendingToolStripMenuItem.Checked = true;
            toolsToolStripMenuItem.ShowDropDown();
            toolStripMenuItemSortBy.ShowDropDown();
        }

        private void ToolStripMenuItemExportExportCustomTextFormatClick(object sender, EventArgs e)
        {
            using (var form = new ExportCustomText(GetSaveSubtitle(_subtitle), GetSaveSubtitle(_subtitleOriginal), _fileName, _videoFileName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    ShowStatus(form.LogMessage);
                }
            }
        }

        private void PasteIntoActiveTextBox(string s, bool allowMultiLine = false)
        {
            if (InSourceView)
            {
                textBoxSource.SelectedText = s;
            }
            else
            {
                if (textBoxListViewTextOriginal.Visible && textBoxListViewTextOriginal.Enabled && textBoxListViewTextOriginal.Focused)
                {
                    if (!string.IsNullOrEmpty(textBoxListViewTextOriginal.SelectedText))
                    {
                        textBoxListViewTextOriginal.SelectedText = s;
                    }
                    else
                    {
                        var selectionStart = textBoxListViewTextOriginal.SelectionStart;
                        textBoxListViewTextOriginal.Text = textBoxListViewTextOriginal.Text.Insert(textBoxListViewTextOriginal.SelectionStart, s);
                        textBoxListViewTextOriginal.SelectionStart = selectionStart + s.Length;
                    }
                }
                else
                {
                    if (SubtitleListview1.SelectedItems.Count > 1 && !textBoxListViewText.Focused && allowMultiLine)
                    {
                        foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                        {
                            var p = _subtitle.GetParagraphOrDefault(item.Index);
                            if (p == null)
                            {
                                continue;
                            }

                            p.Text = s + " " + p.Text;
                            SubtitleListview1.SetText(item.Index, p.Text);
                        }

                        RefreshSelectedParagraph();
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(textBoxListViewText.SelectedText))
                        {
                            textBoxListViewText.SelectedText = s;
                        }
                        else
                        {
                            var selectionStart = textBoxListViewText.SelectionStart;
                            textBoxListViewText.Text = textBoxListViewText.Text.Insert(textBoxListViewText.SelectionStart, s);
                            textBoxListViewText.SelectionStart = selectionStart + s.Length;
                        }
                    }

                    UpdateSourceView();
                }
            }
        }

        private void LeftToolStripMenuItemClick(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u200E"); // LRM, Left-to-Right Mark, acts as a Latin character.
        }

        private void RighttoleftMarkToolStripMenuItemClick(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u200F"); // RLM, Right-to-Left Mark, acts as an Arabic character.
        }

        private void StartOfLefttorightEmbeddingLREToolStripMenuItemClick(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u202A");
        }

        private void StartOfRighttoleftEmbeddingRLEToolStripMenuItemClick(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u202B");
        }

        private void StartOfLefttorightOverrideLROToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u202D");
        }

        private void StartOfRighttoleftOverrideRLOToolStripMenuItemClick(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u202E");
        }

        private void ToolStripMenuItemRtlUnicodeControlCharsClick(object sender, EventArgs e)
        {
            if (IsUnicode)
            {
                MakeHistoryForUndo(toolStripMenuItemRtlUnicodeControlChars.Text);
                int selectedIndex = FirstSelectedIndex;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.Paragraphs[index];
                    p.Text = Utilities.FixRtlViaUnicodeChars(p.Text);
                    SubtitleListview1.SetText(index, p.Text);
                    if (index == selectedIndex)
                    {
                        textBoxListViewText.Text = p.Text;
                    }
                }

                RefreshSelectedParagraph();
            }
        }

        private void ToolStripMenuItemRemoveUnicodeControlCharsClick(object sender, EventArgs e)
        {
            if (IsUnicode)
            {
                MakeHistoryForUndo(toolStripMenuItemRemoveUnicodeControlChars.Text);
                int selectedIndex = FirstSelectedIndex;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.Paragraphs[index];
                    p.Text = Utilities.RemoveUnicodeControlChars(p.Text);
                    SubtitleListview1.SetText(index, p.Text);
                    if (index == selectedIndex)
                    {
                        textBoxListViewText.Text = p.Text;
                    }
                }

                RefreshSelectedParagraph();
            }
        }

        private void ToolStripMenuItemImportImagesClick(object sender, EventArgs e)
        {
            if (!ContinueNewOrExit())
            {
                return;
            }

            if (!string.IsNullOrEmpty(_videoFileName) && mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.Pause();
            }

            using (var form = new ImportImages())
            {
                if (form.ShowDialog(this) == DialogResult.OK && form.Subtitle.Paragraphs.Count > 0)
                {
                    ImportAndOcrSrt(form.Subtitle);
                }
            }
        }

        private void AudioVisualizerMouseEnter(object sender, EventArgs e)
        {
            if (Configuration.Settings.VideoControls.WaveformFocusOnMouseEnter && audioVisualizer.WavePeaks != null && !audioVisualizer.Focused && audioVisualizer.CanFocus)
            {
                if (Math.Abs(_lastWaveformMenuCloseTicks - DateTime.UtcNow.Ticks) > 10000 * 500) // only if last change was longer ago than 500 milliseconds
                {
                    audioVisualizer.Focus();
                }
            }
        }

        private void SubtitleListview1_MouseEnter(object sender, EventArgs e)
        {
            if (Configuration.Settings.VideoControls.WaveformFocusOnMouseEnter && Configuration.Settings.VideoControls.WaveformListViewFocusOnMouseEnter && SubtitleListview1.CanFocus)
            {
                SubtitleListview1.Focus();
            }
        }

        private void ToolStripButtonFixCommonErrorsClick(object sender, EventArgs e)
        {
            FixCommonErrors(false);
        }

        private void ToolStripButtonRemoveTextForHiClick(object sender, EventArgs e)
        {
            RemoveTextForHearImpairedToolStripMenuItemClick(sender, e);
        }

        private void ToolStripMenuItemExportDcinemaInteropClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.DCinemaInterop, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemExportDcinemaSMPTE2014Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.DCinemaSmpte2014, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        internal Subtitle UndoFromSpellCheck(Subtitle subtitle)
        {
            var idx = FirstSelectedIndex;
            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                if (_subtitle.Paragraphs[i].Text != subtitle.Paragraphs[i].Text)
                {
                    _subtitle.Paragraphs[i].Text = subtitle.Paragraphs[i].Text;
                    SubtitleListview1.SetText(i, _subtitle.Paragraphs[i].Text);
                }

                if (idx == i)
                {
                    SubtitleListview1.SetText(idx, _subtitle.Paragraphs[idx].Text);
                }
            }

            RefreshSelectedParagraph();
            return _subtitle;
        }

        private void CheckForUpdatesToolStripMenuItemClick(object sender, EventArgs e)
        {
            try
            {
                _timerCheckForUpdates?.Stop();
            }
            catch
            {
                // ignore
            }

            ShowCheckForUpdates();

            Configuration.Settings.General.LastCheckForUpdates = DateTime.Now;
        }

        private void ShowCheckForUpdates()
        {
            using (var form = new CheckForUpdates(this))
            {
                form.ShowDialog(this);
                if (form.UpdatePlugins)
                {
                    using (var formGetPlugins = new PluginsGet())
                    {
                        formGetPlugins.UpdateAll = true;
                        formGetPlugins.ShowDialog(this);
                    }

                }
            }
        }

        private void SetVideoOffsetToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(_videoFileName) && mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.Pause();
            }

            using (var form = new SetVideoOffset())
            {
                form.VideoOffset = TimeCode.FromSeconds(Configuration.Settings.General.DefaultVideoOffsetInMs / 1000.0);
                if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
                {
                    form.VideoOffset = new TimeCode(Configuration.Settings.General.CurrentVideoOffsetInMs);
                }

                var oldVideoOffset = Configuration.Settings.General.CurrentVideoOffsetInMs;
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    var change = _changeSubtitleHash != GetFastSubtitleHash();
                    if (form.FromCurrentVideoPosition && mediaPlayer.VideoPlayer != null)
                    {
                        Configuration.Settings.General.CurrentVideoOffsetInMs = (long)(Math.Round((form.VideoOffset.TotalSeconds - mediaPlayer.CurrentPosition) * 1000.0));
                        change = true;
                    }
                    else
                    {
                        Configuration.Settings.General.CurrentVideoOffsetInMs = (long)(Math.Round(form.VideoOffset.TotalSeconds * 1000.0));
                    }

                    if (Configuration.Settings.General.CurrentVideoOffsetInMs > 0)
                    {
                        Configuration.Settings.General.DefaultVideoOffsetInMs = Configuration.Settings.General.CurrentVideoOffsetInMs;
                    }

                    if (form.DoNotaddVideoOffsetToTimeCodes)
                    {
                        // reset
                        _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(oldVideoOffset));
                        _subtitleOriginal?.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(oldVideoOffset));

                        if (!form.Reset)
                        {
                            _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                            _subtitleOriginal?.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                        }
                    }
                    else
                    {
                        change = true;
                    }

                    if (!change)
                    {
                        _changeSubtitleHash = GetFastSubtitleHash();

                        if (IsOriginalEditable)
                        {
                            _changeOriginalSubtitleHash = GetFastSubtitleOriginalHash();
                        }
                    }
                    else if (change)
                    {
                        if (_changeSubtitleHash == GetFastSubtitleHash())
                        {
                            _changeSubtitleHash = -1;
                        }
                        if (IsOriginalEditable && _changeOriginalSubtitleHash == GetFastSubtitleOriginalHash())
                        {
                            _changeOriginalSubtitleHash = -1;
                        }
                    }

                    SaveSubtitleListviewIndices();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RefreshSelectedParagraph();
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void ToolStripMenuItemExportEdlClipNameClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.EdlClipName, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemExportEdlClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Edl, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemAddWaveformBatchClick(object sender, EventArgs e)
        {
            using (var form = new AddWaveformBatch())
            {
                form.ShowDialog(this);
            }

            if (_videoFileName != null)
            {
                ReloadWaveform(_videoFileName, VideoAudioTrackNumber);
            }
        }

        private void DisplaySubtitleNotLoadedMessage()
        {
            MessageBox.Show(this, _language.NoSubtitleLoaded, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }

        private void ToolStripMenuItemExportBdTextStClick(object sender, EventArgs e)
        {
            using (var form = new ExportTextST(_subtitle))
            {
                form.ShowDialog(this);
            }
        }

        private void ChooseProfile()
        {
            using (var form = new ProfileChoose(Configuration.Settings.General.Profiles, Configuration.Settings.General.CurrentProfile))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    SubtitleListview1.BeginUpdate();
                    for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
                    {
                        SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, i, _subtitle.Paragraphs[i]);
                    }

                    SubtitleListview1.EndUpdate();
                    if (_subtitleListViewIndex >= 0)
                    {
                        UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[_subtitleListViewIndex], textBoxListViewText);
                    }

                    ShowLineInformationListView();
                    ShowSourceLineNumber();
                }
            }
        }

        private void DuplicateLine()
        {
            if (SubtitleListview1.SelectedItems.Count != 1)
            {
                return;
            }

            var firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            MakeHistoryForUndo(_language.BeforeInsertLine);
            var newParagraph = new Paragraph();
            SetStyleForNewParagraph(newParagraph, firstSelectedIndex);
            var cur = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            newParagraph.StartTime.TotalMilliseconds = cur.StartTime.TotalMilliseconds;
            newParagraph.EndTime.TotalMilliseconds = cur.EndTime.TotalMilliseconds;
            newParagraph.Text = cur.Text;

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleOriginal != null && _subtitleOriginal.Paragraphs.Count > 0)
            {
                var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex, _subtitle.Paragraphs[firstSelectedIndex], _subtitleOriginal.Paragraphs);
                if (currentOriginal != null)
                {
                    _subtitleOriginal.Paragraphs.Insert(_subtitleOriginal.Paragraphs.IndexOf(currentOriginal) + 1, new Paragraph(currentOriginal));
                }
                else
                {
                    _subtitleOriginal.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                }

                _subtitleOriginal.Renumber();
            }

            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), firstSelectedIndex, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(firstSelectedIndex, newParagraph);
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            UpdateSourceView();
            ShowStatus(_language.LineInserted);
        }

        private void ToolStripSelectedClick(object sender, EventArgs e)
        {
            if (!ShowProfileInStatusBar)
            {
                LabelStatusClick(sender, e);
                return;
            }

            var x = statusStrip1.PointToClient(Cursor.Position).X;
            var textWidth = TextRenderer.MeasureText(toolStripSelected.Text, toolStripSelected.Font).Width;
            if (toolStripStatusLabelProgress.Visible)
            {
                textWidth += toolStripStatusLabelProgress.Width + 5;
            }

            var min = statusStrip1.Width - textWidth - 20;
            var max = min + TextRenderer.MeasureText(Configuration.Settings.General.CurrentProfile, toolStripSelected.Font).Width + 10;
            if (x >= min && x <= max)
            {
                ChooseProfile(); // profile name in status bar clicked
            }
            else
            {
                LabelStatusClick(sender, e);
            }
        }

        private void ContextMenuStripWaveformClosing(object sender, ToolStripDropDownClosingEventArgs e)
        {
            _lastWaveformMenuCloseTicks = DateTime.UtcNow.Ticks;
        }

        private void MenuOpened(object sender, EventArgs e)
        {
            IsMenuOpen = true;
        }

        private void MenuClosed(object sender, ToolStripDropDownClosedEventArgs e)
        {
            IsMenuOpen = false;
        }

        private void MenuClosed(object sender, EventArgs e)
        {
            IsMenuOpen = false;
        }

        private void UpdateToolbarButtonsToCurrentFormat(SubtitleFormat currentSubtitleFormat)
        {
            if (currentSubtitleFormat == null)
            {
                return;
            }

            var formatType = currentSubtitleFormat.GetType();

            var netflixIconOn = formatType == typeof(TimedText10) || formatType == typeof(NetflixTimedText) || formatType == typeof(NetflixImsc11Japanese) || formatType == typeof(Ebu);
            toolStripButtonNetflixQualityCheck.Visible = netflixIconOn && Configuration.Settings.General.ShowToolbarNetflixGlyphCheck;

            var assFormatOn = formatType == typeof(AdvancedSubStationAlpha);
            toolStripButtonAssStyleManager.Visible = assFormatOn;
            toolStripButtonAssStyleManager.ToolTipText = LanguageSettings.Current.SubStationAlphaStyles.Title;
            toolStripButtonAssProperties.Visible = assFormatOn;
            toolStripButtonAssaDraw.Visible = assFormatOn && File.Exists(Path.Combine(Configuration.PluginsDirectory, "AssaDraw.dll"));
            toolStripButtonAssAttachments.Visible = assFormatOn;

            toolStripMenuItemWebVttStyle.Visible = false;

            if (formatType == typeof(SubStationAlpha))
            {
                toolStripButtonAssStyleManager.Visible = true;
                toolStripButtonAssProperties.Visible = true;
                toolStripButtonAssAttachments.Visible = true;
            }

            if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
            {
                TryLoadIcon(toolStripButtonAssStyleManager, "AssaStyle");
            }

            toolStripButtonXProperties.Visible = formatType == typeof(ItunesTimedText);
            if (toolStripButtonXProperties.Visible)
            {
                toolStripButtonXProperties.ToolTipText = string.Format(_language.Menu.File.FormatXProperties, _currentSubtitleFormat?.Name);
                toolStripButtonXProperties.Image = Properties.Resources.itt;
                TryLoadIcon(toolStripButtonXProperties, "IttProperties");
            }

            if (formatType == typeof(WebVTT) || formatType == typeof(WebVTTFileWithLineNumber))
            {
                toolStripButtonXProperties.Visible = true;
                toolStripButtonXProperties.ToolTipText = string.Format(_language.Menu.File.FormatXProperties, new WebVTT().Name);
                toolStripButtonXProperties.Image = Properties.Resources.webvtt;
                TryLoadIcon(toolStripButtonXProperties, "WebVttProperties");

                toolStripButtonAssStyleManager.Visible = true;
                toolStripButtonAssStyleManager.ToolTipText = string.Format(LanguageSettings.Current.WebVttStyleManager.Title, new WebVTT().Name);
                toolStripButtonAssStyleManager.Image = Properties.Resources.webvtt;
                TryLoadIcon(toolStripButtonAssStyleManager, "WebVttStyle");

                toolStripMenuItemWebVttStyle.Visible = true;
            }

            if (formatType == typeof(Ebu))
            {
                toolStripButtonXProperties.Visible = true;
                toolStripButtonXProperties.ToolTipText = string.Format(_language.Menu.File.FormatXProperties, new Ebu().Name);
                toolStripButtonXProperties.Image = Properties.Resources.ebu;
                TryLoadIcon(toolStripButtonXProperties, "EbuProperties");
            }
        }

        private void NetflixGlyphCheck(bool isSaving)
        {
            ReloadFromSourceView();

            string fileName = string.IsNullOrEmpty(_fileName) ? "UntitledSubtitle" : Path.GetFileNameWithoutExtension(_fileName);
            string language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);

            var netflixController = new NetflixQualityController { Language = language, VideoFileName = _videoFileName };
            if (!string.IsNullOrEmpty(_videoFileName) && _videoInfo != null && _videoInfo.FramesPerSecond > 20)
            {
                netflixController.FrameRate = _videoInfo.FramesPerSecond;
            }
            else if (!string.IsNullOrEmpty(_videoFileName) && CurrentFrameRate != 23.976 && CurrentFrameRate != 24)
            {
                netflixController.FrameRate = CurrentFrameRate;
            }

            netflixController.RunChecks(_subtitle);

            if (netflixController.Records.Count > 0)
            {
                string reportPath = Path.GetTempPath() + fileName + "_NetflixQualityCheck.csv";
                netflixController.SaveCsv(reportPath);
                if (!isSaving)
                {
                    using (var form = new NetflixFixErrors(_subtitle, GetCurrentSubtitleFormat(), _fileName, _videoFileName, netflixController.FrameRate))
                    {
                        if (form.ShowDialog(this) == DialogResult.OK)
                        {
                            // Do nothing for now
                        }
                    }
                }
                else
                {
                    ShowStatus(string.Format(_language.SavedSubtitleX, $"\"{_fileName}\"") + " - " +
                               string.Format(LanguageSettings.Current.NetflixQualityCheck.FoundXIssues, netflixController.Records.Count));
                }
            }
            else if (!isSaving)
            {
                MessageBox.Show("Netflix Quality Check found no issues.", "Netflix Quality Check");
            }
        }

        private void NetflixGlyphCheckToolStripMenuItem_Click(object sender, EventArgs e)
        {
            NetflixGlyphCheck(false);
        }

        private void ToolStripButtonNetflixGlyphCheckClick(object sender, EventArgs e)
        {
            NetflixGlyphCheck(false);
        }

        private void InsertSubtitleHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK && File.Exists(openFileDialog1.FileName))
            {
                var fi = new FileInfo(openFileDialog1.FileName);
                if (fi.Length > 1024 * 1024 * 10) // max 10 mb
                {
                    var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, openFileDialog1.FileName);
                    if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                var subtitle = new Subtitle();
                SubtitleFormat format = subtitle.LoadSubtitle(openFileDialog1.FileName, out var encoding, null);
                if (format != null && subtitle.Paragraphs.Count > 0)
                {
                    SaveSubtitleListviewIndices();

                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        subtitle.RemoveEmptyLines();
                    }

                    var adjustment = mediaPlayer.CurrentPosition - subtitle.Paragraphs[0].StartTime.TotalSeconds;
                    if (adjustment < 0)
                    {
                        adjustment = 0;
                    }

                    foreach (Paragraph newP in subtitle.Paragraphs)
                    {
                        newP.Adjust(1.0d, adjustment);
                        if (_subtitle.Paragraphs.Any(p => newP.StartTime.TotalMilliseconds >= p.StartTime.TotalMilliseconds &&
                                                          newP.StartTime.TotalMilliseconds <= p.EndTime.TotalMilliseconds ||
                                                          newP.EndTime.TotalMilliseconds >= p.StartTime.TotalMilliseconds &&
                                                          newP.EndTime.TotalMilliseconds <= p.EndTime.TotalMilliseconds))
                        {
                            // new subs will overlap existing subs
                            if (MessageBox.Show(_language.PromptInsertSubtitleOverlap, _languageGeneral.Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                            {
                                return;
                            }

                            break;
                        }
                    }

                    MakeHistoryForUndo(string.Format(_language.BeforeInsertSubtitleAtVideoPosition, openFileDialog1.FileName));

                    foreach (var p in subtitle.Paragraphs)
                    {
                        _subtitle.InsertParagraphInCorrectTimeOrder(p);
                    }

                    _subtitle.Renumber();
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void ActorToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Actor, (sender as ToolStripItem).Text);
        }

        private void ToolStripMenuItemExportFcpXmlAdvancedClick(object sender, EventArgs e)
        {
            using (var dialog = new ExportFcpXmlAdvanced(_subtitle, _videoFileName))
            {
                dialog.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemOpenVideoFromUrlClick(object sender, EventArgs e)
        {
            var ffmpegFullPath = Path.Combine(Configuration.DataDirectory, "ffmpeg", "ffmpeg.exe");
            if (Configuration.IsRunningOnWindows && string.IsNullOrWhiteSpace(Configuration.Settings.General.FFmpegLocation) && File.Exists(ffmpegFullPath))
            {
                Configuration.Settings.General.FFmpegLocation = ffmpegFullPath;
            }

            if (Configuration.IsRunningOnWindows)
            {
                var isMpvAvailable = LibMpvDynamic.IsInstalled;
                var isYouTubeDlInstalled = File.Exists(Path.Combine(Configuration.DataDirectory, "yt-dlp.exe"));
                var allOk = isYouTubeDlInstalled && isMpvAvailable;

                if (!allOk)
                {
                    if (MessageBox.Show(_language.VideoFromUrlRequirements, "Subtitle Edit", MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }

                    if (!isMpvAvailable)
                    {
                        using (var form = new SettingsMpv())
                        {
                            if (form.ShowDialog(this) != DialogResult.OK)
                            {
                                return;
                            }

                            Configuration.Settings.General.VideoPlayer = "MPV";
                        }
                    }

                    if (!isYouTubeDlInstalled)
                    {
                        using (var form = new DownloadYouTubeDl())
                        {
                            if (form.ShowDialog(this) != DialogResult.OK)
                            {
                                return;
                            }
                        }
                    }
                }
            }

            using (var form = new TextPrompt(LanguageSettings.Current.Main.OpenVideoFile, _language.Url, string.Empty, 500))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string url = form.InputText;
                    if (!string.IsNullOrEmpty(url))
                    {
                        if (audioVisualizer.WavePeaks != null)
                        {
                            audioVisualizer.WavePeaks = null;
                            audioVisualizer.SetSpectrogram(null);
                            audioVisualizer.ShotChanges = new List<double>();
                            audioVisualizer.Chapters = Array.Empty<MatroskaChapter>();
                        }

                        if (!IsVideoVisible)
                        {
                            _layout = 0;
                            SetLayout(_layout, false);
                        }

                        OpenVideoFromUrl(url);
                    }
                }
            }
        }

        private void OpenVideoFromUrl(string url)
        {
            ShowSubtitleTimer.Stop();
            Cursor = Cursors.WaitCursor;
            _videoFileName = url;
            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.PauseAndDisposePlayer();
            }

            if (Configuration.Settings.General.VideoPlayer != "MPV")
            {
                Configuration.Settings.General.VideoPlayer = "MPV";
            }

            Directory.SetCurrentDirectory(Configuration.DataDirectory);
            ResetPlaySelection();
            UiUtil.InitializeVideoPlayerAndContainer(url, _videoInfo, mediaPlayer, VideoLoaded, VideoEnded);
            mediaPlayer.Volume = 0;
            mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
            mediaPlayer.OnButtonClicked -= MediaPlayer_OnButtonClicked;
            mediaPlayer.OnButtonClicked += MediaPlayer_OnButtonClicked;
            labelVideoInfo.Text = url;
            Cursor = Cursors.Default;
            SetUndockedWindowsTitle();
            ShowSubtitleTimer.Start();
        }

        private void SmpteTimeModedropFrameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            smpteTimeModedropFrameToolStripMenuItem.Checked = !smpteTimeModedropFrameToolStripMenuItem.Checked;
            Configuration.Settings.General.CurrentVideoIsSmpte = smpteTimeModedropFrameToolStripMenuItem.Checked;
            if (audioVisualizer.WavePeaks != null)
            {
                ReloadWaveform(_videoFileName, VideoAudioTrackNumber);
            }
        }

        private void MoveTextUpToolStripMenuItemClick(object sender, EventArgs e)
        {
            var indices = SubtitleListview1.SelectedIndices.OfType<int>().OrderBy(p => p).ToList();
            if (indices.Count == 0 || indices[0] - 1 < 0)
            {
                return;
            }

            MakeHistoryForUndo(string.Format(_language.BeforeX, _language.Menu.ContextMenu.ColumnTextUp));
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.BeginUpdate();
            foreach (int index in indices)
            {
                if (index - 1 >= 0)
                {
                    var p = _subtitle.Paragraphs[index];
                    var prev = _subtitle.Paragraphs[index - 1];
                    var prevText = prev.Text;
                    prev.Text = p.Text;
                    p.Text = prevText;
                    SubtitleListview1.Items[index - 1].Selected = true;
                    SubtitleListview1.Items[index].Selected = false;
                    SubtitleListview1.SetText(index - 1, prev.Text);
                    SubtitleListview1.SetText(index, p.Text);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index - 1, prev);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                }
            }

            SubtitleListview1.EndUpdate();
            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.EnsureVisible(FirstSelectedIndex);
            _subtitleListViewIndex = -1;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private void MoveTextDownToolStripMenuItemClick(object sender, EventArgs e)
        {
            var indices = SubtitleListview1.SelectedIndices.OfType<int>().OrderByDescending(p => p).ToList();
            if (indices.Count == 0 || indices[0] + 1 >= _subtitle.Paragraphs.Count)
            {
                return;
            }

            MakeHistoryForUndo(string.Format(_language.BeforeX, _language.Menu.ContextMenu.ColumnTextDown));
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.BeginUpdate();
            foreach (int index in indices)
            {
                if (index + 1 < _subtitle.Paragraphs.Count)
                {
                    var p = _subtitle.Paragraphs[index];
                    var next = _subtitle.Paragraphs[index + 1];
                    var nextText = next.Text;
                    next.Text = p.Text;
                    p.Text = nextText;
                    SubtitleListview1.Items[index + 1].Selected = true;
                    SubtitleListview1.Items[index].Selected = false;
                    SubtitleListview1.SetText(index, p.Text);
                    SubtitleListview1.SetText(index + 1, next.Text);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index + 1, next);
                }
            }

            SubtitleListview1.EndUpdate();
            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.EnsureVisible(FirstSelectedIndex);
            SubtitleListview1.EnsureVisible(indices[0]);
            _subtitleListViewIndex = -1;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private void BoxToolStripMenuItemClick(object sender, EventArgs e)
        {
            ListViewToggleTag("box");
        }

        private void ShowHideBookmark(Paragraph p)
        {
            if (!string.IsNullOrWhiteSpace(p.Bookmark))
            {
                pictureBoxBookmark.Show();
                if (_showBookmarkLabel)
                {
                    panelBookmark.Show();
                    using (var graphics = CreateGraphics())
                    {
                        var textSize = graphics.MeasureString(p.Bookmark, Font);
                        labelBookmark.Text = p.Bookmark;
                        panelBookmark.Left = pictureBoxBookmark.Left;
                        panelBookmark.Top = pictureBoxBookmark.Top + pictureBoxBookmark.Height + 9;
                        panelBookmark.Width = (int)textSize.Width + 20;
                        panelBookmark.Height = (int)textSize.Height + 20;
                        panelBookmark.Show();
                    }
                }
                else
                {
                    panelBookmark.Hide();
                }
            }
            else if (p.Bookmark != null)
            {
                pictureBoxBookmark.Show();
                panelBookmark.Hide();
            }
            else if (panelBookmark.Visible || pictureBoxBookmark.Visible || _loading)
            {
                panelBookmark.Hide();
                pictureBoxBookmark.Hide();
            }
        }

        private void PictureBoxBookmark_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                if (panelBookmark.Visible)
                {
                    panelBookmark.Hide();
                    _showBookmarkLabel = false;
                }
                else
                {
                    _showBookmarkLabel = true;
                    var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                    if (p != null)
                    {
                        ShowHideBookmark(p);
                    }
                }
            }
        }

        private void PictureBoxBookmarkMouseEnter(object sender, EventArgs e)
        {
            if (_bookmarkContextMenu != null)
            {
                return;
            }

            _bookmarkContextMenu = new ContextMenuStrip();

            // edit bookmark
            var menuItem = new ToolStripMenuItem(LanguageSettings.Current.Main.Menu.ContextMenu.EditBookmark);
            menuItem.Click += (sender2, e2) => { LabelBookmarkDoubleClick(null, null); };
            _bookmarkContextMenu.Items.Add(menuItem);

            // remove bookmark
            menuItem = new ToolStripMenuItem(LanguageSettings.Current.Main.Menu.ContextMenu.RemoveBookmark);
            menuItem.Click += (sender2, e2) => { RemoveBookmark(_subtitleListViewIndex); };
            _bookmarkContextMenu.Items.Add(menuItem);

            _bookmarkContextMenu.Items.Add("-");

            // go to bookmark
            menuItem = new ToolStripMenuItem(LanguageSettings.Current.Settings.GoToBookmark);
            menuItem.Click += (sender2, e2) => { GoToBookmark(); };
            _bookmarkContextMenu.Items.Add(menuItem);

            // clear all bookmarks
            menuItem = new ToolStripMenuItem(LanguageSettings.Current.Settings.ClearBookmarks);
            menuItem.Click += (sender2, e2) => { ClearBookmarks(); };
            _bookmarkContextMenu.Items.Add(menuItem);

            // export bookmarks
            menuItem = new ToolStripMenuItem(LanguageSettings.Current.Settings.ExportBookmarks);
            menuItem.Click += (sender2, e2) => { BookmarksGoTo.ExportBookmarksAsCsv(_subtitle, this); };
            _bookmarkContextMenu.Items.Add(menuItem);

            UiUtil.FixFonts(_bookmarkContextMenu);
            pictureBoxBookmark.ContextMenuStrip = _bookmarkContextMenu;
        }

        public void RemoveBookmark(int index)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p != null)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Main.Menu.ContextMenu.RemoveBookmark));
                p.Bookmark = null;
                SubtitleListview1.ShowState(_subtitleListViewIndex, p);
                ShowHideBookmark(p);
                SetListViewStateImages();
                new BookmarkPersistence(_subtitle, _fileName).Save();
            }
        }

        private void LabelBookmarkDoubleClick(object sender, EventArgs e)
        {
            EditBookmark(_subtitleListViewIndex, this);
        }

        public void EditBookmark(int index, Form parentForm)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p != null)
            {
                using (var form = new BookmarkAdd(p))
                {
                    var result = form.ShowDialog(parentForm);
                    if (result == DialogResult.OK)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.Main.Menu.ContextMenu.EditBookmark));
                        p.Bookmark = form.Comment;
                        SubtitleListview1.ShowState(_subtitleListViewIndex, p);
                        ShowHideBookmark(p);
                        SetListViewStateImages();
                        new BookmarkPersistence(_subtitle, _fileName).Save();
                    }
                }
            }
        }

        private void ToolStripMenuItemBookmarkClick(object sender, EventArgs e)
        {
            ToggleBookmarks(true, this);
        }

        private void ToolStripMenuItemGoToSourceViewClick(object sender, EventArgs e)
        {
            SwitchView(SourceView);
        }

        private void ToolStripMenuItemGoToListViewClick(object sender, EventArgs e)
        {
            SwitchView(ListView);
        }

        private void RunActionOnAllParagraphs(Func<Paragraph, string> action, string historyMessage)
        {
            if (_subtitle.Paragraphs.Count <= 0 || SubtitleListview1.SelectedItems.Count <= 0)
            {
                return;
            }

            int linesUpdated = 0;
            var selectedIndices = SubtitleListview1.GetSelectedIndices();
            for (int i = selectedIndices.Length - 1; i >= 0; i--)
            {
                int idx = selectedIndices[i];
                var p = _subtitle.GetParagraphOrDefault(idx);
                if (p != null)
                {
                    var newText = action.Invoke(p);
                    if (newText != p.Text)
                    {
                        if (linesUpdated == 0)
                        {
                            MakeHistoryForUndo(historyMessage);
                        }

                        if (newText.IsOnlyControlCharactersOrWhiteSpace())
                        {
                            _subtitle.Paragraphs.RemoveAt(idx);
                        }
                        else
                        {
                            p.Text = newText;
                        }

                        linesUpdated++;
                    }

                    if (IsOriginalEditable)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            newText = action.Invoke(original);
                            if (newText != original.Text)
                            {
                                if (linesUpdated == 0)
                                {
                                    MakeHistoryForUndo(historyMessage);
                                }

                                if (newText.IsOnlyControlCharactersOrWhiteSpace())
                                {
                                    _subtitleOriginal.Paragraphs.RemoveAt(idx);
                                }
                                else
                                {
                                    original.Text = newText;
                                }

                                linesUpdated++;
                            }
                        }
                    }
                }
            }

            if (linesUpdated == 0)
            {
                return; // nothing changed
            }

            SaveSubtitleListviewIndices();
            _subtitle.Renumber();
            _subtitleOriginal?.Renumber();
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            UpdateSourceView();
            RestoreSubtitleListviewIndices();
            ShowStatus(string.Format(_language.LinesUpdatedX, linesUpdated));
        }

        private void RemoveAllFormattingsToolStripMenuItemClick(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                var s = p.Text;
                if (!s.Contains("(♪", StringComparison.Ordinal) && !s.Contains("(♫", StringComparison.Ordinal) && !s.Contains("[♪", StringComparison.Ordinal) && !s.Contains("[♫", StringComparison.Ordinal) &&
                    !s.Contains("♪)", StringComparison.Ordinal) && !s.Contains("♫)", StringComparison.Ordinal) && !s.Contains("♪]", StringComparison.Ordinal) && !s.Contains("♫]", StringComparison.Ordinal))
                {
                    s = p.Text.Replace("♪", string.Empty).Replace("♫", string.Empty);
                }

                s = NetflixImsc11Japanese.RemoveTags(s);
                return HtmlUtil.RemoveHtmlTags(s, true).Trim();
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingAll));
        }

        private void RemoveBoldToolStripMenuItemClick(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                return p.Text.Replace("<b>", string.Empty)
                    .Replace("<B>", string.Empty)
                    .Replace("</b>", string.Empty)
                    .Replace("</B>", string.Empty)
                    .Replace("{\\b}", string.Empty)
                    .Replace("{\\b0}", string.Empty)
                    .Replace("{\\b1}", string.Empty);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingBold));
        }

        private void RemoveItalicToolStripMenuItemClick(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                return p.Text.Replace("<i>", string.Empty)
                    .Replace("<I>", string.Empty)
                    .Replace("</i>", string.Empty)
                    .Replace("</I>", string.Empty)
                    .Replace("{\\i}", string.Empty)
                    .Replace("{\\i0}", string.Empty)
                    .Replace("{\\i1}", string.Empty);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingItalic));
        }

        private void RemoveUnderlineToolStripMenuItemClick(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                return p.Text.Replace("<u>", string.Empty)
                    .Replace("<U>", string.Empty)
                    .Replace("</u>", string.Empty)
                    .Replace("</U>", string.Empty)
                    .Replace("{\\u}", string.Empty)
                    .Replace("{\\u0}", string.Empty)
                    .Replace("{\\u1}", string.Empty);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingUnderline));
        }

        private void RemoveColorToolStripMenuItemClick(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                if (!p.Text.Contains("<font", StringComparison.OrdinalIgnoreCase))
                {
                    var x = p.Text;
                    if (x.Contains("\\c") || x.Contains("\\1c"))
                    {
                        x = HtmlUtil.RemoveAssaColor(x);
                    }

                    return x;
                }

                return HtmlUtil.RemoveColorTags(p.Text);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingColor));
        }

        private void RemoveFontNameToolStripMenuItemClick(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                return HtmlUtil.RemoveFontName(p.Text);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingFontName));
        }

        private void RemoveAlignmentToolStripMenuItemClick(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                if (!p.Text.Contains('{'))
                {
                    return p.Text;
                }

                return HtmlUtil.RemoveAssAlignmentTags(p.Text);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingAlignment));
        }

        private void BoutenToolStripMenuItemClick(object sender, EventArgs e)
        {
            MakeHistoryForUndo(string.Format(_language.BeforeX, (sender as ToolStripMenuItem).Text));
            TextBoxListViewToggleTag((sender as ToolStripMenuItem).Text);
        }

        private void ToolStripMenuItemHorizontalDigitsClick(object sender, EventArgs e)
        {
            MakeHistoryForUndo(string.Format(_language.BeforeX, "horizontalDigit"));
            TextBoxListViewToggleTag("horizontalDigit");
        }

        private void ToolStripMenuItemSetParagraphAsSelectionClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count == 1 && audioVisualizer != null && audioVisualizer.NewSelectionParagraph != null)
            {
                var idx = SubtitleListview1.SelectedItems[0].Index;
                var p = _subtitle.Paragraphs[idx];
                ButtonSetEndAndGoToNextClick(null, null);
                p.StartTime.TotalMilliseconds = audioVisualizer.NewSelectionParagraph.StartTime.TotalMilliseconds;
                p.EndTime.TotalMilliseconds = audioVisualizer.NewSelectionParagraph.EndTime.TotalMilliseconds;
                SubtitleListview1.SetStartTimeAndDuration(idx, p, _subtitle.GetParagraphOrDefault(idx - 1), _subtitle.GetParagraphOrDefault(idx + 1));
                mediaPlayer.CurrentPosition = audioVisualizer.NewSelectionParagraph.EndTime.TotalSeconds + MinGapBetweenLines / 1000.0;
                audioVisualizer.NewSelectionParagraph = null;
            }
        }

        private void ToolStripMenuItemRubyClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();
            string before = string.Empty;
            string text = tb.SelectedText;
            string after = string.Empty;

            int selectionStart = tb.SelectionStart;
            if (selectionStart > 0)
            {
                before = tb.Text.Substring(0, selectionStart);
            }

            if (tb.Text.Length > selectionStart + text.Length)
            {
                after = tb.Text.Remove(0, selectionStart + text.Length);
            }

            if (text.StartsWith(' '))
            {
                before += " ";
                text = text.TrimStart();
            }

            if (text.EndsWith(' '))
            {
                after = " " + after;
            }

            using (var form = new RubyJapanese(before, text, after))
            {
                if (form.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                var rubyText = form.RubyText;
                if (form.RubyItalic)
                {
                    rubyText = "<ruby-text-italic>" + rubyText + "</ruby-text-italic>";
                }
                else
                {
                    rubyText = "<ruby-text>" + rubyText + "</ruby-text>";
                }

                var rubyHtml = before + "<ruby-container><ruby-base>" + form.RubyBaseText + "</ruby-base>" + rubyText + "</ruby-container>" + after; // sami ruby tag fix
                var formatType = GetCurrentSubtitleFormat().GetType();
                if (formatType == typeof(Sami)) // sami ruby tag fix
                {
                    rubyHtml = rubyHtml.Replace("ruby-container", "ruby")
                        .Replace("ruby-text", "rt")
                        .Replace("<ruby-base>", string.Empty)
                        .Replace("</ruby-base>", string.Empty) // sami ruby tag fix rp remove
                        .Replace("<ruby-base-italic>", string.Empty) // sami ruby tag fix italic remove
                        .Replace("</ruby-base-italic>", string.Empty)
                        .Replace("<ruby-text-italic>", string.Empty)
                        .Replace("</ruby-text-italic>", string.Empty);
                }

                tb.Text = rubyHtml;
            }
        }



        private void ComboBoxSubtitleFormatsDropDownClosed(object sender, EventArgs e)
        {
            MenuClosed(sender, e);
            if (_oldSubtitleFormat == null || _oldSubtitleFormat.FriendlyName != GetCurrentSubtitleFormat().FriendlyName)
            {
                ComboBoxSubtitleFormatsSelectedIndexChanged(sender, e);
                _formatManuallyChanged = true;
            }
        }

        private void ComboBoxSubtitleFormatsDropDown(object sender, EventArgs e)
        {
            MenuOpened(sender, e);
        }

        private void ShowButtonShortcut(string shortcut)
        {
            if (string.IsNullOrEmpty(shortcut))
            {
                ShowStatus(string.Empty, false);
            }
            else
            {
                ShowStatus(string.Format(LanguageSettings.Current.General.ShortcutX, shortcut), false);
            }
        }

        private void ButtonSetStartAndOffsetRestMouseEnter(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2))
            {
                ShowButtonShortcut(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2);
            }
            else
            {
                ShowButtonShortcut(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest);
            }
        }

        private void ButtonSetEndAndGoToNextMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext);
        }

        private void ButtonAdjustSetStartTimeMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateSetStart);
        }

        private void ButtonAdjustSetEndTimeMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateSetEnd);
        }

        private void ButtonInsertNewTextMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos);
        }

        private void ButtonAdjustPlayBeforeMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore);
        }

        private void ButtonAdjustGoToPosAndPauseMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainVideoGoToStartCurrent);
        }

        private void ButtonBeforeTextMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore);
        }

        private void ButtonGotoSubMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainVideoGoToStartCurrent);
        }

        private void ButtonSetStartTimeMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateSetStart);
        }

        private void ButtonSetEndMouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateSetEnd);
        }

        private void BoxToolStripMenuItem1Click(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();
            tb.Text = HtmlUtil.ToggleTag(tb.Text, "box", false, false);
        }

        private void ToolStripMenuItemPreviewClick(object sender, EventArgs e)
        {
            var htmlFileName = Path.Combine(Path.GetTempPath(), $"WebVttPreview_{Guid.NewGuid()}.html");
            var subText = Encoding.UTF8.GetBytes(new WebVTT().ToText(_subtitle, "preview"));
            File.WriteAllText(htmlFileName, @"<!doctype html>
<html lang='en'>
<head>
  <meta charset='utf-8'>
  <title>WebVTT preview</title>
</head>
  <body>
    <video controls preload='metadata'>
      <source src='[VIDEO]' type ='video/[EXT]' />
      <track label='English' kind='subtitles' srclang='en' src='data:text/vtt;base64, [BASE64]' default>
    </video>
  </body>
</html>"
                .Replace('\'', '"')
                .Replace("[BASE64]", Convert.ToBase64String(subText))
                .Replace("[VIDEO]", "file://" + _videoFileName)
                .Replace("[EXT]", Path.GetExtension(_videoFileName).TrimStart('.').ToLowerInvariant()), Encoding.UTF8);
            UiUtil.OpenFile(htmlFileName);

            TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(25000), () =>
            {
                try
                {
                    File.Delete(htmlFileName);
                }
                catch
                {
                    // Ignore
                }
            });
        }

        private void TrackBarWaveformPositionKeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Space)
            {
                mediaPlayer.TogglePlayPause();
                e.SuppressKeyPress = true;
            }
        }

        private void ToolStripMenuItemAssaStylesClick(object sender, EventArgs e)
        {
            ToolStripMenuItemAssStylesClick(sender, e);
        }

        private void CheckSecondSubtitleReset()
        {
            if (!_restorePreviewAfterSecondSubtitle)
            {
                return;
            }

            Configuration.Settings.General.MpvHandlesPreviewText = true;
            mediaPlayer.SubtitleText = string.Empty;
            _restorePreviewAfterSecondSubtitle = false;
        }

        private void OpenSecondSubtitleToolStripMenuItemClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) != DialogResult.OK)
            {
                return;
            }

            if (mediaPlayer.VideoPlayer is LibMpvDynamic libMpv)
            {
                if (Configuration.Settings.General.MpvHandlesPreviewText)
                {
                    Configuration.Settings.General.MpvHandlesPreviewText = false;
                    mediaPlayer.VideoPlayer = libMpv;
                    mediaPlayer.SubtitleText = string.Empty;
                    _restorePreviewAfterSecondSubtitle = true;
                }

                var ext = Path.GetExtension(openFileDialog1.FileName).ToLowerInvariant();
                if (ext == ".srt" || ext == ".ass")
                {
                    libMpv.LoadSubtitle(openFileDialog1.FileName);
                }
                else
                {
                    var sub = Subtitle.Parse(openFileDialog1.FileName);
                    if (sub != null)
                    {
                        var tempFile = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString() + ".srt");
                        File.WriteAllText(tempFile, new SubRip().ToText(sub, "untitled"));
                        libMpv.LoadSubtitle(tempFile);
                        _filesToDelete.Add(tempFile);
                    }
                }
            }
            else if (mediaPlayer.VideoPlayer is LibVlcDynamic libvlc)
            {
                libvlc.LoadSecondSubtitle(openFileDialog1.FileName);
            }
        }

        private void AssaStylesToolStripMenuItemClick(object sender, EventArgs e)
        {
            ToolStripMenuItemAssStylesClick(sender, e);
        }

        private void ContextMenuStripEmptyOpening(object sender, CancelEventArgs e)
        {
            var format = GetCurrentSubtitleFormat();
            var formatType = format.GetType();
            if (formatType == typeof(AdvancedSubStationAlpha))
            {
                aSSStylesToolStripMenuItem.Visible = true;
                aSSStylesToolStripMenuItem.Text = _language.Menu.ContextMenu.AdvancedSubStationAlphaStyles;
            }
            else if (formatType == typeof(SubStationAlpha))
            {
                aSSStylesToolStripMenuItem.Visible = true;
                aSSStylesToolStripMenuItem.Text = _language.Menu.ContextMenu.SubStationAlphaStyles;
            }
            else
            {
                aSSStylesToolStripMenuItem.Visible = false;
            }
        }

        private void SplitContainerListViewAndTextSplitterMoved(object sender, SplitterEventArgs e)
        {
            if (Configuration.Settings.General.SubtitleTextBoxMaxHeight < splitContainerListViewAndText.Panel2MinSize &&
                Configuration.Settings.General.SubtitleTextBoxMaxHeight > 1000)
            {
                return;
            }

            if (splitContainerListViewAndText.Panel2.Height > Configuration.Settings.General.SubtitleTextBoxMaxHeight)
            {
                try
                {
                    splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - Configuration.Settings.General.SubtitleTextBoxMaxHeight;
                }
                catch
                {
                    // ignore
                }
            }

            var diff = DateTime.UtcNow.Ticks - _textHeightResizeIgnoreUpdate;
            if (diff > 10_000 * 750 && // 750 ms
                WindowState == _lastFormWindowState)
            {
                _textHeightResize = splitContainerListViewAndText.Height - splitContainerListViewAndText.SplitterDistance;
            }

            MainResize();
        }

        private void SlitContainerListViewAndTextSizeChanged(object sender, EventArgs e)
        {
            SplitContainerListViewAndTextSplitterMoved(null, null);

            var p = _subtitle?.GetParagraphOrDefault(_subtitleListViewIndex);
            if (p != null)
            {
                UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond,
                    _subtitle.Paragraphs[_subtitleListViewIndex], textBoxListViewText);
            }
        }

        private void ToolStripMenuItemImportBluraySupFileForEditClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _language.OpenBluRaySupFile;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = _language.BluRaySupFiles + "|*.sup|" +
                                     "Matroska|*.mkv;*.mks|" +
                                     "Transport stream|*.ts;*.m2ts;*.mts;*.rec;*.mpeg;*.mpg|" +
                                     "BdnXml|*.xml|" +
                                     "TTML base64 inline images|*.ttml|" +
                                     "All files|*.*";
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                using (var form = new BinaryEdit.BinEdit(openFileDialog1.FileName, false))
                {
                    form.ShowDialog(this);
                }
            }
        }

        private void ContextMenuStripTextBoxSourceViewOpening(object sender, CancelEventArgs e)
        {
            foreach (ToolStripItem item in contextMenuStripTextBoxSourceView.Items)
            {
                item.Visible = !textBoxSource.ReadOnly;
            }

            toolStripMenuItemGoToListView.Visible = true;
        }

        private void TranslateSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            var onlySelectedLines = true;
            MakeAutoTranslate(onlySelectedLines);
        }

        private void TranslateToolStripMenuItemClick(object sender, EventArgs e)
        {
            var onlySelectedLines = false;
            MakeAutoTranslate(onlySelectedLines);
        }

        private void AutotranslateViaCopypasteToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var form = new TranslateViaCopyPaste(_subtitle))
            {
                if (form.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                var isOriginalVisible = SubtitleListview1.IsOriginalTextColumnVisible;
                SaveSubtitleListviewIndices();
                MakeHistoryForUndo(_language.BeforeGoogleTranslation);
                ShowSubtitleTimer.Stop();
                var oldHash = _changeSubtitleHash;
                _subtitleOriginal = new Subtitle(_subtitle);
                _subtitleOriginalFileName = _fileName;
                _fileName = null;
                _subtitle.Paragraphs.Clear();
                foreach (var p in form.TranslatedSubtitle.Paragraphs)
                {
                    _subtitle.Paragraphs.Add(new Paragraph(p));
                }

                ShowStatus(_language.SubtitleTranslated);
                _changeOriginalSubtitleHash = oldHash;
                _changeSubtitleHash = -1;
                ShowSubtitleTimer.Start();
                ShowSource();
                SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
                SubtitleListview1.AutoSizeAllColumns(this);
                SetupOriginalEdit();
                _changeOriginalSubtitleHash = oldHash;
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                ResetHistory();
                _fileName = null;
                RestoreSubtitleListviewIndices();
                _converted = true;
                SetTitle();
                SetEncoding(Encoding.UTF8);
                if (!isOriginalVisible)
                {
                    toolStripMenuItemShowOriginalInPreview.Checked = false;
                    Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = false;
                    audioVisualizer.Invalidate();
                }
            }
        }

        private void ToolStripButtonAssStyleManagerClick(object sender, EventArgs e)
        {
            ToolStripMenuItemAssStylesClick(sender, e);
        }

        private void ToolStripButtonAssAttachmentsClick(object sender, EventArgs e)
        {
            using (var form = new Attachments(_subtitle.Footer))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    _subtitle.Footer = form.NewFooter;
                }
            }
        }

        private void ToolStripMenuItemBeautifyTimeCodesClick(object sender, EventArgs e)
        {
            BeautifyTimeCodes(SubtitleListview1.GetSelectedIndices().Length > 1);
        }

        private void ToolStripButtonBeautifyTimeCodesClick(object sender, EventArgs e)
        {
            ToolStripMenuItemBeautifyTimeCodesClick(sender, e);
        }

        public bool ProcessCmdKeyFromChildForm(ref Message msg, Keys keyData)
        {
            Message messageCopy = msg;
            messageCopy.HWnd = Handle;

            return ProcessCmdKey(ref messageCopy, keyData);
        }

        private int GetFastSubtitleHash()
        {
            return _subtitle.GetFastHashCode(_fileName + GetCurrentEncoding().BodyName);
        }

        private int GetFastSubtitleOriginalHash()
        {
            return _subtitleOriginal.GetFastHashCode(_subtitleOriginalFileName + GetCurrentEncoding().BodyName);
        }

        private void MergeSentencesToolStripMenuItemClick(object sender, EventArgs e)
        {
            var language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
            var mergedSubtitle = new Subtitle();
            var index = 0;
            Paragraph next = null;
            while (index < _subtitle.Paragraphs.Count)
            {
                var paragraph = next ?? new Paragraph(_subtitle.Paragraphs[index]);
                index++;
                if (index >= _subtitle.Paragraphs.Count)
                {
                    mergedSubtitle.Paragraphs.Add(paragraph);
                    break;
                }

                next = new Paragraph(_subtitle.Paragraphs[index]);
                if (paragraph.Text.HasSentenceEnding(language) || next.StartTime.TotalMilliseconds - paragraph.EndTime.TotalMilliseconds > Configuration.Settings.Tools.MergeShortLinesMaxGap)
                {
                    mergedSubtitle.Paragraphs.Add(paragraph);
                    continue;
                }

                next.Text = Utilities.UnbreakLine(paragraph.Text + Environment.NewLine + next.Text);
                next.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
            }

            int linesMergedCount = _subtitle.Paragraphs.Count - mergedSubtitle.Paragraphs.Count;
            ShowStatus(string.Format(_language.MergeSentencesXLines, linesMergedCount));
            if (linesMergedCount > 0)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, _language.MergeSentences));
            }
            else
            {
                return;
            }

            _subtitle.Paragraphs.Clear();
            _subtitle.Paragraphs.AddRange(mergedSubtitle.Paragraphs);
            _subtitle.Renumber();
            var idx = FirstSelectedIndex;
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            _subtitleListViewIndex = -1;
            SubtitleListview1.SelectIndexAndEnsureVisibleFaster(idx);
        }

        private void BreaksplitLongLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            ToolStripMenuItemAutoSplitLongLinesClick(sender, e);
        }

        private void SplitContainerMainSplitterMoving(object sender, SplitterCancelEventArgs e)
        {
            _textHeightResizeIgnoreUpdate = DateTime.UtcNow.Ticks;
        }

        private void ApplyCustomStylesToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (GetCurrentSubtitleFormat().GetType() != typeof(AdvancedSubStationAlpha))
            {
                return;
            }

            using (var form = new ApplyCustomStyles(_subtitle, SubtitleListview1.GetSelectedIndices()))
            {
                if (form.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                MakeHistoryForUndo(string.Format(_language.BeforeX, LanguageSettings.Current.AssaOverrideTags.ApplyCustomTags));
                SaveSubtitleListviewIndices();
                _subtitle.Paragraphs.Clear();
                _subtitle.Paragraphs.AddRange(form.UpdatedSubtitle.Paragraphs);
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                RestoreSubtitleListviewIndices();
            }
        }

        private void SetPositionToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (GetCurrentSubtitleFormat().GetType() != typeof(AdvancedSubStationAlpha))
            {
                return;
            }

            if (string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(LanguageSettings.Current.General.NoVideoLoaded);
                return;
            }

            using (var form = new SetPosition(_subtitle, SubtitleListview1.GetSelectedIndices(), _videoFileName, _videoInfo, mediaPlayer.CurrentPosition))
            {
                var result = form.ShowDialog(this);
                if (result != DialogResult.OK)
                {
                    return;
                }

                MakeHistoryForUndo(string.Format(_language.BeforeX, "Set position"));
                if (form.UpdatedSubtitle != null)
                {
                    SaveSubtitleListviewIndices();
                    _subtitle.Paragraphs.Clear();
                    _subtitle.Paragraphs.AddRange(form.UpdatedSubtitle.Paragraphs);
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void SetAssaResolution(Subtitle subtitle)
        {
            if (!IsAssa() || string.IsNullOrEmpty(_videoFileName) || _videoInfo.Width == 0 || _videoInfo.Height == 0)
            {
                return;
            }

            if (string.IsNullOrEmpty(subtitle.Header))
            {
                subtitle.Header = AdvancedSubStationAlpha.DefaultHeader;
            }

            ShowStatus($"{LanguageSettings.Current.Settings.SetAssaResolution}  {_videoInfo.Width.ToString(CultureInfo.InvariantCulture)}x{_videoInfo.Height.ToString(CultureInfo.InvariantCulture)}");
            subtitle.Header = AdvancedSubStationAlpha.AddTagToHeader("PlayResX", "PlayResX: " + _videoInfo.Width.ToString(CultureInfo.InvariantCulture), "[Script Info]", subtitle.Header);
            subtitle.Header = AdvancedSubStationAlpha.AddTagToHeader("PlayResY", "PlayResY: " + _videoInfo.Height.ToString(CultureInfo.InvariantCulture), "[Script Info]", subtitle.Header);
        }

        private void GenerateBlankVideoToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!RequireFfmpegOk())
            {
                return;
            }

            using (var form = new GenerateVideo(_subtitle, _videoInfo))
            {
                var result = form.ShowDialog(this);
                if (result != DialogResult.OK)
                {
                    return;
                }

                if (!string.IsNullOrEmpty(_videoFileName) && _videoInfo != null && _videoInfo.Width == 0 && _videoInfo.Height == 0)
                {
                    // if audio only, then keep the current waveform/specgtrogram - but still load the new video

                    var peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(_videoFileName);
                    var spectrogramFolder = WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(_videoFileName);
                    OpenVideo(form.VideoFileName);
                    var newPeakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(_videoFileName);
                    var newSpectrogramFolder = WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(_videoFileName);
                    if (File.Exists(peakWaveFileName) && !File.Exists(newPeakWaveFileName))
                    {
                        timerWaveform.Stop();
                        File.Copy(peakWaveFileName, newPeakWaveFileName);

                        foreach (var fileName in Directory.GetFiles(spectrogramFolder))
                        {
                            if (!Directory.Exists(newSpectrogramFolder))
                            {
                                Directory.CreateDirectory(newSpectrogramFolder);
                            }

                            var dest = Path.Combine(newSpectrogramFolder, Path.GetFileName(fileName));
                            if (!File.Exists(dest))
                            {
                                File.Copy(fileName, dest);
                            }
                        }

                        audioVisualizer.ZoomFactor = 1.0;
                        audioVisualizer.VerticalZoomFactor = 1.0;
                        SelectZoomTextInComboBox();
                        audioVisualizer.WavePeaks = WavePeakData.FromDisk(newPeakWaveFileName);
                        audioVisualizer.SetSpectrogram(SpectrogramData.FromDisk(newSpectrogramFolder));
                        audioVisualizer.ShotChanges = new List<double>();
                        SetWaveformPosition(0, 0, 0);
                        timerWaveform.Start();
                    }
                }
                else
                {
                    OpenVideo(form.VideoFileName);
                }
            }
        }

        private void GenerateVideoWithHardcodedSubtitleToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (VideoFileNameIsUrl)
            {
                MessageBox.Show(LanguageSettings.Current.General.OnlineVideoFeatureNotAvailable);
                return;
            }

            if (!RequireFfmpegOk())
            {
                return;
            }

            var sub = new Subtitle(_subtitle, false);
            var fontSize = PrepareBurn(sub);

            using (var form = new GenerateVideoWithHardSubs(sub, GetCurrentSubtitleFormat(), _videoFileName, _videoInfo, fontSize, false))
            {
                form.ShowDialog(this);
            }
        }

        private int? PrepareBurn(Subtitle sub)
        {
            int? fontSize = null;

            if (_videoInfo == null)
            {
                return fontSize;
            }

            if (string.IsNullOrEmpty(sub.Header) || !IsAssa())
            {
                sub.Header = AdvancedSubStationAlpha.DefaultHeader;
                var style = AdvancedSubStationAlpha.GetSsaStyle("Default", sub.Header);
                style.FontSize = GetOptimalSubtitleFontSize(_videoInfo.Height);
                fontSize = (int)style.FontSize;
                var styleLine = style.ToRawAss();
                sub.Header = AdvancedSubStationAlpha.AddTagToHeader("Style", styleLine, "[V4+ Styles]", sub.Header);
            }

            if (!sub.Header.Contains("PlayResX:") || !sub.Header.Contains("PlayResY:"))
            {
                sub.Header = AdvancedSubStationAlpha.AddTagToHeader("PlayResX", "PlayResX: " + _videoInfo.Width.ToString(CultureInfo.InvariantCulture), "[Script Info]", sub.Header);
                sub.Header = AdvancedSubStationAlpha.AddTagToHeader("PlayResY", "PlayResY: " + _videoInfo.Height.ToString(CultureInfo.InvariantCulture), "[Script Info]", sub.Header);
            }

            return fontSize;
        }

        private int GetOptimalSubtitleFontSize(int height)
        {
            if (height < 10)
            {
                return 26;
            }

            var factor = Configuration.Settings.Tools.GenVideoFontSizePercentOfHeight;
            if (factor > 0.1 || factor < 0.01)
            {
                factor = new ToolsSettings().GenVideoFontSizePercentOfHeight;
            }
            var wantedHeight = height * factor; // let the optimal height be x% of video height
            var currentSize = 50;

            using (var graphics = CreateGraphics())
            {
                for (int i = 40; i > -10; i--)
                {
                    using (var font = new Font(UiUtil.GetDefaultFont().FontFamily, currentSize, FontStyle.Regular))
                    {
                        var currentHeight = graphics.MeasureString("HJKLj", font).Height;
                        if (currentHeight < 1)
                        {
                            return 26;
                        }

                        if (Math.Abs(currentHeight - wantedHeight) < 1)
                        {
                            return currentSize;
                        }

                        if (currentHeight > wantedHeight)
                        {
                            currentSize -= Math.Max(1, i);
                        }
                        else if (currentHeight < wantedHeight)
                        {
                            currentSize += Math.Max(1, i);
                        }

                        currentSize = Math.Max(currentSize, 10);
                        currentSize = Math.Min(currentSize, 1000);
                    }
                }
            }

            return currentSize;
        }

        private void ProgressBarToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (GetCurrentSubtitleFormat().GetType() != typeof(AdvancedSubStationAlpha))
            {
                return;
            }


            if (string.IsNullOrEmpty(_videoFileName) || _videoInfo == null || _videoInfo.Width == 0 || _videoInfo.Height == 0)
            {
                MessageBox.Show(LanguageSettings.Current.General.NoVideoLoaded);
                return;
            }

            using (var form = new AssaProgressBar(_subtitle, _videoFileName, _videoInfo))
            {
                var result = form.ShowDialog(this);
                if (result != DialogResult.OK)
                {
                    return;
                }

                _subtitle.Renumber();
                var idx = FirstSelectedIndex;
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisibleFaster(idx);
            }
        }

        private void VideoResolutionResamplerToolStripMenuItemClick(object sender, EventArgs e)
        {
            ShowAssaResolutionChanger(false);
        }

        private void ShowAssaResolutionChanger(bool showNeverButton)
        {
            if (GetCurrentSubtitleFormat().GetType() != typeof(AdvancedSubStationAlpha))
            {
                return;
            }

            using (var form = new ResolutionResampler(_subtitle, _videoFileName, _videoInfo, showNeverButton))
            {
                var result = form.ShowDialog(this);
                if (result != DialogResult.OK)
                {
                    return;
                }

                var idx = FirstSelectedIndex;
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisibleFaster(idx);
            }
        }

        private void ToolStripButtonAssaDrawClick(object sender, EventArgs e)
        {
            var assaDrawPluginFileName = Path.Combine(Configuration.PluginsDirectory, "AssaDraw.dll");
            GetPropertiesAndDoAction(assaDrawPluginFileName, out var name, out var text, out var version, out var description, out var actionType, out var shortcut, out var mi);
            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(actionType) && mi != null)
            {
                var item = new ToolStripMenuItem { Text = text, Tag = assaDrawPluginFileName };
                item.Click += CallPluginAssa;
                item.PerformClick();
            }
        }

        private void SubtitleListview1_MouseDown(object sender, MouseEventArgs e)
        {
            _listViewMouseDown = true;
        }

        private void SubtitleListview1_MouseUp(object sender, MouseEventArgs e)
        {
            _listViewMouseDown = false;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private void HideVideoControlsToolStripMenuItemClick(object sender, EventArgs e)
        {
            Configuration.Settings.General.ShowVideoControls = false;
            ToggleVideoControlsOnOff(Configuration.Settings.General.ShowVideoControls);
        }

        private void ToolStripMenuItemShowVideoControlsClick(object sender, EventArgs e)
        {
            Configuration.Settings.General.ShowVideoControls = true;
            ToggleVideoControlsOnOff(Configuration.Settings.General.ShowVideoControls);
        }

        private void GroupBoxVideo_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                var coordinates = groupBoxVideo.PointToClient(Cursor.Position);
                if (coordinates.X < 15)
                {
                    if (Configuration.Settings.General.ShowVideoControls)
                    {
                        contextMenuStripHideVideoControls.Show(groupBoxVideo, coordinates);
                    }
                    else
                    {
                        contextMenuStripShowVideoControls.Show(groupBoxVideo, coordinates);
                    }
                }
            }
        }

        private void ListErrorsToolStripMenuItemClick(object sender, EventArgs e)
        {
            ListSyntaxErrors();
        }

        private void GenerateBackgroundBoxToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (GetCurrentSubtitleFormat().GetType() != typeof(AdvancedSubStationAlpha))
            {
                return;
            }

            if (string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(LanguageSettings.Current.General.NoVideoLoaded);
                return;
            }

            if (!RequireFfmpegOk())
            {
                return;
            }

            SetAssaResolutionWithChecks();
            using (var form = new AssSetBackground(_subtitle, SubtitleListview1.GetSelectedIndices(), _videoFileName, _videoInfo, mediaPlayer.CurrentPosition))
            {
                var result = form.ShowDialog(this);
                if (result != DialogResult.OK)
                {
                    return;
                }

                MakeHistoryForUndo(string.Format(_language.BeforeX, "Set background box"));
                if (form.UpdatedSubtitle != null)
                {
                    SaveSubtitleListviewIndices();
                    _subtitle.Paragraphs.Clear();
                    _subtitle.Paragraphs.AddRange(form.UpdatedSubtitle.Paragraphs);
                    _subtitle.Header = form.UpdatedSubtitle.Header;
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private bool RequireFfmpegOk()
        {
            FixFfmpegWrongPath();

            if (Configuration.IsRunningOnWindows && (string.IsNullOrWhiteSpace(Configuration.Settings.General.FFmpegLocation) || !File.Exists(Configuration.Settings.General.FFmpegLocation)))
            {
                if (MessageBox.Show(string.Format(LanguageSettings.Current.Settings.DownloadX, "FFmpeg"), "Subtitle Edit", MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return false;
                }

                using (var form = new DownloadFfmpeg("FFmpeg"))
                {
                    if (form.ShowDialog(this) == DialogResult.OK && !string.IsNullOrEmpty(form.FFmpegPath))
                    {
                        Configuration.Settings.General.FFmpegLocation = form.FFmpegPath;
                        Configuration.Settings.General.UseFFmpegForWaveExtraction = true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }

            return true;
        }

        private bool RequireWhisperCpp()
        {
            if (!Configuration.IsRunningOnWindows)
            {
                return true;
            }

            var fullPath = Path.Combine(Configuration.DataDirectory, "Whisper", "Cpp", "main.exe");
            if (!File.Exists(fullPath) || WhisperDownload.IsOld(fullPath, WhisperChoice.Cpp))
            {
                if (MessageBox.Show(string.Format(LanguageSettings.Current.Settings.DownloadX, "Whisper.cpp"), "Subtitle Edit", MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return false;
                }

                using (var form = new WhisperDownload(WhisperChoice.Cpp))
                {
                    if (form.ShowDialog(this) == DialogResult.OK && File.Exists(fullPath))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }

            return true;
        }

        private void VideoaudioToTextToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(_videoFileName) &&
                (_videoFileName.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
                 _videoFileName.StartsWith("https://", StringComparison.OrdinalIgnoreCase)))
            {
                MessageBox.Show("SE cannot generate text from online video/audio");
                return;
            }

            if (!ContinueNewOrExit())
            {
                return;
            }

            if (!RequireFfmpegOk())
            {
                return;
            }

            var voskFolder = Path.Combine(Configuration.DataDirectory, "Vosk");
            if (!Directory.Exists(voskFolder))
            {
                Directory.CreateDirectory(voskFolder);
            }

            if (Configuration.IsRunningOnWindows && !HasCurrentVosk(voskFolder))
            {
                if (MessageBox.Show(string.Format(LanguageSettings.Current.Settings.DownloadX, "libvosk"), "Subtitle Edit", MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return;
                }

                using (var form = new DownloadVosk())
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }
                }
            }

            var oldVideoFileName = _videoFileName;
            var isVlc = mediaPlayer.VideoPlayer is LibVlcDynamic;
            if (isVlc)
            {
                CloseVideoToolStripMenuItemClick(sender, e);
            }

            using (var form = new VoskAudioToText(oldVideoFileName, _videoAudioTrackNumber, this))
            {
                var result = form.ShowDialog(this);

                if (isVlc)
                {
                    OpenVideo(oldVideoFileName);
                }

                if (result != DialogResult.OK)
                {
                    return;
                }

                if (form.TranscribedSubtitle.Paragraphs.Count == 0)
                {
                    MessageBox.Show(LanguageSettings.Current.AudioToText.NoTextFound);
                    return;
                }

                _subtitle.Paragraphs.Clear();
                _subtitle.Paragraphs.AddRange(form.TranscribedSubtitle.Paragraphs);
                var idx = FirstSelectedIndex;
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisibleFaster(idx);
            }
        }

        private bool HasCurrentVosk(string voskFolder)
        {
            if (Configuration.IsRunningOnLinux || _hasCurrentVosk)
            {
                return true;
            }

            var voskDll = Path.Combine(voskFolder, "libvosk.dll");
            if (!File.Exists(voskDll))
            {
                return false;
            }

            var currentVoskDllSha512Hash =
                IntPtr.Size * 8 == 32
                ? "1cc13d8e2ffd3ad7ca76941c99e8ad00567d0b8135878c3a80fb938054cf98bde1f692647e6d19df7526c98aa5ad975d72dba20bf1759baedba5c753a14480bb"
                : "77479a934650b40968d54dcf71fce17237c59b62b6c64ad3d6b5433486b76b6202eb956e93597ba466c67aa0d553db7b2863e0aeb8856a6dd29a3aba3a14bf66";
            var hash = Utilities.GetSha512Hash(FileUtil.ReadAllBytesShared(voskDll));

            _hasCurrentVosk = currentVoskDllSha512Hash == hash;
            return _hasCurrentVosk;
        }

        private void Main_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.X > 72 && e.X <= (122 + textBoxListViewText.Height) && !textBoxListViewText.Enabled)
            {
                InsertLineToolStripMenuItemClick(null, null);
                return;
            }
        }

        private void WordListsToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var form = new WordLists())
            {
                form.ShowDialog(this);
            }
        }

        private void ColorPickerToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            if (!RequireFfmpegOk())
            {
                return;
            }

            try
            {
                Cursor = Cursors.WaitCursor;
                var timeCode = new TimeCode(mediaPlayer.CurrentPosition * 1000.0 + 1000).ToHHMMSS();
                var colorMatrix = string.Empty; //TODO: whaaat? "bt601:bt709"; // ffmpeg bug with assa color?
                var bmpFileName = VideoPreviewGenerator.GetScreenShot(_videoFileName, timeCode, colorMatrix);
                using (var bmp = new Bitmap(bmpFileName))
                {
                    Cursor = Cursors.Default;
                    using (var form = new ImageColorPicker(bmp))
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }

                        ColorChooser.SetLastColor(form.Color);
                        Configuration.Settings.General.LastColorPickerDropper = form.Color;
                        ShowStatus(string.Format(LanguageSettings.Current.AssaSetBackgroundBox.ColorPickerSetLastColor, Utilities.ColorToHexWithTransparency(form.Color)));
                    }
                }

                _filesToDelete.Add(bmpFileName);
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }

        private void ConvertColorsToDialogToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var convertColorsToDialogForm = new ConvertColorsToDialog())
            {
                if (convertColorsToDialogForm.ShowDialog(this) == DialogResult.OK)
                {
                    Cursor = Cursors.WaitCursor;
                    SaveSubtitleListviewIndices();
                    MakeHistoryForUndo(_language.BeforeConvertingColorsToDialog);
                    ShowStatus(_language.ConvertedColorsToDialog);
                    convertColorsToDialogForm.ConvertColorsToDialogInSubtitle(_subtitle);
                    UpdateSourceView();
                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    RestoreSubtitleListviewIndices();
                    Cursor = Cursors.Default;
                }
            }
        }

        private void AudioToTextWhisperTolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(_videoFileName) &&
               (_videoFileName.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
                _videoFileName.StartsWith("https://", StringComparison.OrdinalIgnoreCase)))
            {
                MessageBox.Show("SE cannot generate text from online video/audio");
                return;
            }

            if (!ContinueNewOrExit())
            {
                return;
            }

            if (!RequireFfmpegOk())
            {
                return;
            }

            if (Configuration.Settings.Tools.WhisperChoice == WhisperChoice.Cpp)
            {
                if (!RequireWhisperCpp())
                {
                    return;
                }
            }

            CheckWhisperCpp();

            var oldVideoFileName = _videoFileName;
            var isVlc = mediaPlayer.VideoPlayer is LibVlcDynamic;
            if (isVlc)
            {
                CloseVideoToolStripMenuItemClick(sender, e);
            }

            using (var form = new WhisperAudioToText(oldVideoFileName, _subtitle, _videoAudioTrackNumber, this, audioVisualizer?.WavePeaks))
            {
                var result = form.ShowDialog(this);

                if (isVlc)
                {
                    OpenVideo(oldVideoFileName);
                }

                if (result != DialogResult.OK)
                {
                    return;
                }

                if (form.TranscribedSubtitle.Paragraphs.Count == 0)
                {
                    if (form.IncompleteModel)
                    {
                        MessageBox.Show($"Model incomplete.{Environment.NewLine}" +
                                        $"Please re-download model: {form.IncompleteModelName}", MessageBoxIcon.Error);
                    }
                    else if (form.UnknownArgument)
                    {
                        var customArgument = Configuration.Settings.Tools.WhisperExtraSettings;
                        var extraMessage = string.Empty;
                        if (!string.IsNullOrEmpty(customArgument))
                        {
                            extraMessage = Environment.NewLine + "Note you have a custom argument: " + customArgument;
                        }
                        extraMessage = extraMessage + Environment.NewLine + Environment.NewLine + "View the log file `whisper_log.txt`?";
                        var r = MessageBox.Show($"Whisper reported unknown argument'" + extraMessage, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Error);
                        if (r == DialogResult.Yes)
                        {
                            UiUtil.OpenFile(SeLogger.GetWhisperLogFilePath());
                        }
                    }
                    else if (form.RunningOnCuda &&
                             Configuration.Settings.Tools.WhisperChoice == WhisperChoice.PurfviewFasterWhisper &&
                             !WhisperAudioToText.IsFasterWhisperCudaInstalled())
                    {
                        MessageBox.Show("cuBLAS or cuDNN seems to be missing.");
                        WhisperAudioToText.DownloadCudaForWhisperFaster(this);
                    }
                    else
                    {
                        var customArgument = Configuration.Settings.Tools.WhisperExtraSettings;
                        var extraMessage = string.Empty;
                        if (!string.IsNullOrEmpty(customArgument))
                        {
                            extraMessage = Environment.NewLine + "Note you have a custom argument: " + customArgument;
                        }
                        extraMessage = extraMessage + Environment.NewLine + Environment.NewLine + string.Format(LanguageSettings.Current.General.ViewX, "`whisper_log.txt`?");
                        var r = MessageBox.Show(LanguageSettings.Current.AudioToText.NoTextFound + extraMessage, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Error);
                        if (r == DialogResult.Yes)
                        {
                            UiUtil.OpenFile(SeLogger.GetWhisperLogFilePath());
                        }
                    }

                    return;
                }

                MakeHistoryForUndo(string.Format(_language.BeforeX, string.Format(LanguageSettings.Current.Main.Menu.Video.VideoAudioToTextX, "Whisper")));
                _subtitle.Paragraphs.Clear();
                _subtitle.Paragraphs.AddRange(form.TranscribedSubtitle.Paragraphs);
                var idx = FirstSelectedIndex;
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisibleFaster(idx);
            }
        }

        private static void CheckWhisperCpp()
        {
            if (Configuration.Settings.Tools.WhisperChoice != WhisperChoice.Cpp)
            {
                return;
            }

            if (Configuration.IsRunningOnLinux && WhisperHelper.GetWhisperPathAndFileName() == "whisper")
            {
                SeLogger.Error("UseWhisperChoice changed to 'OpenAI' as 'Whisper/whisper' or '/Whisper/main' was not found!");
                Configuration.Settings.Tools.WhisperChoice = WhisperChoice.OpenAi;
            }

            if (Configuration.IsRunningOnWindows && WhisperHelper.GetWhisperPathAndFileName() == "whisper")
            {
                SeLogger.Error("UseWhisperChoice changed to 'OpenAI' as 'Whisper/whisper.exe' or '/Whisper/main.exe' was not found!");
                Configuration.Settings.Tools.WhisperChoice = WhisperChoice.OpenAi;
            }
        }

        private void ToolStripButtonSourceViewClick(object sender, EventArgs e)
        {
            if (InListView)
            {
                SwitchView(SourceView);
            }
            else
            {
                SwitchView(ListView);
            }
        }

        private void RemoveTranslationToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (ContinueNewOrExit())
            {
                _fileName = _subtitleOriginalFileName;
                _subtitle = _subtitleOriginal;

                _subtitleOriginalFileName = null;
                _subtitleOriginal = new Subtitle();
                _isOriginalActive = false;

                var selectIndices = SubtitleListview1.GetSelectedIndices();
                RemoveOriginal(true, true);
                SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                if (selectIndices.Length > 0)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(selectIndices[0], true);
                }

                RefreshSelectedParagraph();
            }
        }

        public void ReloadSubtitle(Subtitle subtitle)
        {
            SaveSubtitleListviewIndices();
            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
            RestoreSubtitleListviewIndices();
            RefreshSelectedParagraph();
        }

        private void GenerateVideoWithSoftcodedSubtitlesToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!RequireFfmpegOk())
            {
                return;
            }

            using (var form = new GenerateVideoWithSoftSubs(_subtitle, _videoFileName, _videoInfo))
            {
                var result = form.ShowDialog(this);
                if (result != DialogResult.OK)
                {
                    return;
                }

                using (var f = new ExportPngXmlDialogOpenFolder(string.Format(LanguageSettings.Current.GenerateVideoWithEmbeddedSubs.XGeneratedWithEmbeddedSubs, Path.GetFileName(form.VideoFileName)), Path.GetDirectoryName(form.VideoFileName), form.VideoFileName))
                {
                    f.ShowDialog(this);
                }
            }
        }

        private void ToolStripMenuItemExportTtmlImage_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.TtmlInlinePng, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void TolStripMenuItemWebVttStyleClick(object sender, EventArgs e)
        {
            var idx = FirstSelectedIndex;
            if (idx == -1)
            {
                return;
            }

            var styles = WebVttHelper.GetStyles(_subtitle.Header);
            using (var form = new WebVttStylePicker(styles, _subtitle.GetParagraphOrDefault(idx)))
            {
                if (form.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.Paragraphs[index];
                    p.Text = WebVttHelper.SetParagraphStyles(p, form.ImportExportStyles);
                    SubtitleListview1.SetText(index, p.Text);
                }
            }

            RefreshSelectedParagraph();
        }

        private void BeautifyTimeCodesOfSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            BeautifyTimeCodes(true);
        }

        private void BeautifyTimeCodes(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            var unfixableParagraphs = new List<BeautifyTimeCodes.BeautifyTimeCodes.UnfixableParagraphsPair>();

            if (onlySelectedLines)
            {
                var selectedIndices = SubtitleListview1.GetSelectedIndices();
                var selectedLines = new Subtitle();
                foreach (int index in selectedIndices)
                {
                    selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                }

                using (var form = new BeautifyTimeCodes.BeautifyTimeCodes(selectedLines, _videoInfo, _videoFileName, audioVisualizer.ShotChanges))
                {
                    form.Text = string.Format(LanguageSettings.Current.BeautifyTimeCodes.TitleSelectedLines, selectedIndices.Length);

                    var result = form.ShowDialog(this);

                    if (form.ShotChangesInSeconds.Count > 0)
                    {
                        audioVisualizer.ShotChanges = form.ShotChangesInSeconds;
                    }

                    if (result == DialogResult.OK)
                    {
                        int index = FirstSelectedIndex;
                        if (index < 0)
                        {
                            index = 0;
                        }

                        MakeHistoryForUndo(_language.BeforeBeautifyTimeCodesSelectedLines);
                        SaveSubtitleListviewIndices();

                        foreach (int idx in selectedIndices)
                        {
                            var pOld = _subtitle.Paragraphs[idx];
                            var p = form.FixedSubtitle.GetParagraphOrDefaultById(pOld.Id);
                            if (p != null)
                            {
                                _subtitle.Paragraphs[idx] = p;
                            }
                        }

                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                        RestoreSubtitleListviewIndices();

                        ShowStatus(_language.BeautifiedTimeCodesSelectedLines);

                        unfixableParagraphs = form.UnfixableParagraphs;
                    }
                }
            }
            else
            {
                using (var form = new BeautifyTimeCodes.BeautifyTimeCodes(_subtitle, _videoInfo, _videoFileName, audioVisualizer.ShotChanges))
                {
                    var result = form.ShowDialog(this);

                    if (form.ShotChangesInSeconds.Count > 0)
                    {
                        audioVisualizer.ShotChanges = form.ShotChangesInSeconds;
                    }

                    if (result == DialogResult.OK)
                    {
                        int index = FirstSelectedIndex;
                        if (index < 0)
                        {
                            index = 0;
                        }

                        MakeHistoryForUndo(_language.BeforeBeautifyTimeCodes);
                        SaveSubtitleListviewIndices();
                        _subtitle.Paragraphs.Clear();
                        _subtitle.Paragraphs.AddRange(form.FixedSubtitle.Paragraphs);

                        SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                        SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                        RestoreSubtitleListviewIndices();

                        ShowStatus(_language.BeautifiedTimeCodes);

                        unfixableParagraphs = form.UnfixableParagraphs;
                    }
                }
            }

            if (unfixableParagraphs.Count > 0)
            {
                BeginInvoke(new Action(() =>
                {
                    _dialog?.Dispose();
                    _dialog = new BeautifyTimeCodes.BeautifyTimeCodesUnfixableParagraphs(unfixableParagraphs, (paragraph) =>
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(paragraph);
                        GotoSubPositionAndPause();
                    });
                    _dialog.Show(this);
                }));
            }
        }

        private void ToolStripSplitButtonPlayRateClick(object sender, EventArgs e)
        {
            _contextMenuStripPlayRate.Show(MousePosition.X, MousePosition.Y);
        }

        public void RedockFromFullscreen()
        {
            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                var control = _videoPlayerUndocked.PanelContainer.Controls[0];
                control.Parent.Controls.Remove(control);
                ReDockVideoPlayer(control);
                _videoPlayerUndocked = null;
                mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
            }

            Configuration.Settings.General.Undocked = false;
        }

        private void autotranslateNLLBToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var onlySelectedLines = false;
            MakeAutoTranslate(onlySelectedLines);
        }

        private void MakeAutoTranslate(bool onlySelectedLines)
        {
            if (_subtitle != null && _subtitle.Paragraphs.Count == 0)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            bool isOriginalVisible = SubtitleListview1.IsOriginalTextColumnVisible;
            ReloadFromSourceView();
            string title = string.Empty;
            var sub = new Subtitle(_subtitle);
            Subtitle target = null;
            if (onlySelectedLines)
            {
                title = LanguageSettings.Current.GoogleTranslate.Title + " - " + _language.SelectedLines;

                sub = new Subtitle();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    sub.Paragraphs.Add(new Paragraph(_subtitle.Paragraphs[index], false));
                }

                if (_subtitleOriginal != null && SubtitleListview1.IsOriginalTextColumnVisible)
                {
                    var paragraphs = new List<Paragraph>();
                    var paragraphsToRemove = new List<Paragraph>();
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index], _subtitleOriginal.Paragraphs);
                        if (original != null)
                        {
                            paragraphs.Add(new Paragraph(original, false));
                        }
                        else
                        {
                            paragraphsToRemove.Add(_subtitle.Paragraphs[index]);
                        }
                    }

                    foreach (var p in paragraphsToRemove)
                    {
                        sub.Paragraphs.RemoveAll(x => x.Id == p.Id);
                    }

                    target = sub;
                    sub = new Subtitle(paragraphs);
                }
            }

            using (var autoTranslate = new AutoTranslate(sub, target, title, GetCurrentEncoding()))
            {
                SaveSubtitleListviewIndices();

                if (autoTranslate.ShowDialog(this) == DialogResult.OK)
                {
                    _subtitleListViewIndex = -1;
                    var oldFileName = _fileName;
                    MakeHistoryForUndo(_language.BeforeGoogleTranslation);
                    if (onlySelectedLines)
                    {
                        if (!SubtitleListview1.IsOriginalTextColumnVisible)
                        {
                            SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
                            SubtitleListview1.AutoSizeAllColumns(this);
                            _subtitleOriginal = new Subtitle(_subtitle, false);
                            _subtitleOriginalFileName = _fileName;
                            _fileName = null;
                            var oldHash = _changeOriginalSubtitleHash;
                            SetupOriginalEdit();
                            _changeOriginalSubtitleHash = oldHash;

                            foreach (var p in _subtitle.Paragraphs)
                            {
                                p.Text = string.Empty;
                            }
                        }

                        // we only update selected lines
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            var p = _subtitle.Paragraphs[index];
                            var t = autoTranslate.TranslatedSubtitle.Paragraphs.FirstOrDefault(x => x.Id == p.Id);
                            if (t != null)
                            {
                                p.Text = t.Text;
                            }
                        }

                        ShowStatus(_language.SelectedLinesTranslated);
                    }
                    else
                    {
                        ShowSubtitleTimer.Stop();
                        var oldHash = _changeSubtitleHash;
                        _subtitleOriginal = new Subtitle(_subtitle);
                        _subtitleOriginalFileName = _fileName;
                        _fileName = null;
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in autoTranslate.TranslatedSubtitle.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        SetAssaResolution(_subtitleOriginal);
                        ShowStatus(_language.SubtitleTranslated);
                        _changeOriginalSubtitleHash = oldHash;
                        _changeSubtitleHash = -1;
                        ShowSubtitleTimer.Start();
                    }

                    ShowSource();

                    if (!onlySelectedLines)
                    {
                        SubtitleListview1.ShowOriginalTextColumn(_languageGeneral.OriginalText);
                        SubtitleListview1.AutoSizeAllColumns(this);
                        var oldHash = _changeOriginalSubtitleHash;
                        SetupOriginalEdit();
                        _changeOriginalSubtitleHash = oldHash;
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                    if (!onlySelectedLines)
                    {
                        ResetHistory();
                        _fileName = FileNameHelper.GetFileNameWithTargetLanguage(oldFileName, _videoFileName, _subtitleOriginal, GetCurrentSubtitleFormat(), autoTranslate.TwoLetterIsoSource, autoTranslate.TwoLetterIsoTarget);
                        _converted = true;
                    }

                    RestoreSubtitleListviewIndices();

                    SetTitle();
                    SetEncoding(Encoding.UTF8);
                    if (!isOriginalVisible)
                    {
                        toolStripMenuItemShowOriginalInPreview.Checked = false;
                        Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = false;
                        audioVisualizer.Invalidate();
                    }
                }
            }
        }

        private void numericUpDownDuration_MouseDown(object sender, MouseEventArgs e)
        {
            if (timerAutoDuration.Enabled)
            {
                StopAutoDuration();
            }
        }

        private void ToolStripButtonVideoOpenClick(object sender, EventArgs e)
        {
            OpenVideoDialog();
        }

        private void runWhiperOnParagraphToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AudioToTextWhisperSelectedLines();
        }

        private void textToSpeechAndAddToVideoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TaskDelayHelper.RunDelayed(TimeSpan.FromMilliseconds(25), () =>
            {
                if (RequireFfmpegOk())
                {
                    using (var form = new TextToSpeech(_subtitle, GetCurrentSubtitleFormat(), _videoFileName, _videoInfo))
                    {
                        if (form.ShowDialog(this) == DialogResult.OK)
                        {
                            var idx = FirstSelectedIndex;
                            _subtitle = form.EditedSubtitle;
                            SubtitleListview1.Fill(_subtitle, _subtitleOriginal);
                            _subtitleListViewIndex = -1;
                            SubtitleListview1.SelectIndexAndEnsureVisibleFaster(idx);
                        }
                    }
                }
            });
        }

        private void videoInfoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_videoFileName) || _videoInfo == null)
            {
                return;
            }

            var sbTrackInfo = new StringBuilder();
            var sb = new StringBuilder();

            try
            {
                Cursor = Cursors.WaitCursor;

                var trackNo = 1;
                if (RequireFfmpegOk())
                {
                    var ffmpegMediaInfo = FfmpegMediaInfo.Parse(_videoFileName);
                    sbTrackInfo.AppendLine("Tracks:");
                    foreach (var ffmpegTrackInfo in ffmpegMediaInfo.Tracks)
                    {
                        sbTrackInfo.AppendLine($"#{trackNo} - {ffmpegTrackInfo.TrackType}");
                        sbTrackInfo.AppendLine(ffmpegTrackInfo.TrackInfo);
                        sbTrackInfo.AppendLine();
                        trackNo++;
                    }
                }

                sb.AppendLine($"File name: {_videoFileName}");
                sb.AppendLine($"File size: {Utilities.FormatBytesToDisplayFileSize(new FileInfo(_videoFileName).Length)}");
                sb.AppendLine($"Duration: {new TimeCode(_videoInfo.TotalSeconds * 1000.0).ToShortDisplayString()}");

                if (_videoInfo.Width > 0 && _videoInfo.Height > 0)
                {
                    sb.AppendLine($"Resolution: {_videoInfo.Width}x{_videoInfo.Height}");
                }

                if (_videoInfo.FramesPerSecond > 0)
                {
                    sb.AppendLine($"Framerate: {_videoInfo.FramesPerSecond:0.###}");
                }

                if (string.IsNullOrEmpty(_videoInfo.VideoCodec) && FileUtil.IsWav(_videoFileName))
                {
                    _videoInfo.VideoCodec = "WAV";
                }

                if (string.IsNullOrEmpty(_videoInfo.VideoCodec) && FileUtil.IsMp3(_videoFileName))
                {
                    _videoInfo.VideoCodec = "MP3";
                }

                sb.AppendLine($"Codec: {_videoInfo.VideoCodec}");

                var mkvParser = new MatroskaFile(_videoFileName);
                if (mkvParser.IsValid)
                {
                    sb.AppendLine($"Container: Matroska (mkv/webm)");
                    var chapters = mkvParser.GetChapters();
                    if (chapters.Count > 0)
                    {
                        sb.AppendLine($" - Chapters: {chapters.Count}");
                    }
                }
                else
                {
                    var mp4Parser = new MP4Parser(_videoFileName);
                    if (mp4Parser.Duration.TotalMilliseconds > 0)
                    {
                        sb.AppendLine($"Container: MP4");
                    }
                }

                sb.AppendLine();
            }
            catch
            {
                sb.AppendLine();
                sb.AppendLine("AN ERROR OCCURRED DURING MEDIA SCANNING!");
            }
            finally
            {
                Cursor = Cursors.Default;
            }

            MessageBox.Show(sb.ToString() + sbTrackInfo.ToString());
        }

        private void contextMenuStripVideoFileName_Opening(object sender, CancelEventArgs e)
        {
            if (string.IsNullOrEmpty(_videoFileName) || _videoInfo == null)
            {
                e.Cancel = true;
            }

            openContainingFolderToolStripMenuItem.Text = _language.Menu.File.OpenContainingFolder;
            videoInfoToolStripMenuItem.Text = _language.Menu.ContextMenu.MediaInfo;
        }

        private void openContainingFolderToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(_videoFileName) && File.Exists(_videoFileName))
            {
                UiUtil.OpenFolderFromFileName(_videoFileName);
            }
        }

        private void insertNewSubtitleHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (_audioWaveformRightClickSeconds == null)
            {
                return;
            }

            var newParagraph = InsertNewTextAtVideoPosition(false, _audioWaveformRightClickSeconds.Value * 1000.0);

            if (!InSourceView)
            {
                textBoxListViewText.Focus();
            }

            ShowStatus(string.Format(_language.VideoControls.NewTextInsertAtX, newParagraph.StartTime.ToShortString()));
        }
    }
}