
using Nikse.SubtitleEdit.Controls;
using Nikse.SubtitleEdit.Core;
using Nikse.SubtitleEdit.Core.BluRaySup;
using Nikse.SubtitleEdit.Core.ContainerFormats;
using Nikse.SubtitleEdit.Core.ContainerFormats.MaterialExchangeFormat;
using Nikse.SubtitleEdit.Core.ContainerFormats.Matroska;
using Nikse.SubtitleEdit.Core.ContainerFormats.Mp4;
using Nikse.SubtitleEdit.Core.ContainerFormats.Mp4.Boxes;
using Nikse.SubtitleEdit.Core.ContainerFormats.TransportStream;
using Nikse.SubtitleEdit.Core.Enums;
using Nikse.SubtitleEdit.Core.Forms;
using Nikse.SubtitleEdit.Core.NetflixQualityCheck;
using Nikse.SubtitleEdit.Core.SpellCheck;
using Nikse.SubtitleEdit.Core.SubtitleFormats;
using Nikse.SubtitleEdit.Core.VobSub;
using Nikse.SubtitleEdit.Forms.Networking;
using Nikse.SubtitleEdit.Forms.Ocr;
using Nikse.SubtitleEdit.Forms.Styles;
using Nikse.SubtitleEdit.Logic;
using Nikse.SubtitleEdit.Logic.CommandLineConvert;
using Nikse.SubtitleEdit.Logic.Networking;
using Nikse.SubtitleEdit.Logic.VideoPlayers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace Nikse.SubtitleEdit.Forms
{

    public sealed partial class Main : Form
    {
        private class ComboBoxZoomItem
        {
            public string Text { get; set; }
            public double ZoomFactor { get; set; }

            public override string ToString()
            {
                return Text;
            }
        }

        private const int TabControlListView = 0;
        private const int TabControlSourceView = 1;

        private Subtitle _subtitle = new Subtitle();

        private int _undoIndex = -1;
        private string _listViewTextUndoLast;
        private int _listViewTextUndoIndex = -1;
        private long _listViewTextTicks = -1;
        private string _listViewAlternateTextUndoLast;
        private long _listViewAlternateTextTicks = -1;

        private Subtitle _subtitleAlternate = new Subtitle();
        private string _subtitleAlternateFileName;
        private string _fileName;
        private string _videoFileName;
        private int _videoAudioTrackNumber = -1;

        public string VideoFileName
        {
            get { return _videoFileName; }
            set { _videoFileName = value; }
        }

        private DateTime _fileDateTime;
        private string _title;
        private FindReplaceDialogHelper _findHelper;
        private int _replaceStartLineIndex;
        private bool _sourceViewChange;
        private int _changeSubtitleHash = -1;
        private int _changeAlternateSubtitleHash = -1;
        private int _subtitleListViewIndex = -1;
        private Paragraph _oldSelectedParagraph;
        private bool _converted;
        private SubtitleFormat _oldSubtitleFormat;
        private List<int> _selectedIndices;
        private LanguageStructure.Main _language;
        private LanguageStructure.General _languageGeneral;
        private SpellCheck _spellCheckForm;
        private bool _loading = true;
        private bool _exitWhenLoaded;
        private int _repeatCount = -1;
        private double _endSeconds = -1;
        private double _endSecondsNewPosition = -1;
        private long _endSecondsNewPositionTicks;
        private const double EndDelay = 0.05;
        private int _autoContinueDelayCount = -1;
        private long _lastTextKeyDownTicks;
        private long _lastHistoryTicks;
        private long _lastWaveformMenuCloseTicks;
        private double? _audioWaveformRightClickSeconds;
        private Timer _timerDoSyntaxColoring = new Timer();
        private Timer _timerAutoBackup;
        private Timer _timerClearStatus = new Timer();
        private string _textAutoBackup;
        private string _textAutoBackupOriginal;
        private List<string> _statusLog = new List<string>();
        private bool _disableShowStatus;
        private StatusLog _statusLogForm;
        private bool _makeHistoryPaused;
        private bool _saveAsCalled;

        private CheckForUpdatesHelper _checkForUpdatesHelper;
        private Timer _timerCheckForUpdates;

        private NikseWebServiceSession _networkSession;
        private NetworkChat _networkChat;

        private ShowEarlierLater _showEarlierOrLater;

        private bool _isVideoControlsUndocked;
        private VideoPlayerUndocked _videoPlayerUndocked;
        private WaveformUndocked _waveformUndocked;
        private VideoControlsUndocked _videoControlsUndocked;

        private GoogleOrMicrosoftTranslate _googleOrMicrosoftTranslate;

        private bool _cancelWordSpellCheck = true;
        private bool _cleanupHasRun;

        private bool _clearLastFind;
        private FindType _clearLastFindType = FindType.Normal;
        private string _clearLastFindText = string.Empty;
        private bool _videoLoadedGoToSubPosAndPause;
        private string _cutText = string.Empty;
        private Paragraph _mainCreateStartDownEndUpParagraph;
        private Paragraph _mainAdjustStartDownEndUpAndGoToNextParagraph;
        private int _lastDoNotPrompt = -1;
        private VideoInfo _videoInfo;
        private bool _splitDualSami;
        private bool _openFileDialogOn;
        private bool _resetVideo = true;
        private bool _doAutoBreakOnTextChanged = true;
        private static object _syncUndo = new object();
        private string[] _dragAndDropFiles;
        private readonly Timer _dragAndDropTimer = new Timer(); // to prevent locking windows explorer
        private readonly Timer _dragAndDropVideoTimer = new Timer(); // to prevent locking windows explorer
        private long _labelNextTicks = -1;
        private bool _showBookmarkLabel = true;
        private ContextMenu _bookmarkContextMenu;
        private MainShortcuts _shortcuts = new MainShortcuts();
        private long _winLeftDownTicks = -1;
        private long _winRightDownTicks = -1;

        public bool IsMenuOpen { get; private set; }

        private bool AutoRepeatContinueOn
        {
            get { return tabControlButtons.SelectedIndex == 0 && checkBoxAutoContinue.Checked; }
        }

        private bool AutoRepeatOn
        {
            get { return tabControlButtons.SelectedIndex == 0 && checkBoxAutoRepeatOn.Checked; }
        }

        public string Title
        {
            get
            {
                if (_title == null)
                {
                    var versionInfo = Utilities.AssemblyVersion.Split('.');
                    _title = $"{_languageGeneral.Title} {versionInfo[0]}.{versionInfo[1]}.{versionInfo[2]}";
                }

                return _title;
            }
        }

        private void SetCurrentFormat(string formatName)
        {
            SetCurrentFormat(SubtitleFormat.FromName(formatName, new SubRip()));
        }

        private void SetCurrentFormat(SubtitleFormat format)
        {
            if (format.IsVobSubIndexFile)
            {
                UiUtil.InitializeSubtitleFormatComboBox(comboBoxSubtitleFormats, format);
                SubtitleListview1.HideNonVobSubColumns();
            }
            else if (comboBoxSubtitleFormats.Items.Count == 1)
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
                SetFormatTo(format);
            }
            else
            {
                int index = 0;
                foreach (string name in comboBoxSubtitleFormats.Items)
                {
                    if (name == format.FriendlyName)
                    {
                        comboBoxSubtitleFormats.SelectedIndex = index;
                        return;
                    }

                    index++;
                }
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            UiUtil.FixFonts(this, 10000);
            UiUtil.FixFonts(contextMenuStripListview);
            UiUtil.FixFonts(contextMenuStripTextBoxListView);
            UiUtil.FixFonts(contextMenuStripWaveform);
            UiUtil.FixLargeFonts(tabControlButtons, buttonAutoBreak);
            UiUtil.FixLargeFonts(tabControlButtons, buttonAutoBreak);
            UiUtil.FixLargeFonts(groupBoxEdit, buttonAutoBreak);
            UiUtil.InitializeSubtitleFont(textBoxSource);
            UiUtil.InitializeSubtitleFont(textBoxListViewText);
            UiUtil.InitializeSubtitleFont(textBoxListViewTextAlternate);
            UiUtil.InitializeSubtitleFont(SubtitleListview1);

            using (var graphics = CreateGraphics())
            {
                // avoid weird looking layout for high DPI
                if (graphics.DpiX > 120)
                {
                    Font = new Font(Font.FontFamily, (float)(Font.Size * graphics.DpiX / 96.0));

                    numericUpDownDuration.Left = timeUpDownStartTime.Right + 15;
                    numericUpDownDuration.Width += 5;
                    labelDuration.Left = numericUpDownDuration.Left - 3;
                }
                var xDiff = timeUpDownStartTime.Top - (labelStartTime.Top + labelStartTime.Height);
                if (xDiff < 0) // DPI auto-size fixes: see https://github.com/SubtitleEdit/subtitleedit/issues/3981
                {
                    xDiff *= -1;
                    timeUpDownStartTime.Top += xDiff;
                    numericUpDownDuration.Top += xDiff;
                    pictureBoxBookmark.Top += xDiff;
                    textBoxListViewText.Top += xDiff;
                    textBoxListViewText.Height -= xDiff;
                    textBoxListViewTextAlternate.Top += xDiff;
                    textBoxListViewTextAlternate.Height -= xDiff;
                    comboBoxAutoRepeat.Top += xDiff;
                    comboBoxAutoContinue.Top += xDiff;
                }
            }
            labelAutoDuration.Left = labelDuration.Left - (labelAutoDuration.Width - 5);

            base.OnLoad(e);
        }

        private static string GetArgumentAfterColon(IEnumerable<string> commandLineArguments, string requestedArgumentName)
        {
            foreach (var argument in commandLineArguments)
            {
                if (argument.StartsWith(requestedArgumentName, StringComparison.OrdinalIgnoreCase))
                {
                    if (requestedArgumentName.EndsWith(':'))
                    {
                        return argument.Substring(requestedArgumentName.Length);
                    }

                    return argument;
                }
            }

            return null;
        }

        public Main()
        {
            if (Configuration.IsRunningOnLinux)
            {
                NativeMethods.setlocale(NativeMethods.LC_NUMERIC, "C");
            }

            try
            {
                UiUtil.PreInitialize(this);
                InitializeComponent();

                Icon = Properties.Resources.SubtitleEditFormIcon;

                textBoxListViewTextAlternate.Visible = false;
                labelAlternateText.Visible = false;
                labelAlternateCharactersPerSecond.Visible = false;
                labelTextAlternateLineLengths.Visible = false;
                labelAlternateSingleLine.Visible = false;
                labelAlternateSingleLinePixels.Visible = false;
                labelTextAlternateLineTotal.Visible = false;
                labelNextWord.Visible = false;

                SetLanguage(Configuration.Settings.General.Language);
                toolStripStatusNetworking.Visible = false;
                labelTextLineLengths.Text = string.Empty;
                labelCharactersPerSecond.Text = string.Empty;
                labelTextLineTotal.Text = string.Empty;
                labelStartTimeWarning.Text = string.Empty;
                labelDurationWarning.Text = string.Empty;
                labelVideoInfo.Text = string.Empty;
                labelSingleLine.Text = string.Empty;
                labelSingleLinePixels.Text = string.Empty;
                Text = Title;
                timeUpDownStartTime.TimeCode = new TimeCode();
                timeUpDownStartTime.UseVideoOffset = true;
                timeUpDownVideoPosition.UseVideoOffset = true;
                timeUpDownVideoPositionAdjust.UseVideoOffset = true;
                checkBoxAutoRepeatOn.Checked = Configuration.Settings.General.AutoRepeatOn;
                comboBoxAutoRepeat.SelectedIndex = Configuration.Settings.General.AutoRepeatCount;
                checkBoxAutoContinue.Checked = Configuration.Settings.General.AutoContinueOn;
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = Configuration.Settings.General.SyncListViewWithVideoWhilePlaying;

                SetFormatTo(Configuration.Settings.General.DefaultSubtitleFormat);

                UiUtil.InitializeTextEncodingComboBox(comboBoxEncoding.ComboBox);

                // set up UI interfaces / injections
                YouTubeAnnotations.GetYouTubeAnnotationStyles = new UiGetYouTubeAnnotationStyles();
                Ebu.EbuUiHelper = new UiEbuSaveHelper();
                Pac.GetPacEncodingImplementation = new UiGetPacEncoding(this);
                RichTextToPlainText.NativeRtfTextConverter = new RtfTextConverterRichTextBox();

                toolStripComboBoxFrameRate.Items.Add(23.976.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(24.0.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(25.0.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(29.97.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Items.Add(30.ToString(CultureInfo.CurrentCulture));
                toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();
                pictureBoxBookmark.Visible = false;

                UpdateRecentFilesUI();
                InitializeToolbar();
                UpdateNetflixGlyphCheckToolsVisibility();
                Utilities.SetSecurityProtocol(); // download from Github requires TLS 1.2

                if (Configuration.Settings.General.CenterSubtitleInTextBox)
                {
                    textBoxListViewText.TextAlign = HorizontalAlignment.Center;
                    textBoxListViewTextAlternate.TextAlign = HorizontalAlignment.Center;
                }

                tabControlSubtitle.SelectTab(TabControlSourceView); // AC
                ShowSourceLineNumber(); // AC
                tabControlSubtitle.SelectTab(TabControlListView); // AC
                if (Configuration.Settings.General.StartInSourceView)
                {
                    tabControlSubtitle.SelectTab(TabControlSourceView);
                }

                audioVisualizer.Visible = Configuration.Settings.General.ShowAudioVisualizer;
                audioVisualizer.ShowWaveform = Configuration.Settings.General.ShowWaveform;
                audioVisualizer.ShowSpectrogram = Configuration.Settings.General.ShowSpectrogram;
                panelWaveformControls.Visible = Configuration.Settings.General.ShowAudioVisualizer;
                trackBarWaveformPosition.Visible = Configuration.Settings.General.ShowAudioVisualizer;
                toolStripButtonToggleWaveform.Checked = Configuration.Settings.General.ShowAudioVisualizer;
                toolStripButtonToggleVideo.Checked = Configuration.Settings.General.ShowVideoPlayer;

                if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                {
                    numericUpDownDuration.DecimalPlaces = 2;
                    numericUpDownDuration.Increment = (decimal)(0.01);
                    toolStripSeparatorFrameRate.Visible = true;
                    toolStripLabelFrameRate.Visible = true;
                    toolStripComboBoxFrameRate.Visible = true;
                    toolStripButtonGetFrameRate.Visible = true;
                }

                _timerClearStatus.Interval = Configuration.Settings.General.ClearStatusBarAfterSeconds * 1000;
                _timerClearStatus.Tick += TimerClearStatus_Tick;

                var commandLineArgs = Environment.GetCommandLineArgs();
                var fileName = string.Empty;
                int srcLineNumber = -1;
                if (commandLineArgs.Length > 1)
                {
                    // ConvertOrReturn() shall not return if a command line conversion has been requested
                    CommandLineConverter.ConvertOrReturn(Title, commandLineArgs);

                    fileName = commandLineArgs[1];

                    if (fileName.Equals("/batchconvertui", StringComparison.OrdinalIgnoreCase) || fileName.Equals("-batchconvertui", StringComparison.OrdinalIgnoreCase))
                    {
                        new BatchConvert(this.Icon).ShowDialog();
                        Environment.Exit(0);
                    }

                    var sourceLineString = GetArgumentAfterColon(commandLineArgs, "/srcline:");
                    if (!int.TryParse(sourceLineString, out srcLineNumber))
                    {
                        srcLineNumber = -1;
                    }

                    _videoFileName = GetArgumentAfterColon(commandLineArgs, "/video:");
                }

                labelAutoDuration.Visible = false;
                mediaPlayer.SubtitleText = string.Empty;
                comboBoxAutoContinue.SelectedIndex = Configuration.Settings.General.AutoContinueDelay;

                timeUpDownVideoPosition.TimeCode = new TimeCode();
                timeUpDownVideoPositionAdjust.TimeCode = new TimeCode();
                timeUpDownVideoPosition.TimeCodeChanged += VideoPositionChanged;
                timeUpDownVideoPositionAdjust.TimeCodeChanged += VideoPositionChanged;
                timeUpDownVideoPosition.Enabled = false;
                timeUpDownVideoPositionAdjust.Enabled = false;

                switch (Configuration.Settings.VideoControls.LastActiveTab)
                {
                    case "Translate":
                        tabControlButtons.SelectedIndex = 0;
                        break;
                    case "Create":
                        tabControlButtons.SelectedIndex = 1;
                        break;
                    case "Adjust":
                        tabControlButtons.SelectedIndex = 2;
                        break;
                }

                tabControl1_SelectedIndexChanged(null, null);
                buttonCustomUrl1.Text = Configuration.Settings.VideoControls.CustomSearchText1;
                buttonCustomUrl1.Visible = Configuration.Settings.VideoControls.CustomSearchUrl1.Length > 1;
                buttonCustomUrl2.Text = Configuration.Settings.VideoControls.CustomSearchText2;
                buttonCustomUrl2.Visible = Configuration.Settings.VideoControls.CustomSearchUrl2.Length > 1;

                CheckAndGetNewlyDownloadedMpvDlls(string.Empty);

                if (fileName.Length > 0 && File.Exists(fileName))
                {
                    fileName = Path.GetFullPath(fileName);

                    if (srcLineNumber < 0)
                    {
                        if (!OpenFromRecentFiles(fileName))
                        {
                            OpenSubtitle(fileName, null, _videoFileName, null, true);
                        }
                    }
                    else
                    {
                        OpenSubtitle(fileName, null, _videoFileName, null, true);
                    }

                    if (srcLineNumber >= 0 && GetCurrentSubtitleFormat().GetType() == typeof(SubRip) && srcLineNumber < textBoxSource.Lines.Length)
                    {
                        int pos = 0;
                        for (int i = 0; i < srcLineNumber; i++)
                        {
                            pos += textBoxSource.Lines[i].Length;
                        }

                        if (pos + 35 < textBoxSource.TextLength)
                        {
                            pos += 35;
                        }

                        string s = textBoxSource.Text.Substring(0, pos);
                        int lastTimeCode = s.LastIndexOf(" --> ", StringComparison.Ordinal); // 00:02:26,407 --> 00:02:31,356
                        if (lastTimeCode > 14 && lastTimeCode + 16 >= s.Length)
                        {
                            s = s.Substring(0, lastTimeCode - 5);
                            lastTimeCode = s.LastIndexOf(" --> ", StringComparison.Ordinal);
                        }

                        if (lastTimeCode > 14 && lastTimeCode + 16 < s.Length)
                        {
                            string tc = s.Substring(lastTimeCode - 13, 30).Trim();
                            int index = 0;
                            foreach (var p in _subtitle.Paragraphs)
                            {
                                if (tc == p.StartTime + " --> " + p.EndTime)
                                {
                                    SubtitleListview1.SelectNone();
                                    SubtitleListview1.Items[0].Selected = false;
                                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                    break;
                                }

                                index++;
                            }
                        }
                    }
                }
                else if (Configuration.Settings.General.StartLoadLastFile && Configuration.Settings.RecentFiles.Files.Count > 0)
                {
                    fileName = Configuration.Settings.RecentFiles.Files[0].FileName;
                    if (!string.IsNullOrEmpty(fileName) && File.Exists(fileName) && !OpenFromRecentFiles(fileName))
                    {
                        OpenSubtitle(fileName, null);
                    }
                }

                // Initialize events etc. for audio waveform
                audioVisualizer.OnDoubleClickNonParagraph += AudioWaveform_OnDoubleClickNonParagraph;
                audioVisualizer.OnPositionSelected += AudioWaveform_OnPositionSelected;
                audioVisualizer.OnTimeChanged += AudioWaveform_OnTimeChanged; // start and/or end position of paragraph changed
                audioVisualizer.OnNewSelectionRightClicked += AudioWaveform_OnNewSelectionRightClicked;
                audioVisualizer.OnParagraphRightClicked += AudioWaveform_OnParagraphRightClicked;
                audioVisualizer.OnNonParagraphRightClicked += AudioWaveform_OnNonParagraphRightClicked;
                audioVisualizer.OnSingleClick += AudioWaveform_OnSingleClick;
                audioVisualizer.OnPause += AudioWaveform_OnPause;
                audioVisualizer.OnTimeChangedAndOffsetRest += AudioWaveform_OnTimeChangedAndOffsetRest;
                audioVisualizer.OnZoomedChanged += AudioWaveform_OnZoomedChanged;
                audioVisualizer.InsertAtVideoPosition += audioVisualizer_InsertAtVideoPosition;
                audioVisualizer.PasteAtVideoPosition += audioVisualizer_PasteAtVideoPosition;
                audioVisualizer.KeyDown += AudioVisualizer_KeyDown;
                SetAudioVisualizerSettings();
                if (Configuration.Settings.General.WaveformUpdateIntervalMs > 0 && Configuration.Settings.General.WaveformUpdateIntervalMs < 200)
                {
                    timerWaveform.Interval = Configuration.Settings.General.WaveformUpdateIntervalMs;
                }

                InitializeWaveformZoomDropdown();
                toolStripComboBoxWaveform.SelectedIndexChanged += toolStripComboBoxWaveform_SelectedIndexChanged;

                FixLargeFonts();

                if (Configuration.Settings.General.RightToLeftMode)
                {
                    ToolStripMenuItemRightToLeftModeClick(null, null);
                }

                timeUpDownStartTime.SetAutoWidth();
                numericUpDownDuration.Left = timeUpDownStartTime.Right + 4;
                labelDurationWarning.Left = numericUpDownDuration.Left;
                labelDuration.Left = labelDurationWarning.Left;

                timeUpDownVideoPosition.SetAutoWidth();
                timeUpDownVideoPositionAdjust.SetAutoWidth();
            }
            catch (Exception exception)
            {
                Cursor = Cursors.Default;
                MessageBox.Show(exception.Message + Environment.NewLine + exception.StackTrace);
                SeLogger.Error(exception, "Main constructor");
            }
        }

        private void AudioVisualizer_KeyDown(object sender, KeyEventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count != 1 || e.Handled)
            {
                return;
            }

            if (e.KeyData == italicToolStripMenuItem.ShortcutKeys)
            {
                ListViewToggleTag(HtmlUtil.TagItalic);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == boldToolStripMenuItem.ShortcutKeys)
            {
                ListViewToggleTag(HtmlUtil.TagBold);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == underlineToolStripMenuItem.ShortcutKeys)
            {
                ListViewToggleTag(HtmlUtil.TagUnderline);
                e.SuppressKeyPress = true;
            }

            else if (e.KeyData == removeAllFormattingsToolStripMenuItem.ShortcutKeys)
            {
                removeAllFormattingsToolStripMenuItem_Click(null, null);
                e.SuppressKeyPress = true;
            }

            else if (e.KeyData == _shortcuts.MainListViewAlignmentN1)
            {
                SetAlignment("{\\an1}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN2)
            {
                SetAlignment("", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN3)
            {
                SetAlignment("{\\an3}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN4)
            {
                SetAlignment("{\\an4}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN5)
            {
                SetAlignment("{\\an5}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN6)
            {
                SetAlignment("{\\an6}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN7)
            {
                SetAlignment("{\\an7}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN8)
            {
                SetAlignment("{\\an8}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN9)
            {
                SetAlignment("{\\an9}", false);
                e.SuppressKeyPress = true;
            }
        }

        private void InitializeWaveformZoomDropdown()
        {
            toolStripComboBoxWaveform.Items.Clear();
            for (double zoomCounter = AudioVisualizer.ZoomMinimum; zoomCounter <= AudioVisualizer.ZoomMaximum + (0.001); zoomCounter += 0.1)
            {
                int percent = (int)Math.Round(zoomCounter * 100);
                var item = new ComboBoxZoomItem { Text = percent + "%", ZoomFactor = zoomCounter };
                toolStripComboBoxWaveform.Items.Add(item);
                if (percent == 100)
                {
                    toolStripComboBoxWaveform.SelectedIndex = toolStripComboBoxWaveform.Items.Count - 1;
                }
            }
        }

        private void audioVisualizer_InsertAtVideoPosition(object sender, EventArgs e)
        {
            InsertNewTextAtVideoPosition();
        }

        private void audioVisualizer_PasteAtVideoPosition(object sender, EventArgs e)
        {
            double videoPositionInMilliseconds = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
            if (_subtitle.GetFirstParagraphOrDefaultByTime(videoPositionInMilliseconds) == null)
            {
                PastFromClipboard(videoPositionInMilliseconds);
            }
        }

        private void PastFromClipboard(double videoPositionInMilliseconds)
        {
            if (Clipboard.ContainsText())
            {
                var text = Clipboard.GetText();
                var tmp = new Subtitle();
                var format = new SubRip();
                var list = new List<string>(text.SplitToLines());
                format.LoadSubtitle(tmp, list, null);
                if (videoPositionInMilliseconds >= 0 && tmp.Paragraphs.Count > 0)
                {
                    if (tmp.Paragraphs[0].StartTime.TotalMilliseconds > videoPositionInMilliseconds)
                    {
                        var c = tmp.Paragraphs[0].StartTime.TotalMilliseconds - videoPositionInMilliseconds;
                        tmp.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-c));
                    }
                    else
                    {
                        var c = videoPositionInMilliseconds - tmp.Paragraphs[0].StartTime.TotalMilliseconds;
                        tmp.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(c));
                    }
                }
                else
                {
                    var start = videoPositionInMilliseconds;
                    foreach (var line in list)
                    {
                        if (!string.IsNullOrWhiteSpace(line))
                        {
                            var duration = Utilities.GetOptimalDisplayMilliseconds(line);
                            tmp.Paragraphs.Add(new Paragraph(line.Trim(), start, start + duration));
                            start += duration + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                        }
                    }
                }

                if (tmp.Paragraphs.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeInsertLine);
                    var selectIndices = new List<int>();
                    for (int i = 0; i < tmp.Paragraphs.Count; i++)
                    {
                        var p = tmp.Paragraphs[i];
                        var idx = _subtitle.InsertParagraphInCorrectTimeOrder(p);
                        selectIndices.Add(idx);
                        if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                        {
                            var original = Utilities.GetOriginalParagraph(idx + i + 1, p, _subtitleAlternate.Paragraphs);
                            if (original == null)
                            {
                                _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds));
                            }
                        }
                    }

                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    SubtitleListview1.SelectIndexAndEnsureVisible(selectIndices[0], true);
                    foreach (var selectIndex in selectIndices)
                    {
                        SubtitleListview1.Items[selectIndex].Selected = true;
                    }

                    if (_subtitleListViewIndex >= 0)
                    {
                        UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[_subtitleListViewIndex], textBoxListViewText);
                    }
                    else
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(0);
                    }
                }
            }
        }

        private void TimerClearStatus_Tick(object sender, EventArgs e)
        {
            ShowStatus(string.Empty);
        }

        private void SetEncoding(Encoding encoding)
        {
            if (encoding == Encoding.UTF8 && Configuration.Settings.General.DefaultEncoding == TextEncoding.Utf8WithoutBom)
            {
                comboBoxEncoding.SelectedIndex = TextEncoding.Utf8WithoutBomIndex;
            }

            foreach (TextEncoding item in comboBoxEncoding.Items)
            {
                if (item.Equals(encoding))
                {
                    comboBoxEncoding.SelectedItem = item;
                    return;
                }
            }

            comboBoxEncoding.SelectedIndex = TextEncoding.Utf8WithBomIndex; // UTF-8 with BOM
        }

        private void SetEncoding(string encodingName)
        {
            UiUtil.SetTextEncoding(comboBoxEncoding, encodingName);
        }

        private Encoding GetCurrentEncoding()
        {
            return UiUtil.GetTextEncodingComboBoxCurrentEncoding(comboBoxEncoding.ComboBox).Encoding;
        }

        private void AudioWaveform_OnNonParagraphRightClicked(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            addParagraphHereToolStripMenuItem.Visible = false;
            addParagraphAndPasteToolStripMenuItem.Visible = false;
            toolStripMenuItemSetParagraphAsSelection.Visible = false;
            deleteParagraphToolStripMenuItem.Visible = false;
            toolStripMenuItemFocusTextbox.Visible = true;
            splitToolStripMenuItem1.Visible = false;
            mergeWithPreviousToolStripMenuItem.Visible = false;
            mergeWithNextToolStripMenuItem.Visible = false;
            toolStripSeparator11.Visible = false;
            extendToPreviousToolStripMenuItem.Visible = false;
            extendToNextToolStripMenuItem.Visible = false;
            toolStripSeparator6.Visible = false;
            toolStripMenuItemWaveformPlaySelection.Visible = false;
            toolStripSeparator24.Visible = false;
            if (audioVisualizer.GetSceneChangeIndex(e.Seconds) >= 0)
            {
                removeSceneChangeToolStripMenuItem.Visible = true;
                addSceneChangeToolStripMenuItem.Visible = false;
            }
            else
            {
                removeSceneChangeToolStripMenuItem.Visible = false;
                addSceneChangeToolStripMenuItem.Visible = true;
            }

            _audioWaveformRightClickSeconds = e.Seconds;
            contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        private void AudioWaveform_OnDoubleClickNonParagraph(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            if (mediaPlayer.VideoPlayer != null)
            {
                _endSeconds = -1;
                if (e.Paragraph == null)
                {
                    if (Configuration.Settings.VideoControls.WaveformDoubleClickOnNonParagraphAction == "PlayPause")
                    {
                        mediaPlayer.TogglePlayPause();
                    }
                }
                else
                {
                    var index = _subtitle.GetIndex(e.Paragraph);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
                    {
                        var p = _subtitle.GetParagraphOrDefault(index);
                        if (p != null)
                        {
                            string tc = p.StartTime + " --> " + p.EndTime;
                            int start = textBoxSource.Text.IndexOf(p.Number + Environment.NewLine + tc, StringComparison.Ordinal);
                            if (start < 0)
                            {
                                start = 0;
                            }

                            start = textBoxSource.Text.IndexOf(tc, start, StringComparison.Ordinal);
                            if (start > 0)
                            {
                                textBoxSource.SelectionStart = start + tc.Length + Environment.NewLine.Length;
                                textBoxSource.SelectionLength = 0;
                                textBoxSource.ScrollToCaret();
                            }
                        }
                    }
                }
            }
        }

        private void AudioWaveform_OnZoomedChanged(object sender, EventArgs e)
        {
            SelectZoomTextInComboBox();
        }

        private void AudioWaveform_OnTimeChangedAndOffsetRest(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            if (mediaPlayer.VideoPlayer == null)
            {
                return;
            }

            int index = _subtitle.Paragraphs.IndexOf(e.Paragraph);
            if (index < 0)
            {
                if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
                {
                    index = _subtitleAlternate.GetIndex(e.Paragraph);
                    if (index >= 0)
                    {
                        var current = Utilities.GetOriginalParagraph(index, e.Paragraph, _subtitle.Paragraphs);
                        if (current != null)
                        {
                            index = _subtitle.Paragraphs.IndexOf(current);
                        }
                    }
                }
                else if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible)
                {
                    index = _subtitle.GetIndex(e.Paragraph);
                }
            }

            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                mediaPlayer.CurrentPosition = e.Seconds;
                SetStartAndOffsetTheRest(e.Seconds);
            }

            audioVisualizer.Invalidate();
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                ShowSource();
            }
        }

        private void AudioWaveform_OnPause(object sender, EventArgs e)
        {
            _endSeconds = -1;
            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.Pause();
            }
        }

        private void AudioWaveform_OnSingleClick(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            timerWaveform.Stop();
            _endSeconds = -1;
            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.Pause();
            }

            mediaPlayer.CurrentPosition = e.Seconds;

            int index = -1;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                index = SubtitleListview1.SelectedItems[0].Index;
            }

            SetWaveformPosition(audioVisualizer.StartPositionSeconds, e.Seconds, index);

            if (Configuration.Settings.VideoControls.WaveformSingleClickSelect && e.Paragraph != null)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(e.Paragraph), true);
            }

            timerWaveform.Start();
        }

        private void AudioWaveform_OnParagraphRightClicked(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(e.Paragraph), true);

            addParagraphHereToolStripMenuItem.Visible = false;
            addParagraphAndPasteToolStripMenuItem.Visible = false;
            toolStripMenuItemSetParagraphAsSelection.Visible = false;
            deleteParagraphToolStripMenuItem.Visible = true;
            toolStripMenuItemFocusTextbox.Visible = true;
            splitToolStripMenuItem1.Visible = true;
            mergeWithPreviousToolStripMenuItem.Visible = true;
            mergeWithNextToolStripMenuItem.Visible = true;
            toolStripSeparator11.Visible = true;
            extendToPreviousToolStripMenuItem.Visible = true;
            extendToNextToolStripMenuItem.Visible = true;
            toolStripSeparator6.Visible = true;
            toolStripMenuItemWaveformPlaySelection.Visible = true;
            toolStripSeparator24.Visible = true;
            if (audioVisualizer.GetSceneChangeIndex(e.Seconds) >= 0)
            {
                removeSceneChangeToolStripMenuItem.Visible = true;
                addSceneChangeToolStripMenuItem.Visible = false;
            }
            else
            {
                removeSceneChangeToolStripMenuItem.Visible = false;
                addSceneChangeToolStripMenuItem.Visible = true;
            }

            _audioWaveformRightClickSeconds = e.Seconds;
            contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        private void removeSceneChangeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!_audioWaveformRightClickSeconds.HasValue)
            {
                return;
            }

            var idx = audioVisualizer.GetSceneChangeIndex(_audioWaveformRightClickSeconds.Value);
            RemoveSceneChange(idx);
        }

        private void RemoveSceneChange(int idx)
        {
            if (idx >= 0 && idx < audioVisualizer.SceneChanges.Count)
            {
                var temp = new List<double>(audioVisualizer.SceneChanges);
                temp.RemoveAt(idx);
                audioVisualizer.SceneChanges = temp;
                SceneChangeHelper.SaveSceneChanges(_videoFileName, temp);
            }
        }

        private void addSceneChangeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!_audioWaveformRightClickSeconds.HasValue)
            {
                return;
            }

            var list = audioVisualizer.SceneChanges.Where(p => p > 0).ToList();
            list.Add(_audioWaveformRightClickSeconds.Value);
            list.Sort();
            audioVisualizer.SceneChanges = list;
            SceneChangeHelper.SaveSceneChanges(_videoFileName, list);
        }

        private void AudioWaveform_OnNewSelectionRightClicked(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(e.Paragraph), true);

            addParagraphHereToolStripMenuItem.Visible = true;
            addParagraphAndPasteToolStripMenuItem.Visible = Clipboard.ContainsText();

            if (SubtitleListview1.SelectedIndices.Count == 1)
            {
                var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                toolStripMenuItemSetParagraphAsSelection.Visible = p.StartTime.IsMaxTime;
            }

            deleteParagraphToolStripMenuItem.Visible = false;
            toolStripMenuItemFocusTextbox.Visible = false;
            splitToolStripMenuItem1.Visible = false;
            mergeWithPreviousToolStripMenuItem.Visible = false;
            mergeWithNextToolStripMenuItem.Visible = false;
            extendToPreviousToolStripMenuItem.Visible = false;
            extendToNextToolStripMenuItem.Visible = false;
            toolStripSeparator6.Visible = false;

            contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        private void AudioWaveform_OnTimeChanged(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            var paragraph = e.Paragraph;
            var beforeParagraph = e.BeforeParagraph;
            if (beforeParagraph == null)
            {
                beforeParagraph = paragraph;
            }

            if (Math.Abs(beforeParagraph.StartTime.TotalMilliseconds - paragraph.StartTime.TotalMilliseconds) < 0.01 &&
                Math.Abs(beforeParagraph.EndTime.TotalMilliseconds - paragraph.EndTime.TotalMilliseconds) < 0.01)
            {
                _makeHistoryPaused = true;
            }

            int selectedIndex = FirstSelectedIndex;
            int index = _subtitle.Paragraphs.IndexOf(paragraph);

            // TODO: Moving selected lines
            // current idx must also be selected
            //if (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.Whole && SubtitleListview1.SelectedIndices.Count > 1)
            //{
            //    foreach (int idx in SubtitleListview1.SelectedIndices)
            //    {
            //        var p = _subtitle.Paragraphs[idx];
            //        if (p != paragraph)
            //        {
            //            var dur = p.Duration.TotalMilliseconds;
            //            p.StartTime.TotalMilliseconds += e.AdjustMs;
            //            p.EndTime.TotalMilliseconds += e.AdjustMs;
            //            SubtitleListview1.SetStartTimeAndDuration(idx, p);
            //        }
            //    }
            //}

            if (index == _subtitleListViewIndex)
            {
                // Make history item for rollback (change paragraph back for history + change again)
                _subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                _subtitle.Paragraphs[index] = paragraph;
                _makeHistoryPaused = true;

                Paragraph original = null;
                if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible)
                {
                    original = Utilities.GetOriginalParagraph(index, beforeParagraph, _subtitleAlternate.Paragraphs);
                }

                if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                { // so we don't get weird rounds we'll use whole frames when moving start time
                    double fr = TimeCode.BaseUnit / Configuration.Settings.General.CurrentFrameRate;
                    if (e.BeforeParagraph != null && e.BeforeParagraph.StartTime.TotalMilliseconds != e.Paragraph.StartTime.TotalMilliseconds &&
                        e.BeforeParagraph.Duration.TotalMilliseconds == e.Paragraph.Duration.TotalMilliseconds)
                    {
                        // move paragraph
                        paragraph.StartTime.TotalMilliseconds = ((int)Math.Round(paragraph.StartTime.TotalMilliseconds / fr)) * fr;
                        paragraph.EndTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds + e.BeforeParagraph.Duration.TotalMilliseconds;
                    }
                    else if (e.BeforeParagraph != null && e.BeforeParagraph.EndTime.TotalMilliseconds == e.Paragraph.EndTime.TotalMilliseconds)
                    {
                        paragraph.EndTime.TotalMilliseconds = ((int)Math.Round(paragraph.EndTime.TotalMilliseconds / fr)) * fr;
                        int end = SubtitleFormat.MillisecondsToFrames(paragraph.EndTime.TotalMilliseconds);
                        int dur = SubtitleFormat.MillisecondsToFrames(paragraph.Duration.TotalMilliseconds);
                        paragraph.StartTime.TotalMilliseconds = SubtitleFormat.FramesToMilliseconds(end - dur);
                    }
                }

                timeUpDownStartTime.TimeCode = paragraph.StartTime;
                var durationInSeconds = (decimal)paragraph.Duration.TotalSeconds;
                if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
                {
                    SetDurationInSeconds((double)durationInSeconds);
                    if (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.Start)
                    {
                        paragraph.EndTime.TotalMilliseconds = e.BeforeParagraph.EndTime.TotalMilliseconds;
                    }
                }

                MovePrevNext(e, beforeParagraph, index);

                if (original != null)
                {
                    original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                    original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                }
            }
            else if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                index = _subtitleAlternate.GetIndex(paragraph);
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    _subtitleAlternate.Paragraphs[index] = new Paragraph(beforeParagraph);
                    MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    _subtitleAlternate.Paragraphs[index] = paragraph;
                    _makeHistoryPaused = true;

                    var current = Utilities.GetOriginalParagraph(index, beforeParagraph, _subtitle.Paragraphs);
                    if (current != null)
                    {
                        current.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                        current.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;

                        index = _subtitle.GetIndex(current);

                        SubtitleListview1.SetStartTimeAndDuration(index, paragraph, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));

                        if (index == selectedIndex)
                        {
                            timeUpDownStartTime.TimeCode = paragraph.StartTime;
                            var durationInSeconds = (decimal)(paragraph.Duration.TotalSeconds);
                            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
                            {
                                SetDurationInSeconds((double)durationInSeconds);
                            }
                        }
                    }
                }
            }
            else if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible)
            {
                index = _subtitle.GetIndex(paragraph);
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    _subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                    MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    _subtitle.Paragraphs[index] = paragraph;
                    _makeHistoryPaused = true;

                    MovePrevNext(e, beforeParagraph, index);

                    var original = Utilities.GetOriginalParagraph(index, beforeParagraph, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                        original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                    }

                    SubtitleListview1.SetStartTimeAndDuration(index, paragraph, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                }
            }
            else
            {
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    _subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                    MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    _subtitle.Paragraphs[index] = paragraph;
                    _makeHistoryPaused = true;

                    MovePrevNext(e, beforeParagraph, index);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, paragraph);

                    if (_subtitleAlternate != null)
                    {
                        var original = Utilities.GetOriginalParagraph(index, beforeParagraph, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                            original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                        }
                    }
                }

                SubtitleListview1.SetStartTimeAndDuration(index, paragraph, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
            }

            beforeParagraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
            beforeParagraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
            _makeHistoryPaused = false;

            if (Configuration.Settings.VideoControls.WaveformSetVideoPositionOnMoveStartEnd &&
                (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.Start ||
                 e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.End))
            {
                mediaPlayer.CurrentPosition = e.Seconds;
            }

            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                ShowSource();
            }
        }

        private void MovePrevNext(AudioVisualizer.ParagraphEventArgs e, Paragraph beforeParagraph, int index)
        {
            int curIdx = FirstSelectedIndex;
            if (e.MovePreviousOrNext && curIdx >= 0)
            {
                if (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.Start)
                {
                    var prev = _subtitle.GetParagraphOrDefault(index - 1);
                    if (prev != null)
                    {
                        Paragraph originalPrev = null;
                        if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible)
                        {
                            originalPrev = Utilities.GetOriginalParagraph(index - 1, prev, _subtitleAlternate.Paragraphs);
                        }

                        prev.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + (e.Paragraph.StartTime.TotalMilliseconds - beforeParagraph.StartTime.TotalMilliseconds);
                        SubtitleListview1.SetStartTimeAndDuration(index - 1, prev, _subtitle.GetParagraphOrDefault(index), _subtitle.GetParagraphOrDefault(index - 2));
                        audioVisualizer.Invalidate();

                        if (originalPrev != null)
                        {
                            originalPrev.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                        }

                        if (curIdx == index - 1)
                        {
                            var durationInSeconds = (decimal)(prev.Duration.TotalSeconds);
                            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
                            {
                                SetDurationInSeconds((double)durationInSeconds);
                            }
                        }
                    }
                }
                else if (e.MouseDownParagraphType == AudioVisualizer.MouseDownParagraphType.End)
                {
                    var next = _subtitle.GetParagraphOrDefault(index + 1);
                    if (next != null)
                    {
                        Paragraph originalNext = null;
                        if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible)
                        {
                            originalNext = Utilities.GetOriginalParagraph(index + 1, next, _subtitleAlternate.Paragraphs);
                        }

                        next.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds + (e.Paragraph.EndTime.TotalMilliseconds - beforeParagraph.EndTime.TotalMilliseconds);
                        SubtitleListview1.SetStartTimeAndDuration(index + 1, next, _subtitle.GetParagraphOrDefault(index + 2), _subtitle.GetParagraphOrDefault(index));
                        audioVisualizer.Invalidate();

                        if (originalNext != null)
                        {
                            originalNext.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds;
                        }

                        if (curIdx == index + 1)
                        {
                            timeUpDownStartTime.TimeCode = next.StartTime;
                            var durationInSeconds = (decimal)(next.Duration.TotalSeconds);
                            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
                            {
                                SetDurationInSeconds((double)durationInSeconds);
                            }
                        }
                    }
                }
            }
        }

        private void AudioWaveform_OnPositionSelected(object sender, AudioVisualizer.ParagraphEventArgs e)
        {
            mediaPlayer.CurrentPosition = e.Seconds;
            if (e.Paragraph != null)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(e.Paragraph), true);
            }
        }

        private void VideoPositionChanged(object sender, EventArgs e)
        {
            var tud = (TimeUpDown)sender;
            if (tud.Enabled)
            {
                mediaPlayer.CurrentPosition = tud.TimeCode.TotalSeconds;
            }
        }

        private void Main_Load(object sender, EventArgs e)
        {
            splitContainer1.Panel1MinSize = 525;
            splitContainer1.Panel2MinSize = 250;
            splitContainerMain.Panel1MinSize = 200;
            splitContainerMain.Panel2MinSize = 220;

            if (Configuration.Settings.General.StartRememberPositionAndSize &&
                !string.IsNullOrEmpty(Configuration.Settings.General.StartPosition))
            {
                var parts = Configuration.Settings.General.StartPosition.Split(';');
                if (parts.Length == 2)
                {
                    int x;
                    int y;
                    if (int.TryParse(parts[0], out x) && int.TryParse(parts[1], out y))
                    {
                        if (x > -100 || y > -100)
                        {
                            Left = x;
                            Top = y;
                        }
                    }
                }

                if (Configuration.Settings.General.StartSize == "Maximized")
                {
                    CenterFormOnCurrentScreen();
                    WindowState = FormWindowState.Maximized;
                    return;
                }

                parts = Configuration.Settings.General.StartSize.Split(';');
                if (parts.Length == 2)
                {
                    int x;
                    int y;
                    if (int.TryParse(parts[0], out x) && int.TryParse(parts[1], out y))
                    {
                        Width = x;
                        Height = y;
                    }
                }

                var ctrlScreen = Screen.FromControl(this);

                if (ctrlScreen.Bounds.Width < Width)
                {
                    Width = ctrlScreen.Bounds.Width;
                }

                if (ctrlScreen.Bounds.Height < Height)
                {
                    Height = ctrlScreen.Bounds.Height;
                }

                // Fix main window coordinate (Multi-Monitor issue)
                if ((ctrlScreen.Bounds.Right < Left) || (ctrlScreen.Bounds.Bottom < Top) ||
                    (ctrlScreen.Bounds.X > Right) || (ctrlScreen.Bounds.Y > Top))
                {
                    CenterToScreen();
                }
            }
            else
            {
                CenterFormOnCurrentScreen();
            }
        }

        private void InitializeLanguage()
        {
            fileToolStripMenuItem.Text = _language.Menu.File.Title;
            newToolStripMenuItem.Text = _language.Menu.File.New;
            openToolStripMenuItem.Text = _language.Menu.File.Open;
            toolStripMenuItemOpenKeepVideo.Text = _language.Menu.File.OpenKeepVideo;
            reopenToolStripMenuItem.Text = _language.Menu.File.Reopen;
            saveToolStripMenuItem.Text = _language.Menu.File.Save;
            saveAsToolStripMenuItem.Text = _language.Menu.File.SaveAs;
            toolStripMenuItemRestoreAutoBackup.Text = _language.Menu.File.RestoreAutoBackup;
            toolStripMenuItemTTProperties.Text = _language.Menu.File.TimedTextProperties;
            openOriginalToolStripMenuItem.Text = _language.Menu.File.OpenOriginal;
            saveOriginalToolStripMenuItem.Text = _language.Menu.File.SaveOriginal;
            saveOriginalAstoolStripMenuItem.Text = _language.SaveOriginalSubtitleAs;
            removeOriginalToolStripMenuItem.Text = _language.Menu.File.CloseOriginal;

            toolStripMenuItemOpenContainingFolder.Text = _language.Menu.File.OpenContainingFolder;
            toolStripMenuItemCompare.Text = _language.Menu.File.Compare;
            toolStripMenuItemStatistics.Text = _language.Menu.File.Statistics;
            toolStripMenuItemPlugins.Text = _language.Menu.File.Plugins;
            toolStripMenuItemImportDvdSubtitles.Text = _language.Menu.File.ImportOcrFromDvd;
            toolStripMenuItemSubIdx.Text = _language.Menu.File.ImportOcrVobSubSubtitle;
            toolStripButtonGetFrameRate.ToolTipText = _language.GetFrameRateFromVideoFile;
            toolStripMenuItemImportBluRaySup.Text = _language.Menu.File.ImportBluRaySupFile;
            toolStripMenuItemImportXSub.Text = _language.Menu.File.ImportXSub;
            matroskaImportStripMenuItem.Text = _language.Menu.File.ImportSubtitleFromMatroskaFile;
            toolStripMenuItemManualAnsi.Text = _language.Menu.File.ImportSubtitleWithManualChosenEncoding;
            toolStripMenuItemImportText.Text = _language.Menu.File.ImportText;
            toolStripMenuItemImportImages.Text = _language.Menu.File.ImportImages;
            toolStripMenuItemImportTimeCodes.Text = _language.Menu.File.ImportTimecodes;
            toolStripMenuItemExport.Text = _language.Menu.File.Export;
            toolStripMenuItemExportPngXml.Text = _language.Menu.File.ExportBdnXml;
            bluraySupToolStripMenuItem.Text = _language.Menu.File.ExportBluRaySup;
            adobeEncoreFABImageScriptToolStripMenuItem.Text = _language.Menu.File.ExportAdobeEncoreFabImageScript;
            toolStripMenuItemTextTimeCodePair.Text = _language.Menu.File.ExportKoreanAtsFilePair;
            vobSubsubidxToolStripMenuItem.Text = _language.Menu.File.ExportVobSub;
            toolStripMenuItemCavena890.Text = _language.Menu.File.ExportCavena890;
            eBUSTLToolStripMenuItem.Text = _language.Menu.File.ExportEbu;
            pACScreenElectronicsToolStripMenuItem.Text = _language.Menu.File.ExportPac;
            plainTextToolStripMenuItem.Text = _language.Menu.File.ExportPlainText;
            toolStripMenuItemAvidStl.Text = _language.Menu.File.ExportAvidStl;
            toolStripMenuItemExportCapMakerPlus.Text = _language.Menu.File.ExportCapMakerPlus;
            toolStripMenuItemExportCaptionInc.Text = _language.Menu.File.ExportCaptionsInc;
            toolStripMenuItemExportCheetahCap.Text = _language.Menu.File.ExportCheetahCap;
            toolStripMenuItemExportUltech130.Text = _language.Menu.File.ExportUltech130;
            exportCustomTextFormatToolStripMenuItem.Text = _language.Menu.File.ExportCustomTextFormat;
            exitToolStripMenuItem.Text = _language.Menu.File.Exit;

            editToolStripMenuItem.Text = _language.Menu.Edit.Title;
            showHistoryforUndoToolStripMenuItem.Text = _language.Menu.Edit.ShowUndoHistory;
            toolStripMenuItemUndo.Text = _language.Menu.Edit.Undo;
            toolStripMenuItemRedo.Text = _language.Menu.Edit.Redo;

            toolStripMenuItemInsertUnicodeCharacter.Text = _language.Menu.Edit.InsertUnicodeSymbol;

            findToolStripMenuItem.Text = _language.Menu.Edit.Find;
            findNextToolStripMenuItem.Text = _language.Menu.Edit.FindNext;
            replaceToolStripMenuItem.Text = _language.Menu.Edit.Replace;
            multipleReplaceToolStripMenuItem.Text = _language.Menu.Edit.MultipleReplace;
            gotoLineNumberToolStripMenuItem.Text = _language.Menu.Edit.GoToSubtitleNumber;
            toolStripMenuItemRightToLeftMode.Text = _language.Menu.Edit.RightToLeftMode;

            toolStripMenuItemRtlUnicodeControlChars.Text = _language.Menu.Edit.FixTrlViaUnicodeControlCharacters;

            toolStripMenuItemReverseRightToLeftStartEnd.Text = _language.Menu.Edit.ReverseRightToLeftStartEnd;
            toolStripMenuItemModifySelection.Text = _language.Menu.Edit.ModifySelection;
            toolStripMenuItemInverseSelection.Text = _language.Menu.Edit.InverseSelection;
            editSelectAllToolStripMenuItem.Text = _language.Menu.ContextMenu.SelectAll;

            toolsToolStripMenuItem.Text = _language.Menu.Tools.Title;
            adjustDisplayTimeToolStripMenuItem.Text = _language.Menu.Tools.AdjustDisplayDuration;
            toolStripMenuItemApplyDurationLimits.Text = _language.Menu.Tools.ApplyDurationLimits;
            toolStripMenuItemSubtitlesBridgeGaps.Text = _language.Menu.Tools.SubtitlesBridgeGaps;
            fixToolStripMenuItem.Text = _language.Menu.Tools.FixCommonErrors;
            startNumberingFromToolStripMenuItem.Text = _language.Menu.Tools.StartNumberingFrom;
            removeTextForHearImpairedToolStripMenuItem.Text = _language.Menu.Tools.RemoveTextForHearingImpaired;
            ChangeCasingToolStripMenuItem.Text = _language.Menu.Tools.ChangeCasing;
            toolStripMenuItemChangeFrameRate2.Text = _language.Menu.Tools.ChangeFrameRate;
            changeSpeedInPercentToolStripMenuItem.Text = _language.Menu.Tools.ChangeSpeedInPercent;
            toolStripMenuItemAutoMergeShortLines.Text = _language.Menu.Tools.MergeShortLines;
            toolStripMenuItemMergeDuplicateText.Text = _language.Menu.Tools.MergeDuplicateText;
            toolStripMenuItemMergeLinesWithSameTimeCodes.Text = _language.Menu.Tools.MergeSameTimeCodes;
            toolStripMenuItemAutoSplitLongLines.Text = _language.Menu.Tools.SplitLongLines;
            setMinimumDisplayTimeBetweenParagraphsToolStripMenuItem.Text = _language.Menu.Tools.MinimumDisplayTimeBetweenParagraphs;
            toolStripMenuItemSortBy.Text = _language.Menu.Tools.SortBy;
            netflixQualityCheckToolStripMenuItem.Text = _language.Menu.Tools.NetflixQualityCheck;
            toolStripButtonNetflixQualityCheck.Text = _language.Menu.Tools.NetflixQualityCheck;

            sortNumberToolStripMenuItem.Text = _language.Menu.Tools.Number;
            sortStartTimeToolStripMenuItem.Text = _language.Menu.Tools.StartTime;
            sortEndTimeToolStripMenuItem.Text = _language.Menu.Tools.EndTime;
            sortDisplayTimeToolStripMenuItem.Text = _language.Menu.Tools.Duration;

            descendingToolStripMenuItem.Text = _language.Menu.Tools.Descending;
            AscendingToolStripMenuItem.Text = _language.Menu.Tools.Ascending;

            sortTextAlphabeticallytoolStripMenuItem.Text = _language.Menu.Tools.TextAlphabetically;
            sortTextMaxLineLengthToolStripMenuItem.Text = _language.Menu.Tools.TextSingleLineMaximumLength;
            sortTextTotalLengthToolStripMenuItem.Text = _language.Menu.Tools.TextTotalLength;
            sortTextNumberOfLinesToolStripMenuItem.Text = _language.Menu.Tools.TextNumberOfLines;
            textCharssecToolStripMenuItem.Text = _language.Menu.Tools.TextNumberOfCharactersPerSeconds;
            textWordsPerMinutewpmToolStripMenuItem.Text = _language.Menu.Tools.WordsPerMinute;
            styleToolStripMenuItem.Text = _language.Menu.Tools.Style;
            actorToolStripMenuItem.Text = Configuration.Settings.Language.General.Actor;

            toolStripMenuItemShowOriginalInPreview.Text = _language.Menu.Edit.ShowOriginalTextInAudioAndVideoPreview;
            toolStripMenuItemMakeEmptyFromCurrent.Text = _language.Menu.Tools.MakeNewEmptyTranslationFromCurrentSubtitle;
            toolStripMenuItemBatchConvert.Text = _language.Menu.Tools.BatchConvert;
            generateDatetimeInfoFromVideoToolStripMenuItem.Text = _language.Menu.Tools.GenerateTimeAsText;
            toolStripMenuItemMeasurementConverter.Text = _language.Menu.Tools.MeasurementConverter;
            splitToolStripMenuItem.Text = _language.Menu.Tools.SplitSubtitle;
            appendTextVisuallyToolStripMenuItem.Text = _language.Menu.Tools.AppendSubtitle;
            joinSubtitlesToolStripMenuItem.Text = _language.Menu.Tools.JoinSubtitles;

            toolStripMenuItemVideo.Text = _language.Menu.Video.Title;
            openVideoToolStripMenuItem.Text = _language.Menu.Video.OpenVideo;
            toolStripMenuItemOpenVideoFromUrl.Text = _language.Menu.Video.OpenVideoFromUrl;
            toolStripMenuItemOpenDvd.Text = _language.Menu.Video.OpenDvd;
            toolStripMenuItemSetAudioTrack.Text = _language.Menu.Video.ChooseAudioTrack;
            closeVideoToolStripMenuItem.Text = _language.Menu.Video.CloseVideo;
            generateTextFromCurrentVideoToolStripMenuItem.Text = _language.Menu.Video.GenerateTextFromVideo;

            smpteTimeModedropFrameToolStripMenuItem.Text = _language.Menu.Video.SmptTimeMode;
            toolStripMenuItemImportSceneChanges.Text = _language.Menu.Video.GenerateImportSceneChanges;
            toolStripMenuItemRemoveSceneChanges.Text = _language.Menu.Video.RemoveSceneChanges;

            toolStripMenuItemAddWaveformBatch.Text = _language.Menu.Video.WaveformBatchGenerate;

            if (Configuration.Settings.VideoControls.GenerateSpectrogram)
            {
                showhideWaveformToolStripMenuItem.Text = _language.Menu.Video.ShowHideWaveformAndSpectrogram;
            }
            else
            {
                showhideWaveformToolStripMenuItem.Text = _language.Menu.Video.ShowHideWaveform;
            }

            showhideVideoToolStripMenuItem.Text = _language.Menu.Video.ShowHideVideo;
            undockVideoControlsToolStripMenuItem.Text = _language.Menu.Video.UnDockVideoControls;
            redockVideoControlsToolStripMenuItem.Text = _language.Menu.Video.ReDockVideoControls;

            toolStripMenuItemSpellCheckMain.Text = _language.Menu.SpellCheck.Title;
            spellCheckToolStripMenuItem.Text = _language.Menu.SpellCheck.SpellCheck;
            toolStripMenuItemSpellCheckFromCurrentLine.Text = _language.Menu.SpellCheck.SpellCheckFromCurrentLine;
            findDoubleWordsToolStripMenuItem.Text = _language.Menu.SpellCheck.FindDoubleWords;
            FindDoubleLinesToolStripMenuItem.Text = _language.Menu.SpellCheck.FindDoubleLines;
            GetDictionariesToolStripMenuItem.Text = _language.Menu.SpellCheck.GetDictionaries;
            addWordToNameListToolStripMenuItem.Text = _language.Menu.SpellCheck.AddToNameList;

            toolStripMenuItemSynchronization.Text = _language.Menu.Synchronization.Title;
            toolStripMenuItemAdjustAllTimes.Text = _language.Menu.Synchronization.AdjustAllTimes;
            visualSyncToolStripMenuItem.Text = _language.Menu.Synchronization.VisualSync;
            toolStripMenuItemPointSync.Text = _language.Menu.Synchronization.PointSync;
            pointSyncViaOtherSubtitleToolStripMenuItem.Text = _language.Menu.Synchronization.PointSyncViaOtherSubtitle;

            toolStripMenuItemAutoTranslate.Text = _language.Menu.AutoTranslate.Title;
            translateByGoogleToolStripMenuItem.Text = _language.Menu.AutoTranslate.TranslatePoweredByGoogle;
            translatepoweredByMicrosoftToolStripMenuItem.Text = _language.Menu.AutoTranslate.TranslatePoweredByMicrosoft;
            translateFromSwedishToDanishToolStripMenuItem.Text = _language.Menu.AutoTranslate.TranslateFromSwedishToDanish;

            optionsToolStripMenuItem.Text = _language.Menu.Options.Title;
            settingsToolStripMenuItem.Text = _language.Menu.Options.Settings;
            changeLanguageToolStripMenuItem.Text = _language.Menu.Options.ChooseLanguage + " [" + Configuration.Settings.Language.Name + "]";

            toolStripMenuItemNetworking.Text = _language.Menu.Networking.Title;
            startServerToolStripMenuItem.Text = _language.Menu.Networking.StartNewSession;
            joinSessionToolStripMenuItem.Text = _language.Menu.Networking.JoinSession;
            showSessionKeyLogToolStripMenuItem.Text = _language.Menu.Networking.ShowSessionInfoAndLog;
            chatToolStripMenuItem.Text = _language.Menu.Networking.Chat;
            leaveSessionToolStripMenuItem.Text = _language.Menu.Networking.LeaveSession;

            checkForUpdatesToolStripMenuItem.Text = _language.Menu.Help.CheckForUpdates;
            helpToolStripMenuItem.Text = _language.Menu.Help.Title;
            helpToolStripMenuItem1.Text = _language.Menu.Help.Help;
            aboutToolStripMenuItem.Text = _language.Menu.Help.About;

            toolStripButtonFileNew.ToolTipText = _language.Menu.ToolBar.New;
            toolStripButtonFileOpen.ToolTipText = _language.Menu.ToolBar.Open;
            toolStripButtonSave.ToolTipText = _language.Menu.ToolBar.Save;
            toolStripButtonSaveAs.ToolTipText = _language.Menu.ToolBar.SaveAs;
            toolStripButtonFind.ToolTipText = _language.Menu.ToolBar.Find;
            toolStripButtonReplace.ToolTipText = _language.Menu.ToolBar.Replace;
            toolStripButtonFixCommonErrors.ToolTipText = _language.Menu.ToolBar.FixCommonErrors;
            toolStripButtonRemoveTextForHi.ToolTipText = _language.Menu.ToolBar.RemoveTextForHi;
            toolStripButtonVisualSync.ToolTipText = _language.Menu.ToolBar.VisualSync;
            toolStripButtonSpellCheck.ToolTipText = _language.Menu.ToolBar.SpellCheck;
            toolStripButtonNetflixQualityCheck.ToolTipText = _language.Menu.ToolBar.NetflixQualityCheck;
            toolStripButtonSettings.ToolTipText = _language.Menu.ToolBar.Settings;
            toolStripButtonHelp.ToolTipText = _language.Menu.ToolBar.Help;
            toolStripButtonToggleWaveform.ToolTipText = _language.Menu.ToolBar.ShowHideWaveform;
            toolStripButtonToggleVideo.ToolTipText = _language.Menu.ToolBar.ShowHideVideo;

            toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.SubStationAlphaStyles;
            setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SubStationAlphaSetStyle;
            setActorForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SetActor;

            toolStripMenuItemDelete.Text = _language.Menu.ContextMenu.Delete;
            insertLineToolStripMenuItem.Text = _language.Menu.ContextMenu.InsertFirstLine;
            toolStripMenuItemInsertBefore.Text = _language.Menu.ContextMenu.InsertBefore;
            toolStripMenuItemInsertAfter.Text = _language.Menu.ContextMenu.InsertAfter;
            toolStripMenuItemInsertSubtitle.Text = _language.Menu.ContextMenu.InsertSubtitleAfter;

            toolStripMenuItemCopySourceText.Text = _language.Menu.ContextMenu.CopyToClipboard;

            toolStripMenuItemColumn.Text = _language.Menu.ContextMenu.Column;
            columnDeleteTextOnlyToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnDeleteText;
            toolStripMenuItemColumnDeleteText.Text = _language.Menu.ContextMenu.ColumnDeleteTextAndShiftCellsUp;
            ShiftTextCellsDownToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnInsertEmptyTextAndShiftCellsDown;
            toolStripMenuItemInsertTextFromSub.Text = _language.Menu.ContextMenu.ColumnInsertTextFromSubtitle;
            toolStripMenuItemColumnImportText.Text = _language.Menu.ContextMenu.ColumnImportTextAndShiftCellsDown;
            toolStripMenuItemPasteSpecial.Text = _language.Menu.ContextMenu.ColumnPasteFromClipboard;
            moveTextUpToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnTextUp;
            moveTextDownToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnTextDown;
            copyOriginalTextToCurrentToolStripMenuItem.Text = _language.Menu.ContextMenu.ColumnCopyOriginalTextToCurrent;
            toolStripMenuItemBookmark.Text = Configuration.Settings.Language.Settings.ToggleBookmarksWithComment;

            splitLineToolStripMenuItem.Text = _language.Menu.ContextMenu.Split;
            toolStripMenuItemMergeLines.Text = _language.Menu.ContextMenu.MergeSelectedLines;
            toolStripMenuItemMergeDialog.Text = _language.Menu.ContextMenu.MergeSelectedLinesAsDialog;
            mergeBeforeToolStripMenuItem.Text = _language.Menu.ContextMenu.MergeWithLineBefore;
            mergeAfterToolStripMenuItem.Text = _language.Menu.ContextMenu.MergeWithLineAfter;
            extendBeforeToolStripMenuItem.Text = _language.Menu.ContextMenu.ExtendToLineBefore;
            extendAfterToolStripMenuItem.Text = _language.Menu.ContextMenu.ExtendToLineAfter;
            removeFormattinglToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormatting;
            removeAllFormattingsToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingAll;
            removeBoldToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingBold;
            removeItalicToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingItalic;
            removeUnderlineToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingUnderline;
            removeColorToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingColor;
            removeFontNameToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingFontName;
            removeAlignmentToolStripMenuItem.Text = _language.Menu.ContextMenu.RemoveFormattingAlignment;
            boldToolStripMenuItem.Text = _languageGeneral.Bold;
            underlineToolStripMenuItem.Text = _language.Menu.ContextMenu.Underline;
            italicToolStripMenuItem.Text = _languageGeneral.Italic;
            colorToolStripMenuItem.Text = _language.Menu.ContextMenu.Color;
            toolStripMenuItemFont.Text = _language.Menu.ContextMenu.FontName;
            toolStripMenuItemAlignment.Text = _language.Menu.ContextMenu.Alignment;
            toolStripMenuItemAutoBreakLines.Text = _language.Menu.ContextMenu.AutoBalanceSelectedLines;
            toolStripMenuItemUnbreakLines.Text = _language.Menu.ContextMenu.RemoveLineBreaksFromSelectedLines;
            typeEffectToolStripMenuItem.Text = _language.Menu.ContextMenu.TypewriterEffect;
            karokeeEffectToolStripMenuItem.Text = _language.Menu.ContextMenu.KaraokeEffect;
            showSelectedLinesEarlierlaterToolStripMenuItem.Text = _language.Menu.ContextMenu.ShowSelectedLinesEarlierLater;
            visualSyncSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.VisualSyncSelectedLines;
            toolStripMenuItemGoogleMicrosoftTranslateSelLine.Text = _language.Menu.ContextMenu.GoogleAndMicrosoftTranslateSelectedLine;
            googleTranslateToolStripMenuItem.Text = _language.Menu.AutoTranslate.TranslatePoweredByGoogle;
            microsoftBingTranslateToolStripMenuItem.Text = _language.Menu.AutoTranslate.TranslatePoweredByMicrosoft;
            toolStripMenuItemTranslateSelected.Text = _language.Menu.ContextMenu.TranslateSelectedLines;
            adjustDisplayTimeForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.AdjustDisplayDurationForSelectedLines;
            fixCommonErrorsInSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.FixCommonErrorsInSelectedLines;
            changeCasingForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.ChangeCasingForSelectedLines;
            toolStripMenuItemSaveSelectedLines.Text = _language.Menu.ContextMenu.SaveSelectedLines;

            // textbox context menu
            cutToolStripMenuItem.Text = _language.Menu.ContextMenu.Cut;
            copyToolStripMenuItem.Text = _language.Menu.ContextMenu.Copy;
            pasteToolStripMenuItem.Text = _language.Menu.ContextMenu.Paste;
            deleteToolStripMenuItem.Text = _language.Menu.ContextMenu.Delete;
            toolStripMenuItemSplitTextAtCursor.Text = _language.Menu.ContextMenu.SplitLineAtCursorPosition;
            toolStripMenuItemSplitViaWaveform.Text = _language.Menu.ContextMenu.SplitLineAtCursorAndWaveformPosition;
            selectAllToolStripMenuItem.Text = _language.Menu.ContextMenu.SelectAll;
            normalToolStripMenuItem1.Text = _language.Menu.ContextMenu.RemoveFormattingAll;
            boldToolStripMenuItem1.Text = _languageGeneral.Bold;
            italicToolStripMenuItem1.Text = _languageGeneral.Italic;
            boxToolStripMenuItem.Text = _language.Menu.ContextMenu.Box;
            underlineToolStripMenuItem1.Text = _language.Menu.ContextMenu.Underline;
            colorToolStripMenuItem1.Text = _language.Menu.ContextMenu.Color;
            fontNameToolStripMenuItem.Text = _language.Menu.ContextMenu.FontName;
            toolStripMenuItemInsertUnicodeSymbol.Text = _language.Menu.Edit.InsertUnicodeSymbol;
            toolStripMenuItemInsertUnicodeControlCharacters.Text = _language.Menu.Edit.InsertUnicodeControlCharacters;
            superscriptToolStripMenuItem.Text = _language.Menu.ContextMenu.Superscript;
            subscriptToolStripMenuItem.Text = _language.Menu.ContextMenu.Subscript;
            leftToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRM;
            righttoleftMarkToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLM;
            startOfLefttorightEmbeddingLREToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRE;
            startOfRighttoleftEmbeddingRLEToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLE;
            startOfLefttorightOverrideLROToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersLRO;
            startOfRighttoleftOverrideRLOToolStripMenuItem.Text = _language.Menu.Edit.InsertUnicodeControlCharactersRLO;

            // main controls
            SubtitleListview1.InitializeLanguage(_languageGeneral, Configuration.Settings);
            toolStripLabelSubtitleFormat.Text = _language.Controls.SubtitleFormat;
            toolStripLabelEncoding.Text = _language.Controls.FileEncoding;
            toolStripLabelFrameRate.Text = _languageGeneral.FrameRate;
            tabControlSubtitle.TabPages[TabControlSourceView].Text = _language.Controls.SourceView;
            tabControlSubtitle.TabPages[TabControlListView].Text = _language.Controls.ListView;
            labelStartTime.Text = _languageGeneral.StartTime;
            labelDuration.Text = _languageGeneral.Duration;
            labelText.Text = _languageGeneral.Text;
            UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle?.GetParagraphOrDefault(_subtitleListViewIndex), textBoxListViewText);
            labelAlternateText.Text = _languageGeneral.OriginalText;
            UpdateListViewTextInfo(labelTextAlternateLineLengths, labelAlternateSingleLine, labelAlternateSingleLinePixels, labelTextAlternateLineTotal, labelAlternateCharactersPerSecond, _subtitleAlternate?.GetParagraphOrDefault(_subtitleListViewIndex), textBoxListViewTextAlternate);
            buttonPrevious.Text = _language.Controls.Previous;
            buttonNext.Text = _language.Controls.Next;
            buttonAutoBreak.Text = _language.Controls.AutoBreak;
            buttonUnBreak.Text = _language.Controls.Unbreak;
            buttonSplitLine.Text = _languageGeneral.SplitLine;
            ShowSourceLineNumber();

            // video controls
            tabPageTranslate.Text = _language.VideoControls.Translate + "  ";
            tabPageCreate.Text = _language.VideoControls.Create + "  ";
            tabPageAdjust.Text = _language.VideoControls.Adjust + "  ";
            checkBoxSyncListViewWithVideoWhilePlaying.Text = _language.VideoControls.SelectCurrentElementWhilePlaying;
            if (_videoFileName == null)
            {
                labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
            }

            toolStripButtonLockCenter.Text = _language.VideoControls.Center;
            toolStripSplitButtonPlayRate.Text = _language.VideoControls.PlayRate;
            groupBoxAutoRepeat.Text = _language.VideoControls.AutoRepeat;
            checkBoxAutoRepeatOn.Text = _language.VideoControls.AutoRepeatOn;
            labelAutoRepeatCount.Text = _language.VideoControls.AutoRepeatCount;
            groupBoxAutoContinue.Text = _language.VideoControls.AutoContinue;
            checkBoxAutoContinue.Text = _language.VideoControls.AutoContinueOn;
            labelAutoContinueDelay.Text = _language.VideoControls.DelayInSeconds;
            buttonPlayPrevious.Text = _language.VideoControls.Previous;
            buttonPlayCurrent.Text = _language.VideoControls.PlayCurrent;
            buttonPlayNext.Text = _language.VideoControls.Next;
            buttonStop.Text = _language.VideoControls.Pause;
            groupBoxTranslateSearch.Text = _language.VideoControls.SearchTextOnline;
            buttonGoogleIt.Text = _language.VideoControls.GoogleIt;
            buttonGoogleTranslateIt.Text = _language.VideoControls.GoogleTranslate;
            labelTranslateTip.Text = _language.VideoControls.TranslateTip;

            buttonInsertNewText.Text = _language.VideoControls.InsertNewSubtitleAtVideoPosition;
            buttonBeforeText.Text = _language.VideoControls.PlayFromJustBeforeText;
            buttonGotoSub.Text = _language.VideoControls.GoToSubtitlePositionAndPause;
            buttonSetStartTime.Text = _language.VideoControls.SetStartTime;
            buttonSetEnd.Text = _language.VideoControls.SetEndTime;
            buttonSecBack1.Text = _language.VideoControls.SecondsBackShort;
            buttonSecBack2.Text = _language.VideoControls.SecondsBackShort;
            buttonForward1.Text = _language.VideoControls.SecondsForwardShort;
            buttonForward2.Text = _language.VideoControls.SecondsForwardShort;
            labelVideoPosition.Text = _language.VideoControls.VideoPosition;
            labelVideoPosition2.Text = _language.VideoControls.VideoPosition;

            buttonSetStartAndOffsetRest.Text = _language.VideoControls.SetstartTimeAndOffsetOfRest;
            buttonSetEndAndGoToNext.Text = _language.VideoControls.SetEndTimeAndGoToNext;
            buttonAdjustSetStartTime.Text = _language.VideoControls.SetStartTime;
            buttonAdjustSetEndTime.Text = _language.VideoControls.SetEndTime;
            buttonAdjustPlayBefore.Text = _language.VideoControls.PlayFromJustBeforeText;
            buttonAdjustGoToPosAndPause.Text = _language.VideoControls.GoToSubtitlePositionAndPause;
            buttonAdjustSecBack1.Text = _language.VideoControls.SecondsBackShort;
            buttonAdjustSecBack2.Text = _language.VideoControls.SecondsBackShort;
            buttonAdjustSecForward1.Text = _language.VideoControls.SecondsForwardShort;
            buttonAdjustSecForward2.Text = _language.VideoControls.SecondsForwardShort;

            // waveform
            var languageWaveform = Configuration.Settings.Language.Waveform;
            addParagraphHereToolStripMenuItem.Text = languageWaveform.AddParagraphHere;
            addParagraphAndPasteToolStripMenuItem.Text = languageWaveform.AddParagraphHereAndPasteText;
            toolStripMenuItemSetParagraphAsSelection.Text = languageWaveform.SetParagraphAsSelection;
            deleteParagraphToolStripMenuItem.Text = languageWaveform.DeleteParagraph;
            toolStripMenuItemFocusTextbox.Text = languageWaveform.FocusTextBox;
            goToPreviousSubtitleStripMenuItem.Text = languageWaveform.GoToPrevious;
            goToNextSubtitleStripMenuItem.Text = languageWaveform.GoToNext;

            splitToolStripMenuItem1.Text = languageWaveform.Split;
            mergeWithPreviousToolStripMenuItem.Text = languageWaveform.MergeWithPrevious;
            mergeWithNextToolStripMenuItem.Text = languageWaveform.MergeWithNext;
            extendToPreviousToolStripMenuItem.Text = languageWaveform.ExtendToPrevious;
            extendToNextToolStripMenuItem.Text = languageWaveform.ExtendToNext;
            toolStripMenuItemWaveformPlaySelection.Text = languageWaveform.PlaySelection;
            showWaveformAndSpectrogramToolStripMenuItem.Text = languageWaveform.ShowWaveformAndSpectrogram;
            showOnlyWaveformToolStripMenuItem.Text = languageWaveform.ShowWaveformOnly;
            showOnlySpectrogramToolStripMenuItem.Text = languageWaveform.ShowSpectrogramOnly;
            seekSilenceToolStripMenuItem.Text = languageWaveform.SeekSilence;
            insertSubtitleHereToolStripMenuItem.Text = languageWaveform.InsertSubtitleHere;
            guessTimeCodesToolStripMenuItem.Text = languageWaveform.GuessTimeCodes;
            removeSceneChangeToolStripMenuItem.Text = languageWaveform.RemoveSceneChange;
            addSceneChangeToolStripMenuItem.Text = languageWaveform.AddSceneChange;

            toolStripButtonWaveformZoomOut.ToolTipText = languageWaveform.ZoomOut;
            toolStripButtonWaveformZoomIn.ToolTipText = languageWaveform.ZoomIn;

            if (Configuration.Settings.VideoControls.GenerateSpectrogram)
            {
                audioVisualizer.WaveformNotLoadedText = languageWaveform.ClickToAddWaveformAndSpectrogram;
            }
            else
            {
                audioVisualizer.WaveformNotLoadedText = languageWaveform.ClickToAddWaveform;
            }

            // clear cached language names
            DvdSubtitleLanguage.Initialize();
        }

        private void SetFormatTo(string formatName)
        {
            SetFormatTo(SubtitleFormat.FromName(formatName, new SubRip()));
        }

        private void SetFormatTo(SubtitleFormat subtitleFormat)
        {
            comboBoxSubtitleFormats.SelectedIndexChanged -= ComboBoxSubtitleFormatsSelectedIndexChanged;
            UiUtil.InitializeSubtitleFormatComboBox(comboBoxSubtitleFormats, subtitleFormat.FriendlyName);
            comboBoxSubtitleFormats.SelectedIndexChanged += ComboBoxSubtitleFormatsSelectedIndexChanged;
        }

        private int FirstSelectedIndex
        {
            get
            {
                if (SubtitleListview1.SelectedItems.Count == 0)
                {
                    return -1;
                }

                return SubtitleListview1.SelectedItems[0].Index;
            }
        }

        private int FirstVisibleIndex
        {
            get
            {
                if (SubtitleListview1.Items.Count == 0 || SubtitleListview1.TopItem == null)
                {
                    return -1;
                }

                return SubtitleListview1.TopItem.Index;
            }
        }

        private long _lastAutoSave;

        private void AutoSave(bool force = false)
        {
            if (!Configuration.Settings.General.AutoSave ||
                DateTime.UtcNow.Ticks - _lastAutoSave < 10000 * 3000 && !force) // only check for auto save evety 3 seconds
            {
                return;
            }

            _lastAutoSave = DateTime.UtcNow.Ticks + 1009000;
            var currentSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            if (_changeSubtitleHash != currentSubtitleHash && _lastDoNotPrompt != currentSubtitleHash && _subtitle?.Paragraphs.Count > 0)
            {
                if (string.IsNullOrEmpty(_fileName) || _converted)
                {
                    return;
                }

                SaveSubtitle(GetCurrentSubtitleFormat(), false, true);
            }

            if (!string.IsNullOrEmpty(_subtitleAlternateFileName) && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
            {
                SaveOriginalSubtitle(GetCurrentSubtitleFormat(), true);
            }

            _lastAutoSave = DateTime.UtcNow.Ticks;
        }

        private bool ContinueNewOrExit()
        {
            AutoSave(true);
            var currentSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            if (_changeSubtitleHash != currentSubtitleHash && _lastDoNotPrompt != currentSubtitleHash && _subtitle?.Paragraphs.Count > 0)
            {
                string promptText = _language.SaveChangesToUntitled;
                if (!string.IsNullOrEmpty(_fileName))
                {
                    promptText = string.Format(_language.SaveChangesToX, _fileName);
                }

                var dr = MessageBox.Show(this, promptText, Title, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation);

                if (dr == DialogResult.Cancel)
                {
                    return false;
                }

                if (dr == DialogResult.Yes)
                {
                    if (string.IsNullOrEmpty(_fileName))
                    {
                        if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
                        {
                            saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
                        }

                        saveFileDialog1.Title = _language.SaveSubtitleAs;
                        if (saveFileDialog1.ShowDialog(this) == DialogResult.OK)
                        {
                            openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                            _fileName = saveFileDialog1.FileName;
                            SetTitle();
                            Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                            Configuration.Settings.Save();
                        }
                        else
                        {
                            return false;
                        }
                    }

                    if (SaveSubtitle(GetCurrentSubtitleFormat()) != DialogResult.OK)
                    {
                        return false;
                    }
                }
            }

            return ContinueNewOrExitAlternate();
        }

        private bool ContinueNewOrExitAlternate()
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0 && _changeAlternateSubtitleHash != _subtitleAlternate.GetFastHashCode(GetCurrentEncoding().BodyName))
            {
                string promptText = _language.SaveChangesToUntitledOriginal;
                if (!string.IsNullOrEmpty(_subtitleAlternateFileName))
                {
                    promptText = string.Format(_language.SaveChangesToOriginalX, _subtitleAlternateFileName);
                }

                var dr = MessageBox.Show(this, promptText, Title, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation);

                if (dr == DialogResult.Cancel)
                {
                    return false;
                }

                if (dr == DialogResult.Yes)
                {
                    if (string.IsNullOrEmpty(_subtitleAlternateFileName))
                    {
                        if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
                        {
                            saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
                        }

                        saveFileDialog1.Title = _language.SaveOriginalSubtitleAs;
                        if (saveFileDialog1.ShowDialog(this) == DialogResult.OK)
                        {
                            openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                            _subtitleAlternateFileName = saveFileDialog1.FileName;
                        }
                        else
                        {
                            return false;
                        }
                    }

                    if (SaveOriginalSubtitle(GetCurrentSubtitleFormat()) != DialogResult.OK)
                    {
                        return false;
                    }
                }
            }

            _lastDoNotPrompt = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            return true;
        }

        private void ExitToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Application.Exit();
        }

        private void AboutToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            using (var about = new About())
            {
                about.Initialize();
                about.ShowDialog(this);
            }
        }

        private void VisualSyncToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            ShowVisualSync(false);
        }

        public void MakeHistoryForUndo(string description, bool resetTextUndo)
        {
            if (_makeHistoryPaused)
            {
                return;
            }

            if (resetTextUndo)
            {
                _listViewTextUndoLast = null;
                _listViewAlternateTextUndoLast = null;
            }

            if (_undoIndex == -1)
            {
                _subtitle.HistoryItems.Clear();
            }
            else
            {
                // remove items for redo
                while (_subtitle.HistoryItems.Count > _undoIndex + 1)
                {
                    _subtitle.HistoryItems.RemoveAt(_subtitle.HistoryItems.Count - 1);
                }
            }

            _subtitle.FileName = _fileName;
            _subtitle.MakeHistoryForUndo(description, GetCurrentSubtitleFormat(), _fileDateTime, _subtitleAlternate, _subtitleAlternateFileName, _subtitleListViewIndex, textBoxListViewText.SelectionStart, textBoxListViewTextAlternate.SelectionStart);
            _undoIndex++;

            if (_undoIndex > Subtitle.MaximumHistoryItems)
            {
                _undoIndex--;
            }
        }

        public void MakeHistoryForUndo(string description)
        {
            MakeHistoryForUndo(description, true);
        }

        /// <summary>
        /// Add undo history - but only if last entry is older than 500 ms
        /// </summary>
        /// <param name="description">Undo description</param>
        public void MakeHistoryForUndoOnlyIfNotResent(string description)
        {
            if (_makeHistoryPaused)
            {
                return;
            }

            if ((DateTime.UtcNow.Ticks - _lastHistoryTicks) > 10000 * 500) // only if last change was longer ago than 500 milliseconds
            {
                MakeHistoryForUndo(description);
                _lastHistoryTicks = DateTime.UtcNow.Ticks;
            }
        }

        private bool IsSubtitleLoaded
        {
            get { return _subtitle != null && (_subtitle.Paragraphs.Count > 1 || (_subtitle.Paragraphs.Count == 1 && !string.IsNullOrWhiteSpace(_subtitle.Paragraphs[0].Text))); }
        }

        private void ShowVisualSync(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var visualSync = new VisualSync())
            {
                visualSync.VideoFileName = _videoFileName;
                visualSync.AudioTrackNumber = _videoAudioTrackNumber;

                SaveSubtitleListviewIndices();
                if (onlySelectedLines)
                {
                    var selectedLines = new Subtitle();
                    Subtitle selectedLinesAlternate = null;
                    if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                    {
                        selectedLinesAlternate = new Subtitle();
                    }

                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        var p = _subtitle.Paragraphs[index];
                        selectedLines.Paragraphs.Add(p);
                        if (selectedLinesAlternate != null)
                        {
                            var original = Utilities.GetOriginalParagraph(index, p, _subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                selectedLinesAlternate.Paragraphs.Add(original);
                            }
                        }
                    }

                    visualSync.Initialize(toolStripButtonVisualSync.Image as Bitmap, selectedLines, selectedLinesAlternate, _fileName, _language.VisualSyncSelectedLines, CurrentFrameRate);
                }
                else
                {
                    visualSync.Initialize(toolStripButtonVisualSync.Image as Bitmap, _subtitle, _subtitleAlternate, _fileName, _language.VisualSyncTitle, CurrentFrameRate);
                }

                _endSeconds = -1;
                mediaPlayer.Pause();
                if (visualSync.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeVisualSync);

                    if (onlySelectedLines)
                    { // we only update selected lines
                        int i = 0;
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index] = visualSync.Paragraphs[i];
                            i++;
                        }

                        ShowStatus(_language.VisualSyncPerformedOnSelectedLines);
                    }
                    else
                    {
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in visualSync.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        if (_subtitleAlternate != null && visualSync.ParagraphsAlternate != null)
                        {
                            _subtitleAlternate.Paragraphs.Clear();
                            foreach (var p in visualSync.ParagraphsAlternate)
                            {
                                _subtitleAlternate.Paragraphs.Add(new Paragraph(p));
                            }
                        }

                        ShowStatus(_language.VisualSyncPerformed);
                    }

                    if (visualSync.FrameRateChanged)
                    {
                        toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", visualSync.FrameRate);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                    if (onlySelectedLines && SubtitleListview1.SelectedItems.Count > 0)
                    {
                        SubtitleListview1.EnsureVisible(SubtitleListview1.SelectedItems[SubtitleListview1.SelectedItems.Count - 1].Index);
                    }
                }

                _videoFileName = visualSync.VideoFileName;
            }
        }

        private void OpenToolStripMenuItemClick(object sender, EventArgs e)
        {
            openToolStripMenuItem.Enabled = false;
            ReloadFromSourceView();
            OpenNewFile();
            openToolStripMenuItem.Enabled = true;
        }

        private void OpenNewFile()
        {
            if (_openFileDialogOn)
            {
                return;
            }

            _openFileDialogOn = true;
            _lastDoNotPrompt = -1;
            if (!ContinueNewOrExit())
            {
                _openFileDialogOn = false;
                return;
            }

            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                RemoveAlternate(true, false);

                // try to open via recent files
                if (OpenFromRecentFiles(openFileDialog1.FileName))
                {
                    return;
                }

                OpenSubtitle(openFileDialog1.FileName, null);
            }

            _openFileDialogOn = false;
        }

        private bool OpenFromRecentFiles(string fileName)
        {
            var rfe = Configuration.Settings.RecentFiles.Files.FirstOrDefault(p => !string.IsNullOrEmpty(p.FileName) && p.FileName.Equals(fileName, StringComparison.OrdinalIgnoreCase));
            if (rfe != null)
            {
                OpenRecentFile(rfe);
                GotoSubPosAndPause();
                SubtitleListview1.EndUpdate();
                SetRecentIndices(rfe);
                if (!string.IsNullOrEmpty(rfe.VideoFileName))
                {
                    var p = _subtitle.GetParagraphOrDefault(rfe.FirstSelectedIndex);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }

                _openFileDialogOn = false;
                return true;
            }

            return false;
        }

        public double CurrentFrameRate
        {
            get
            {
                double f;
                if (double.TryParse(toolStripComboBoxFrameRate.Text, out f))
                {
                    return f;
                }

                return Configuration.Settings.General.DefaultFrameRate;
            }
        }

        private void OpenSubtitle(string fileName, Encoding encoding)
        {
            OpenSubtitle(fileName, encoding, null, null);
        }

        private void ResetHistory()
        {
            _undoIndex = -1;
            _subtitle.HistoryItems.Clear();
        }

        private void OpenSubtitle(string fileName, Encoding encoding, string videoFileName, string originalFileName)
        {
            OpenSubtitle(fileName, encoding, videoFileName, originalFileName, false);
        }

        private void OpenSubtitle(string fileName, Encoding encoding, string videoFileName, string originalFileName, bool updateRecentFile)
        {
            if (!File.Exists(fileName))
            {
                MessageBox.Show(string.Format(_language.FileNotFound, fileName));
                return;
            }

            _lastAutoSave = DateTime.UtcNow.Ticks;
            bool videoFileLoaded = false;
            var file = new FileInfo(fileName);
            var ext = file.Extension.ToLowerInvariant();

            // save last first visible index + first selected index from listview
            if (_fileName != null && updateRecentFile)
            {
                Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
            }
            Configuration.Settings.General.CurrentVideoOffsetInMs = 0;

            openFileDialog1.InitialDirectory = file.DirectoryName;


            if (ext == ".idx")
            {
                var subFileName = fileName.Substring(0, fileName.Length - 3) + "sub";
                if (File.Exists(subFileName) && FileUtil.IsVobSub(subFileName))
                {
                    ext = ".sub";
                    fileName = subFileName;
                }
            }

            if (ext == ".sub" && IsVobSubFile(fileName, false))
            {
                ImportAndOcrVobSubSubtitleNew(fileName, _loading);
                return;
            }

            if (ext == ".sup")
            {
                if (FileUtil.IsBluRaySup(fileName))
                {
                    ImportAndOcrBluRaySup(fileName, _loading);
                    return;
                }

                if (FileUtil.IsSpDvdSup(fileName))
                {
                    ImportAndOcrSpDvdSup(fileName, _loading);
                    return;
                }
            }

            if (ext == ".mkv" || ext == ".mks")
            {
                ImportSubtitleFromMatroskaFile(fileName);
                return;
            }

            if (ext == ".divx" || ext == ".avi")
            {
                if (ImportSubtitleFromDivX(fileName))
                {
                    return;
                }
            }

            if ((ext == ".ts" || ext == ".rec" || ext == ".mpeg" || ext == ".mpg") && file.Length > 10000 && FileUtil.IsTransportStream(fileName))
            {
                ImportSubtitleFromTransportStream(fileName);
                return;
            }

            if (((ext == ".m2ts" || ext == ".ts" || ext == ".mts") && file.Length > 10000 && FileUtil.IsM2TransportStream(fileName)) ||
                (ext == ".textst" && FileUtil.IsMpeg2PrivateStream2(fileName)))
            {
                bool isTextSt = false;
                if (file.Length < 2000000)
                {
                    var textSt = new TextST();
                    isTextSt = textSt.IsMine(null, fileName);
                }

                if (!isTextSt)
                {
                    ImportSubtitleFromTransportStream(fileName);
                    return;
                }
            }

            if ((ext == ".mp4" || ext == ".m4v" || ext == ".3gp") && file.Length > 10000)
            {
                if (!new IsmtDfxp().IsMine(null, fileName))
                {
                    if (ImportSubtitleFromMp4(fileName) && !Configuration.Settings.General.DisableVideoAutoLoading)
                    {
                        OpenVideo(fileName);
                    }

                    return;
                }
            }

            if (ext == ".mxf" && FileUtil.IsMaterialExchangeFormat(fileName))
            {
                var parser = new MxfParser(fileName);
                if (parser.IsValid)
                {
                    var subtitles = parser.GetSubtitles();
                    if (subtitles.Count > 0)
                    {
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        var list = new List<string>(subtitles[0].SplitToLines());
                        _subtitle = new Subtitle();
                        var mxfFormat = _subtitle.ReloadLoadSubtitle(list, null, null);
                        SetCurrentFormat(mxfFormat);
                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                        SetTitle();
                        ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                        _sourceViewChange = false;
                        _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
                        ResetHistory();
                        SetUndockedWindowsTitle();
                        _converted = true;
                        ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName) + " - " + string.Format(_language.ConvertedToX, mxfFormat.FriendlyName));

                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        _subtitleListViewIndex = -1;
                        SubtitleListview1.FirstVisibleIndex = -1;
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                        return;
                    }

                    MessageBox.Show("No subtitles found!");
                    return;
                }
            }

            if (ext == ".prproj")
            {
                var f = new AdobePremierePrProj();
                var tempFileName = AdobePremierePrProj.LoadFromZipFile(fileName);
                if (!string.IsNullOrEmpty(fileName))
                {
                    var list = new List<string>(File.ReadAllLines(tempFileName, LanguageAutoDetect.GetEncodingFromFile(tempFileName)));
                    try
                    {
                        File.Delete(tempFileName);
                    }
                    catch
                    {
                        // ignored
                    }
                    if (f.IsMine(list, tempFileName))
                    {
                        f.LoadSubtitle(_subtitle, list, fileName);
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        SubtitleListview1.Fill(_subtitle);
                        _subtitleListViewIndex = -1;
                        SubtitleListview1.FirstVisibleIndex = -1;
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                        SetTitle();
                        ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                        _converted = true;
                        return;
                    }
                }
            }

            if (file.Length > Subtitle.MaxFileSize)
            {
                // retry Blu-ray sup (file with wrong extension)
                if (FileUtil.IsBluRaySup(fileName))
                {
                    ImportAndOcrBluRaySup(fileName, _loading);
                    return;
                }

                // retry vobsub (file with wrong extension)
                if (IsVobSubFile(fileName, false))
                {
                    ImportAndOcrVobSubSubtitleNew(fileName, _loading);
                    return;
                }

                var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, fileName);
                if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return;
                }
            }

            var tempSubtitle = new Subtitle(_subtitle, false);
            if (_subtitle.HistoryItems.Count > 0 || _subtitle.Paragraphs.Count > 0)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeLoadOf, Path.GetFileName(fileName)));
            }

            var subtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            bool hasChanged = (_changeSubtitleHash != subtitleHash) && (_lastDoNotPrompt != subtitleHash);

            SubtitleFormat format = _subtitle.LoadSubtitle(fileName, out encoding, encoding);
            if (format == null)
            {
                _subtitle = tempSubtitle;
            }

            if (!hasChanged)
            {
                _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            }

            ShowHideTextBasedFeatures(format);

            bool justConverted = false;

            if (ext == ".m2ts" || ext == ".textst")
            {
                var textST = new TextST();
                if (textST.IsMine(null, fileName))
                {
                    textST.LoadSubtitle(_subtitle, null, fileName);
                    _oldSubtitleFormat = textST;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    justConverted = true;
                    format = GetCurrentSubtitleFormat();
                }
            }

            if (format == null)
            {
                var f = new TimeCodesOnly1();
                var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                if (f.IsMine(list, fileName))
                {
                    f.LoadSubtitle(_subtitle, list, fileName);
                    _oldSubtitleFormat = f;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    justConverted = true;
                    format = GetCurrentSubtitleFormat();
                }
            }

            if (format == null)
            {
                var f = new TimeCodesOnly2();
                var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                if (f.IsMine(list, fileName))
                {
                    f.LoadSubtitle(_subtitle, list, fileName);
                    _oldSubtitleFormat = f;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    justConverted = true;
                    format = GetCurrentSubtitleFormat();
                }
            }

            if (format == null)
            {
                try
                {
                    var bdnXml = new BdnXml();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (bdnXml.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrBdnXml(fileName, bdnXml, list);
                        }

                        return;
                    }
                }
                catch
                {
                    // ignore
                }
            }

            if (format == null)
            {
                try
                {
                    var fcpImage = new FinalCutProImage();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (fcpImage.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, fcpImage, list);
                        }

                        return;
                    }
                }
                catch
                {
                    // ignore
                }
            }

            if (format == null)
            {
                try
                {
                    var f = new DvdStudioProSpaceGraphic();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (f.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, f, list);
                        }

                        return;
                    }
                }
                catch
                {
                    // ignore
                }
            }

            if (format == null)
            {
                try
                {
                    var imageFormat = new SpuImage();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (imageFormat.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, imageFormat, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                var arib = new AribB36();
                if (arib.IsMine(null, fileName))
                {
                    arib.LoadSubtitle(_subtitle, null, fileName);
                    _oldSubtitleFormat = arib;
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    SetEncoding(Configuration.Settings.General.DefaultEncoding);
                    encoding = GetCurrentEncoding();
                    justConverted = true;
                    format = GetCurrentSubtitleFormat();
                }
            }

            if (ext == ".dost")
            {
                try
                {
                    var dost = new Dost();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (dost.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, dost, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                try
                {
                    var timedtextImage = new TimedTextImage();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (timedtextImage.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, timedtextImage, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                try
                {
                    var seImageHtmlIndex = new SeImageHtmlIndex();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (seImageHtmlIndex.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrDost(fileName, seImageHtmlIndex, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null || format.Name == Scenarist.NameOfFormat)
            {
                try
                {
                    var son = new Son();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (son.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrSon(fileName, son, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null || format.Name == SubRip.NameOfFormat)
            {
                if (_subtitle.Paragraphs.Count > 1)
                {
                    int imageCount = 0;
                    foreach (var p in _subtitle.Paragraphs)
                    {
                        string s = p.Text.ToLowerInvariant();
                        if (s.EndsWith(".bmp", StringComparison.Ordinal) || s.EndsWith(".png", StringComparison.Ordinal) || s.EndsWith(".jpg", StringComparison.Ordinal) || s.EndsWith(".tif", StringComparison.Ordinal))
                        {
                            imageCount++;
                        }
                    }

                    if (imageCount > 2 && imageCount >= _subtitle.Paragraphs.Count - 2)
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrSrt(_subtitle);
                        }

                        return;
                    }
                }
            }

            if (format == null)
            {
                try
                {
                    var satBoxPng = new SatBoxPng();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (satBoxPng.IsMine(list, fileName))
                    {
                        var subtitle = new Subtitle();
                        satBoxPng.LoadSubtitle(subtitle, list, fileName);
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrSrt(subtitle);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null || format.Name == Scenarist.NameOfFormat)
            {
                try
                {
                    var sst = new SonicScenaristBitmaps();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (sst.IsMine(list, fileName))
                    {
                        if (ContinueNewOrExit())
                        {
                            ImportAndOcrSst(fileName, sst, list);
                        }

                        return;
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                try
                {
                    var htmlSamiArray = new HtmlSamiArray();
                    var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                    if (htmlSamiArray.IsMine(list, fileName))
                    {
                        htmlSamiArray.LoadSubtitle(_subtitle, list, fileName);
                        _oldSubtitleFormat = htmlSamiArray;
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        justConverted = true;
                        format = GetCurrentSubtitleFormat();
                    }
                }
                catch
                {
                    format = null;
                }
            }

            if (format == null)
            {
                foreach (var f in SubtitleFormat.GetBinaryFormats(false))
                {
                    if (f.IsMine(null, fileName))
                    {
                        f.LoadSubtitle(_subtitle, null, fileName);
                        _oldSubtitleFormat = f;
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        justConverted = true;
                        format = GetCurrentSubtitleFormat();
                        break;
                    }
                }
            }

            if (format == null)
            {
                var lines = FileUtil.ReadAllTextShared(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)).SplitToLines();
                foreach (var f in SubtitleFormat.GetTextOtherFormats())
                {
                    if (f.IsMine(lines, fileName))
                    {
                        f.LoadSubtitle(_subtitle, lines, fileName);
                        _oldSubtitleFormat = f;
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        justConverted = true;
                        format = GetCurrentSubtitleFormat();
                        break;
                    }
                }
            }

            // retry vobsub (file with wrong extension)
            if (format == null && file.Length > 500 && IsVobSubFile(fileName, false))
            {
                ImportAndOcrVobSubSubtitleNew(fileName, _loading);
                return;
            }

            // retry Blu-ray (file with wrong extension)
            if (format == null && file.Length > 500 && FileUtil.IsBluRaySup(fileName))
            {
                ImportAndOcrBluRaySup(fileName, _loading);
                return;
            }

            // retry SP DVD (file with wrong extension)
            if (format == null && file.Length > 500 && FileUtil.IsSpDvdSup(fileName))
            {
                ImportAndOcrSpDvdSup(fileName, _loading);
                return;
            }

            // retry Matroska (file with wrong extension)
            if (format == null && !string.IsNullOrWhiteSpace(fileName))
            {
                using (var matroska = new MatroskaFile(fileName))
                {
                    if (matroska.IsValid)
                    {
                        var subtitleList = matroska.GetTracks(true);
                        if (subtitleList.Count > 0)
                        {
                            ImportSubtitleFromMatroskaFile(fileName);
                            return;
                        }
                    }
                }
            }

            // check for idx file
            if (format == null && file.Length > 100 && ext == ".idx")
            {
                MessageBox.Show(_language.ErrorLoadIdx);
                return;
            }

            // check for .rar file
            if (format == null && file.Length > 100 && FileUtil.IsRar(fileName))
            {
                MessageBox.Show(_language.ErrorLoadRar);
                return;
            }

            // check for .zip file
            if (format == null && file.Length > 100 && FileUtil.IsZip(fileName))
            {
                MessageBox.Show(_language.ErrorLoadZip);
                return;
            }

            // check for .7z file
            if (format == null && file.Length > 100 && FileUtil.Is7Zip(fileName))
            {
                MessageBox.Show(_language.ErrorLoad7Zip);
                return;
            }

            // check for .png file
            if (format == null && file.Length > 100 && FileUtil.IsPng(fileName))
            {
                MessageBox.Show(_language.ErrorLoadPng);
                return;
            }

            // check for .jpg file
            if (format == null && file.Length > 100 && FileUtil.IsJpg(fileName))
            {
                MessageBox.Show(_language.ErrorLoadJpg);
                return;
            }

            // check for .srr file
            if (format == null && file.Length > 100 && ext == ".srr" && FileUtil.IsSrr(fileName))
            {
                MessageBox.Show(_language.ErrorLoadSrr);
                return;
            }

            // check for Torrent file
            if (format == null && file.Length > 50 && FileUtil.IsTorrentFile(fileName))
            {
                MessageBox.Show(_language.ErrorLoadTorrent);
                return;
            }

            // check for all binary zeroes (I've heard about this a few times... perhaps related to crashes?)
            if (format == null && file.Length > 50 && FileUtil.IsSubtitleFileAllBinaryZeroes(fileName))
            {
                MessageBox.Show(_language.ErrorLoadBinaryZeroes);
                return;
            }

            if (format == null && file.Length < 100 * 1000000 && TransportStreamParser.IsDvbSup(fileName))
            {
                ImportSubtitleFromDvbSupFile(fileName);
                return;
            }

            if (format == null && file.Length < 1000000)
            {
                // check for valid timed text
                if (ext == ".xml" || ext == ".dfxp")
                {
                    var sb = new StringBuilder();
                    foreach (var line in File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)))
                    {
                        sb.AppendLine(line);
                    }

                    var xmlAsString = sb.ToString().Trim();

                    if (xmlAsString.Contains("http://www.w3.org/ns/ttml") && xmlAsString.Contains("<?xml version=") ||
                        xmlAsString.Contains("http://www.w3.org/") && xmlAsString.Contains("/ttaf1"))
                    {
                        var xml = new System.Xml.XmlDocument();
                        try
                        {
                            xml.LoadXml(xmlAsString);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Timed text is not valid (xml is not well-formed): " + ex.Message);
                            return;
                        }
                    }
                }

                // Try to use a generic subtitle format parser (guessing subtitle format)
                try
                {
                    var enc = LanguageAutoDetect.GetEncodingFromFile(fileName);
                    var s = File.ReadAllText(fileName, enc);

                    // check for RTF file
                    if (ext == ".rtf" && s.TrimStart().StartsWith("{\\rtf", StringComparison.Ordinal))
                    {
                        using (var rtb = new RichTextBox { Rtf = s })
                        {
                            s = rtb.Text;
                        }
                    }

                    var uknownFormatImporter = new UnknownFormatImporter { UseFrames = true };
                    var genericParseSubtitle = uknownFormatImporter.AutoGuessImport(s.SplitToLines());
                    if (genericParseSubtitle.Paragraphs.Count > 1)
                    {
                        _subtitle = genericParseSubtitle;
                        SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = GetCurrentEncoding();
                        justConverted = true;
                        format = GetCurrentSubtitleFormat();
                        ShowStatus("Guessed subtitle format via generic subtitle parser!");
                    }
                }
                catch
                {
                }
            }

            if (format == null && (FileUtil.IsPlainText(fileName) || new Tx3GTextOnly().IsMine(null, fileName)))
            {
                ImportPlainText(fileName);
                return;
            }

            if (format == null)
            {
                var fd = new FinalDraftTemplate2();
                var list = new List<string>(File.ReadAllLines(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)));
                if (fd.IsMine(list, fileName))
                {
                    ImportPlainText(fileName);
                    return;
                }
            }

            _fileDateTime = File.GetLastWriteTime(fileName);

            if (format != null)
            {
                RemoveAlternate(true, false);
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);

                new BookmarkPersistence(_subtitle, fileName).Load();

                if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                {
                    _subtitle.RemoveEmptyLines();
                }

                if (Configuration.Settings.General.RemoveBadCharsWhenOpening)
                {
                    foreach (var p in _subtitle.Paragraphs)
                    {
                        // Replace U+0456 (CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I) by U+0069 (LATIN SMALL LETTER I)
                        p.Text = p.Text.Replace("<і>", "<i>").Replace("</і>", "</i>");

                        // remove control characters (e.g. binary zero)
                        p.Text = p.Text.RemoveControlCharactersButWhiteSpace();
                    }
                }

                _subtitleListViewIndex = -1;
                Configuration.Settings.General.CurrentVideoOffsetInMs = 0;

                var oldSaveFormat = Configuration.Settings.General.LastSaveAsFormat;
                SetCurrentFormat(format);
                Configuration.Settings.General.LastSaveAsFormat = oldSaveFormat;

                _subtitleAlternateFileName = null;
                if (LoadAlternateSubtitleFile(originalFileName))
                {
                    _subtitleAlternateFileName = originalFileName;
                }

                // Seungki begin
                _splitDualSami = false;
                if (Configuration.Settings.SubtitleSettings.SamiDisplayTwoClassesAsTwoSubtitles && format.GetType() == typeof(Sami) && Sami.GetStylesFromHeader(_subtitle.Header).Count == 2)
                {
                    var classes = Sami.GetStylesFromHeader(_subtitle.Header);
                    var s1 = new Subtitle(_subtitle);
                    var s2 = new Subtitle(_subtitle);
                    s1.Paragraphs.Clear();
                    s2.Paragraphs.Clear();
                    foreach (var p in _subtitle.Paragraphs)
                    {
                        if (p.Extra != null && p.Extra.Equals(classes[0], StringComparison.OrdinalIgnoreCase))
                        {
                            s1.Paragraphs.Add(p);
                        }
                        else
                        {
                            s2.Paragraphs.Add(p);
                        }
                    }

                    if (s1.Paragraphs.Count == 0 || s2.Paragraphs.Count == 0)
                    {
                        return;
                    }

                    _subtitle = s1;
                    _subtitleAlternate = s2;
                    _subtitleAlternateFileName = _fileName;
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
                    SubtitleListview1.ShowAlternateTextColumn(classes[1]);
                    _splitDualSami = true;
                }
                // Seungki end

                textBoxSource.Text = _subtitle.ToText(format);
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                if (SubtitleListview1.Items.Count > 0)
                {
                    SubtitleListview1.Items[0].Selected = true;
                    SubtitleListview1.Items[0].Focused = true;
                }

                _findHelper = null;
                _spellCheckForm = null;

                if (_resetVideo && ModifierKeys != Keys.Shift)
                {
                    _videoFileName = null;
                    _videoInfo = null;
                    _videoAudioTrackNumber = -1;
                    labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
                    audioVisualizer.WavePeaks = null;
                    audioVisualizer.SetSpectrogram(null);
                    audioVisualizer.SceneChanges = new List<double>();
                }

                if (Configuration.Settings.General.ShowVideoPlayer || Configuration.Settings.General.ShowAudioVisualizer)
                {
                    if (!Configuration.Settings.General.DisableVideoAutoLoading)
                    {
                        if (!string.IsNullOrEmpty(videoFileName) && File.Exists(videoFileName))
                        {
                            OpenVideo(videoFileName);
                        }
                        else if (!string.IsNullOrEmpty(fileName) && (toolStripButtonToggleVideo.Checked || toolStripButtonToggleWaveform.Checked))
                        {
                            TryToFindAndOpenVideoFile(Utilities.GetPathAndFileNameWithoutExtension(fileName));
                        }

                        if (_videoFileName == null)
                        {
                            CloseVideoToolStripMenuItemClick(this, null);
                        }
                    }
                }

                videoFileLoaded = _videoFileName != null;

                Configuration.Settings.RecentFiles.Add(fileName, videoFileName, originalFileName);
                UpdateRecentFilesUI();

                _fileName = fileName;
                SetTitle();
                ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName));
                _sourceViewChange = false;

                if (Configuration.Settings.General.AutoConvertToUtf8)
                {
                    if (Configuration.Settings.General.DefaultEncoding == TextEncoding.Utf8WithoutBom)
                    {
                        SetEncoding(TextEncoding.Utf8WithoutBom);
                    }
                    else
                    {
                        SetEncoding(TextEncoding.Utf8WithBom);
                    }
                }
                else if (encoding == Encoding.UTF8)
                {
                    if (File.Exists(_fileName) && FileUtil.HasUtf8Bom(fileName))
                    {
                        SetEncoding(TextEncoding.Utf8WithBom);
                    }
                    else
                    {
                        SetEncoding(TextEncoding.Utf8WithoutBom);
                    }
                }
                else
                {
                    SetEncoding(encoding);
                }

                _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
                _converted = false;
                ResetHistory();
                SetListViewStateImages();
                SetUndockedWindowsTitle();

                if (justConverted)
                {
                    _converted = true;
                    ShowStatus(string.Format(_language.LoadedSubtitleX, _fileName) + " - " + string.Format(_language.ConvertedToX, format.FriendlyName));
                }

                var formatType = format.GetType();
                if (formatType == typeof(SubStationAlpha))
                {
                    string errors = AdvancedSubStationAlpha.CheckForErrors(_subtitle.Header);
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }

                    errors = (format as SubStationAlpha).Errors;
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(AdvancedSubStationAlpha))
                {
                    string errors = AdvancedSubStationAlpha.CheckForErrors(_subtitle.Header);
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }

                    errors = (format as AdvancedSubStationAlpha).Errors;
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(SubRip))
                {
                    string errors = (format as SubRip).Errors;
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(MicroDvd))
                {
                    string errors = (format as MicroDvd).Errors;
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(this, errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(DCinemaSmpte2007))
                {
                    format.ToText(_subtitle, string.Empty);
                    string errors = (format as DCinemaSmpte2007).Errors;
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(DCinemaSmpte2010))
                {
                    format.ToText(_subtitle, string.Empty);
                    string errors = (format as DCinemaSmpte2010).Errors;
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(DCinemaSmpte2014))
                {
                    format.ToText(_subtitle, string.Empty);
                    string errors = (format as DCinemaSmpte2014).Errors;
                    if (!string.IsNullOrEmpty(errors))
                    {
                        MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (formatType == typeof(CsvNuendo))
                {
                    if (_subtitle.Paragraphs.Any(p => !string.IsNullOrEmpty(p.Actor)))
                    {
                        bool wasVisible = SubtitleListview1.ColumnIndexActor >= 0;
                        SubtitleListview1.ShowActorColumn(Configuration.Settings.Language.General.Character);
                        if (!wasVisible)
                        {
                            SaveSubtitleListviewIndices();
                            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                            RestoreSubtitleListviewIndices();
                        }
                    }
                }
            }
            else
            {
                if (file.Length < 50)
                {
                    _findHelper = null;
                    _spellCheckForm = null;
                    _videoFileName = null;
                    _videoInfo = null;
                    _videoAudioTrackNumber = -1;
                    labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
                    audioVisualizer.WavePeaks = null;
                    audioVisualizer.SetSpectrogram(null);
                    audioVisualizer.SceneChanges = new List<double>();

                    Configuration.Settings.RecentFiles.Add(fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                    Configuration.Settings.Save();
                    UpdateRecentFilesUI();
                    _fileName = fileName;
                    SetTitle();
                    ShowStatus(string.Format(_language.LoadedEmptyOrShort, _fileName));
                    _sourceViewChange = false;
                    _converted = false;

                    MessageBox.Show(_language.FileIsEmptyOrShort);
                }
                else
                {
                    if (ShowUnknownSubtitle(fileName, true))
                    {
                        ImportPlainText(fileName);
                    }

                    return;
                }
            }

            if (!videoFileLoaded && mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.PauseAndDisposePlayer();
                timer1.Stop();
            }

            ResetShowEarlierOrLater();
            FixRightToLeftDependingOnLanguage();
        }

        private void ShowHideTextBasedFeatures(SubtitleFormat format)
        {
            textBoxSource.Enabled = format?.IsTextBased == true;
        }

        private void SetUndockedWindowsTitle()
        {
            string title = _languageGeneral.NoVideoLoaded;
            if (!string.IsNullOrEmpty(_videoFileName))
            {
                title = Path.GetFileNameWithoutExtension(_videoFileName);
            }

            if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
            {
                _videoControlsUndocked.Text = string.Format(_languageGeneral.ControlsWindowTitle, title);
            }

            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                _videoPlayerUndocked.Text = string.Format(_languageGeneral.VideoWindowTitle, title);
            }

            if (_waveformUndocked != null && !_waveformUndocked.IsDisposed)
            {
                _waveformUndocked.Text = string.Format(_languageGeneral.AudioWindowTitle, title);
            }
        }

        private void ImportAndOcrBdnXml(string fileName, BdnXml bdnXml, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var bdnSubtitle = new Subtitle();
                bdnXml.LoadSubtitle(bdnSubtitle, list, fileName);
                bdnSubtitle.FileName = fileName;
                formSubOcr.Initialize(bdnSubtitle, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private void ImportAndOcrSon(string fileName, Son format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, true);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private void ImportAndOcrDost(string fileName, SubtitleFormat format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private void ImportAndOcrSst(string fileName, SonicScenaristBitmaps format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, true);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private void ImportAndOcrSrt(Subtitle subtitle)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitle, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBdnXml);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(formSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;
                }
            }
        }

        private bool ShowUnknownSubtitle(string fileName, bool allowImportPlainText = false)
        {
            using (var unknownSubtitle = new UnknownSubtitle())
            {
                unknownSubtitle.Initialize(Title, fileName, allowImportPlainText);
                unknownSubtitle.ShowDialog(this);
                return unknownSubtitle.ImportPlainText;
            }
        }

        private void UpdateRecentFilesUI()
        {
            var dropDownItems = new List<ToolStripMenuItem>();
            reopenToolStripMenuItem.DropDownItems.Clear();
            if (Configuration.Settings.General.ShowRecentFiles && Configuration.Settings.RecentFiles.Files.Count > 0)
            {
                reopenToolStripMenuItem.Visible = true;
                var lowerFileNameList = new List<string>();
                foreach (var file in Configuration.Settings.RecentFiles.Files)
                {
                    if (File.Exists(file.FileName))
                    {
                        if (!string.IsNullOrEmpty(file.OriginalFileName) && File.Exists(file.OriginalFileName))
                        {
                            dropDownItems.Add(new ToolStripMenuItem(file.FileName + " + " + file.OriginalFileName, null, ReopenSubtitleToolStripMenuItemClick));
                        }
                        else
                        {
                            if (!lowerFileNameList.Contains(file.FileName.ToLowerInvariant()))
                            {
                                dropDownItems.Add(new ToolStripMenuItem(file.FileName, null, ReopenSubtitleToolStripMenuItemClick));
                                lowerFileNameList.Add(file.FileName.ToLowerInvariant());
                            }
                        }
                        UiUtil.FixFonts(dropDownItems[dropDownItems.Count - 1]);
                    }
                }
                reopenToolStripMenuItem.DropDownItems.AddRange(dropDownItems.ToArray());
            }
            else
            {
                Configuration.Settings.RecentFiles.Files.Clear();
                reopenToolStripMenuItem.Visible = false;
            }

            reopenToolStripMenuItem.Visible = reopenToolStripMenuItem.DropDownItems.Count > 0;
        }

        private void ReopenSubtitleToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            var item = sender as ToolStripItem;

            if (ContinueNewOrExit())
            {
                if (!string.IsNullOrEmpty(_fileName))
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                }

                RecentFileEntry rfe = null;
                foreach (var file in Configuration.Settings.RecentFiles.Files.Where(p => !string.IsNullOrEmpty(p.OriginalFileName)))
                {
                    if ((file.FileName + " + " + file.OriginalFileName).Equals(item.Text, StringComparison.OrdinalIgnoreCase))
                    {
                        rfe = file;
                        break;
                    }
                }

                if (rfe == null)
                {
                    foreach (var file in Configuration.Settings.RecentFiles.Files.Where(p => string.IsNullOrEmpty(p.OriginalFileName)))
                    {
                        if (file.FileName.Equals(item.Text, StringComparison.OrdinalIgnoreCase))
                        {
                            rfe = file;
                            RemoveAlternate(true, false);
                            break;
                        }
                    }
                }

                SubtitleListview1.BeginUpdate();
                if (rfe == null)
                {
                    OpenSubtitle(item.Text, null);
                }
                else
                {
                    OpenRecentFile(rfe);
                }

                GotoSubPosAndPause();
                SetRecentIndices(rfe);
                SubtitleListview1.EndUpdate();
                if (rfe != null && !string.IsNullOrEmpty(rfe.VideoFileName))
                {
                    var p = _subtitle.GetParagraphOrDefault(rfe.FirstSelectedIndex);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }
            }
        }

        private void OpenRecentFile(RecentFileEntry rfe)
        {
            OpenSubtitle(rfe.FileName, null, rfe.VideoFileName, rfe.OriginalFileName, false);
            Configuration.Settings.General.CurrentVideoOffsetInMs = rfe.VideoOffsetInMs;
            if (rfe.VideoOffsetInMs != 0)
            {
                _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
                if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    _subtitleAlternate.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                    _changeAlternateSubtitleHash = _subtitleAlternate.GetFastHashCode(GetCurrentEncoding().BodyName);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                }
                else
                {
                    SubtitleListview1.Fill(_subtitle);
                }
            }
        }

        private void GotoSubPosAndPause()
        {
            if (!string.IsNullOrEmpty(_videoFileName))
            {
                _videoLoadedGoToSubPosAndPause = true;
            }
            else
            {
                mediaPlayer.SubtitleText = string.Empty;
            }
        }

        private void SetRecentIndices(RecentFileEntry rfe)
        {
            if (!Configuration.Settings.General.RememberSelectedLine)
            {
                return;
            }

            ShowSubtitleTimer.Stop();
            Application.DoEvents();
            if (rfe != null && !string.IsNullOrEmpty(rfe.FileName) &&
                rfe.FirstSelectedIndex >= 0 && rfe.FirstSelectedIndex < SubtitleListview1.Items.Count)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                SubtitleListview1.SelectIndexAndEnsureVisible(rfe.FirstSelectedIndex, true);
                _subtitleListViewIndex = -1;
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }

            if (!_loading)
            {
                ShowSubtitleTimer.Start();
            }
        }

        private void SaveToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                return;
            }

            ReloadFromSourceView();
            _saveAsCalled = false;
            SaveSubtitle(GetCurrentSubtitleFormat());
        }

        private void SaveAsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                return;
            }

            ReloadFromSourceView();
            FileSaveAs(true);
        }

        private DialogResult FileSaveAs(bool allowUsingLastSaveAsFormat)
        {
            SubtitleFormat currentFormat = null;
            if (allowUsingLastSaveAsFormat && !string.IsNullOrEmpty(Configuration.Settings.General.LastSaveAsFormat))
            {
                currentFormat = Utilities.GetSubtitleFormatByFriendlyName(Configuration.Settings.General.LastSaveAsFormat);
            }

            if (currentFormat == null)
            {
                currentFormat = GetCurrentSubtitleFormat();
            }

            UiUtil.SetSaveDialogFilter(saveFileDialog1, currentFormat);

            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            if (!string.IsNullOrWhiteSpace(_fileName) && Configuration.Settings.General.SaveAsUseFileNameFrom.Equals("file", StringComparison.OrdinalIgnoreCase))
            {
                saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_fileName);
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_fileName);
            }
            else if (!string.IsNullOrEmpty(_videoFileName) && Configuration.Settings.General.SaveAsUseFileNameFrom.Equals("video", StringComparison.OrdinalIgnoreCase))
            {
                if (_converted && !string.IsNullOrEmpty(_fileName) && !File.Exists(_fileName))
                {
                    saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_fileName);
                }
                else
                {
                    saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_videoFileName);
                }

                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_videoFileName);
            }
            else if (!string.IsNullOrWhiteSpace(_fileName))
            {
                saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_fileName);
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_fileName);
            }
            else if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetFileNameWithoutExtension(_videoFileName);
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = string.Empty;
            }

            if (!string.IsNullOrEmpty(saveFileDialog1.FileName) &&
                saveFileDialog1.FileName.Contains('.') &&
                !saveFileDialog1.FileName.EndsWith(currentFormat.Extension, StringComparison.OrdinalIgnoreCase))
            {
                saveFileDialog1.FileName = saveFileDialog1.FileName + currentFormat.Extension;
            }

            var result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                _converted = false;
                _fileName = saveFileDialog1.FileName;
                _fileDateTime = File.GetLastWriteTime(_fileName);
                SetTitle();
                MakeHistoryForUndo(_language.Menu.File.SaveAs);

                int index = 0;
                foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                {
                    if (saveFileDialog1.FilterIndex == index + 1)
                    {
                        // only allow current extension or ".txt"
                        string ext = Path.GetExtension(_fileName).ToLowerInvariant();
                        bool extOk = ext.Equals(format.Extension, StringComparison.OrdinalIgnoreCase) || format.AlternateExtensions.Contains(ext) || ext == ".txt";
                        if (!extOk)
                        {
                            if (_fileName.EndsWith('.'))
                            {
                                _fileName = _fileName.Substring(0, _fileName.Length - 1);
                            }

                            _fileName += format.Extension;
                        }

                        _saveAsCalled = true;
                        if (SaveSubtitle(format) == DialogResult.OK)
                        {
                            Configuration.Settings.General.LastSaveAsFormat = format.Name;
                            SetCurrentFormat(format);
                            Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                            Configuration.Settings.Save();
                            UpdateRecentFilesUI();
                        }

                        break;
                    }

                    index++;
                }

                _converted = false;
            }

            return result;
        }

        private DialogResult SaveSubtitle(SubtitleFormat format, bool useNewLineWithOnly0A = false, bool skipPrompts = false)
        {
            if (string.IsNullOrEmpty(_fileName) || _converted)
            {
                return FileSaveAs(false);
            }

            try
            {
                var sub = GetSaveSubtitle(_subtitle);

                if (format != null && !format.IsTextBased)
                {
                    var ebu = format as Ebu;
                    if (ebu != null)
                    {
                        var header = new Ebu.EbuGeneralSubtitleInformation();
                        if (_subtitle != null && _subtitle.Header != null && (_subtitle.Header.Contains("STL2") || _subtitle.Header.Contains("STL3")))
                        {
                            header = Ebu.ReadHeader(Encoding.UTF8.GetBytes(_subtitle.Header));
                        }

                        if (ebu.Save(_fileName, sub, !_saveAsCalled, header))
                        {
                            _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
                            Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                            Configuration.Settings.Save();
                        }
                    }

                    return DialogResult.OK;
                }

                string allText = sub.ToText(format);

                // Seungki begin
                if (_splitDualSami && _subtitleAlternate?.Paragraphs.Count > 0)
                {
                    var s = new Subtitle(_subtitle);
                    foreach (var p in _subtitleAlternate.Paragraphs)
                    {
                        s.Paragraphs.Add(p);
                    }

                    allText = s.ToText(format);
                }
                // Seungki end

                var currentEncoding = GetCurrentEncoding();
                bool isUnicode = currentEncoding.Equals(Encoding.Unicode) || currentEncoding.Equals(Encoding.UTF32) || currentEncoding.Equals(Encoding.GetEncoding(12001)) || currentEncoding.Equals(Encoding.UTF7) || currentEncoding.Equals(Encoding.UTF8);
                if (!isUnicode)
                {
                    if (!skipPrompts && currentEncoding.GetString(currentEncoding.GetBytes(allText)) != allText)
                    {
                        if (MessageBox.Show(string.Format(_language.UnicodeMusicSymbolsAnsiWarning), Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                        {
                            return DialogResult.No;
                        }
                    }

                    allText = NormalizeUnicode(allText, currentEncoding);
                }

                bool containsNegativeTime = false;
                var negativeTimeLines = new List<string>();
                foreach (var p in sub.Paragraphs)
                {
                    if (p.StartTime.TotalMilliseconds < 0 || p.EndTime.TotalMilliseconds < 0)
                    {
                        containsNegativeTime = true;
                        negativeTimeLines.Add(sub.Paragraphs.IndexOf(p).ToString(CultureInfo.InvariantCulture));
                        if (negativeTimeLines.Count > 10)
                        {
                            negativeTimeLines[negativeTimeLines.Count - 1] = negativeTimeLines[negativeTimeLines.Count - 1] + "...";
                            break;
                        }
                    }
                }

                if (containsNegativeTime && !skipPrompts)
                {
                    if (MessageBox.Show(_language.NegativeTimeWarning + Environment.NewLine +
                                        string.Format(Configuration.Settings.Language.MultipleReplace.LinesFoundX, string.Join(", ", negativeTimeLines)),
                                        Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return DialogResult.No;
                    }
                }

                if (!skipPrompts && File.Exists(_fileName))
                {
                    var fileInfo = new FileInfo(_fileName);
                    var fileOnDisk = fileInfo.LastWriteTime;
                    if (_fileDateTime != fileOnDisk && _fileDateTime != new DateTime())
                    {
                        if (MessageBox.Show(string.Format(_language.OverwriteModifiedFile,
                                    _fileName, fileOnDisk.ToShortDateString(), fileOnDisk.ToString("HH:mm:ss"),
                                    Environment.NewLine, _fileDateTime.ToShortDateString(), _fileDateTime.ToString("HH:mm:ss")),
                                Title + " - " + _language.FileOnDiskModified, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                        {
                            return DialogResult.No;
                        }
                    }

                    if (fileInfo.IsReadOnly)
                    {
                        MessageBox.Show(string.Format(_language.FileXIsReadOnly, _fileName));
                        return DialogResult.No;
                    }
                }

                // force encoding
                var formatType = format.GetType();
                if (formatType == typeof(WebVTT) || formatType == typeof(WebVTTFileWithLineNumber))
                {
                    SetEncoding(Encoding.UTF8);
                    currentEncoding = Encoding.UTF8;
                }
                else if (formatType == typeof(SwiftInterchange2))
                {
                    SetEncoding(Encoding.Unicode);
                    currentEncoding = Encoding.Unicode;
                }

                if (Configuration.Settings.General.ShowFormatRequiresUtf8Warning && !currentEncoding.Equals(Encoding.UTF8) &&
                    (formatType == typeof(DCinemaInterop) || formatType == typeof(DCinemaSmpte2007) ||
                     formatType == typeof(DCinemaSmpte2010) || formatType == typeof(DCinemaSmpte2014)))
                {
                    using (var form = new DialogDoNotShowAgain(Title, string.Format(_language.FormatXShouldUseUft8, GetCurrentSubtitleFormat().FriendlyName)))
                    {
                        form.ShowDialog(this);
                        Configuration.Settings.General.ShowFormatRequiresUtf8Warning = !form.DoNoDisplayAgain;
                    }
                }

                if (format.Extension == ".rtf")
                {
                    currentEncoding = Encoding.ASCII;
                }

                if (useNewLineWithOnly0A)
                {
                    allText = allText.Replace("\r\n", "\n");
                }

                if (formatType == typeof(ItunesTimedText) || formatType == typeof(ScenaristClosedCaptions) || formatType == typeof(ScenaristClosedCaptionsDropFrame))
                {
                    var outputEnc = new UTF8Encoding(false); // create encoding with no BOM
                    using (var file = new StreamWriter(_fileName, false, outputEnc)) // open file with encoding
                    {
                        file.Write(allText);
                    }
                }
                else if (Equals(currentEncoding, Encoding.UTF8) && (formatType == typeof(TmpegEncAW5) || formatType == typeof(TmpegEncXml)))
                {
                    var outputEnc = new UTF8Encoding(false); // create encoding with no BOM
                    using (var file = new StreamWriter(_fileName, false, outputEnc)) // open file with encoding
                    {
                        file.Write(allText);
                    }
                }
                else
                {
                    if (string.IsNullOrWhiteSpace(allText))
                    {
                        MessageBox.Show(string.Format(_language.UnableToSaveSubtitleX, _fileName), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return DialogResult.Cancel;
                    }

                    if (comboBoxEncoding.SelectedIndex == TextEncoding.Utf8WithoutBomIndex)
                    {
                        var outputEnc = new UTF8Encoding(false); // create encoding with no BOM
                        using (var file = new StreamWriter(_fileName, false, outputEnc)) // open file with encoding
                        {
                            file.Write(allText);
                        }
                    }
                    else
                    {
                        // create file - includes BOM for Unicode formats
                        using (var fs = new FileStream(_fileName, FileMode.Create, FileAccess.Write, FileShare.Read))
                        using (var sw = new StreamWriter(fs, currentEncoding))
                        {
                            sw.Write(allText);
                        }
                    }
                }

                Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                Configuration.Settings.Save();
                new BookmarkPersistence(_subtitle, _fileName).Save();
                _fileDateTime = File.GetLastWriteTime(_fileName);
                ShowStatus(string.Format(_language.SavedSubtitleX, _fileName));
                if (formatType == typeof(NetflixTimedText))
                {
                    NetflixGlyphCheck(true);
                }

                _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
                return DialogResult.OK;
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
                return DialogResult.Cancel;
            }
        }

        private DialogResult SaveOriginalSubtitle(SubtitleFormat format, bool skipPrompts = false)
        {
            try
            {
                var subAlt = GetSaveSubtitle(_subtitleAlternate);

                bool containsNegativeTime = false;
                foreach (var p in subAlt.Paragraphs)
                {
                    if (p.StartTime.TotalMilliseconds < 0 || p.EndTime.TotalMilliseconds < 0)
                    {
                        containsNegativeTime = true;
                        break;
                    }
                }

                if (!skipPrompts && containsNegativeTime)
                {
                    if (MessageBox.Show(_language.NegativeTimeWarning, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return DialogResult.No;
                    }
                }

                if (format != null && !format.IsTextBased)
                {
                    var ebu = format as Ebu;
                    if (ebu != null)
                    {
                        if (ebu.Save(_subtitleAlternateFileName, subAlt))
                        {
                            Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                            Configuration.Settings.Save();
                            ShowStatus(string.Format(_language.SavedOriginalSubtitleX, _subtitleAlternateFileName));
                            _changeAlternateSubtitleHash = _subtitleAlternate.GetFastHashCode(GetCurrentEncoding().BodyName);
                            return DialogResult.OK;
                        }

                        return DialogResult.No;
                    }

                    MessageBox.Show("Ups - save original does not support this format - please go to Github and create an issue!");
                }

                string allText = subAlt.ToText(format);
                var currentEncoding = GetCurrentEncoding();
                bool isUnicode = currentEncoding != null && (currentEncoding.Equals(Encoding.Unicode) || currentEncoding.Equals(Encoding.UTF32) || currentEncoding.Equals(Encoding.UTF7) || currentEncoding.Equals(Encoding.UTF8));
                if (!skipPrompts && !isUnicode && currentEncoding.GetString(currentEncoding.GetBytes(allText)) != allText)
                {
                    if (MessageBox.Show(string.Format(_language.UnicodeMusicSymbolsAnsiWarning), Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return DialogResult.No;
                    }
                }

                if (!isUnicode)
                {
                    allText = NormalizeUnicode(allText, currentEncoding);
                }

                File.WriteAllText(_subtitleAlternateFileName, allText, currentEncoding);
                ShowStatus(string.Format(_language.SavedOriginalSubtitleX, _subtitleAlternateFileName));
                _changeAlternateSubtitleHash = _subtitleAlternate.GetFastHashCode(GetCurrentEncoding().BodyName);
                return DialogResult.OK;
            }
            catch
            {
                MessageBox.Show(string.Format(_language.UnableToSaveSubtitleX, _fileName));
                return DialogResult.Cancel;
            }
        }

        public string NormalizeUnicode(string input, Encoding encoding)
        {
            const char defHyphen = '-'; // - Hyphen-minus (\u002D) (Basic Latin)
            const char defColon = ':'; // : Colon (\u003A) (Basic Latin)

            var text = input;

            bool hasSingleMusicNode = true;
            if (encoding.GetString(encoding.GetBytes("♪")) != "♪")
            {
                text = text.Replace('♪', '#');
                hasSingleMusicNode = false;
            }

            if (encoding.GetString(encoding.GetBytes("♫")) != "♫")
            {
                text = text.Replace('♫', hasSingleMusicNode ? '♪' : '#');
            }

            // Hyphens
            return text.Replace('\u2043', defHyphen) // ⁃ Hyphen bullet (\u2043)
                .Replace('\u2010', defHyphen) // ‐ Hyphen (\u2010)
                .Replace('\u2012', defHyphen) // ‒ Figure dash (\u2012)
                .Replace('\u2013', defHyphen) // – En dash (\u2013)
                .Replace('\u2014', defHyphen) // — Em dash (\u2014)
                .Replace('\u2015', defHyphen) // ― Horizontal bar (\u2015)

                // Colons:
                .Replace('\u02F8', defColon) // ˸ Modifier Letter Raised Colon (\u02F8)
                .Replace('\uFF1A', defColon) // ： Fullwidth Colon (\uFF1A)
                .Replace('\uFE13', defColon) // ︓ Presentation Form for Vertical Colon (\uFE13)

                // Others
                .Replace("…", "...")
                .Replace("⇒", "=>")

                // Spaces
                .Replace('\u00A0', ' ') // No-Break Space
                .Replace("\u200B", string.Empty) // Zero Width Space
                .Replace("\uFEFF", string.Empty) // Zero Width No-Break Space

                // Intellectual property
                .Replace("\u00A9", "(Copyright)") // © copyright
                .Replace("\u2117", "(Sound-recording Copyright)") // ℗ sound-recording copyright
                .Replace("\u00AE", "(Registered Trademark)") // ® registered trademark
                .Replace("\u2120", "(Service Mark)") // ℠ service mark
                .Replace("\u2122", "(Trademark)") // ™ trademark

                // RTL/LTR markers
                .Replace("\u202B", string.Empty) // &rlm;
                .Replace("\u202A", string.Empty); // &lmr;
        }

        private void NewToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            FileNew();
        }

        private void ResetSubtitle(bool forceVideoReload = false)
        {
            SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);

            labelStartTimeWarning.Text = string.Empty;
            labelDurationWarning.Text = string.Empty;

            Configuration.Settings.General.CurrentVideoOffsetInMs = 0;
            _subtitle = new Subtitle(_subtitle.HistoryItems);
            _changeAlternateSubtitleHash = -1;
            _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            _subtitleAlternateFileName = null;
            textBoxSource.Text = string.Empty;
            SubtitleListview1.Items.Clear();
            _fileName = string.Empty;
            _fileDateTime = new DateTime();
            _oldSubtitleFormat = null;
            labelSingleLine.Text = string.Empty;
            labelSingleLinePixels.Text = string.Empty;
            RemoveAlternate(true, false);
            _splitDualSami = false;

            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);

            ComboBoxSubtitleFormatsSelectedIndexChanged(null, null);

            toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();

            SetEncoding(Configuration.Settings.General.DefaultEncoding);

            toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();
            _findHelper = null;
            _spellCheckForm = null;

            if (ModifierKeys != Keys.Shift || forceVideoReload)
            {
                _videoFileName = null;
                _videoInfo = null;
                _videoAudioTrackNumber = -1;
                labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
                audioVisualizer.WavePeaks = null;
                audioVisualizer.SetSpectrogram(null);
                audioVisualizer.SceneChanges = new List<double>();
                if (mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.PauseAndDisposePlayer();
                }

                timeUpDownVideoPositionAdjust.TimeCode = new TimeCode();
                timeUpDownVideoPositionAdjust.Enabled = false;
                timeUpDownVideoPosition.TimeCode = new TimeCode();
                timeUpDownVideoPosition.Enabled = false;
                trackBarWaveformPosition.Value = 0;
                timeUpDownStartTime.TimeCode = new TimeCode();
                numericUpDownDuration.Value = 0;
            }

            _sourceViewChange = false;

            _subtitleListViewIndex = -1;
            textBoxListViewText.Text = string.Empty;
            textBoxListViewTextAlternate.Text = string.Empty;
            textBoxListViewText.Enabled = false;
            labelTextLineLengths.Text = string.Empty;
            labelCharactersPerSecond.Text = string.Empty;
            labelTextLineTotal.Text = string.Empty;

            _listViewTextUndoLast = null;
            _listViewAlternateTextUndoLast = null;
            _listViewTextUndoIndex = -1;

            _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            _converted = false;

            SetTitle();
            SetUndockedWindowsTitle();
            mediaPlayer.SubtitleText = string.Empty;
            labelNextWord.Visible = false;
            ShowStatus(_language.New);

            ResetShowEarlierOrLater();

            // Set default RTL or LTR
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                textBoxListViewTextAlternate.RightToLeft = Configuration.Settings.General.RightToLeftMode ? RightToLeft.Yes : RightToLeft.No;
            }

            if (Configuration.Settings.General.RightToLeftMode)
            {
                textBoxListViewText.RightToLeft = RightToLeft.Yes;
                textBoxSource.RightToLeft = RightToLeft.Yes;
            }
            else
            {
                textBoxListViewText.RightToLeft = RightToLeft.No;
                textBoxSource.RightToLeft = RightToLeft.No;
            }

            SetListViewStateImages();
            pictureBoxBookmark.Visible = false;
            panelBookmark.Hide();
        }

        private void ResetShowEarlierOrLater()
        {
            try
            {
                if (_showEarlierOrLater != null && !_showEarlierOrLater.IsDisposed)
                {
                    _showEarlierOrLater.ResetTotalAdjustment();
                }
            }
            catch
            {
                // form closing or alike
            }
        }

        private void FileNew()
        {
            if (ContinueNewOrExit())
            {
                if (Configuration.Settings.General.ShowRecentFiles)
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                }

                MakeHistoryForUndo(_language.BeforeNew);
                ResetSubtitle(true);
                Configuration.Settings.RecentFiles.Add(null, null, null);
            }
        }

        private void ComboBoxSubtitleFormatsSelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsMenuOpen)
            {
                return;
            }

            _converted = true;
            var format = GetCurrentSubtitleFormat();
            if (format == null)
            {
                format = new SubRip();
            }
            var formatType = format.GetType();

            if (_oldSubtitleFormat == null)
            {
                if (!_loading)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeConvertingToX, format.FriendlyName));
                }
            }
            else
            {
                _subtitle.MakeHistoryForUndo(string.Format(_language.BeforeConvertingToX, format.FriendlyName), _oldSubtitleFormat, _fileDateTime, _subtitleAlternate, _subtitleAlternateFileName, _subtitleListViewIndex, textBoxListViewText.SelectionStart, textBoxListViewTextAlternate.SelectionStart);
                _oldSubtitleFormat.RemoveNativeFormatting(_subtitle, format);
                SaveSubtitleListviewIndices();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                RestoreSubtitleListviewIndices();

                if (_oldSubtitleFormat.HasStyleSupport)
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
                }

                if (_networkSession == null)
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Network);
                }

                if (formatType == typeof(AdvancedSubStationAlpha) && _oldSubtitleFormat.GetType() == typeof(SubStationAlpha))
                {
                    _subtitle.Header = AdvancedSubStationAlpha.GetHeaderAndStylesFromSubStationAlpha(_subtitle.Header);
                }
                else if (formatType == typeof(SubStationAlpha) && _oldSubtitleFormat.GetType() == typeof(AdvancedSubStationAlpha))
                {
                    _subtitle.Header = SubStationAlpha.GetHeaderAndStylesFromAdvancedSubStationAlpha(_subtitle.Header, string.Empty);
                }
            }

            ShowSource();
            ShowStatus(string.Format(_language.ConvertedToX, format.FriendlyName));
            if (_fileName != null && _oldSubtitleFormat != null && _fileName.EndsWith(_oldSubtitleFormat.Extension, StringComparison.Ordinal))
            {
                _fileName = _fileName.Substring(0, _fileName.Length - _oldSubtitleFormat.Extension.Length) + format.Extension;
            }

            _oldSubtitleFormat = format;
            Configuration.Settings.General.LastSaveAsFormat = format.Name;

            if ((formatType == typeof(AdvancedSubStationAlpha) ||
                 formatType == typeof(SubStationAlpha) ||
                 formatType == typeof(CsvNuendo)) && (_subtitle.Paragraphs.Any(p => !string.IsNullOrEmpty(p.Actor)) ||
                                                      Configuration.Settings.Tools.ListViewShowColumnActor))
            {
                bool wasVisible = SubtitleListview1.ColumnIndexActor >= 0;
                if (formatType == typeof(CsvNuendo))
                {
                    SubtitleListview1.ShowActorColumn(Configuration.Settings.Language.General.Character);
                }
                else
                {
                    SubtitleListview1.ShowActorColumn(Configuration.Settings.Language.General.Actor);
                }

                if (!wasVisible)
                {
                    SaveSubtitleListviewIndices();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
            else
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Actor);
            }

            if (formatType == typeof(TimedText10) && Configuration.Settings.Tools.ListViewShowColumnRegion)
            {
                SubtitleListview1.ShowRegionColumn(Configuration.Settings.Language.General.Region);
            }
            else
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Region);
            }

            if (format.HasStyleSupport)
            {
                var styles = new List<string>();
                if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
                {
                    styles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                }
                else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText))
                {
                    styles = TimedText10.GetStylesFromHeader(_subtitle.Header);
                }
                else if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
                {
                    styles = Sami.GetStylesFromHeader(_subtitle.Header);
                    if (string.IsNullOrEmpty(_subtitle.Header))
                    {
                        styles = Sami.GetStylesFromSubtitle(_subtitle);
                    }
                    else
                    {
                        styles = Sami.GetStylesFromHeader(_subtitle.Header);
                    }
                }
                else if (format.Name == "Nuendo")
                {
                    styles = GetNuendoStyles();
                }

                if (styles.Count > 0)
                {
                    foreach (var p in _subtitle.Paragraphs)
                    {
                        if (string.IsNullOrEmpty(p.Extra))
                        {
                            p.Extra = styles[0];
                        }
                    }
                }

                if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Class);
                }
                else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText))
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.StyleLanguage);
                }
                else if (format.Name == "Nuendo")
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Character);
                }
                else
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Style);
                }

                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            }

            ShowHideTextBasedFeatures(format);

            UpdateNetflixGlyphCheckToolsVisibility();
        }

        private static List<string> GetNuendoStyles()
        {
            if (!string.IsNullOrEmpty(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile) && File.Exists(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile))
            {
                return NuendoProperties.LoadCharacters(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile);
            }

            return new List<string>();
        }

        private void ComboBoxSubtitleFormatsEnter(object sender, EventArgs e)
        {
            SubtitleFormat format = GetCurrentSubtitleFormat();
            if (format != null)
            {
                _oldSubtitleFormat = format;
            }
        }

        private SubtitleFormat GetCurrentSubtitleFormat()
        {
            return Utilities.GetSubtitleFormatByFriendlyName(comboBoxSubtitleFormats.SelectedItem.ToString());
        }

        private void ShowSource()
        {
            if (_subtitle != null && _subtitle.Paragraphs.Count > 0)
            {
                SubtitleFormat format = GetCurrentSubtitleFormat();
                if (format != null)
                {
                    textBoxSource.TextChanged -= TextBoxSourceTextChanged;
                    textBoxSource.Text = GetSaveSubtitle(_subtitle).ToText(format);
                    textBoxSource.TextChanged += TextBoxSourceTextChanged;
                    return;
                }
            }

            textBoxSource.TextChanged -= TextBoxSourceTextChanged;
            textBoxSource.Text = string.Empty;
            textBoxSource.TextChanged += TextBoxSourceTextChanged;
        }

        private void SettingsToolStripMenuItemClick(object sender, EventArgs e)
        {
            ShowSettings();
        }

        private void ShowSettings()
        {
            string oldVideoPlayer = Configuration.Settings.General.VideoPlayer;
            string oldMpvVideoOutput = Configuration.Settings.General.MpvVideoOutput;
            string oldListViewLineSeparatorString = Configuration.Settings.General.ListViewLineSeparatorString;
            var oldCpsWhiteSpaceSetting = Configuration.Settings.General.CharactersPerSecondsIgnoreWhiteSpace;
            string oldSubtitleFontSettings = Configuration.Settings.General.SubtitleFontName +
                                             Configuration.Settings.General.SubtitleFontBold +
                                             Configuration.Settings.General.CenterSubtitleInTextBox +
                                             Configuration.Settings.General.SubtitleFontSize +
                                             Configuration.Settings.General.SubtitleFontColor.ToArgb() +
                                             Configuration.Settings.General.SubtitleBackgroundColor.ToArgb() +
                                             Configuration.Settings.General.SubtitleListViewFontBold.ToString() +
                                             Configuration.Settings.General.SubtitleListViewFontSize;

            ;
            bool oldUseTimeFormatHHMMSSFF = Configuration.Settings.General.UseTimeFormatHHMMSSFF;

            string oldSyntaxColoring = Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall.ToString() +
                                       Configuration.Settings.Tools.ListViewSyntaxColorDurationBig +
                                       Configuration.Settings.Tools.ListViewSyntaxColorLongLines +
                                       Configuration.Settings.Tools.ListViewSyntaxColorOverlap +
                                       Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines +
                                       Configuration.Settings.General.MaxNumberOfLines +
                                       Configuration.Settings.Tools.ListViewSyntaxErrorColor.ToArgb();

            var oldAllowEditOfOriginalSubtitle = Configuration.Settings.General.AllowEditOfOriginalSubtitle;
            var oldShowColumnEndTime = Configuration.Settings.Tools.ListViewShowColumnEndTime;
            var oldShowcolumnDuration = Configuration.Settings.Tools.ListViewShowColumnDuration;
            var oldShowColumnCharsPerSec = Configuration.Settings.Tools.ListViewShowColumnCharsPerSec;
            var oldShowWordsMinColumn = Configuration.Settings.Tools.ListViewShowColumnWordsPerMin;
            using (var settings = new Settings())
            {
                settings.Initialize(Icon, toolStripButtonFileNew.Image, toolStripButtonFileOpen.Image, toolStripButtonSave.Image, toolStripButtonSaveAs.Image, toolStripButtonFind.Image,
                    toolStripButtonReplace.Image, toolStripButtonFixCommonErrors.Image, toolStripButtonRemoveTextForHi.Image, toolStripButtonVisualSync.Image,
                    toolStripButtonSpellCheck.Image, toolStripButtonNetflixQualityCheck.Image, toolStripButtonSettings.Image, toolStripButtonHelp.Image);

                if (settings.ShowDialog(this) == DialogResult.Cancel)
                {
                    return; // settings update canceled
                }
            }

            try
            { // can have some problems with fonts...
                UiUtil.InitializeSubtitleFont(textBoxSource);
                UiUtil.InitializeSubtitleFont(textBoxListViewText);
                UiUtil.InitializeSubtitleFont(textBoxListViewTextAlternate);
                UiUtil.InitializeSubtitleFont(SubtitleListview1);
                InitializeToolbar();
            }
            catch (Exception exception)
            {
                System.Diagnostics.Debug.WriteLine(exception.Message + Environment.NewLine + exception.StackTrace);
            }

            UpdateRecentFilesUI();
            buttonCustomUrl1.Text = Configuration.Settings.VideoControls.CustomSearchText1;
            buttonCustomUrl1.Visible = Configuration.Settings.VideoControls.CustomSearchUrl1.Length > 1;
            buttonCustomUrl2.Text = Configuration.Settings.VideoControls.CustomSearchText2;
            buttonCustomUrl2.Visible = Configuration.Settings.VideoControls.CustomSearchUrl2.Length > 1;

            SetAudioVisualizerSettings();

            string newSyntaxColoring = Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall.ToString() +
                                       Configuration.Settings.Tools.ListViewSyntaxColorDurationBig +
                                       Configuration.Settings.Tools.ListViewSyntaxColorLongLines +
                                       Configuration.Settings.Tools.ListViewSyntaxColorOverlap +
                                       Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines +
                                       Configuration.Settings.General.MaxNumberOfLines +
                                       Configuration.Settings.Tools.ListViewSyntaxErrorColor.ToArgb();

            if (oldSubtitleFontSettings != Configuration.Settings.General.SubtitleFontName +
                Configuration.Settings.General.SubtitleFontBold +
                Configuration.Settings.General.CenterSubtitleInTextBox +
                Configuration.Settings.General.SubtitleFontSize +
                Configuration.Settings.General.SubtitleFontColor.ToArgb() +
                Configuration.Settings.General.SubtitleBackgroundColor.ToArgb() +
                Configuration.Settings.General.SubtitleListViewFontBold.ToString() +
                Configuration.Settings.General.SubtitleListViewFontSize ||
                oldSyntaxColoring != newSyntaxColoring ||
                oldShowColumnEndTime != Configuration.Settings.Tools.ListViewShowColumnEndTime ||
                oldShowcolumnDuration != Configuration.Settings.Tools.ListViewShowColumnDuration ||
                oldShowColumnCharsPerSec != Configuration.Settings.Tools.ListViewShowColumnCharsPerSec ||
                oldShowWordsMinColumn != Configuration.Settings.Tools.ListViewShowColumnWordsPerMin)
            {
                if (Configuration.Settings.Tools.ListViewShowColumnEndTime)
                {
                    SubtitleListview1.ShowEndColumn(Configuration.Settings.Language.General.EndTime);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.End);
                }

                if (Configuration.Settings.Tools.ListViewShowColumnDuration)
                {
                    SubtitleListview1.ShowDurationColumn(Configuration.Settings.Language.General.Duration);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Duration);
                }

                if (Configuration.Settings.Tools.ListViewShowColumnCharsPerSec)
                {
                    SubtitleListview1.ShowCharsSecColumn(Configuration.Settings.Language.General.CharsPerSec);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.CharactersPerSeconds);
                }

                if (Configuration.Settings.Tools.ListViewShowColumnWordsPerMin)
                {
                    SubtitleListview1.ShowWordsMinColumn(Configuration.Settings.Language.General.WordsPerMin);
                }
                else
                {
                    SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.WordsPerMinute);
                }

                try
                { // can have some problems with fonts...
                    UiUtil.InitializeSubtitleFont(textBoxListViewText);
                    UiUtil.InitializeSubtitleFont(textBoxListViewTextAlternate);
                    UiUtil.InitializeSubtitleFont(textBoxSource);
                    SubtitleListview1.SubtitleFontName = Configuration.Settings.General.SubtitleFontName;
                    SubtitleListview1.SubtitleFontBold = Configuration.Settings.General.SubtitleListViewFontBold;
                    SubtitleListview1.SubtitleFontSize = Configuration.Settings.General.SubtitleListViewFontSize;
                }
                catch (Exception exception)
                {
                    System.Diagnostics.Debug.WriteLine(exception.Message + Environment.NewLine + exception.StackTrace);
                }

                SubtitleListview1.ForeColor = Configuration.Settings.General.SubtitleFontColor;
                SubtitleListview1.BackColor = Configuration.Settings.General.SubtitleBackgroundColor;
                if (Configuration.Settings.General.CenterSubtitleInTextBox)
                {
                    textBoxListViewText.TextAlign = HorizontalAlignment.Center;
                    textBoxListViewTextAlternate.TextAlign = HorizontalAlignment.Center;
                }
                else if (textBoxListViewText.TextAlign == HorizontalAlignment.Center)
                {
                    textBoxListViewText.TextAlign = HorizontalAlignment.Left;
                    textBoxListViewTextAlternate.TextAlign = HorizontalAlignment.Left;
                }

                SaveSubtitleListviewIndices();
                UiUtil.InitializeSubtitleFont(SubtitleListview1);
                SubtitleListview1.AutoSizeAllColumns(this);
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                RestoreSubtitleListviewIndices();
                mediaPlayer.SetSubtitleFont();
                ShowSubtitle();
            }

            mediaPlayer.SetSubtitleFont();
            mediaPlayer.ShowStopButton = Configuration.Settings.General.VideoPlayerShowStopButton;
            mediaPlayer.ShowMuteButton = Configuration.Settings.General.VideoPlayerShowMuteButton;
            mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;

            if (oldListViewLineSeparatorString != Configuration.Settings.General.ListViewLineSeparatorString ||
                oldCpsWhiteSpaceSetting != Configuration.Settings.General.CharactersPerSecondsIgnoreWhiteSpace)
            {
                SubtitleListview1.InitializeLanguage(_languageGeneral, Configuration.Settings);
                SaveSubtitleListviewIndices();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                RestoreSubtitleListviewIndices();
            }

            if (oldAllowEditOfOriginalSubtitle != Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    AddAlternate();
                }
                else
                {
                    RemoveAlternate(false, false);
                }

                Main_ResizeEnd(null, null);
            }

            SetLanguage(Configuration.Settings.General.Language);

            textBoxListViewTextAlternate.Enabled = Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleListViewIndex >= 0;

            SetShortcuts();

            CheckAndGetNewlyDownloadedMpvDlls("Please restart to use new libmpv dll");

            if (!string.IsNullOrEmpty(_videoFileName) && oldVideoPlayer != Configuration.Settings.General.VideoPlayer && mediaPlayer.VideoPlayer != null ||
                (oldMpvVideoOutput != Configuration.Settings.General.MpvVideoOutput && Configuration.Settings.General.VideoPlayer.Equals("MPV", StringComparison.OrdinalIgnoreCase)))
            {
                string vfn = _videoFileName;
                CloseVideoToolStripMenuItemClick(null, null);
                OpenVideo(vfn);
            }

            StartOrStopAutoBackup();

            SetTitle();
            if (Configuration.Settings.VideoControls.GenerateSpectrogram)
            {
                audioVisualizer.WaveformNotLoadedText = Configuration.Settings.Language.Waveform.ClickToAddWaveformAndSpectrogram;
                showhideWaveformToolStripMenuItem.Text = _language.Menu.Video.ShowHideWaveformAndSpectrogram;
            }
            else
            {
                audioVisualizer.WaveformNotLoadedText = Configuration.Settings.Language.Waveform.ClickToAddWaveform;
                showhideWaveformToolStripMenuItem.Text = _language.Menu.Video.ShowHideWaveform;
            }

            audioVisualizer.Invalidate();

            if (oldUseTimeFormatHHMMSSFF != Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                RefreshTimeCodeMode();
            }

            SubtitleListview1.SyntaxColorAllLines(_subtitle);
            mediaPlayer.LastParagraph = null;
            Application.DoEvents();
            UiUtil.ShowSubtitle(_subtitle, mediaPlayer);
            mediaPlayer.VideoPlayerContainerResize(null, null);
            ShowLineInformationListView();
            ShowSourceLineNumber();
        }

        private void SetAudioVisualizerSettings()
        {
            audioVisualizer.ShowGridLines = Configuration.Settings.VideoControls.WaveformDrawGrid;
            audioVisualizer.GridColor = Configuration.Settings.VideoControls.WaveformGridColor;
            audioVisualizer.SelectedColor = Configuration.Settings.VideoControls.WaveformSelectedColor;
            audioVisualizer.Color = Configuration.Settings.VideoControls.WaveformColor;
            audioVisualizer.BackgroundColor = Configuration.Settings.VideoControls.WaveformBackgroundColor;
            audioVisualizer.TextColor = Configuration.Settings.VideoControls.WaveformTextColor;
            audioVisualizer.CursorColor = Configuration.Settings.VideoControls.WaveformCursorColor;
            audioVisualizer.TextSize = Configuration.Settings.VideoControls.WaveformTextSize;
            audioVisualizer.TextBold = Configuration.Settings.VideoControls.WaveformTextBold;
            audioVisualizer.MouseWheelScrollUpIsForward = Configuration.Settings.VideoControls.WaveformMouseWheelScrollUpIsForward;
            audioVisualizer.AllowOverlap = Configuration.Settings.VideoControls.WaveformAllowOverlap;
            audioVisualizer.ClosenessForBorderSelection = Configuration.Settings.VideoControls.WaveformBorderHitMs;
        }

        private void CheckAndGetNewlyDownloadedMpvDlls(string message)
        {
            if (Configuration.Settings.General.VideoPlayer != "MPV")
            {
                return;
            }

            var newMpvFiles = Directory.GetFiles(Configuration.DataDirectory, "*.dll.new-mpv");
            if (newMpvFiles.Length <= 0)
            {
                return;
            }

            if (mediaPlayer != null && mediaPlayer.VideoPlayer != null)
            {
                var mpv = mediaPlayer.VideoPlayer as LibMpvDynamic;
                mediaPlayer.VideoPlayer = null;
                mpv?.HardDispose();
            }

            foreach (string newDllFileName in newMpvFiles)
            {
                if (File.Exists(newDllFileName)) // dll was in use, so unload + copy new dll + load
                {
                    try
                    {
                        string targetFileName = newDllFileName.Replace(".dll.new-mpv", ".dll");
                        File.Copy(newDllFileName, targetFileName, true);
                        File.Delete(newDllFileName);
                        ShowStatus("libmpv updated");
                    }
                    catch
                    {
                        // ignore
                    }
                }
            }

            if (!string.IsNullOrEmpty(message))
            {
                MessageBox.Show(message);
            }
        }

        private void AddAlternate()
        {
            buttonUnBreak.Visible = false;
            buttonAutoBreak.Visible = false;
            buttonSplitLine.Visible = false;
            textBoxListViewTextAlternate.Visible = true;
            labelAlternateText.Visible = true;
            labelAlternateCharactersPerSecond.Visible = true;
            labelTextAlternateLineLengths.Visible = true;
            labelAlternateSingleLine.Visible = true;
            labelAlternateSingleLinePixels.Visible = true;
            labelTextAlternateLineTotal.Visible = true;
        }

        private int ShowSubtitle()
        {
            if (_splitDualSami)
            {
                return UiUtil.ShowSubtitle(_subtitle, _subtitleAlternate, mediaPlayer);
            }

            if (SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                return UiUtil.ShowSubtitle(_subtitleAlternate, mediaPlayer);
            }

            return UiUtil.ShowSubtitle(_subtitle, mediaPlayer);
        }

        private static void TryLoadIcon(ToolStripButton button, string iconName)
        {
            string fullPath = Configuration.IconsDirectory + iconName + ".png";
            if (File.Exists(fullPath))
            {
                button.Image = new Bitmap(fullPath);
            }
        }

        private void InitializeToolbar()
        {
            var gs = Configuration.Settings.General;

            TryLoadIcon(toolStripButtonFileNew, "New");
            TryLoadIcon(toolStripButtonFileOpen, "Open");
            TryLoadIcon(toolStripButtonSave, "Save");
            TryLoadIcon(toolStripButtonSaveAs, "SaveAs");
            TryLoadIcon(toolStripButtonFind, "Find");
            TryLoadIcon(toolStripButtonReplace, "Replace");
            TryLoadIcon(toolStripButtonFixCommonErrors, "FixCommonErrors");
            TryLoadIcon(toolStripButtonRemoveTextForHi, "RemoveTextForHi");
            TryLoadIcon(toolStripButtonVisualSync, "VisualSync");
            TryLoadIcon(toolStripButtonSpellCheck, "SpellCheck");
            TryLoadIcon(toolStripButtonNetflixQualityCheck, "NetflixGlyphCheck");
            TryLoadIcon(toolStripButtonSettings, "Settings");
            TryLoadIcon(toolStripButtonHelp, "Help");

            TryLoadIcon(toolStripButtonToggleWaveform, "WaveformToggle");
            TryLoadIcon(toolStripButtonToggleVideo, "VideoToggle");

            toolStripButtonFileNew.Visible = gs.ShowToolbarNew;
            toolStripButtonFileOpen.Visible = gs.ShowToolbarOpen;
            toolStripButtonSave.Visible = gs.ShowToolbarSave;
            toolStripButtonSaveAs.Visible = gs.ShowToolbarSaveAs;
            toolStripButtonFind.Visible = gs.ShowToolbarFind;
            toolStripButtonReplace.Visible = gs.ShowToolbarReplace;
            toolStripButtonFixCommonErrors.Visible = gs.ShowToolbarFixCommonErrors;
            toolStripButtonRemoveTextForHi.Visible = gs.ShowToolbarRemoveTextForHi;

            toolStripButtonVisualSync.Visible = gs.ShowToolbarVisualSync;
            toolStripButtonSpellCheck.Visible = gs.ShowToolbarSpellCheck;
            toolStripButtonNetflixQualityCheck.Visible = gs.ShowToolbarNetflixGlyphCheck;
            toolStripButtonSettings.Visible = gs.ShowToolbarSettings;
            toolStripButtonHelp.Visible = gs.ShowToolbarHelp;

            toolStripSeparatorFrameRate.Visible = gs.ShowFrameRate;
            toolStripLabelFrameRate.Visible = gs.ShowFrameRate;
            toolStripComboBoxFrameRate.Visible = gs.ShowFrameRate;
            toolStripButtonGetFrameRate.Visible = gs.ShowFrameRate;

            toolStripSeparatorFindReplace.Visible = gs.ShowToolbarFind || gs.ShowToolbarReplace;
            toolStripSeparatorFixSyncSpell.Visible = gs.ShowToolbarFixCommonErrors || gs.ShowToolbarVisualSync || gs.ShowToolbarSpellCheck || gs.ShowToolbarSettings;
            toolStripSeparatorHelp.Visible = gs.ShowToolbarHelp;

            toolStrip1.Visible = gs.ShowToolbarNew || gs.ShowToolbarOpen || gs.ShowToolbarSave || gs.ShowToolbarSaveAs || gs.ShowToolbarFind || gs.ShowToolbarReplace ||
                                 gs.ShowToolbarFixCommonErrors || gs.ShowToolbarVisualSync || gs.ShowToolbarSpellCheck || gs.ShowToolbarNetflixGlyphCheck ||
                                 gs.ShowToolbarSettings || gs.ShowToolbarHelp;

            UpdateNetflixGlyphCheckToolsVisibility();
        }

        private void ToolStripButtonFileNewClick(object sender, EventArgs e)
        {
            _lastDoNotPrompt = -1;
            ReloadFromSourceView();
            FileNew();
            ShowHideTextBasedFeatures(GetCurrentSubtitleFormat());
        }

        private void ToolStripButtonFileOpenClick(object sender, EventArgs e)
        {
            toolStripButtonFileOpen.Enabled = false;
            ReloadFromSourceView();
            OpenNewFile();
            toolStripButtonFileOpen.Enabled = true;
        }

        private void ToolStripButtonSaveClick(object sender, EventArgs e)
        {
            var useOnly0AForNewLine = ModifierKeys == (Keys.Control | Keys.Shift);
            SaveAll(useOnly0AForNewLine);
        }

        private void SaveAll(bool useOnly0AForNewLine = false)
        {
            if (!IsSubtitleLoaded)
            {
                return;
            }

            ReloadFromSourceView();
            _disableShowStatus = true;
            _saveAsCalled = false;
            var result = SaveSubtitle(GetCurrentSubtitleFormat(), useOnly0AForNewLine);
            if (result != DialogResult.OK)
            {
                _disableShowStatus = false;
                return;
            }

            if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate.Paragraphs.Count > 0)
            {
                SaveOriginalToolStripMenuItemClick(null, null);
                _disableShowStatus = false;
                ShowStatus(string.Format(_language.SavedSubtitleX, Path.GetFileName(_fileName)) + " + " +
                           string.Format(_language.SavedOriginalSubtitleX, Path.GetFileName(_subtitleAlternateFileName)));
                return;
            }

            _disableShowStatus = false;
            ShowStatus(string.Format(_language.SavedSubtitleX, Path.GetFileName(_fileName)));

            if (Configuration.Settings.General.ShowNegativeDurationInfoOnSave)
            {
                var sb = new StringBuilder();
                for (var index = 0; index < _subtitle.Paragraphs.Count; index++)
                {
                    var p = _subtitle.Paragraphs[index];
                    if (p.Duration.TotalMilliseconds < 0)
                    {
                        if (sb.Length < 20)
                        {
                            if (sb.Length > 0)
                            {
                                sb.Append(", ");
                            }
                            sb.Append((index + 1).ToString(CultureInfo.InvariantCulture));
                        }
                        else
                        {
                            sb.Append("...");
                            break;
                        }
                    }
                }

                if (sb.Length > 0)
                {
                    using (var form = new DialogDoNotShowAgain(Title, string.Format(_language.SubtitleContainsNegativeDurationsX, sb.ToString())))
                    {
                        form.ShowDialog(this);
                        Configuration.Settings.General.ShowNegativeDurationInfoOnSave = !form.DoNoDisplayAgain;
                    }
                }
            }
        }

        private void ToolStripButtonSaveAsClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            FileSaveAs(true);
        }

        private void ToolStripButtonFindClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Find();
        }

        private void ToolStripButtonVisualSyncClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            ShowVisualSync(false);
        }

        private void ToolStripButtonSettingsClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            ShowSettings();
        }

        private void TextBoxSourceClick(object sender, EventArgs e)
        {
            ShowSourceLineNumber();
        }

        private void TextBoxSourceKeyDown(object sender, KeyEventArgs e)
        {
            ShowSourceLineNumber();
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.A)
            {
                textBoxSource.SelectAll();
                e.SuppressKeyPress = true;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                textBoxSource.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
        }

        private void textBoxSource_KeyUp(object sender, KeyEventArgs e)
        {
            ShowSourceLineNumber();
        }

        private void TextBoxSourceTextChanged(object sender, EventArgs e)
        {
            ShowSourceLineNumber();
            _sourceViewChange = true;
            labelStatus.Text = string.Empty;
        }

        private bool ShowProfileInStatusBar => Configuration.Settings.General.CurrentProfile != "Default";

        private void ShowSourceLineNumber()
        {
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                var profile = Configuration.Settings.General.CurrentProfile + "   ";
                if (!ShowProfileInStatusBar)
                {
                    profile = string.Empty;
                }

                toolStripSelected.Text = profile + string.Format(_language.LineNumberX, textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart) + 1);
            }
        }

        private void ButtonGetFrameRateClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _language.OpenVideoFile;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = Utilities.GetVideoFileFilter(false);
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                _videoFileName = openFileDialog1.FileName;
                var info = UiUtil.GetVideoInfo(openFileDialog1.FileName);
                if (info != null && info.Success)
                {
                    string oldFrameRate = toolStripComboBoxFrameRate.Text;
                    toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", info.FramesPerSecond);

                    if (oldFrameRate != toolStripComboBoxFrameRate.Text)
                    {
                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        SubtitleFormat format = Utilities.GetSubtitleFormatByFriendlyName(comboBoxSubtitleFormats.SelectedItem.ToString());
                    }
                }
            }
        }

        private void FindToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Find();
        }

        private void Find()
        {
            string selectedText;
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                selectedText = textBoxSource.SelectedText;
            }
            else
            {
                if (textBoxListViewTextAlternate.Focused)
                {
                    selectedText = textBoxListViewTextAlternate.SelectedText;
                }
                else
                {
                    selectedText = textBoxListViewText.SelectedText;
                }
            }

            if (selectedText.Length == 0 && _findHelper != null)
            {
                if (_clearLastFind)
                {
                    _clearLastFind = false;
                    _findHelper.FindReplaceType.FindType = _clearLastFindType;
                    selectedText = _clearLastFindText;
                }
                else
                {
                    selectedText = _findHelper.FindText;
                }
            }

            using (var findDialog = new FindDialog(_subtitle))
            {
                findDialog.SetIcon(toolStripButtonFind.Image as Bitmap);
                findDialog.Initialize(selectedText, _findHelper);
                if (findDialog.ShowDialog(this) != DialogResult.OK)
                {
                    if (_findHelper != null)
                    {
                        _findHelper.InProgress = false;
                    }

                    return;
                }

                _findHelper = findDialog.GetFindDialogHelper(_subtitleListViewIndex);
                _findHelper.InProgress = true;
                if (!string.IsNullOrWhiteSpace(_findHelper.FindText))
                {
                    if (Configuration.Settings.Tools.FindHistory.Count == 0 || Configuration.Settings.Tools.FindHistory[0] != _findHelper.FindText)
                    {
                        Configuration.Settings.Tools.FindHistory.Insert(0, _findHelper.FindText);
                    }
                }

                ShowStatus(string.Format(_language.SearchingForXFromLineY, _findHelper.FindText, _subtitleListViewIndex + 1));
                if (tabControlSubtitle.SelectedIndex == TabControlListView)
                {
                    var tb = GetFindRepaceTextBox();
                    int startPos = tb.SelectedText.Length > 0 ? tb.SelectionStart + 1 : tb.SelectionStart;
                    bool found = _findHelper.Find(_subtitle, _subtitleAlternate, _subtitleListViewIndex, startPos);
                    tb = GetFindRepaceTextBox();
                    //if we fail to find the text, we might want to start searching from the top of the file.
                    if (!found && _findHelper.StartLineIndex >= 1)
                    {
                        if (MessageBox.Show(_language.FindContinue, _language.FindContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                        {
                            found = _findHelper.Find(_subtitle, _subtitleAlternate, -1);
                        }
                    }

                    if (found)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(_findHelper.SelectedIndex, true);
                        tb.Focus();
                        tb.SelectionStart = _findHelper.SelectedPosition;
                        tb.SelectionLength = _findHelper.FindTextLength;
                        ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedIndex + 1));
                        _findHelper.SelectedPosition++;
                    }
                    else
                    {
                        ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                    }
                }
                else if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    if (_findHelper.Find(textBoxSource, textBoxSource.SelectionStart))
                    {
                        textBoxSource.SelectionStart = _findHelper.SelectedIndex;
                        textBoxSource.SelectionLength = _findHelper.FindTextLength;
                        textBoxSource.ScrollToCaret();
                        ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart)));
                    }
                    else
                    {
                        ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                    }
                }
            }

            if (_findHelper != null)
            {
                _findHelper.InProgress = false;
            }
        }

        private void FindNextToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            FindNext();
        }

        private TextBox GetFindRepaceTextBox()
        {
            return _findHelper.MatchInOriginal ? textBoxListViewTextAlternate : textBoxListViewText;
        }

        private void FindNext()
        {
            if (_findHelper != null)
            {
                _findHelper.InProgress = true;
                TextBox tb = GetFindRepaceTextBox();
                if (tabControlSubtitle.SelectedIndex == TabControlListView)
                {
                    int selectedIndex = -1;
                    if (SubtitleListview1.SelectedItems.Count > 0)
                    {
                        selectedIndex = SubtitleListview1.SelectedItems[0].Index;
                    }

                    int textBoxStart = tb.SelectionStart;
                    if (_findHelper.SelectedPosition - 1 == tb.SelectionStart && tb.SelectionLength > 0 ||
                        _findHelper.FindText.Equals(tb.SelectedText, StringComparison.OrdinalIgnoreCase))
                    {
                        textBoxStart = tb.SelectionStart + 1;
                    }

                    if (_findHelper.FindNext(_subtitle, _subtitleAlternate, selectedIndex, textBoxStart, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                    {
                        tb = GetFindRepaceTextBox();
                        SubtitleListview1.SelectIndexAndEnsureVisible(_findHelper.SelectedIndex, true);
                        ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedIndex + 1));
                        tb.Focus();
                        tb.SelectionStart = _findHelper.SelectedPosition;
                        tb.SelectionLength = _findHelper.FindTextLength;
                        _findHelper.SelectedPosition++;
                    }
                    else
                    {
                        if (_findHelper.StartLineIndex >= 1)
                        {
                            if (MessageBox.Show(_language.FindContinue, _language.FindContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                            {
                                _findHelper.StartLineIndex = 0;
                                if (_findHelper.Find(_subtitle, _subtitleAlternate, 0))
                                {
                                    SubtitleListview1.SelectIndexAndEnsureVisible(_findHelper.SelectedIndex, true);
                                    tb.Focus();
                                    tb.SelectionStart = _findHelper.SelectedPosition;
                                    tb.SelectionLength = _findHelper.FindTextLength;
                                    ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedIndex + 1));
                                    _findHelper.SelectedPosition++;
                                    return;
                                }
                            }
                        }

                        ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                    }
                }
                else if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    if (_findHelper.FindNext(textBoxSource.Text, textBoxSource.SelectionStart))
                    {
                        textBoxSource.SelectionStart = _findHelper.SelectedIndex;
                        textBoxSource.SelectionLength = _findHelper.FindTextLength;
                        textBoxSource.ScrollToCaret();
                        ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart)));
                    }
                    else
                    {
                        ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                    }
                }
            }
            else
            {
                Find();
            }

            if (_findHelper != null)
            {
                _findHelper.InProgress = false;
            }
        }

        private void FindPrevious()
        {
            if (_findHelper == null)
            {
                return;
            }

            _findHelper.InProgress = true;
            TextBox tb = GetFindRepaceTextBox();
            if (tabControlSubtitle.SelectedIndex == TabControlListView)
            {
                int selectedIndex = -1;
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    selectedIndex = SubtitleListview1.SelectedItems[0].Index;
                }

                int textBoxStart = tb.SelectionStart;
                if (_findHelper.SelectedPosition - 1 == tb.SelectionStart && tb.SelectionLength > 0 ||
                    _findHelper.FindText.Equals(tb.SelectedText, StringComparison.OrdinalIgnoreCase))
                {
                    textBoxStart = tb.SelectionStart - 1;
                }

                if (_findHelper.FindPrevious(_subtitle, _subtitleAlternate, selectedIndex, textBoxStart, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                {
                    tb = GetFindRepaceTextBox();
                    SubtitleListview1.SelectIndexAndEnsureVisible(_findHelper.SelectedIndex, true);
                    ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedIndex + 1));
                    tb.Focus();
                    tb.SelectionStart = _findHelper.SelectedPosition;
                    tb.SelectionLength = _findHelper.FindTextLength;
                    _findHelper.SelectedPosition--;
                }
                else
                {
                    ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                }
            }
            else if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                if (_findHelper.FindPrevious(textBoxSource.Text, textBoxSource.SelectionStart))
                {
                    textBoxSource.SelectionStart = _findHelper.SelectedIndex;
                    textBoxSource.SelectionLength = _findHelper.FindTextLength;
                    textBoxSource.ScrollToCaret();
                    ShowStatus(string.Format(_language.XFoundAtLineNumberY, _findHelper.FindText, textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart)));
                }
                else
                {
                    ShowStatus(string.Format(_language.XNotFound, _findHelper.FindText));
                }
            }

            _findHelper.InProgress = false;
        }

        private void ToolStripButtonReplaceClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Replace(null);
        }

        private void ReplaceToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Replace(null);
        }

        private void ReplaceSourceView(ReplaceDialog replaceDialog)
        {
            bool isFirst = true;
            string selectedText = textBoxSource.SelectedText;
            if (selectedText.Length == 0 && _findHelper != null)
            {
                selectedText = _findHelper.FindText;
            }

            if (replaceDialog == null)
            {
                replaceDialog = new ReplaceDialog();
                replaceDialog.SetIcon(toolStripButtonReplace.Image as Bitmap);
                _findHelper = _findHelper ?? replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
            }
            else
            {
                isFirst = false;
            }

            replaceDialog.Initialize(selectedText, _findHelper);
            if (replaceDialog.ShowDialog(this) == DialogResult.OK)
            {
                _findHelper = replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
                ShowStatus(string.Format(_language.SearchingForXFromLineY, _findHelper.FindText, _subtitleListViewIndex + 1));
                if (replaceDialog.ReplaceAll)
                {
                    SourceListReplaceAll(replaceDialog, _findHelper);
                    return;
                }

                int replaceCount = 0;
                var searchStringFound = false;
                int start = textBoxSource.SelectionStart;
                if (isFirst)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeReplace, _findHelper.FindText));
                    _makeHistoryPaused = true;
                    if (start >= 0)
                    {
                        start--;
                    }
                }
                else
                {
                    if (textBoxSource.SelectionLength > 0 && start > 0 && !replaceDialog.FindOnly)
                    {
                        start--;
                    }
                }

                if (_findHelper.FindNext(textBoxSource.Text, start))
                {
                    textBoxSource.SelectionStart = _findHelper.SelectedIndex;
                    textBoxSource.SelectionLength = _findHelper.FindTextLength;
                    if (!replaceDialog.FindOnly)
                    {
                        textBoxSource.SelectedText = _findHelper.ReplaceText;
                    }

                    textBoxSource.ScrollToCaret();

                    replaceCount++;
                    searchStringFound = true;

                    if (!replaceDialog.FindOnly)
                    {
                        if (_findHelper.FindNext(textBoxSource.Text, start))
                        {
                            textBoxSource.SelectionStart = _findHelper.SelectedIndex;
                            textBoxSource.SelectionLength = _findHelper.FindTextLength;
                            textBoxSource.ScrollToCaret();
                        }

                        Replace(replaceDialog);
                        return;
                    }
                }

                if (replaceDialog.FindOnly)
                {
                    if (searchStringFound)
                    {
                        ShowStatus(string.Format(_language.MatchFoundX, _findHelper.FindText));
                    }
                    else
                    {
                        ShowStatus(string.Format(_language.NoMatchFoundX, _findHelper.FindText));
                    }

                    Replace(replaceDialog);
                    return;
                }

                ReloadFromSourceView();
                if (replaceCount == 0)
                {
                    ShowStatus(_language.FoundNothingToReplace);
                }
                else
                {
                    ShowStatus(string.Format(_language.ReplaceCountX, replaceCount));
                }
            }

            if (_makeHistoryPaused)
            {
                RestartHistory();
            }

            replaceDialog.Dispose();
        }

        private void SourceListReplaceAll(ReplaceDialog replaceDialog, FindReplaceDialogHelper findHelper)
        {
            if (_findHelper.FindReplaceType.FindType == FindType.RegEx)
            {
                SourceListReplaceAllRegEx(replaceDialog);
                return;
            }

            int replaceCount = 0;
            bool searchStringFound = true;
            int start = textBoxSource.SelectionStart;
            bool isFirst = true;
            string text = textBoxSource.Text;
            while (searchStringFound)
            {
                searchStringFound = false;
                if (isFirst)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeReplace, _findHelper.FindText));
                    isFirst = false;
                    _makeHistoryPaused = true;
                    if (start >= 0)
                    {
                        start--;
                    }
                }
                else
                {
                    start--;
                }

                if (_findHelper.FindNext(text, start))
                {
                    text = text.Remove(findHelper.SelectedIndex, findHelper.FindTextLength).Insert(findHelper.SelectedIndex, findHelper.ReplaceText);
                    start = findHelper.SelectedIndex + findHelper.FindTextLength;
                    replaceCount++;
                    searchStringFound = true;
                }
            }

            textBoxSource.Text = text;
            ReloadFromSourceView();
            if (replaceCount == 0)
            {
                ShowStatus(_language.FoundNothingToReplace);
            }
            else
            {
                ShowStatus(string.Format(_language.ReplaceCountX, replaceCount));
            }

            if (_makeHistoryPaused)
            {
                RestartHistory();
            }

            replaceDialog.Dispose();
        }

        private void SourceListReplaceAllRegEx(ReplaceDialog replaceDialog)
        {
            var start = textBoxSource.SelectionStart;
            var s = textBoxSource.Text;
            var r = new Regex(_findHelper.FindText, RegexOptions.Multiline);
            var matches = r.Matches(s, start);

            if (matches.Count > 0)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeReplace, _findHelper.FindText));
            }

            var result = RegexUtils.ReplaceNewLineSafe(r, s, _findHelper.ReplaceText, int.MaxValue, start);

            // update UI
            textBoxSource.Text = result;
            ShowStatus(matches.Count == 0 ? _language.FoundNothingToReplace : string.Format(_language.ReplaceCountX, matches.Count));

            // replace again from beginning
            if (start > 1)
            {
                string msgText = _language.ReplaceContinueNotFound;
                if (matches.Count > 0)
                {
                    msgText = string.Format(_language.ReplaceXContinue, matches.Count);
                }

                if (MessageBox.Show(msgText, _language.ReplaceContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                {
                    s = result.Substring(0, start - 1);
                    var rest = result.Remove(0, start - 1);
                    if (s.EndsWith('\r') && rest.StartsWith('\n'))
                    { // don't split "\r\n"
                        s = s.Substring(0, s.Length - 1);
                        rest = '\r' + rest;
                    }

                    matches = r.Matches(s);
                    result = RegexUtils.ReplaceNewLineSafe(r, s, _findHelper.ReplaceText);

                    // update UI
                    textBoxSource.Text = result + rest;
                    ShowStatus(matches.Count == 0 ? _language.FoundNothingToReplace : string.Format(_language.ReplaceCountX, matches.Count));
                }
            }

            replaceDialog.Dispose();
            ReloadFromSourceView();
        }

        private void ReplaceListView(ReplaceDialog replaceDialog)
        {
            SaveSubtitleListviewIndices();
            int firstIndex = FirstSelectedIndex;
            bool isFirst = true;
            string selectedText;
            if (textBoxListViewTextAlternate.Focused)
            {
                selectedText = textBoxListViewTextAlternate.SelectedText;
            }
            else
            {
                selectedText = textBoxListViewText.SelectedText;
            }

            if (selectedText.Length == 0 && _findHelper != null)
            {
                selectedText = _findHelper.FindText;
            }

            if (replaceDialog == null)
            {
                replaceDialog = new ReplaceDialog();
                replaceDialog.SetIcon(toolStripButtonReplace.Image as Bitmap);
                _findHelper = _findHelper ?? replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
                _findHelper.InProgress = true;
                int index = 0;

                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    index = SubtitleListview1.SelectedItems[0].Index;
                }

                _findHelper.SelectedIndex = index;
                if (textBoxListViewTextAlternate.Focused)
                {
                    _findHelper.SelectedPosition = textBoxListViewTextAlternate.SelectionStart;
                    _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                }
                else
                {
                    _findHelper.SelectedPosition = textBoxListViewText.SelectionStart;
                    _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                }

                _replaceStartLineIndex = index;
            }
            else
            {
                isFirst = false;
                if (_findHelper != null)
                {
                    selectedText = _findHelper.FindText;
                    _findHelper.InProgress = true;
                }

            }

            replaceDialog.Initialize(selectedText, _findHelper);
            if (replaceDialog.ShowDialog(this) == DialogResult.OK)
            {
                if (_findHelper == null)
                {
                    _findHelper = replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
                    _findHelper.InProgress = true;
                }
                else
                {
                    int line = _findHelper.SelectedIndex;
                    int pos = _findHelper.ReplaceFromPosition;
                    bool success = _findHelper.Success;
                    var matchInOriginal = _findHelper.MatchInOriginal;
                    _findHelper = replaceDialog.GetFindDialogHelper(_subtitleListViewIndex);
                    _findHelper.SelectedIndex = line;
                    _findHelper.SelectedPosition = pos;
                    _findHelper.Success = success;
                    _findHelper.MatchInOriginal = matchInOriginal;
                    _findHelper.InProgress = true;
                }

                ShowStatus(string.Format(_language.SearchingForXFromLineY, _findHelper.FindText, _subtitleListViewIndex + 1));
                int replaceCount = 0;
                bool searchStringFound = true;
                int stopAtIndex = int.MaxValue;
                while (searchStringFound)
                {
                    searchStringFound = false;
                    if (isFirst)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeReplace, _findHelper.FindText));
                        isFirst = false;
                        _makeHistoryPaused = true;
                    }

                    if (replaceDialog.ReplaceAll)
                    {
                        if (_findHelper.FindNext(_subtitle, _subtitleAlternate, _findHelper.SelectedIndex, _findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                        {
                            if (_findHelper.SelectedIndex > stopAtIndex)
                            {
                                break;
                            }

                            SetTextForFindAndReplace(true, replaceDialog.ReplaceAll);
                            searchStringFound = true;
                            replaceCount++;
                        }
                        else
                        {
                            textBoxListViewText.Visible = true;
                            _subtitleListViewIndex = -1;
                            if (firstIndex >= 0 && firstIndex < SubtitleListview1.Items.Count)
                            {
                                SubtitleListview1.Items[firstIndex].Selected = true;
                                SubtitleListview1.Items[firstIndex].Focused = true;
                                SubtitleListview1.Focus();
                                textBoxListViewText.Text = _subtitle.Paragraphs[firstIndex].Text;
                                if (_subtitleAlternate != null && textBoxListViewTextAlternate.Visible)
                                {
                                    var orginial = Utilities.GetOriginalParagraph(_findHelper.SelectedIndex, _subtitle.Paragraphs[_findHelper.SelectedIndex], _subtitleAlternate.Paragraphs);
                                    if (orginial != null)
                                    {
                                        textBoxListViewTextAlternate.Text = orginial.Text;
                                    }
                                }
                            }
                            else
                            {
                                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                            }

                            ShowStatus(string.Format(_language.NoMatchFoundX, _findHelper.FindText));

                            if (_replaceStartLineIndex >= 1) // Prompt for start over
                            {
                                _replaceStartLineIndex = 0;
                                string msgText = _language.ReplaceContinueNotFound;
                                if (replaceCount > 0)
                                {
                                    msgText = string.Format(_language.ReplaceXContinue, replaceCount);
                                }

                                if (MessageBox.Show(msgText, _language.ReplaceContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                                {
                                    stopAtIndex = firstIndex;
                                    _findHelper.MatchInOriginal = false;
                                    _findHelper.StartLineIndex = 0;
                                    _findHelper.SelectedIndex = 0;
                                    _findHelper.SelectedPosition = 0;
                                    _findHelper.ReplaceFromPosition = 0;
                                    SetTextForFindAndReplace(false, replaceDialog.ReplaceAll);

                                    if (_findHelper.FindNext(_subtitle, _subtitleAlternate, _findHelper.SelectedIndex, _findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                                    {
                                        SetTextForFindAndReplace(true, replaceDialog.ReplaceAll);
                                        _findHelper.SelectedPosition += _findHelper.ReplaceText.Length;
                                        _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                                        searchStringFound = true;
                                        replaceCount++;
                                    }
                                }
                            }
                        }
                    }
                    else if (replaceDialog.FindOnly)
                    {
                        if (_findHelper.FindNext(_subtitle, _subtitleAlternate, _findHelper.SelectedIndex, _findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                        {
                            var tb = GetFindRepaceTextBox();
                            SubtitleListview1.SelectIndexAndEnsureVisible(_findHelper.SelectedIndex, true);
                            tb.Focus();
                            tb.SelectionStart = _findHelper.SelectedPosition;
                            tb.SelectionLength = _findHelper.FindTextLength;
                            _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                            _findHelper.SelectedPosition += _findHelper.FindTextLength;
                            ShowStatus(string.Format(_language.NoXFoundAtLineY, _findHelper.SelectedIndex + 1, _findHelper.FindText));
                            Replace(replaceDialog);
                            if (replaceDialog != null && !replaceDialog.IsDisposed)
                            {
                                replaceDialog.Dispose();
                            }

                            _findHelper.InProgress = false;
                            return;
                        }

                        if (_replaceStartLineIndex >= 1) // Prompt for start over
                        {
                            _replaceStartLineIndex = 0;
                            if (MessageBox.Show(_language.FindContinue, _language.FindContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                            {
                                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                                _findHelper.StartLineIndex = 0;
                                _findHelper.SelectedIndex = 0;
                                _findHelper.SelectedPosition = 0;
                                _findHelper.ReplaceFromPosition = 0;
                                if (_findHelper.FindNext(_subtitle, _subtitleAlternate, _findHelper.SelectedIndex, _findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                                {
                                    var tb = GetFindRepaceTextBox();
                                    SubtitleListview1.SelectIndexAndEnsureVisible(_findHelper.SelectedIndex, true);
                                    tb.Focus();
                                    tb.SelectionStart = _findHelper.SelectedPosition;
                                    tb.SelectionLength = _findHelper.FindTextLength;
                                    _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                                    _findHelper.SelectedPosition += _findHelper.FindTextLength;
                                    ShowStatus(string.Format(_language.NoXFoundAtLineY, _findHelper.SelectedIndex + 1, _findHelper.FindText));
                                    Replace(replaceDialog);
                                    if (replaceDialog != null)
                                    {
                                        replaceDialog.Dispose();
                                    }

                                    _findHelper.InProgress = false;
                                    return;
                                }
                            }
                            else
                            {
                                if (replaceDialog != null && !replaceDialog.IsDisposed)
                                {
                                    replaceDialog.Dispose();
                                }

                                _findHelper.InProgress = false;
                                return;
                            }
                        }

                        ShowStatus(string.Format(_language.NoMatchFoundX, _findHelper.FindText));
                    }
                    else if (!replaceDialog.FindOnly) // replace once only
                    {
                        var tb = GetFindRepaceTextBox();
                        string msg = string.Empty;
                        if (_findHelper.FindReplaceType.FindType == FindType.RegEx)
                        {
                            if (_findHelper.Success)
                            {
                                if (_findHelper.FindReplaceType.FindType == FindType.RegEx)
                                {
                                    ReplaceViaRegularExpression(tb, replaceDialog.ReplaceAll);
                                }
                                else
                                {
                                    tb.SelectedText = _findHelper.ReplaceText;
                                }

                                msg = _language.OneReplacementMade + " ";
                            }
                        }
                        else if (tb.SelectionLength == _findHelper.FindTextLength)
                        {
                            tb.SelectedText = _findHelper.ReplaceText;
                            msg = _language.OneReplacementMade + " ";
                            _findHelper.SelectedPosition += _findHelper.ReplaceText.Length;
                        }

                        if (_findHelper.FindNext(_subtitle, _subtitleAlternate, _findHelper.SelectedIndex, _findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                        {
                            SubtitleListview1.SelectIndexAndEnsureVisible(_findHelper.SelectedIndex, true);
                            tb = GetFindRepaceTextBox();
                            tb.Focus();
                            tb.SelectionStart = _findHelper.SelectedPosition;
                            tb.SelectionLength = _findHelper.FindTextLength;
                            if (_findHelper.FindReplaceType.FindType != FindType.RegEx)
                            {
                                _findHelper.SelectedPosition += _findHelper.ReplaceText.Length;
                            }

                            ShowStatus(string.Format(msg + _language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedIndex + 1));
                        }
                        else
                        {
                            ShowStatus(msg + string.Format(_language.XNotFound, _findHelper.FindText));

                            // Prompt for start over
                            if (_replaceStartLineIndex >= 1)
                            {
                                _replaceStartLineIndex = 0;
                                if (MessageBox.Show(_language.FindContinue, _language.FindContinueTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                                {
                                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                                    _findHelper.StartLineIndex = 0;
                                    _findHelper.SelectedIndex = 0;
                                    _findHelper.SelectedPosition = 0;
                                    _findHelper.ReplaceFromPosition = 0;
                                    if (_findHelper.FindNext(_subtitle, _subtitleAlternate, _findHelper.SelectedIndex, _findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                                    {
                                        SubtitleListview1.SelectIndexAndEnsureVisible(_findHelper.SelectedIndex, true);
                                        tb = GetFindRepaceTextBox();
                                        tb.Focus();
                                        tb.SelectionStart = _findHelper.SelectedPosition;
                                        tb.SelectionLength = _findHelper.FindTextLength;
                                        _findHelper.SelectedPosition += _findHelper.ReplaceText.Length;
                                        ShowStatus(string.Format(msg + _language.XFoundAtLineNumberY, _findHelper.FindText, _findHelper.SelectedIndex + 1));
                                    }
                                }
                                else
                                {
                                    if (replaceDialog != null && !replaceDialog.IsDisposed)
                                    {
                                        replaceDialog.Dispose();
                                    }

                                    _findHelper.InProgress = false;
                                    return;
                                }
                            }
                            else
                            {
                                if (replaceDialog != null && !replaceDialog.IsDisposed)
                                {
                                    replaceDialog.Dispose();
                                }

                                _findHelper.InProgress = false;
                                return;
                            }
                        }

                        Replace(replaceDialog);
                        if (replaceDialog != null && !replaceDialog.IsDisposed)
                        {
                            replaceDialog.Dispose();
                        }

                        _findHelper.InProgress = false;
                        return;
                    }

                    if (_findHelper.SelectedIndex > stopAtIndex)
                    {
                        break;
                    }
                }

                ShowSource();
                if (replaceCount == 0)
                {
                    ShowStatus(_language.FoundNothingToReplace);
                }
                else
                {
                    ShowStatus(string.Format(_language.ReplaceCountX, replaceCount));
                    SubtitleListview1.SyntaxColorAllLines(_subtitle);
                }
            }

            RestoreSubtitleListviewIndices();
            if (_makeHistoryPaused)
            {
                RestartHistory();
            }

            replaceDialog.Dispose();
            _findHelper.InProgress = false;
        }

        private void ReplaceViaRegularExpression(TextBox tb, bool replaceAll)
        {
            var r = new Regex(RegexUtils.FixNewLine(_findHelper.FindText), RegexOptions.Multiline);
            if (replaceAll)
            {
                string result = RegexUtils.ReplaceNewLineSafe(r, tb.Text, _findHelper.ReplaceText);
                if (result != tb.Text)
                {
                    tb.Text = result;
                }

                _findHelper.SelectedPosition = tb.Text.Length;
                _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
            }
            else
            {
                string result = RegexUtils.ReplaceNewLineSafe(r, tb.Text, _findHelper.ReplaceText, 1, _findHelper.SelectedPosition);
                if (result != tb.Text)
                {
                    var match = r.Match(string.Join(Environment.NewLine, tb.Text.SplitToLines()));
                    if (match != null && match.Success && !_findHelper.FindText.StartsWith('^') && _findHelper.ReplaceText.Length > 0)
                    {
                        var add = Math.Abs(match.Length - _findHelper.ReplaceText.Length);
                        _findHelper.SelectedPosition += add;
                        _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                    }

                    tb.Text = result;
                }

                if (_findHelper.FindText.StartsWith('^'))
                {
                    _findHelper.SelectedPosition++;
                }
            }
        }

        private void SetTextForFindAndReplace(bool replace, bool replaceAll)
        {
            _subtitleListViewIndex = _findHelper.SelectedIndex;
            textBoxListViewText.Text = _subtitle.Paragraphs[_findHelper.SelectedIndex].Text;
            if (_subtitleAlternate != null && textBoxListViewTextAlternate.Visible)
            {
                var orginial = Utilities.GetOriginalParagraph(_findHelper.SelectedIndex, _subtitle.Paragraphs[_findHelper.SelectedIndex], _subtitleAlternate.Paragraphs);
                if (orginial != null)
                {
                    textBoxListViewTextAlternate.Text = orginial.Text;
                }
            }

            if (replace)
            {
                var tb = GetFindRepaceTextBox();
                tb.SelectionStart = _findHelper.SelectedPosition;
                tb.SelectionLength = _findHelper.FindTextLength;
                if (_findHelper.FindReplaceType.FindType == FindType.RegEx)
                {
                    ReplaceViaRegularExpression(tb, replaceAll);
                    _findHelper.SelectedPosition += _findHelper.FindTextLength;
                    _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                }
                else
                {
                    tb.SelectedText = _findHelper.ReplaceText;
                    _findHelper.SelectedPosition += _findHelper.ReplaceText.Length;
                    _findHelper.ReplaceFromPosition = _findHelper.SelectedPosition;
                }
            }
        }

        private void Replace(ReplaceDialog replaceDialog)
        {
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                ReplaceSourceView(replaceDialog);
            }
            else
            {
                ReplaceListView(replaceDialog);
            }
        }

        public void ShowStatus(string message, bool log = true)
        {
            if (_disableShowStatus)
            {
                return;
            }

            labelStatus.Text = message.Replace("&", "&&");
            statusStrip1.Refresh();
            if (!string.IsNullOrEmpty(message))
            {
                _timerClearStatus.Stop();
                if (log)
                {
                    _timerClearStatus.Interval = Configuration.Settings.General.ClearStatusBarAfterSeconds * 1000;
                    _statusLog.Add(string.Format("{0:0000}-{1:00}-{2:00} {3}: {4}", DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.ToLongTimeString(), message));
                }
                else
                {
                    _timerClearStatus.Interval = 1500;
                }
                _timerClearStatus.Start();
            }
            ShowSourceLineNumber();
            ShowLineInformationListView();
        }

        private void ReloadFromSourceView()
        {
            if (_sourceViewChange)
            {
                SaveSubtitleListviewIndices();
                if (!string.IsNullOrWhiteSpace(textBoxSource.Text))
                {
                    var oldSubtitle = new Subtitle(_subtitle);
                    var format = GetCurrentSubtitleFormat();
                    var list = textBoxSource.Lines.ToList();
                    format = new Subtitle().ReloadLoadSubtitle(list, null, format);
                    if (format == null)
                    {
                        MessageBox.Show(_language.UnableToParseSourceView);
                        return;
                    }

                    _sourceViewChange = false;
                    MakeHistoryForUndo(_language.BeforeChangesMadeInSourceView);
                    _subtitle.ReloadLoadSubtitle(list, null, format);

                    int index = 0;
                    foreach (string formatName in comboBoxSubtitleFormats.Items)
                    {
                        if (formatName == format.FriendlyName)
                        {
                            comboBoxSubtitleFormats.SelectedIndex = index;
                            break;
                        }

                        index++;
                    }

                    for (int i = 0; i < oldSubtitle.Paragraphs.Count; i++)
                    {
                        if (oldSubtitle.Paragraphs[i].Bookmark != null)
                        {
                            var newParagraph = _subtitle.GetFirstAlike(oldSubtitle.Paragraphs[i]);
                            if (newParagraph != null)
                            {
                                newParagraph.Bookmark = oldSubtitle.Paragraphs[i].Bookmark;
                            }
                        }
                    }

                    if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
                    {
                        _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                    }

                    var formatType = format.GetType();
                    if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
                    {
                        string errors = AdvancedSubStationAlpha.CheckForErrors(_subtitle.Header);
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(SubRip))
                    {
                        string errors = (format as SubRip).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(MicroDvd))
                    {
                        string errors = (format as MicroDvd).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(DCinemaSmpte2007))
                    {
                        format.ToText(_subtitle, string.Empty);
                        string errors = (format as DCinemaSmpte2007).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(DCinemaSmpte2010))
                    {
                        format.ToText(_subtitle, string.Empty);
                        string errors = (format as DCinemaSmpte2010).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (formatType == typeof(DCinemaSmpte2014))
                    {
                        format.ToText(_subtitle, string.Empty);
                        string errors = (format as DCinemaSmpte2014).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                }
                else
                {
                    _sourceViewChange = false;
                    MakeHistoryForUndo(_language.BeforeChangesMadeInSourceView);
                    _sourceViewChange = false;
                    _subtitle.Paragraphs.Clear();
                }

                _subtitleListViewIndex = -1;
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                RestoreSubtitleListviewIndices();
            }
        }

        private void HelpToolStripMenuItem1Click(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Utilities.ShowHelp(string.Empty);
        }

        private void ToolStripButtonHelpClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            Utilities.ShowHelp(string.Empty);
        }

        private void GotoLineNumberToolStripMenuItemClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var goToLine = new GoToLine())
            {
                if (tabControlSubtitle.SelectedIndex == TabControlListView)
                {
                    goToLine.Initialize(1, SubtitleListview1.Items.Count);
                }
                else if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    goToLine.Initialize(1, textBoxSource.Lines.Length);
                }

                if (goToLine.ShowDialog(this) == DialogResult.OK)
                {
                    if (tabControlSubtitle.SelectedIndex == TabControlListView)
                    {
                        SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                        SubtitleListview1.SelectNone();
                        SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;

                        SubtitleListview1.Items[goToLine.LineNumber - 1].Selected = true;
                        SubtitleListview1.Items[goToLine.LineNumber - 1].EnsureVisible();
                        SubtitleListview1.Items[goToLine.LineNumber - 1].Focused = true;
                        ShowStatus(string.Format(_language.GoToLineNumberX, goToLine.LineNumber));
                    }
                    else if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
                    {
                        textBoxSource.SelectionStart = textBoxSource.GetFirstCharIndexFromLine(goToLine.LineNumber - 1);
                        textBoxSource.SelectionLength = textBoxSource.Lines[goToLine.LineNumber - 1].Length;
                        textBoxSource.ScrollToCaret();
                        ShowSourceLineNumber();
                    }
                }
            }
        }

        private void TextBoxSourceLeave(object sender, EventArgs e)
        {
            ReloadFromSourceView();
        }

        private void AdjustDisplayTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            AdjustDisplayTime(false);
        }

        private void AdjustDisplayTime(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var adjustDisplayTime = new AdjustDisplayDuration())
            {
                List<int> selectedIndices = null;
                if (onlySelectedLines)
                {
                    adjustDisplayTime.Text += " - " + _language.SelectedLines;
                    selectedIndices = new List<int>();
                    foreach (int item in SubtitleListview1.SelectedIndices)
                    {
                        selectedIndices.Add(item);
                    }
                }

                if (adjustDisplayTime.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);
                    if (adjustDisplayTime.AdjustUsingPercent)
                    {
                        double percent = double.Parse(adjustDisplayTime.AdjustValue);
                        _subtitle.AdjustDisplayTimeUsingPercent(percent, selectedIndices);
                        ShowStatus(string.Format(_language.DisplayTimesAdjustedX, double.Parse(adjustDisplayTime.AdjustValue, CultureInfo.InvariantCulture) + "%"));
                    }
                    else if (adjustDisplayTime.AdjustUsingSeconds)
                    {
                        double seconds = double.Parse(adjustDisplayTime.AdjustValue, CultureInfo.InvariantCulture);
                        _subtitle.AdjustDisplayTimeUsingSeconds(seconds, selectedIndices);
                        ShowStatus(string.Format(_language.DisplayTimesAdjustedX, double.Parse(adjustDisplayTime.AdjustValue, CultureInfo.InvariantCulture)));
                    }
                    else if (adjustDisplayTime.AdjustUsingRecalc)
                    {
                        double maxCharSeconds = (double)(adjustDisplayTime.MaxCharactersPerSecond);
                        _subtitle.RecalculateDisplayTimes(maxCharSeconds, selectedIndices, (double)adjustDisplayTime.OptimalCharactersPerSecond, adjustDisplayTime.ExtendOnly);
                        ShowStatus(string.Format(_language.DisplayTimesAdjustedX, adjustDisplayTime.AdjustValue));
                    }
                    else
                    { // fixed duration
                        _subtitle.SetFixedDuration(selectedIndices, adjustDisplayTime.FixedMilliseconds);
                        ShowStatus(string.Format(_language.DisplayTimesAdjustedX, adjustDisplayTime.FixedMilliseconds));
                    }

                    SaveSubtitleListviewIndices();
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void FixToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_networkSession == null)
            {
                FixCommonErrors(false);
            }
        }

        private void FixCommonErrors(bool onlySelectedLines)
        {
            if (IsSubtitleLoaded)
            {
                ReloadFromSourceView();
                SaveSubtitleListviewIndices();
                using (var fixErrors = new FixCommonErrors())
                {
                    if (onlySelectedLines)
                    {
                        var selectedLines = new Subtitle();
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                        }

                        fixErrors.Initialize(selectedLines, GetCurrentSubtitleFormat(), GetCurrentEncoding());
                    }
                    else
                    {
                        fixErrors.Initialize(_subtitle, GetCurrentSubtitleFormat(), GetCurrentEncoding());
                    }

                    if (fixErrors.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeCommonErrorFixes);
                        _subtitle.Renumber();
                        if (onlySelectedLines)
                        {
                            // we only update selected lines
                            if (_networkSession != null)
                            {
                                var deletes = new List<int>();
                                _networkSession.TimerStop();
                                foreach (int index in SubtitleListview1.SelectedIndices)
                                {
                                    var pOld = _subtitle.Paragraphs[index];
                                    var p = fixErrors.FixedSubtitle.GetParagraphOrDefaultById(pOld.Id);
                                    if (p == null)
                                    {
                                        deletes.Add(index);
                                    }
                                    else
                                    {
                                        _subtitle.Paragraphs[index] = p;
                                        SubtitleListview1.SetTimeAndText(index, p, _subtitle.GetParagraphOrDefault(index + 1));
                                    }
                                }

                                NetworkGetSendUpdates(deletes, 0, null);
                            }
                            else
                            {
                                var selectedIndices = SubtitleListview1.GetSelectedIndices();
                                for (int index = selectedIndices.Length - 1; index >= 0; index--)
                                {
                                    var idx = selectedIndices[index];
                                    var pOld = _subtitle.Paragraphs[idx];
                                    var p = fixErrors.FixedSubtitle.GetParagraphOrDefaultById(pOld.Id);
                                    if (p == null)
                                    {
                                        _subtitle.Paragraphs.RemoveAt(idx);
                                    }
                                    else
                                    {
                                        _subtitle.Paragraphs[idx] = p;
                                    }
                                }
                            }

                            ShowStatus(_language.CommonErrorsFixedInSelectedLines);
                        }
                        else
                        {
                            _subtitle.Paragraphs.Clear();
                            foreach (var p in fixErrors.FixedSubtitle.Paragraphs)
                            {
                                _subtitle.Paragraphs.Add(p);
                            }

                            ShowStatus(_language.CommonErrorsFixed);
                        }

                        _subtitle.Renumber();
                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        RestoreSubtitleListviewIndices();
                    }

                    Configuration.Settings.CommonErrors.StartSize = fixErrors.Width + ";" + fixErrors.Height;
                    Configuration.Settings.CommonErrors.StartPosition = fixErrors.Left + ";" + fixErrors.Top;
                }
            }
            else
            {
                DisplaySubtitleNotLoadedMessage();
            }

            ShowInTaskbar = true;
        }

        private void StartNumberingFromToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var startNumberingFrom = new StartNumberingFrom())
            {
                if (startNumberingFrom.ShowDialog(this) == DialogResult.OK)
                {
                    SaveSubtitleListviewIndices();
                    MakeHistoryForUndo(_language.BeforeRenumbering);
                    ShowStatus(string.Format(_language.RenumberedStartingFromX, startNumberingFrom.StartFromNumber));
                    _subtitle.Renumber(startNumberingFrom.StartFromNumber);
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        internal void ReloadFromSubtitle(Subtitle subtitle, string messageForUndo)
        {
            MakeHistoryForUndo(messageForUndo);
            _subtitle.Paragraphs.Clear();
            _subtitle.Paragraphs.AddRange(subtitle.Paragraphs);
            _subtitleListViewIndex = -1;
            ShowSource();
            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            if (_subtitle.Paragraphs.Count > 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
            }
        }

        private void RemoveTextForHearImpairedToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var removeTextFromHearImpaired = new FormRemoveTextForHearImpaired(this, _subtitle))
            {
                removeTextFromHearImpaired.Initialize(_subtitle);
                if (removeTextFromHearImpaired.ShowDialog(this) == DialogResult.OK)
                {
                    int count = removeTextFromHearImpaired.TotalFixes;
                    if (count == 1)
                    {
                        ShowStatus(_language.TextingForHearingImpairedRemovedOneLine);
                    }
                    else if (count > 1)
                    {
                        ShowStatus(string.Format(_language.TextingForHearingImpairedRemovedXLines, count));
                    }
                }
            }
        }

        private void SplitToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            double lengthInSeconds = 0;
            if (mediaPlayer.VideoPlayer != null)
            {
                lengthInSeconds = mediaPlayer.Duration;
            }

            if (Configuration.Settings.Tools.SplitAdvanced)
            {
                using (var split = new Split())
                {
                    split.Initialize(_subtitle, _fileName, GetCurrentSubtitleFormat());
                    if (split.ShowDialog(this) == DialogResult.OK)
                    {
                        ShowStatus(_language.SubtitleSplitted);
                    }
                    else if (split.ShowBasic)
                    {
                        Configuration.Settings.Tools.SplitAdvanced = false;
                        SplitToolStripMenuItemClick(null, null);
                    }
                }
            }
            else
            {
                using (var splitSubtitle = new SplitSubtitle())
                {
                    splitSubtitle.Initialize(_subtitle, _fileName, GetCurrentSubtitleFormat(), GetCurrentEncoding(), lengthInSeconds);
                    if (splitSubtitle.ShowDialog(this) == DialogResult.OK)
                    {
                        ShowStatus(_language.SubtitleSplitted);
                    }
                    else if (splitSubtitle.ShowAdvanced)
                    {
                        Configuration.Settings.Tools.SplitAdvanced = true;
                        SplitToolStripMenuItemClick(null, null);
                    }
                }
            }
        }

        private void AppendTextVisuallyToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();

            if (MessageBox.Show(_language.SubtitleAppendPrompt, _language.SubtitleAppendPromptTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
            {
                openFileDialog1.Title = _language.OpenSubtitleToAppend;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
                if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    bool success = false;
                    string fileName = openFileDialog1.FileName;
                    if (File.Exists(fileName))
                    {
                        var fileInfo = new FileInfo(fileName);
                        var subtitleToAppend = new Subtitle();
                        SubtitleFormat format = null;

                        // do not allow blu-ray/vobsub
                        string extension = Path.GetExtension(fileName).ToLowerInvariant();
                        if (extension == ".sub" && (IsVobSubFile(fileName, false) || FileUtil.IsSpDvdSup(fileName)))
                        {
                            format = null;
                        }
                        else if (extension == ".sup" && FileUtil.IsBluRaySup(fileName))
                        {
                            format = null;
                        }
                        else if (fileInfo.Length < Subtitle.MaxFileSize)
                        {
                            Encoding encoding;
                            format = subtitleToAppend.LoadSubtitle(fileName, out encoding, null);

                            if (format == null)
                            {
                                var ebu = new Ebu();
                                if (ebu.IsMine(null, fileName))
                                {
                                    ebu.LoadSubtitle(subtitleToAppend, null, fileName);
                                    format = ebu;
                                }
                            }

                            if (format == null)
                            {
                                var pac = new Pac();
                                if (pac.IsMine(null, fileName))
                                {
                                    pac.LoadSubtitle(subtitleToAppend, null, fileName);
                                    format = pac;
                                }
                            }

                            if (format == null)
                            {
                                var cavena890 = new Cavena890();
                                if (cavena890.IsMine(null, fileName))
                                {
                                    cavena890.LoadSubtitle(subtitleToAppend, null, fileName);
                                    format = cavena890;
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show(string.Format(_language.FileXIsLargerThan10MB, fileName));
                            return;
                        }

                        if (format != null && subtitleToAppend.Paragraphs.Count > 1)
                        {
                            using (var visualSync = new VisualSync())
                            {
                                visualSync.Initialize(toolStripButtonVisualSync.Image as Bitmap, subtitleToAppend, null, _fileName, _language.AppendViaVisualSyncTitle, CurrentFrameRate);
                                visualSync.ShowDialog(this);
                                if (visualSync.OkPressed)
                                {
                                    if (MessageBox.Show(_language.AppendSynchronizedSubtitlePrompt, _language.SubtitleAppendPromptTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
                                    {
                                        int start = _subtitle.Paragraphs.Count + 1;
                                        var fr = CurrentFrameRate;
                                        MakeHistoryForUndo(_language.BeforeAppend);
                                        foreach (var p in visualSync.Paragraphs)
                                        {
                                            _subtitle.Paragraphs.Add(new Paragraph(p));
                                        }

                                        if (format.GetType() == typeof(AdvancedSubStationAlpha) && GetCurrentSubtitleFormat().GetType() == typeof(AdvancedSubStationAlpha))
                                        {
                                            var currentStyles = new List<string>();
                                            if (_subtitle.Header != null)
                                            {
                                                currentStyles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                                            }

                                            foreach (var styleName in AdvancedSubStationAlpha.GetStylesFromHeader(subtitleToAppend.Header))
                                            {
                                                bool alreadyExists = false;
                                                foreach (var currentStyleName in currentStyles)
                                                {
                                                    if (currentStyleName.Trim().Equals(styleName.Trim(), StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        alreadyExists = true;
                                                    }
                                                }

                                                if (!alreadyExists)
                                                {
                                                    var newStyle = AdvancedSubStationAlpha.GetSsaStyle(styleName, subtitleToAppend.Header);
                                                    _subtitle.Header = AdvancedSubStationAlpha.AddSsaStyle(newStyle, _subtitle.Header);
                                                }
                                            }
                                        }

                                        _subtitle.Renumber();

                                        ShowSource();
                                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);

                                        // select appended lines
                                        for (int i = start; i < _subtitle.Paragraphs.Count; i++)
                                        {
                                            SubtitleListview1.Items[i].Selected = true;
                                        }

                                        SubtitleListview1.EnsureVisible(start);

                                        ShowStatus(string.Format(_language.SubtitleAppendedX, fileName));
                                        success = true;
                                    }
                                }
                            }
                        }
                    }

                    if (!success)
                    {
                        ShowStatus(_language.SubtitleNotAppended);
                    }
                }
            }
        }

        private void TranslateByGoogleToolStripMenuItemClick(object sender, EventArgs e)
        {
            TranslateViaGoogle(false, true);
        }

        private void TranslateViaGoogle(bool onlySelectedLines, bool useGoogle)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            bool isAlternateVisible = SubtitleListview1.IsAlternateTextColumnVisible;
            ReloadFromSourceView();
            using (var googleTranslate = new GoogleTranslate())
            {
                SaveSubtitleListviewIndices();
                string title = _language.GoogleTranslate;
                if (!useGoogle)
                {
                    title = _language.MicrosoftTranslate;
                }

                if (onlySelectedLines)
                {
                    var selectedLines = new Subtitle();
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                    }

                    title += " - " + _language.SelectedLines;
                    if (_subtitleAlternate != null)
                    {
                        var paragraphs = new List<Paragraph>();
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index], _subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                paragraphs.Add(original);
                            }
                        }

                        if (paragraphs.Count == selectedLines.Paragraphs.Count)
                        {
                            googleTranslate.Initialize(new Subtitle(paragraphs), selectedLines, title, useGoogle, GetCurrentEncoding());
                        }
                        else
                        {
                            googleTranslate.Initialize(selectedLines, null, title, useGoogle, GetCurrentEncoding());
                        }
                    }
                    else
                    {
                        googleTranslate.Initialize(selectedLines, null, title, useGoogle, GetCurrentEncoding());
                    }
                }
                else
                {
                    googleTranslate.Initialize(_subtitle, null, title, useGoogle, GetCurrentEncoding());
                }

                if (googleTranslate.ShowDialog(this) == DialogResult.OK)
                {
                    _subtitleListViewIndex = -1;
                    string oldFileName = _fileName;
                    MakeHistoryForUndo(_language.BeforeGoogleTranslation);
                    if (onlySelectedLines)
                    {
                        // we only update selected lines
                        int i = 0;
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index] = googleTranslate.TranslatedSubtitle.Paragraphs[i];
                            i++;
                        }

                        ShowStatus(_language.SelectedLinesTranslated);
                    }
                    else
                    {
                        _subtitleAlternate = new Subtitle(_subtitle);
                        _subtitleAlternateFileName = _fileName;
                        _fileName = null;
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in googleTranslate.TranslatedSubtitle.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        ShowStatus(_language.SubtitleTranslated);
                    }

                    ShowSource();

                    if (!onlySelectedLines)
                    {
                        SubtitleListview1.ShowAlternateTextColumn(_languageGeneral.OriginalText);
                        SubtitleListview1.AutoSizeAllColumns(this);
                        SetupAlternateEdit();
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    if (!onlySelectedLines)
                    {
                        ResetHistory();
                        _fileName = googleTranslate.GetFileNameWithTargetLanguage(oldFileName, _videoFileName, _subtitleAlternate, GetCurrentSubtitleFormat());
                    }

                    RestoreSubtitleListviewIndices();
                    _converted = true;
                    SetTitle();
                    SetEncoding(Encoding.UTF8);
                    if (!isAlternateVisible)
                    {
                        toolStripMenuItemShowOriginalInPreview.Checked = false;
                        Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = false;
                        audioVisualizer.Invalidate();
                    }
                }
            }
        }

        private static string GetTranslateStringFromNikseDk(string input)
        {
            WebRequest.DefaultWebProxy = Utilities.GetProxy();
            //var request = WebRequest.Create("http://localhost:54942/MultiTranslator/TranslateForSubtitleEdit");
            var request = WebRequest.Create("https://www.nikse.dk/MultiTranslator/TranslateForSubtitleEdit");
            request.Method = "POST";
            var postData = String.Format("languagePair={1}&text={0}", Utilities.UrlEncode(input), "svda");
            var byteArray = Encoding.UTF8.GetBytes(postData);
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;
            using (var dataStream = request.GetRequestStream())
            {
                dataStream.Write(byteArray, 0, byteArray.Length);
            }

            using (var response = request.GetResponse())
            using (var reader = new StreamReader(response.GetResponseStream()))
            {
                return reader.ReadToEnd();
            }
        }

        private void TranslateFromSwedishToDanishToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            bool isSwedish = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle) == "sv";
            string promptText = _language.TranslateSwedishToDanish;
            if (!isSwedish)
            {
                promptText = _language.TranslateSwedishToDanishWarning;
            }

            if (MessageBox.Show(promptText, Title, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
            {
                try
                {
                    _subtitleAlternate = new Subtitle(_subtitle);
                    _subtitleAlternateFileName = null;
                    int firstSelectedIndex = 0;
                    if (SubtitleListview1.SelectedItems.Count > 0)
                    {
                        firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                    }

                    _subtitleListViewIndex = -1;

                    Cursor.Current = Cursors.WaitCursor;
                    ShowStatus(_language.TranslatingViaNikseDkMt);
                    var sb = new StringBuilder();
                    var output = new StringBuilder();
                    foreach (var p in _subtitle.Paragraphs)
                    {
                        var s = p.Text.Replace(Environment.NewLine, "<br/>");
                        s = "<p>" + s + "</p>";
                        sb.Append(s);

                        if (sb.Length > 9000)
                        {
                            output.Append(GetTranslateStringFromNikseDk(sb.ToString()));
                            sb.Length = 0;
                        }
                    }

                    if (sb.Length > 0)
                    {
                        output.Append(GetTranslateStringFromNikseDk(sb.ToString()));
                    }

                    MakeHistoryForUndo(_language.BeforeSwedishToDanishTranslation);
                    var result = output.ToString();
                    if (result.Length > 0)
                    {
                        int index = 0;
                        foreach (var s in result.Split(new[] { "<p>", "</p>" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            if (index < _subtitle.Paragraphs.Count)
                            {
                                _subtitle.Paragraphs[index].Text = s.Trim();
                            }

                            index++;
                        }

                        ShowSource();
                        SubtitleListview1.ShowAlternateTextColumn(_languageGeneral.OriginalText);
                        SubtitleListview1.AutoSizeAllColumns(this);
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        ShowStatus(_language.TranslationFromSwedishToDanishComplete);
                        SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
                        _converted = true;
                    }
                }
                catch
                {
                    ShowStatus(_language.TranslationFromSwedishToDanishFailed);
                }

                Cursor.Current = Cursors.Default;
            }
        }

        /// <summary>
        /// Undo or Redo
        /// </summary>
        /// <param name="undo">True equals undo, false triggers redo</param>
        private void UndoToIndex(bool undo)
        {
            if (_networkSession != null)
            {
                return;
            }

            lock (_syncUndo)
            {
                if (!undo && _undoIndex >= _subtitle.HistoryItems.Count - 1)
                {
                    return;
                }

                if (undo && (_subtitle == null || !_subtitle.CanUndo || _undoIndex < 0))
                {
                    return;
                }

                // Add latest changes if any (also stop changes from being added while redoing/undoing)
                timerTextUndo.Stop();
                timerAlternateTextUndo.Stop();
                _listViewTextTicks = 0;
                _listViewAlternateTextTicks = 0;
                TimerTextUndoTick(null, null);
                TimerAlternateTextUndoTick(null, null);

                try
                {
                    int selectedIndex = FirstSelectedIndex;
                    if (undo)
                    {
                        _subtitle.HistoryItems[_undoIndex].RedoParagraphs = new List<Paragraph>();
                        _subtitle.HistoryItems[_undoIndex].RedoParagraphsAlternate = new List<Paragraph>();

                        foreach (var p in _subtitle.Paragraphs)
                        {
                            _subtitle.HistoryItems[_undoIndex].RedoParagraphs.Add(new Paragraph(p));
                        }

                        if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null)
                        {
                            foreach (var p in _subtitleAlternate.Paragraphs)
                            {
                                _subtitle.HistoryItems[_undoIndex].RedoParagraphsAlternate.Add(new Paragraph(p));
                            }
                        }

                        _subtitle.HistoryItems[_undoIndex].RedoFileName = _fileName;
                        _subtitle.HistoryItems[_undoIndex].RedoFileModified = _fileDateTime;
                        _subtitle.HistoryItems[_undoIndex].RedoOriginalFileName = _subtitleAlternateFileName;

                        if (selectedIndex >= 0)
                        {
                            _subtitle.HistoryItems[_undoIndex].RedoParagraphs[selectedIndex].Text =
                                textBoxListViewText.Text;
                            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null &&
                                selectedIndex < _subtitle.HistoryItems[_undoIndex].RedoParagraphsAlternate.Count)
                            {
                                _subtitle.HistoryItems[_undoIndex].RedoParagraphsAlternate[selectedIndex].Text =
                                    textBoxListViewTextAlternate.Text;
                            }

                            _subtitle.HistoryItems[_undoIndex].RedoLineIndex = selectedIndex;
                            _subtitle.HistoryItems[_undoIndex].RedoLinePosition = textBoxListViewText.SelectionStart;
                            _subtitle.HistoryItems[_undoIndex].RedoLinePositionAlternate = textBoxListViewTextAlternate.SelectionStart;
                        }
                        else
                        {
                            _subtitle.HistoryItems[_undoIndex].RedoLineIndex = -1;
                            _subtitle.HistoryItems[_undoIndex].RedoLinePosition = -1;
                        }
                    }
                    else
                    {
                        _undoIndex++;
                    }

                    var text = _subtitle.HistoryItems[_undoIndex].Description;

                    _subtitleListViewIndex = -1;
                    textBoxListViewText.Text = string.Empty;
                    textBoxListViewTextAlternate.Text = string.Empty;
                    string subtitleFormatFriendlyName;

                    string oldFileName = _fileName;
                    DateTime oldFileDateTime = _fileDateTime;

                    string oldAlternameFileName = _subtitleAlternateFileName;
                    _fileName = _subtitle.UndoHistory(_undoIndex, out subtitleFormatFriendlyName, out _fileDateTime, out _subtitleAlternate, out _subtitleAlternateFileName);
                    if (string.IsNullOrEmpty(oldAlternameFileName) && !string.IsNullOrEmpty(_subtitleAlternateFileName))
                    {
                        SubtitleListview1.ShowAlternateTextColumn(_languageGeneral.OriginalText);
                        SubtitleListview1.AutoSizeAllColumns(this);
                    }
                    else if (SubtitleListview1.IsAlternateTextColumnVisible && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count == 0)
                    {
                        RemoveAlternate(true, false);
                    }

                    if (!undo)
                    {
                        // TODO: Sometimes redo paragraphs can be null - how?
                        if (_subtitle.HistoryItems[_undoIndex].RedoParagraphs != null)
                        {
                            _subtitle.Paragraphs.Clear();
                            foreach (var p in _subtitle.HistoryItems[_undoIndex].RedoParagraphs)
                            {
                                _subtitle.Paragraphs.Add(new Paragraph(p));
                            }

                            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null)
                            {
                                _subtitleAlternate.Paragraphs.Clear();
                                foreach (var p in _subtitle.HistoryItems[_undoIndex].RedoParagraphsAlternate)
                                {
                                    _subtitleAlternate.Paragraphs.Add(new Paragraph(p));
                                }
                            }
                        }
                        else
                        {
                            System.Diagnostics.Debug.WriteLine("Undo failed at undo index: " + _undoIndex);
                        }

                        _subtitle.HistoryItems[_undoIndex].RedoParagraphs = null;
                        _subtitle.HistoryItems[_undoIndex].RedoParagraphsAlternate = null;
                        if (SubtitleListview1.IsAlternateTextColumnVisible && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count == 0)
                        {
                            RemoveAlternate(true, false);
                        }
                    }

                    if (oldFileName == null || oldFileName.Equals(_fileName, StringComparison.OrdinalIgnoreCase))
                    {
                        _fileDateTime = oldFileDateTime; // undo will not give overwrite-newer-file warning
                    }

                    comboBoxSubtitleFormats.SelectedIndexChanged -= ComboBoxSubtitleFormatsSelectedIndexChanged;
                    SetCurrentFormat(subtitleFormatFriendlyName);
                    comboBoxSubtitleFormats.SelectedIndexChanged += ComboBoxSubtitleFormatsSelectedIndexChanged;

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);

                    if (selectedIndex >= _subtitle.Paragraphs.Count)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.Count - 1, true);
                    }
                    else if (selectedIndex >= 0 && selectedIndex < _subtitle.Paragraphs.Count)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(selectedIndex, true);
                    }
                    else
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }

                    audioVisualizer.Invalidate();
                    if (undo)
                    {
                        if (_subtitle.HistoryItems[_undoIndex].LineIndex == FirstSelectedIndex)
                        {
                            textBoxListViewText.SelectionStart = _subtitle.HistoryItems[_undoIndex].LinePosition;
                            if (_subtitleAlternate != null)
                            {
                                textBoxListViewTextAlternate.SelectionStart =
                                    _subtitle.HistoryItems[_undoIndex].LinePositionAlternate;
                            }
                        }

                        ShowStatus(_language.UndoPerformed + ": " + text.Replace(Environment.NewLine, "  "));
                        _undoIndex--;
                    }
                    else
                    {
                        if (_subtitle.HistoryItems[_undoIndex].RedoLineIndex >= 0 &&
                            _subtitle.HistoryItems[_undoIndex].RedoLineIndex == FirstSelectedIndex)
                        {
                            textBoxListViewText.SelectionStart = _subtitle.HistoryItems[_undoIndex].RedoLinePosition;
                        }

                        if (_subtitleAlternate != null && _subtitle.HistoryItems[_undoIndex].RedoLineIndex >= 0 &&
                            _subtitle.HistoryItems[_undoIndex].RedoLineIndex == FirstSelectedIndex)
                        {
                            textBoxListViewTextAlternate.SelectionStart = _subtitle.HistoryItems[_undoIndex].RedoLinePositionAlternate;
                        }

                        _fileName = _subtitle.HistoryItems[_undoIndex].RedoFileName;
                        _subtitleAlternateFileName = _subtitle.HistoryItems[_undoIndex].RedoOriginalFileName;
                        ShowStatus(_language.RedoPerformed);
                    }
                }
                catch (Exception exception)
                {
                    System.Diagnostics.Debug.WriteLine(exception.Message);
                }

                timerTextUndo.Start();
                timerAlternateTextUndo.Start();
                SetTitle();
                SetListViewStateImages();
            }
        }

        private void ShowHistoryforUndoToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle != null && _subtitle.CanUndo)
            {
                ReloadFromSourceView();
                using (var showHistory = new ShowHistory())
                {
                    showHistory.Initialize(_subtitle, _undoIndex);
                    if (showHistory.ShowDialog(this) == DialogResult.OK)
                    {
                        _subtitleListViewIndex = -1;
                        textBoxListViewText.Text = string.Empty;
                        textBoxListViewTextAlternate.Text = string.Empty;

                        Cursor.Current = Cursors.WaitCursor;
                        SubtitleListview1.BeginUpdate();
                        int rollBackCount = 0;
                        while (_undoIndex > showHistory.SelectedIndex && rollBackCount < Subtitle.MaximumHistoryItems)
                        {
                            UndoToIndex(true);
                            rollBackCount++;
                        }
                        SubtitleListview1.EndUpdate();
                        Cursor.Current = Cursors.Default;
                        audioVisualizer.Invalidate();
                    }
                }
            }
            else
            {
                MessageBox.Show(_language.NothingToUndo, Title, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void ToolStripButtonSpellCheckClick(object sender, EventArgs e)
        {
            SpellCheck(true, 0);
        }

        private void SpellCheckToolStripMenuItemClick(object sender, EventArgs e)
        {
            SpellCheck(true, 0);
        }

        private void SpellCheck(bool autoDetect, int startFromLine)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            try
            {
                string dictionaryFolder = Utilities.DictionaryFolder;
                if (!Directory.Exists(dictionaryFolder) || Directory.GetFiles(dictionaryFolder, "*.dic").Length == 0)
                {
                    ShowGetDictionaries();
                    return;
                }

                if (_subtitle != null && _subtitle.Paragraphs.Count > 0)
                {
                    if (_spellCheckForm != null)
                    {
                        var result = MessageBox.Show(_language.ContinueWithCurrentSpellCheck, Title, MessageBoxButtons.YesNoCancel);
                        if (result == DialogResult.Cancel)
                        {
                            return;
                        }

                        if (result == DialogResult.No)
                        {
                            _spellCheckForm.Dispose();
                            _spellCheckForm = new SpellCheck();
                            _spellCheckForm.DoSpellCheck(autoDetect, _subtitle, dictionaryFolder, this, startFromLine);
                        }
                        else
                        {
                            _spellCheckForm.ContinueSpellCheck(_subtitle);
                        }
                    }
                    else
                    {
                        _spellCheckForm = new SpellCheck();
                        _spellCheckForm.DoSpellCheck(autoDetect, _subtitle, dictionaryFolder, this, startFromLine);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("{0}{1}{2}{3}{4}", ex.Source, Environment.NewLine, ex.Message, Environment.NewLine, ex.StackTrace), _title, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void ChangeWholeTextMainPart(ref int noOfChangedWords, ref bool firstChange, int i, Paragraph p)
        {
            SubtitleListview1.SetText(i, p.Text);
            noOfChangedWords++;
            if (firstChange)
            {
                MakeHistoryForUndo(_language.BeforeSpellCheck);
                firstChange = false;
            }

            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                ShowSource();
            }
            else
            {
                RefreshSelectedParagraph();
            }
        }

        public void DeleteLine()
        {
            MakeHistoryForUndo(Configuration.Settings.Language.Main.OneLineDeleted);
            DeleteSelectedLines();
        }

        public void FocusParagraph(int index)
        {
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                tabControlSubtitle.SelectedIndex = TabControlListView;
            }

            if (tabControlSubtitle.SelectedIndex == TabControlListView)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            }
        }

        private void RefreshSelectedParagraph()
        {
            var idx = FirstSelectedIndex;
            if (idx == -1 && _subtitle?.Paragraphs?.Count > 0)
            {
                idx = 0;
            }

            var p = _subtitle.GetParagraphOrDefault(idx);
            _subtitleListViewIndex = -1;
            SubtitleListview1_SelectedIndexChanged(null, null);
            if (p != null)
            {
                SubtitleListview1.SetStartTimeAndDuration(idx, p, _subtitle.GetParagraphOrDefault(idx + 1), _subtitle.GetParagraphOrDefault(idx - 1));
            }
        }

        private void RefreshSelectedParagraphs()
        {
            foreach (var index in SubtitleListview1.GetSelectedIndices())
            {
                var p = _subtitle.GetParagraphOrDefault(index);
                if (p != null)
                {
                    SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                }
            }

            _subtitleListViewIndex = -1;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private int GetPositionFromWordIndex(string text, int wordIndex)
        {
            var sb = new StringBuilder();
            int index = -1;
            for (int i = 0; i < text.Length; i++)
            {
                if (SpellCheckWordLists.SplitChars.Contains(text[i]))
                {
                    if (sb.Length > 0)
                    {
                        index++;
                        if (index == wordIndex)
                        {
                            int pos = i - sb.Length;
                            if (pos > 0)
                            {
                                pos--;
                            }

                            if (pos >= 0)
                            {
                                return pos;
                            }
                        }
                    }

                    sb.Clear();
                }
                else
                {
                    sb.Append(text[i]);
                }
            }

            if (sb.Length > 0)
            {
                index++;
                if (index == wordIndex)
                {
                    int pos = text.Length - 1 - sb.Length;
                    if (pos >= 0)
                    {
                        return pos;
                    }
                }
            }

            return 0;
        }

        public void CorrectWord(string changeWord, Paragraph p, string oldWord, ref bool firstChange, int wordIndex)
        {
            if (oldWord != changeWord)
            {
                if (firstChange)
                {
                    MakeHistoryForUndo(_language.BeforeSpellCheck);
                    firstChange = false;
                }

                int startIndex = p.Text.IndexOf(oldWord, StringComparison.Ordinal);
                if (wordIndex >= 0)
                {
                    startIndex = p.Text.IndexOf(oldWord, GetPositionFromWordIndex(p.Text, wordIndex), StringComparison.Ordinal);
                }

                while (startIndex >= 0 && startIndex < p.Text.Length && p.Text.Substring(startIndex).Contains(oldWord))
                {
                    bool startOk = startIndex == 0 ||
                                   "«»“” <>-—+/'\"[](){}¿¡….,;:!?%&$£\r\n؛،؟\u200E\u200F\u202A\u202B\u202C\u202D\u202E\u00C2\u00A0".Contains(p.Text[startIndex - 1]) ||
                                   char.IsPunctuation(p.Text[startIndex - 1]) ||
                                   startIndex == p.Text.Length - oldWord.Length;
                    if (startOk)
                    {
                        int end = startIndex + oldWord.Length;
                        if (end <= p.Text.Length && end == p.Text.Length ||
                            "«»“” ,.!?:;'()<>\"-—+/[]{}%&$£…\r\n؛،؟\u200E\u200F\u202A\u202B\u202C\u202D\u202E\u00C2\u00A0".Contains(p.Text[end]) ||
                            char.IsPunctuation(p.Text[end]))
                        {
                            var lengthBefore = p.Text.Length;
                            p.Text = p.Text.Remove(startIndex, oldWord.Length).Insert(startIndex, changeWord);
                            var lengthAfter = p.Text.Length;
                            if (lengthAfter > lengthBefore)
                            {
                                startIndex += (lengthAfter - lengthBefore);
                            }
                        }
                    }

                    if (startIndex + 2 >= p.Text.Length)
                    {
                        startIndex = -1;
                    }
                    else
                    {
                        startIndex = p.Text.IndexOf(oldWord, startIndex + 2, StringComparison.Ordinal);
                    }

                    // stop if using index
                    if (wordIndex >= 0)
                    {
                        startIndex = -1;
                    }
                }

                ShowStatus(string.Format(_language.SpellCheckChangedXToY, oldWord, changeWord));
                SubtitleListview1.SetText(_subtitle.GetIndex(p), p.Text);
                if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    ShowSource();
                }
                else
                {
                    RefreshSelectedParagraph();
                }
            }
        }

        private void GetDictionariesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ShowGetDictionaries();
        }

        private void ShowGetDictionaries()
        {
            using (var form = new GetDictionaries())
            {
                form.ShowDialog(this);
            }
        }

        private void ContextMenuStripListviewOpening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            var format = GetCurrentSubtitleFormat();
            var formatType = format.GetType();
            var coordinates = SubtitleListview1.PointToClient(Cursor.Position);
            var hitTest = SubtitleListview1.HitTest(coordinates);
            if (coordinates.Y < 19 || (hitTest.Item != null && hitTest.Item.Index == 0 && coordinates.Y < hitTest.Item.Position.Y))
            {
                e.Cancel = true;
                var cm = new ContextMenuStrip();
                var contextMenuStripLvHeaderResizeToolStripMenuItem = new ToolStripMenuItem(Configuration.Settings.Language.Main.Menu.ContextMenu.SizeAllColumnsToFit);
                contextMenuStripLvHeaderResizeToolStripMenuItem.Click += (sender2, e2) => { SubtitleListview1.AutoSizeColumns(); };
                cm.Items.Add(contextMenuStripLvHeaderResizeToolStripMenuItem);

                var tss = new ToolStripSeparator();
                UiUtil.FixFonts(tss);
                cm.Items.Add(tss);

                // End time
                var contextMenuStripLvHeaderEndTimeToolStripMenuItem = new ToolStripMenuItem(Configuration.Settings.Language.General.EndTime);
                contextMenuStripLvHeaderEndTimeToolStripMenuItem.CheckOnClick = true;
                contextMenuStripLvHeaderEndTimeToolStripMenuItem.Checked = Configuration.Settings.Tools.ListViewShowColumnEndTime;
                contextMenuStripLvHeaderEndTimeToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnEndTime = contextMenuStripLvHeaderEndTimeToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnEndTime)
                    {
                        SubtitleListview1.ShowEndColumn(Configuration.Settings.Language.General.EndTime);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.End);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderEndTimeToolStripMenuItem);

                // Duration
                var contextMenuStripLvHeaderDurationToolStripMenuItem = new ToolStripMenuItem(Configuration.Settings.Language.General.Duration);
                contextMenuStripLvHeaderDurationToolStripMenuItem.CheckOnClick = true;
                contextMenuStripLvHeaderDurationToolStripMenuItem.Checked = Configuration.Settings.Tools.ListViewShowColumnDuration;
                contextMenuStripLvHeaderDurationToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnDuration = contextMenuStripLvHeaderDurationToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnDuration)
                    {
                        SubtitleListview1.ShowDurationColumn(Configuration.Settings.Language.General.Duration);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Duration);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderDurationToolStripMenuItem);

                // CPS
                var contextMenuStripLvHeaderCpsToolStripMenuItem = new ToolStripMenuItem(Configuration.Settings.Language.General.CharsPerSec);
                contextMenuStripLvHeaderCpsToolStripMenuItem.CheckOnClick = true;
                contextMenuStripLvHeaderCpsToolStripMenuItem.Checked = Configuration.Settings.Tools.ListViewShowColumnCharsPerSec;
                contextMenuStripLvHeaderCpsToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnCharsPerSec = contextMenuStripLvHeaderCpsToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnCharsPerSec)
                    {
                        SubtitleListview1.ShowCharsSecColumn(Configuration.Settings.Language.General.CharsPerSec);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.CharactersPerSeconds);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderCpsToolStripMenuItem);

                // WPM
                var contextMenuStripLvHeaderWpmToolStripMenuItem = new ToolStripMenuItem(Configuration.Settings.Language.General.WordsPerMin);
                contextMenuStripLvHeaderWpmToolStripMenuItem.CheckOnClick = true;
                contextMenuStripLvHeaderWpmToolStripMenuItem.Checked = Configuration.Settings.Tools.ListViewShowColumnWordsPerMin;
                contextMenuStripLvHeaderWpmToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnWordsPerMin = contextMenuStripLvHeaderWpmToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnWordsPerMin)
                    {
                        SubtitleListview1.ShowWordsMinColumn(Configuration.Settings.Language.General.WordsPerMin);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.WordsPerMinute);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderWpmToolStripMenuItem);

                // GAP
                var contextMenuStripLvHeaderGapToolStripMenuItem = new ToolStripMenuItem(Configuration.Settings.Language.General.Gap);
                contextMenuStripLvHeaderGapToolStripMenuItem.CheckOnClick = true;
                contextMenuStripLvHeaderGapToolStripMenuItem.Checked = Configuration.Settings.Tools.ListViewShowColumnGap;
                contextMenuStripLvHeaderGapToolStripMenuItem.Click += (sender2, e2) =>
                {
                    SubtitleListview1.BeginUpdate();
                    Configuration.Settings.Tools.ListViewShowColumnGap = contextMenuStripLvHeaderGapToolStripMenuItem.Checked;
                    if (Configuration.Settings.Tools.ListViewShowColumnGap)
                    {
                        SubtitleListview1.ShowGapColumn(Configuration.Settings.Language.General.Gap);
                    }
                    else
                    {
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Gap);
                    }

                    SaveSubtitleListviewIndices();
                    UiUtil.InitializeSubtitleFont(SubtitleListview1);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                    SubtitleListview1.EndUpdate();
                };
                cm.Items.Add(contextMenuStripLvHeaderGapToolStripMenuItem);

                if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha) || formatType == typeof(CsvNuendo))
                {
                    // ACTOR
                    var actorTitle = formatType == typeof(CsvNuendo) ? Configuration.Settings.Language.General.Character : Configuration.Settings.Language.General.Actor;
                    var contextMenuStripLvHeaderActorToolStripMenuItem = new ToolStripMenuItem(actorTitle);
                    contextMenuStripLvHeaderActorToolStripMenuItem.CheckOnClick = true;
                    contextMenuStripLvHeaderActorToolStripMenuItem.Checked = Configuration.Settings.Tools.ListViewShowColumnActor;
                    contextMenuStripLvHeaderActorToolStripMenuItem.Click += (sender2, e2) =>
                    {
                        SubtitleListview1.BeginUpdate();
                        Configuration.Settings.Tools.ListViewShowColumnActor = contextMenuStripLvHeaderActorToolStripMenuItem.Checked;
                        if (Configuration.Settings.Tools.ListViewShowColumnActor)
                        {
                            SubtitleListview1.ShowActorColumn(actorTitle);
                        }
                        else
                        {
                            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Actor);
                        }

                        SaveSubtitleListviewIndices();
                        UiUtil.InitializeSubtitleFont(SubtitleListview1);
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        RestoreSubtitleListviewIndices();
                        SubtitleListview1.EndUpdate();
                    };
                    cm.Items.Add(contextMenuStripLvHeaderActorToolStripMenuItem);
                }

                if (formatType == typeof(TimedText10))
                {
                    // REGION
                    var contextMenuStripLvHeaderRegionToolStripMenuItem = new ToolStripMenuItem(Configuration.Settings.Language.General.Region);
                    contextMenuStripLvHeaderRegionToolStripMenuItem.CheckOnClick = true;
                    contextMenuStripLvHeaderRegionToolStripMenuItem.Checked = Configuration.Settings.Tools.ListViewShowColumnRegion;
                    contextMenuStripLvHeaderRegionToolStripMenuItem.Click += (sender2, e2) =>
                    {
                        SubtitleListview1.BeginUpdate();
                        Configuration.Settings.Tools.ListViewShowColumnRegion = contextMenuStripLvHeaderRegionToolStripMenuItem.Checked;
                        if (Configuration.Settings.Tools.ListViewShowColumnRegion)
                        {
                            SubtitleListview1.ShowRegionColumn(Configuration.Settings.Language.General.Region);
                        }
                        else
                        {
                            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Region);
                        }

                        SaveSubtitleListviewIndices();
                        UiUtil.InitializeSubtitleFont(SubtitleListview1);
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        RestoreSubtitleListviewIndices();
                        SubtitleListview1.EndUpdate();
                    };
                    cm.Items.Add(contextMenuStripLvHeaderRegionToolStripMenuItem);
                }

                cm.Show(SubtitleListview1, coordinates);
                return;
            }

            toolStripMenuItemPreview.Visible = formatType == typeof(WebVTT) &&
                                               !string.IsNullOrEmpty(_videoFileName) &&
                                               (_videoFileName.ToLowerInvariant().EndsWith(".mp4") || _videoFileName.ToLowerInvariant().EndsWith(".m4v")) &&
                                               IsSubtitleLoaded;

            toolStripMenuItemSetRegion.Visible = false;
            toolStripMenuItemSetLanguage.Visible = false;
            List<string> actors = null;
            if ((formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha) || formatType == typeof(CsvNuendo)) && SubtitleListview1.SelectedItems.Count > 0)
            {
                actors = new List<string>();
                toolStripMenuItemWebVTT.Visible = false;
                var styles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, tsi_Click);
                }

                setStylesForSelectedLinesToolStripMenuItem.Visible = styles.Count > 1;
                toolStripMenuItemAssStyles.Visible = true;
                if (formatType == typeof(AdvancedSubStationAlpha))
                {
                    toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.AdvancedSubStationAlphaStyles;
                    setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.AdvancedSubStationAlphaSetStyle;
                }
                else
                {
                    toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.SubStationAlphaStyles;
                    setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SubStationAlphaSetStyle;
                }

                // actor
                foreach (var p in _subtitle.Paragraphs)
                {
                    if (!string.IsNullOrEmpty(p.Actor) && !actors.Contains(p.Actor))
                    {
                        actors.Add(p.Actor);
                    }

                    actors.Sort();
                }

                setActorForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var actor in actors)
                {
                    setActorForSelectedLinesToolStripMenuItem.DropDownItems.Add(actor, null, actor_Click);
                }

                if (actors.Count > 0)
                {
                    var tss = new ToolStripSeparator();
                    UiUtil.FixFonts(tss);
                    setActorForSelectedLinesToolStripMenuItem.DropDownItems.Add(tss);
                }

                setActorForSelectedLinesToolStripMenuItem.DropDownItems.Add(_language.Menu.ContextMenu.NewActor, null, SetNewActor);
                if (actors.Count > 0)
                {
                    setActorForSelectedLinesToolStripMenuItem.DropDownItems.Add(_language.Menu.ContextMenu.RemoveActors, null, RemoveActors);
                }
            }
            else if (((formatType == typeof(TimedText10) && Configuration.Settings.SubtitleSettings.TimedText10ShowStyleAndLanguage) || formatType == typeof(ItunesTimedText)) && SubtitleListview1.SelectedItems.Count > 0)
            {
                toolStripMenuItemWebVTT.Visible = false;
                toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.TimedTextStyles;
                var styles = TimedText10.GetStylesFromHeader(_subtitle.Header);
                setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, tsi_Click);
                }

                setStylesForSelectedLinesToolStripMenuItem.Visible = styles.Count >= 1;
                toolStripMenuItemAssStyles.Visible = true;
                setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.TimedTextSetStyle;

                // regions
                if (string.IsNullOrEmpty(_subtitle.Header) || !_subtitle.Header.Contains("http://www.w3.org/ns/ttml"))
                {
                    _subtitle.Header = new TimedText10().ToText(_subtitle, string.Empty);
                }

                var regions = TimedText10.GetRegionsFromHeader(_subtitle.Header);
                toolStripMenuItemSetRegion.DropDownItems.Clear();
                toolStripMenuItemSetRegion.Text = _language.Menu.ContextMenu.TimedTextSetRegion;
                if (regions.Count > 0)
                {
                    toolStripMenuItemSetRegion.Visible = true;
                    foreach (var region in regions)
                    {
                        toolStripMenuItemSetRegion.DropDownItems.Add(region, null, SetRegionClick);
                    }

                    toolStripMenuItemSetRegion.DropDownItems.Add("-");
                    var clear = new ToolStripMenuItem(Configuration.Settings.Language.DvdSubRip.Clear);
                    toolStripMenuItemSetRegion.DropDownItems.Add(clear);
                    clear.Click += (sender2, e2) =>
                    {
                        MakeHistoryForUndo("Set region: " + Configuration.Settings.Language.DvdSubRip.Clear);
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index].Region = null;
                            SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                        }
                    };
                }
                else
                {
                    toolStripMenuItemSetRegion.Visible = false;
                }

                // languages
                var languages = TimedText10.GetUsedLanguages(_subtitle);
                toolStripMenuItemSetLanguage.DropDownItems.Clear();
                toolStripMenuItemSetLanguage.Text = _language.Menu.ContextMenu.TimedTextSetLanguage;
                toolStripMenuItemSetLanguage.Visible = true;
                if (languages.Count > 0)
                {
                    foreach (var language in languages)
                    {
                        toolStripMenuItemSetLanguage.DropDownItems.Add(language, null, AddLanguageClick);
                    }

                    toolStripMenuItemSetLanguage.DropDownItems.Add("-");
                }

                var newItem = new ToolStripMenuItem(_language.New);
                toolStripMenuItemSetLanguage.DropDownItems.Add(newItem);
                newItem.Click += (senderNew, eNew) =>
                {
                    var moreLanguages = new List<CultureInfo>();
                    foreach (CultureInfo x in CultureInfo.GetCultures(CultureTypes.NeutralCultures))
                    {
                        var twoLetterLower = x.TwoLetterISOLanguageName.ToLowerInvariant();
                        if (!languages.Contains(twoLetterLower) &&
                            !languages.Contains(x.GetThreeLetterIsoLanguageName().ToLowerInvariant()) &&
                            twoLetterLower != "iv")
                        {
                            moreLanguages.Add(x);
                        }
                    }

                    moreLanguages = moreLanguages.OrderBy(p => p.TwoLetterISOLanguageName).ToList();
                    using (var form = new TimedTextNewLanguage(moreLanguages, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle)))
                    {
                        if (form.ShowDialog(this) == DialogResult.OK)
                        {
                            if (!string.IsNullOrEmpty(form.Language))
                            {
                                MakeHistoryForUndo("Set language: " + form.Language);
                                foreach (int index in SubtitleListview1.SelectedIndices)
                                {
                                    _subtitle.Paragraphs[index].Language = form.Language;
                                    _subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(_subtitle.Paragraphs[index]);
                                    SubtitleListview1.SetExtraText(index, _subtitle.Paragraphs[index].Extra, SubtitleListview1.ForeColor);
                                }
                            }
                        }
                    }
                };

                if (languages.Count > 0)
                {
                    var clearLanguage = new ToolStripMenuItem(Configuration.Settings.Language.DvdSubRip.Clear);
                    toolStripMenuItemSetLanguage.DropDownItems.Add(clearLanguage);
                    clearLanguage.Click += (sender2, e2) =>
                    {
                        MakeHistoryForUndo("Set language: " + Configuration.Settings.Language.DvdSubRip.Clear);
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index].Language = null;
                            _subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(_subtitle.Paragraphs[index]);
                            SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                        }
                    };
                }
            }
            else if ((formatType == typeof(Sami) || formatType == typeof(SamiModern)) && SubtitleListview1.SelectedItems.Count > 0)
            {
                toolStripMenuItemWebVTT.Visible = false;
                toolStripMenuItemAssStyles.Text = _language.Menu.ContextMenu.TimedTextStyles;
                var styles = Sami.GetStylesFromHeader(_subtitle.Header);
                setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, tsi_Click);
                }

                setStylesForSelectedLinesToolStripMenuItem.Visible = styles.Count > 1;
                toolStripMenuItemAssStyles.Visible = false;
                setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.SamiSetStyle;
            }
            else if (formatType == typeof(WebVTT) && SubtitleListview1.SelectedItems.Count > 0)
            {
                setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                toolStripMenuItemAssStyles.Visible = false;
                toolStripMenuItemWebVTT.Visible = true;
                var voices = WebVTT.GetVoices(_subtitle);
                toolStripMenuItemWebVTT.DropDownItems.Clear();
                foreach (var style in voices)
                {
                    toolStripMenuItemWebVTT.DropDownItems.Add(style, null, WebVTTSetVoice);
                }

                toolStripMenuItemWebVTT.DropDownItems.Add(_language.Menu.ContextMenu.WebVTTSetNewVoice, null, WebVTTSetNewVoice);
                if (voices.Count > 0)
                {
                    toolStripMenuItemWebVTT.DropDownItems.Add(_language.Menu.ContextMenu.WebVTTRemoveVoices, null, WebVTTRemoveVoices);
                }
            }
            else if ((format.Name == "Nuendo" && SubtitleListview1.SelectedItems.Count > 0))
            {
                toolStripMenuItemWebVTT.Visible = false;
                var styles = GetNuendoStyles();
                setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, NuendoSetStyle);
                }

                setStylesForSelectedLinesToolStripMenuItem.Visible = styles.Count > 1;
                toolStripMenuItemAssStyles.Visible = false;
                setStylesForSelectedLinesToolStripMenuItem.Text = _language.Menu.ContextMenu.NuendoSetStyle;
            }
            else
            {
                setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                toolStripMenuItemAssStyles.Visible = false;
                toolStripMenuItemWebVTT.Visible = false;
            }

            if (actors != null)
            {
                setActorForSelectedLinesToolStripMenuItem.Visible = true;
            }
            else
            {
                setActorForSelectedLinesToolStripMenuItem.Visible = false;
            }

            if (formatType == typeof(Ebu))
            {
                Ebu.EbuGeneralSubtitleInformation header;
                if (_subtitle != null && _subtitle.Header != null && (_subtitle.Header.Contains("STL2") || _subtitle.Header.Contains("STL3")))
                {
                    header = Ebu.ReadHeader(Encoding.UTF8.GetBytes(_subtitle.Header));
                }
                else
                {
                    header = new Ebu.EbuGeneralSubtitleInformation();
                }

                var open = header.DisplayStandardCode != "1" && header.DisplayStandardCode != "2";
                boxToolStripMenuItem.Visible = open;
            }
            else
            {
                boxToolStripMenuItem.Visible = false;
            }

            microsoftBingTranslateToolStripMenuItem.Visible =
                !string.IsNullOrEmpty(Configuration.Settings.Tools.MicrosoftTranslatorApiKey) &&
                !string.IsNullOrEmpty(Configuration.Settings.Tools.MicrosoftTranslatorTokenEndpoint);

            toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = false;
            if (SubtitleListview1.SelectedItems.Count == 0)
            {
                contextMenuStripEmpty.Show(MousePosition.X, MousePosition.Y);
                e.Cancel = true;
            }
            else
            {
                bool noNetWorkSession = _networkSession == null;

                toolStripMenuItemSaveSelectedLines.Visible = false;
                toolStripMenuItemInsertBefore.Visible = true;
                toolStripMenuItemInsertAfter.Visible = true;
                toolStripMenuItemInsertSubtitle.Visible = noNetWorkSession;
                toolStripMenuItemMergeLines.Visible = true;
                mergeAfterToolStripMenuItem.Visible = true;
                mergeBeforeToolStripMenuItem.Visible = true;
                splitLineToolStripMenuItem.Visible = true;
                toolStripSeparator7.Visible = true;
                typeEffectToolStripMenuItem.Visible = noNetWorkSession;
                karokeeEffectToolStripMenuItem.Visible = noNetWorkSession;
                toolStripSeparatorAdvancedFunctions.Visible = noNetWorkSession;
                adjustDisplayTimeForSelectedLinesToolStripMenuItem.Visible = true;
                visualSyncSelectedLinesToolStripMenuItem.Visible = true;
                toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = false;
                toolStripMenuItemUnbreakLines.Visible = true;
                toolStripMenuItemAutoBreakLines.Visible = true;
                toolStripSeparatorBreakLines.Visible = true;
                toolStripMenuItemSurroundWithMusicSymbols.Visible = IsUnicode || Configuration.Settings.Tools.MusicSymbol == "#" || Configuration.Settings.Tools.MusicSymbol == "*";
                if (SubtitleListview1.SelectedItems.Count == 1)
                {
                    toolStripMenuItemMergeLines.Visible = false;
                    visualSyncSelectedLinesToolStripMenuItem.Visible = false;
                    toolStripMenuItemUnbreakLines.Visible = false;
                    toolStripMenuItemAutoBreakLines.Visible = false;
                    toolStripSeparatorBreakLines.Visible = false;
                    if (_subtitleAlternate != null && noNetWorkSession && !string.IsNullOrEmpty(Configuration.Settings.Tools.MicrosoftBingApiId))
                    {
                        toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = true;
                    }

                    toolStripMenuItemMergeDialog.Visible = false;
                }
                else if (SubtitleListview1.SelectedItems.Count == 2)
                {
                    toolStripMenuItemInsertBefore.Visible = false;
                    toolStripMenuItemInsertAfter.Visible = false;
                    toolStripMenuItemInsertSubtitle.Visible = false;
                    mergeAfterToolStripMenuItem.Visible = false;
                    mergeBeforeToolStripMenuItem.Visible = false;
                    splitLineToolStripMenuItem.Visible = false;
                    toolStripMenuItemMergeDialog.Visible = true;
                }
                else if (SubtitleListview1.SelectedItems.Count >= 2)
                {
                    toolStripMenuItemSaveSelectedLines.Visible = true;
                    toolStripMenuItemInsertBefore.Visible = false;
                    toolStripMenuItemInsertAfter.Visible = false;
                    toolStripMenuItemInsertSubtitle.Visible = false;
                    splitLineToolStripMenuItem.Visible = false;
                    mergeAfterToolStripMenuItem.Visible = false;
                    mergeBeforeToolStripMenuItem.Visible = false;
                    toolStripSeparator7.Visible = false;

                    if (SubtitleListview1.SelectedItems.Count > 25)
                    {
                        toolStripMenuItemMergeLines.Visible = false;
                    }
                    else if (SubtitleListview1.SelectedItems.Count > 2)
                    { // only allow merge if text is not way too long
                        try
                        {
                            int totalLength = 0;
                            foreach (int index in SubtitleListview1.SelectedIndices)
                            {
                                totalLength += _subtitle.Paragraphs[index].Text.Length;
                            }

                            if (totalLength > Configuration.Settings.General.SubtitleLineMaximumLength * 2.5)
                            {
                                toolStripMenuItemMergeLines.Visible = false;
                            }
                        }
                        catch
                        {
                        }
                    }

                    toolStripMenuItemMergeDialog.Visible = false;
                }

                if (formatType != typeof(SubRip))
                {
                    toolStripSeparatorAdvancedFunctions.Visible = SubtitleListview1.SelectedItems.Count == 1 && noNetWorkSession;
                }
            }

            toolStripMenuItemPasteSpecial.Visible = Clipboard.ContainsText();
            toolStripMenuItemSurroundWithMusicSymbols.Text = Configuration.Settings.Tools.MusicSymbol;
            if (string.IsNullOrEmpty(Configuration.Settings.Tools.MusicSymbol))
            {
                toolStripMenuItemSurroundWithMusicSymbols.Visible = false;
            }
        }

        private void tsi_Click(object sender, EventArgs e)
        {
            string style = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(style))
            {
                MakeHistoryForUndo("Set style: " + style);

                var format = GetCurrentSubtitleFormat();
                var formatType = format.GetType();
                if ((formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText)))
                {
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        _subtitle.Paragraphs[index].Style = style;
                        _subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(_subtitle.Paragraphs[index]);
                        SubtitleListview1.SetExtraText(index, _subtitle.Paragraphs[index].Extra, SubtitleListview1.ForeColor);
                    }
                }
                else
                {
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        _subtitle.Paragraphs[index].Extra = style;
                        SubtitleListview1.SetExtraText(index, style, SubtitleListview1.ForeColor);
                    }
                }
            }
        }

        private void actor_Click(object sender, EventArgs e)
        {
            string actor = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(actor))
            {
                MakeHistoryForUndo(Configuration.Settings.Language.Main.Menu.ContextMenu.SetActor + ": " + actor);

                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Actor = actor;
                    SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                }
            }
        }

        private void SetRegionClick(object sender, EventArgs e)
        {
            string region = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(region))
            {
                MakeHistoryForUndo("Set region: " + region);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Region = region;
                    SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                }
            }
        }

        private void AddLanguageClick(object sender, EventArgs e)
        {
            string lang = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(lang))
            {
                MakeHistoryForUndo("Set language: " + lang);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Language = lang;
                    _subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(_subtitle.Paragraphs[index]);
                    SubtitleListview1.SetExtraText(index, _subtitle.Paragraphs[index].Extra, SubtitleListview1.ForeColor);
                }
            }
        }

        private void NuendoSetStyle(object sender, EventArgs e)
        {
            string style = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(style))
            {
                int indexOfComment = style.IndexOf('[');
                if (indexOfComment > 0)
                {
                    style = style.Substring(0, indexOfComment).Trim();
                }

                MakeHistoryForUndo("Set style: " + style);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Extra = style;
                    _subtitle.Paragraphs[index].Actor = style;
                    SubtitleListview1.SetExtraText(index, style, SubtitleListview1.ForeColor);
                }
            }
        }

        private void WebVTTSetVoice(object sender, EventArgs e)
        {
            string voice = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(voice))
            {
                MakeHistoryForUndo("Set voice: " + voice);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    _subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", _subtitle.Paragraphs[index].Text);
                    _subtitle.Paragraphs[index].Text = string.Format("<v {0}>{1}", voice, _subtitle.Paragraphs[index].Text);
                    SubtitleListview1.SetText(index, _subtitle.Paragraphs[index].Text);
                }

                RefreshSelectedParagraph();
            }
        }

        private void WebVTTSetNewVoice(object sender, EventArgs e)
        {
            using (var form = new TextPrompt(Configuration.Settings.Language.WebVttNewVoice.Title, Configuration.Settings.Language.WebVttNewVoice.VoiceName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string voice = form.InputText;
                    if (!string.IsNullOrEmpty(voice))
                    {
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", _subtitle.Paragraphs[index].Text);
                            _subtitle.Paragraphs[index].Text = string.Format("<v {0}>{1}", voice, _subtitle.Paragraphs[index].Text);
                            SubtitleListview1.SetText(index, _subtitle.Paragraphs[index].Text);
                        }

                        RefreshSelectedParagraph();
                    }
                }
            }
        }

        private void SetNewActor(object sender, EventArgs e)
        {
            using (var form = new TextPrompt(Configuration.Settings.Language.Main.Menu.ContextMenu.NewActor.Replace("...", string.Empty), Configuration.Settings.Language.General.Actor))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string actor = form.InputText;
                    if (!string.IsNullOrEmpty(actor))
                    {
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index].Actor = actor;
                            SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                        }
                    }
                }
            }
        }

        private void WebVTTRemoveVoices(object sender, EventArgs e)
        {
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                _subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", _subtitle.Paragraphs[index].Text);
                SubtitleListview1.SetText(index, _subtitle.Paragraphs[index].Text);
            }

            RefreshSelectedParagraph();
        }

        private void RemoveActors(object sender, EventArgs e)
        {
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                _subtitle.Paragraphs[index].Actor = null;
                SubtitleListview1.SetTimeAndText(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
            }
        }

        private void WebVTTSetVoiceTextBox(object sender, EventArgs e)
        {
            string voice = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(voice))
            {
                var tb = GetFocusedTextBox();

                if (tb.SelectionLength > 0)
                {
                    string s = tb.SelectedText;
                    s = WebVTT.RemoveTag("v", s);
                    if (tb.SelectedText == tb.Text)
                    {
                        s = string.Format("<v {0}>{1}", voice, s);
                    }
                    else
                    {
                        s = string.Format("<v {0}>{1}</v>", voice, s);
                    }

                    tb.SelectedText = s;
                }
            }
        }

        private void WebVTTSetNewVoiceTextBox(object sender, EventArgs e)
        {
            using (var form = new TextPrompt(Configuration.Settings.Language.WebVttNewVoice.Title, Configuration.Settings.Language.WebVttNewVoice.VoiceName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string voice = form.InputText;
                    if (!string.IsNullOrEmpty(voice))
                    {
                        var tb = GetFocusedTextBox();

                        if (tb.SelectionLength > 0)
                        {
                            string s = tb.SelectedText;
                            s = WebVTT.RemoveTag("v", s);
                            if (tb.SelectedText == tb.Text)
                            {
                                s = string.Format("<v {0}>{1}", voice, s);
                            }
                            else
                            {
                                s = string.Format("<v {0}>{1}</v>", voice, s);
                            }

                            tb.SelectedText = s;
                        }
                    }
                }
            }
        }

        private void BoldToolStripMenuItemClick(object sender, EventArgs e)
        {
            ListViewToggleTag(HtmlUtil.TagBold);
        }

        private void ItalicToolStripMenuItemClick(object sender, EventArgs e)
        {
            ListViewToggleTag(HtmlUtil.TagItalic);
        }

        private void UnderlineToolStripMenuItemClick(object sender, EventArgs e)
        {
            ListViewToggleTag(HtmlUtil.TagUnderline);
        }

        private void ListViewToggleTag(string tag)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, tag));

                var indices = new List<int>();
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    indices.Add(item.Index);
                }

                SubtitleListview1.BeginUpdate();
                foreach (int i in indices)
                {
                    var p = _subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                        {
                            var original = Utilities.GetOriginalParagraph(i, p, _subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                original.Text = HtmlUtil.ToggleTag(original.Text, tag);
                                SubtitleListview1.SetAlternateText(i, original.Text);
                            }
                        }

                        p.Text = HtmlUtil.ToggleTag(p.Text, tag);
                        SubtitleListview1.SetText(i, p.Text);
                    }
                }

                SubtitleListview1.EndUpdate();

                ShowStatus(string.Format(_language.TagXAdded, tag));
                ShowSource();
                RefreshSelectedParagraph();
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            }
        }

        private void ToolStripMenuItemDeleteClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                string statusText;
                string historyText;
                string askText;

                if (SubtitleListview1.SelectedItems.Count > 1)
                {
                    statusText = string.Format(_language.XLinesDeleted, SubtitleListview1.SelectedItems.Count);
                    historyText = string.Format(_language.BeforeDeletingXLines, SubtitleListview1.SelectedItems.Count);
                    askText = string.Format(_language.DeleteXLinesPrompt, SubtitleListview1.SelectedItems.Count);
                }
                else
                {
                    statusText = _language.OneLineDeleted;
                    historyText = _language.BeforeDeletingOneLine;
                    askText = _language.DeleteOneLinePrompt;
                }

                if (Configuration.Settings.General.PromptDeleteLines && MessageBox.Show(askText, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    _cutText = string.Empty;
                    return;
                }

                if (!string.IsNullOrEmpty(_cutText))
                {
                    Clipboard.SetText(_cutText);
                    _cutText = string.Empty;
                }

                MakeHistoryForUndo(historyText);
                DeleteSelectedLines();

                ResetTextInfoIfEmpty();

                ShowStatus(statusText);
                ShowSource();
            }
        }

        private void ResetTextInfoIfEmpty()
        {
            if (_subtitle.Paragraphs.Count == 0)
            {
                labelStartTimeWarning.Text = string.Empty;
                labelDurationWarning.Text = string.Empty;
                _subtitleListViewIndex = -1;
                textBoxListViewText.Text = string.Empty;
                textBoxListViewTextAlternate.Text = string.Empty;
                textBoxListViewText.Enabled = false;
                labelTextLineLengths.Text = string.Empty;
                labelCharactersPerSecond.Text = string.Empty;
                labelTextLineTotal.Text = string.Empty;
                textBoxListViewText.Enabled = false;
                labelSingleLine.Text = string.Empty;
                labelSingleLinePixels.Text = string.Empty;
                timeUpDownStartTime.TimeCode = new TimeCode();
                numericUpDownDuration.Value = 0;
                ShowHideBookmark(new Paragraph());
                labelAlternateSingleLine.Text = string.Empty;
                labelAlternateSingleLinePixels.Text = string.Empty;
                textBoxListViewTextAlternate.Enabled = false;
                labelAlternateCharactersPerSecond.Text = string.Empty;
                labelTextAlternateLineLengths.Text = string.Empty;
                labelTextAlternateLineTotal.Text = string.Empty;
            }
        }

        private void DeleteSelectedLines()
        {
            _subtitleListViewIndex = -1;
            textBoxListViewText.Text = string.Empty;
            textBoxListViewTextAlternate.Text = string.Empty;
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                var alternateIndices = new List<int>();
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    var p = _subtitle.GetParagraphOrDefault(item.Index);
                    if (p != null)
                    {
                        var original = Utilities.GetOriginalParagraph(item.Index, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            alternateIndices.Add(_subtitleAlternate.GetIndex(original));
                        }
                    }
                }

                alternateIndices.Reverse();
                foreach (int i in alternateIndices)
                {
                    if (i < _subtitleAlternate.Paragraphs.Count)
                    {
                        _subtitleAlternate.Paragraphs.RemoveAt(i);
                    }
                }

                _subtitleAlternate.Renumber();
            }

            var indices = new List<int>();
            foreach (ListViewItem item in SubtitleListview1.SelectedItems)
            {
                indices.Add(item.Index);
            }

            int firstIndex = SubtitleListview1.SelectedItems[0].Index;

            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(indices, 0, null);
            }
            else
            {
                indices.Reverse();
                foreach (int i in indices)
                {
                    _subtitle.Paragraphs.RemoveAt(i);
                }

                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                if (SubtitleListview1.FirstVisibleIndex == 0)
                {
                    SubtitleListview1.FirstVisibleIndex = -1;
                }

                if (SubtitleListview1.Items.Count > firstIndex)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                }
                else if (SubtitleListview1.Items.Count > 0)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(SubtitleListview1.Items.Count - 1, true);
                }
            }

            ResetTextInfoIfEmpty();
            SetListViewStateImages();
        }

        private void ToolStripMenuItemInsertBeforeClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0)
            {
                InsertBefore();
            }

            textBoxListViewText.Focus();
        }

        private void InsertBefore()
        {
            MakeHistoryForUndo(_language.BeforeInsertLine);

            int firstSelectedIndex = 0;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            }

            int addMilliseconds = Configuration.Settings.General.MinimumMillisecondsBetweenLines + 1;
            if (addMilliseconds < 1)
            {
                addMilliseconds = 1;
            }

            var newParagraph = new Paragraph();

            SetStyleForNewParagraph(newParagraph, firstSelectedIndex);

            var prev = _subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
            var next = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            if (prev != null && next != null)
            {
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - addMilliseconds;
                newParagraph.StartTime.TotalMilliseconds = newParagraph.EndTime.TotalMilliseconds - 2000;
                if (newParagraph.StartTime.TotalMilliseconds <= prev.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + 1;
                }

                if (newParagraph.Duration.TotalMilliseconds < 100)
                {
                    newParagraph.EndTime.TotalMilliseconds += 100;
                }

                if (next.StartTime.IsMaxTime && prev.EndTime.IsMaxTime)
                {
                    newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                }
                else if (next.StartTime.TotalMilliseconds == 0 && prev.EndTime.TotalMilliseconds == 0)
                {
                    newParagraph.StartTime.TotalMilliseconds = 0;
                    newParagraph.EndTime.TotalMilliseconds = 0;
                }
                else if (prev.StartTime.TotalMilliseconds == next.StartTime.TotalMilliseconds &&
                         prev.EndTime.TotalMilliseconds == next.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.StartTime.TotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                }
            }
            else if (prev != null)
            {
                newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + addMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs;
                if (newParagraph.StartTime.TotalMilliseconds > newParagraph.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + 1;
                }
            }
            else if (next != null)
            {
                newParagraph.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - (2000 + Configuration.Settings.General.MinimumMillisecondsBetweenLines);
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;

                if (next.StartTime.IsMaxTime)
                {
                    newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                }
                else if (next.StartTime.TotalMilliseconds == 0 && next.EndTime.TotalMilliseconds == 0)
                {
                    newParagraph.StartTime.TotalMilliseconds = 0;
                    newParagraph.EndTime.TotalMilliseconds = 0;
                }
            }
            else
            {
                newParagraph.StartTime.TotalMilliseconds = 1000;
                newParagraph.EndTime.TotalMilliseconds = 3000;
                if (newParagraph.Duration.TotalMilliseconds < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                {
                    newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds +
                                                             Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds;
                }
            }

            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), firstSelectedIndex, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(firstSelectedIndex, newParagraph);
                _subtitleListViewIndex = -1;
                _subtitle.Renumber();

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible)
                {
                    var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex, _subtitle.Paragraphs[firstSelectedIndex], _subtitleAlternate.Paragraphs);
                    if (currentOriginal != null)
                    {
                        _subtitleAlternate.Paragraphs.Insert(_subtitleAlternate.Paragraphs.IndexOf(currentOriginal), new Paragraph(newParagraph));
                    }
                    else
                    {
                        _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                    }

                    _subtitleAlternate.Renumber();
                }

                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            ShowSource();
            ShowStatus(_language.LineInserted);
        }

        private void ToolStripMenuItemInsertAfterClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0)
            {
                InsertAfter(string.Empty);
                textBoxListViewText.Focus();
            }
        }

        private void InsertAfter(string text)
        {
            MakeHistoryForUndo(_language.BeforeInsertLine);

            int firstSelectedIndex = 0;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index + 1;
            }

            var newParagraph = new Paragraph { Text = text };

            SetStyleForNewParagraph(newParagraph, firstSelectedIndex);

            var prev = _subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
            var next = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            if (prev != null)
            {
                int addMilliseconds = Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                if (addMilliseconds < 1)
                {
                    addMilliseconds = 1;
                }

                newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + addMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs;
                if (next != null && newParagraph.EndTime.TotalMilliseconds > next.StartTime.TotalMilliseconds)
                {
                    newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 1;
                }

                if (newParagraph.StartTime.TotalMilliseconds > newParagraph.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + 1;
                }

                if (next != null && next.StartTime.IsMaxTime && prev.EndTime.IsMaxTime)
                {
                    newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                }
                else if (next != null && next.StartTime.TotalMilliseconds == 0 && prev.EndTime.TotalMilliseconds == 0)
                {
                    newParagraph.StartTime.TotalMilliseconds = 0;
                    newParagraph.EndTime.TotalMilliseconds = 0;
                }
                else if (next == null && prev.EndTime.IsMaxTime)
                {
                    newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                }
                else if (next == null && prev.EndTime.TotalMilliseconds == 0)
                {
                    newParagraph.StartTime.TotalMilliseconds = 0;
                    newParagraph.EndTime.TotalMilliseconds = 0;
                }
                else if (next != null &&
                         prev.StartTime.TotalMilliseconds == next.StartTime.TotalMilliseconds &&
                         prev.EndTime.TotalMilliseconds == next.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.StartTime.TotalMilliseconds;
                    newParagraph.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                }
            }
            else if (next != null)
            {
                newParagraph.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 2000;
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 1;
            }
            else
            {
                newParagraph.StartTime.TotalMilliseconds = 1000;
                newParagraph.EndTime.TotalMilliseconds = 3000;
                if (newParagraph.Duration.TotalMilliseconds < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                {
                    newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds +
                                                             Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds;
                }
            }

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex - 1, _subtitle.Paragraphs[firstSelectedIndex - 1], _subtitleAlternate.Paragraphs);
                if (currentOriginal != null)
                {
                    _subtitleAlternate.Paragraphs.Insert(_subtitleAlternate.Paragraphs.IndexOf(currentOriginal) + 1, new Paragraph(newParagraph));
                }
                else
                {
                    _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                }

                _subtitleAlternate.Renumber();
            }

            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), firstSelectedIndex, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(firstSelectedIndex, newParagraph);
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            ShowSource();
            ShowStatus(_language.LineInserted);
        }

        private void SetStyleForNewParagraph(Paragraph newParagraph, int nearestIndex)
        {
            var format = GetCurrentSubtitleFormat();
            bool useExtraForStyle = format.HasStyleSupport;
            var formatType = format.GetType();
            var styles = new List<string>();
            if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
            {
                styles = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
            }
            else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText))
            {
                styles = TimedText10.GetStylesFromHeader(_subtitle.Header);
            }
            else if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
            {
                styles = Sami.GetStylesFromHeader(_subtitle.Header);
            }

            string style = "Default";
            if (styles.Count > 0)
            {
                style = styles[0];
            }

            if (useExtraForStyle)
            {
                newParagraph.Extra = style;
                if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText))
                {
                    if (styles.Count > 0)
                    {
                        newParagraph.Style = style;
                    }

                    var c = _subtitle.GetParagraphOrDefault(nearestIndex);
                    if (c != null)
                    {
                        newParagraph.Style = c.Style;
                        newParagraph.Region = c.Region;
                        newParagraph.Language = c.Language;
                    }

                    newParagraph.Extra = TimedText10.SetExtra(newParagraph);
                }
            }
        }

        private void SubtitleListView1SelectedIndexChange()
        {
            StopAutoDuration();
            ShowLineInformationListView();
            if (_subtitle.Paragraphs.Count > 0)
            {
                int firstSelectedIndex = 0;
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                }

                if (_subtitleListViewIndex >= 0)
                {
                    if (_subtitleListViewIndex == firstSelectedIndex)
                    {
                        return;
                    }

                    bool showSource = false;

                    var last = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                    if (textBoxListViewText.Text != last.Text)
                    {
                        last.Text = textBoxListViewText.Text.TrimEnd();
                        SubtitleListview1.SetText(_subtitleListViewIndex, last.Text);
                        showSource = true;
                    }

                    var startTime = timeUpDownStartTime.TimeCode;
                    if (startTime != null)
                    {
                        if (Math.Abs(last.StartTime.TotalMilliseconds - startTime.TotalMilliseconds) > 0.5)
                        {
                            var dur = last.Duration.TotalMilliseconds;
                            last.StartTime.TotalMilliseconds = startTime.TotalMilliseconds;
                            last.EndTime.TotalMilliseconds = startTime.TotalMilliseconds + dur;
                            SubtitleListview1.SetStartTimeAndDuration(_subtitleListViewIndex, last, _subtitle.GetParagraphOrDefault(_subtitleListViewIndex + 1), _subtitle.GetParagraphOrDefault(_subtitleListViewIndex - 1));
                            showSource = true;
                        }
                    }

                    var duration = GetDurationInMilliseconds();
                    if (duration > 0 && duration < 100000 && Math.Abs(duration - last.Duration.TotalMilliseconds) > 0.5)
                    {
                        last.EndTime.TotalMilliseconds = last.StartTime.TotalMilliseconds + duration;
                        SubtitleListview1.SetDuration(_subtitleListViewIndex, last, _subtitle.GetParagraphOrDefault(_subtitleListViewIndex + 1));
                        showSource = true;
                    }

                    if (showSource)
                    {
                        ShowSource();
                    }
                }

                var p = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (p != null)
                {
                    InitializeListViewEditBox(p);
                    _subtitleListViewIndex = firstSelectedIndex;
                    _oldSelectedParagraph = new Paragraph(p);
                    UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, p, textBoxListViewText);
                    FixVerticalScrollBars(textBoxListViewText, ref _lastNumberOfNewLines);

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                    {
                        InitializeListViewEditBoxAlternate(p, firstSelectedIndex);
                        labelAlternateCharactersPerSecond.Left = textBoxListViewTextAlternate.Left + (textBoxListViewTextAlternate.Width - labelAlternateCharactersPerSecond.Width);
                        labelTextAlternateLineTotal.Left = textBoxListViewTextAlternate.Left + (textBoxListViewTextAlternate.Width - labelTextAlternateLineTotal.Width);
                    }
                }
            }
        }

        private long _lastSubtitleListviewSelectedIndexChangedTick = -1;
        private long _lastLastSubtitleListviewSelectedIndexChangedTick = -1;

        private void SubtitleListview1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count == 0)
            {
                _listViewTextUndoIndex = -1;
                return;
            }

            if (DateTime.UtcNow.Ticks - _lastLastSubtitleListviewSelectedIndexChangedTick < 10000 * 50) // only if last change was less ago than 50 milliseconds
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                System.Threading.SynchronizationContext.Current.Post(TimeSpan.FromMilliseconds(50), () =>
                {
                    SubtitleListview1_SelectedIndexChanged(null, null);
                    SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                });
                return;
            }

            if (!_makeHistoryPaused)
            {
                _listViewTextTicks = 0;
                _listViewAlternateTextTicks = 0;
                TimerTextUndoTick(null, null);
                TimerAlternateTextUndoTick(null, null);
            }

            _listViewTextUndoIndex = -1;
            SubtitleListView1SelectedIndexChange();
            if (_findHelper != null && !_findHelper.InProgress)
            {
                _findHelper.StartLineIndex = _subtitleListViewIndex;
                _findHelper.SelectedIndex = _subtitleListViewIndex;
                _findHelper.SelectedPosition = 0;
                _findHelper.ReplaceFromPosition = 0;
                _findHelper.MatchInOriginal = false;
            }

            _lastLastSubtitleListviewSelectedIndexChangedTick = _lastSubtitleListviewSelectedIndexChangedTick;
            _lastSubtitleListviewSelectedIndexChangedTick = DateTime.UtcNow.Ticks;
        }

        private void ShowLineInformationListView()
        {
            var profile = Configuration.Settings.General.CurrentProfile + "   ";
            if (!ShowProfileInStatusBar)
            {
                profile = string.Empty;
            }

            if (tabControlSubtitle.SelectedIndex == TabControlListView)
            {
                if (SubtitleListview1.SelectedItems.Count == 1)
                {
                    toolStripSelected.Text = profile + string.Format("{0}/{1}", SubtitleListview1.SelectedItems[0].Index + 1, SubtitleListview1.Items.Count);
                }
                else
                {
                    toolStripSelected.Text = profile + string.Format(_language.XLinesSelected, SubtitleListview1.SelectedItems.Count);
                }
            }
        }

        private void UpdateListViewTextCharactersPerSeconds(Label charsPerSecond, Paragraph paragraph)
        {
            if (paragraph.Duration.TotalSeconds > 0)
            {
                double charactersPerSecond = Utilities.GetCharactersPerSecond(paragraph);
                if (charactersPerSecond > Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds &&
                    Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall)
                {
                    charsPerSecond.ForeColor = Color.Red;
                }
                else
                {
                    charsPerSecond.ForeColor = UiUtil.ForeColor;
                }

                charsPerSecond.Text = string.Format(_language.CharactersPerSecond, charactersPerSecond);
            }
            else
            {
                if (Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall)
                {
                    charsPerSecond.ForeColor = UiUtil.ForeColor;
                }
                else
                {
                    charsPerSecond.ForeColor = Color.Red;
                }

                charsPerSecond.Text = string.Format(_language.CharactersPerSecond, _languageGeneral.NotAvailable);
            }
        }

        private void UpdateListViewTextInfo(Label lineLengths, Label singleLine, Label singleLinePixels, Label lineTotal, Label charactersPerSecond, Paragraph paragraph, TextBox textBox)
        {
            if (paragraph == null)
            {
                return;
            }

            bool textBoxHasFocus = textBox.Focused;
            string text = paragraph.Text;
            lineLengths.Text = _languageGeneral.SingleLineLengths.Trim();
            singleLine.Left = lineLengths.Left + lineLengths.Width - 3;
            singleLinePixels.Left = lineLengths.Left + lineLengths.Width + 50;
            text = HtmlUtil.RemoveHtmlTags(text, true);
            text = NetflixImsc11Japanese.RemoveTags(text);
            UiUtil.GetLineLengths(singleLine, text);

            if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
            {
                UiUtil.GetLinePixelWidths(singleLinePixels, text);
                labelSingleLinePixels.Visible = !(textBoxListViewText.Width / 3 < labelTextLineLengths.Width);
            }
            else
            {
                labelSingleLinePixels.Visible = false;
            }

            buttonSplitLine.Visible = false;

            // remove unicode control characters
            var s = text.RemoveControlCharacters(); // incl. new line

            int numberOfLines = Utilities.GetNumberOfLines(text.Trim());
            int maxLines = int.MaxValue;
            if (Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines)
            {
                maxLines = Configuration.Settings.General.MaxNumberOfLines;
            }

            var splitLines = text.SplitToLines();
            if (numberOfLines <= maxLines)
            {
                if (s.Length <= Configuration.Settings.General.SubtitleLineMaximumLength * Math.Max(numberOfLines, 2) &&
                    splitLines.Count == 2 && splitLines[0].StartsWith('-') && splitLines[1].StartsWith('-') &&
                    (splitLines[0].Length > Configuration.Settings.General.SubtitleLineMaximumLength || splitLines[1].Length > Configuration.Settings.General.SubtitleLineMaximumLength))
                {
                    if (buttonUnBreak.Visible)
                    {
                        if (!textBoxHasFocus)
                        {
                            if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                            {
                                var totalLengthPixels = TextWidth.CalcPixelWidth(s);
                                lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", s.Length, totalLengthPixels));
                            }
                            else
                            {
                                lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, s.Length);
                            }
                        }

                        buttonSplitLine.Visible = true;
                    }
                }
                else if (s.Length <= Configuration.Settings.General.SubtitleLineMaximumLength * Math.Max(numberOfLines, 2))
                {
                    lineTotal.ForeColor = UiUtil.ForeColor;
                    if (!textBoxHasFocus)
                    {
                        if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                        {
                            var totalLengthPixels = TextWidth.CalcPixelWidth(s);
                            lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", s.Length, totalLengthPixels));
                        }
                        else
                        {
                            lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, s.Length);
                        }
                    }
                }
                else
                {
                    lineTotal.ForeColor = Color.Red;
                    if (!textBoxHasFocus)
                    {
                        if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                        {
                            var totalLengthPixels = TextWidth.CalcPixelWidth(s);
                            lineTotal.Text = string.Format(_languageGeneral.TotalLengthXSplitLine, string.Format("{0}     {1}", s.Length, totalLengthPixels));
                        }
                        else
                        {
                            lineTotal.Text = string.Format(_languageGeneral.TotalLengthXSplitLine, s.Length);
                        }
                    }

                    if (buttonUnBreak.Visible)
                    {
                        if (!textBoxHasFocus)
                        {
                            if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                            {
                                var totalLengthPixels = TextWidth.CalcPixelWidth(s);
                                lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", s.Length, totalLengthPixels));
                            }
                            else
                            {
                                lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, s.Length);
                            }
                        }

                        var abl = Utilities.AutoBreakLine(s, "en").SplitToLines();
                        if (abl.Count > maxLines || abl.Any(li => li.Length > Configuration.Settings.General.SubtitleLineMaximumLength))
                        {
                            buttonSplitLine.Visible = true;
                        }
                    }
                }
            }
            else
            {
                if (!textBoxHasFocus)
                {
                    if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
                    {
                        var totalLengthPixels = TextWidth.CalcPixelWidth(s);
                        lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", s.Length, totalLengthPixels));
                    }
                    else
                    {
                        lineTotal.Text = string.Format(_languageGeneral.TotalLengthX, s.Length);
                    }
                }

                var lang = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                var abl = Utilities.AutoBreakLine(s, lang).SplitToLines();
                if (abl.Count > maxLines || abl.Any(li => li.Length > Configuration.Settings.General.SubtitleLineMaximumLength) &&
                    !textBoxListViewTextAlternate.Visible)
                {
                    buttonSplitLine.Visible = true;
                }
            }

            UpdateListViewTextCharactersPerSeconds(charactersPerSecond, paragraph);
            charactersPerSecond.Left = textBox.Left + (textBox.Width - labelCharactersPerSecond.Width);
            lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
        }

        private void ButtonNextClick(object sender, EventArgs e)
        {
            MoveNextPrevious(0);
        }

        private void ButtonPreviousClick(object sender, EventArgs e)
        {
            MoveNextPrevious(1);
        }

        private void MoveNextPrevious(int firstSelectedIndex)
        {
            if (_subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            SubtitleListview1.SuspendLayout();
            var temp = firstSelectedIndex;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            }

            firstSelectedIndex = temp == 0 ? firstSelectedIndex + 1 : firstSelectedIndex - 1;
            var p = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            if (p != null)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            }

            SubtitleListview1.ResumeLayout();
        }

        private void ButtonAutoBreakClick(object sender, EventArgs e)
        {
            string language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
            string languageOriginal = string.Empty;
            if (_subtitleAlternate != null)
            {
                languageOriginal = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleAlternate);
            }

            var textCaretPos = textBoxListViewText.SelectionStart;

            if (SubtitleListview1.SelectedItems.Count > 1)
            {
                bool historyAdded = false;
                SubtitleListview1.BeginUpdate();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        var oldText = p.Text;
                        var newText = Utilities.AutoBreakLine(p.Text, language);
                        if (oldText != newText)
                        {
                            if (!historyAdded)
                            {
                                historyAdded = true;
                                MakeHistoryForUndo(_language.Controls.AutoBreak.RemoveChar('&'));
                            }

                            p.Text = newText;
                            SubtitleListview1.SetText(index, p.Text);
                        }

                        if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                        {
                            var original = Utilities.GetOriginalParagraph(index, p, _subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                oldText = original.Text;
                                newText = Utilities.AutoBreakLine(original.Text, language);
                                if (oldText != newText)
                                {
                                    if (!historyAdded)
                                    {
                                        historyAdded = true;
                                        MakeHistoryForUndo(_language.Controls.AutoBreak.RemoveChar('&'));
                                    }

                                    original.Text = newText;
                                    SubtitleListview1.SetAlternateText(index, original.Text);
                                }
                            }
                        }

                        SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                    }
                }

                SubtitleListview1.EndUpdate();
                RefreshSelectedParagraph();
            }
            else
            {
                var fixedText = Utilities.AutoBreakLine(textBoxListViewText.Text, language);
                var makeHistory = textBoxListViewText.Text != fixedText;
                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var alternateFixedText = Utilities.AutoBreakLine(textBoxListViewTextAlternate.Text, languageOriginal);
                    if (!makeHistory)
                    {
                        makeHistory = textBoxListViewTextAlternate.Text != alternateFixedText;
                    }

                    if (makeHistory)
                    {
                        MakeHistoryForUndo(_language.Controls.AutoBreak.RemoveChar('&'));
                        textBoxListViewText.Text = fixedText;
                    }

                    textBoxListViewTextAlternate.Text = alternateFixedText;
                }
                else if (makeHistory)
                {
                    MakeHistoryForUndo(_language.Controls.AutoBreak.RemoveChar('&'));
                    textBoxListViewText.Text = fixedText;
                }
            }

            var s = textBoxListViewText.Text;
            var startText = s.Substring(0, Math.Min(textCaretPos, s.Length));
            var numberOfNewLines = Utilities.CountTagInText(startText, Environment.NewLine);
            textCaretPos += numberOfNewLines;
            if (s.Length > textCaretPos && '\n' == s[textCaretPos])
            {
                textCaretPos--;
            }

            if (textCaretPos > 0)
            {
                textBoxListViewText.SelectionStart = textCaretPos;
            }
        }

        private int _lastNumberOfNewLines = -1;
        private int _lastNumberOfNewLinesAlternate = -1;

        private static void FixVerticalScrollBars(TextBox tb, ref int lastNumberOfNewLines)
        {
            var noOfNewLines = Utilities.GetNumberOfLines(tb.Text);
            if (noOfNewLines == lastNumberOfNewLines)
            {
                return;
            }

            lastNumberOfNewLines = noOfNewLines;
            try
            {
                if (noOfNewLines <= 1 && tb.Text.Length <= 300 || TextRenderer.MeasureText(tb.Text, tb.Font).Height < tb.Height)
                {
                    tb.ScrollBars = ScrollBars.None;
                }
                else
                {
                    tb.ScrollBars = ScrollBars.Vertical;
                }
            }
            catch
            {
                // ignored
            }
        }

        private void TextBoxListViewTextTextChanged(object sender, EventArgs e)
        {
            var idx = _subtitleListViewIndex;
            if (idx < 0 || idx >= _subtitle.Paragraphs.Count)
            {
                return;
            }

            // Writing when text is selected gives a double event + some trouble (typed letter disappears or a crash happens).
            // This tries to fix this - changing scrollbars is bad during this double event!?
            // Also check https://stackoverflow.com/questions/28331672/c-sharp-textchanged-event-fires-twice-in-a-multiline-textbox
            if (textBoxListViewText.Text == string.Empty)
            {
                _subtitle.Paragraphs[idx].Text = string.Empty;
                UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[idx], textBoxListViewText);
                SubtitleListview1.SetText(idx, string.Empty);
                _listViewTextUndoIndex = idx;
                labelStatus.Text = string.Empty;
                StartUpdateListSyntaxColoring();
                return;
            }

            textBoxListViewText.TextChanged -= TextBoxListViewTextTextChanged;
            if (_doAutoBreakOnTextChanged)
            {
                UiUtil.CheckAutoWrap(textBoxListViewText, new KeyEventArgs(Keys.None), Utilities.GetNumberOfLines(textBoxListViewText.Text));
            }

            // update _subtitle + listview
            string text = textBoxListViewText.Text.TrimEnd();
            if (ContainsNonStandardNewLines(text))
            {
                var lines = text.SplitToLines();
                text = string.Join(Environment.NewLine, lines);
                textBoxListViewText.Text = text;
            }

            if (idx < 0 || idx >= _subtitle.Paragraphs.Count)
            {
                return;
            }

            _subtitle.Paragraphs[idx].Text = text;
            UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[idx], textBoxListViewText);
            SubtitleListview1.SetText(idx, text);

            _listViewTextUndoIndex = _subtitleListViewIndex;
            labelStatus.Text = string.Empty;

            StartUpdateListSyntaxColoring();
            FixVerticalScrollBars(textBoxListViewText, ref _lastNumberOfNewLines);
            textBoxListViewText.TextChanged += TextBoxListViewTextTextChanged;
        }

        private bool ContainsNonStandardNewLines(string s)
        {
            if (Environment.NewLine == "\r\n")
            {
                int i = 0;
                while (i < s.Length)
                {
                    var ch = s[i];
                    if (ch == '\r')
                    {
                        if (i >= s.Length - 1 || s[i + 1] != '\n')
                        {
                            return true;
                        }

                        i++;
                    }
                    else if (ch == '\n')
                    {
                        return true;
                    }

                    i++;
                }

                return false;
            }
            else if (Environment.NewLine == "\n")
            {
                return s.Contains('\r');
            }
            else
            {
                s = s.Replace(Environment.NewLine, string.Empty);
                return s.Contains('\n') || s.Contains('\r');
            }
        }

        private void TextBoxListViewTextAlternateTextChanged(object sender, EventArgs e)
        {
            if (_subtitleListViewIndex >= 0)
            {
                var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                if (p == null)
                {
                    return;
                }

                var original = Utilities.GetOriginalParagraph(_subtitleListViewIndex, p, _subtitleAlternate.Paragraphs);
                if (original != null)
                {
                    if (textBoxListViewTextAlternate.Text == string.Empty)
                    {
                        UpdateListViewTextInfo(labelTextAlternateLineLengths, labelAlternateSingleLine, labelAlternateSingleLinePixels, labelTextAlternateLineTotal, labelAlternateCharactersPerSecond, original, textBoxListViewTextAlternate);
                        SubtitleListview1.SetAlternateText(_subtitleListViewIndex, string.Empty);
                        _listViewTextUndoIndex = _subtitleListViewIndex;
                        labelStatus.Text = string.Empty;
                        StartUpdateListSyntaxColoring();
                        return;
                    }

                    int numberOfNewLines = Utilities.GetNumberOfLines(textBoxListViewTextAlternate.Text);
                    UiUtil.CheckAutoWrap(textBoxListViewTextAlternate, new KeyEventArgs(Keys.None), numberOfNewLines);

                    // update _subtitle + listview
                    string text = textBoxListViewTextAlternate.Text.TrimEnd();
                    if (ContainsNonStandardNewLines(text))
                    {
                        var lines = text.SplitToLines();
                        text = string.Join(Environment.NewLine, lines);
                        textBoxListViewTextAlternate.Text = text;
                    }

                    original.Text = text;
                    UpdateListViewTextInfo(labelTextAlternateLineLengths, labelAlternateSingleLine, labelAlternateSingleLinePixels, labelTextAlternateLineTotal, labelAlternateCharactersPerSecond, original, textBoxListViewTextAlternate);
                    SubtitleListview1.SetAlternateText(_subtitleListViewIndex, text);
                    _listViewTextUndoIndex = _subtitleListViewIndex;
                }

                labelStatus.Text = string.Empty;

                StartUpdateListSyntaxColoring();
                FixVerticalScrollBars(textBoxListViewTextAlternate, ref _lastNumberOfNewLinesAlternate);
            }
        }

        private void TextBoxListViewTextKeyDown(object sender, KeyEventArgs e)
        {
            _listViewTextTicks = DateTime.UtcNow.Ticks;

            if (e.Modifiers == Keys.Shift && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == (Keys.LButton | Keys.ShiftKey))
            { // surround ctrl+v action with history (for undo)
                _listViewTextTicks = 0;
                TimerTextUndoTick(sender, e);
                Application.DoEvents();
                System.Threading.Thread.Sleep(50);
                Application.DoEvents();
                _listViewTextTicks = 0;
                TimerTextUndoTick(sender, e);
                return;
            }

            int numberOfLines = Utilities.GetNumberOfLines(textBoxListViewText.Text);

            if (e.Modifiers == Keys.None && e.KeyCode == Keys.Enter && numberOfLines > Configuration.Settings.General.MaxNumberOfLines)
            {
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxAutoBreak)
            {
                BreakUnbreakTextBox(false, textBoxListViewText);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxUnbreak)
            {
                BreakUnbreakTextBox(true, textBoxListViewText);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxBreakAtCursorPosition)
            {
                var text = Utilities.ReSplit(textBoxListViewText.Text, textBoxListViewText.SelectionStart);
                if (text != textBoxListViewText.Text)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeReplace, Configuration.Settings.Language.Settings.MainTextBoxAutoBreakFromPos));
                    textBoxListViewText.Text = text;
                    var lines = textBoxListViewText.Text.SplitToLines();
                    if (lines.Count > 0)
                    {
                        textBoxListViewText.SelectionStart = lines[0].Length;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxBreakAtCursorPositionAndGoToNext)
            {
                var text = Utilities.ReSplit(textBoxListViewText.Text, textBoxListViewText.SelectionStart);
                if (text != textBoxListViewText.Text)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeReplace, Configuration.Settings.Language.Settings.MainTextBoxAutoBreakFromPosAndGoToNext));
                    textBoxListViewText.Text = text;
                    ButtonNextClick(null, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.I)
            {
                if (textBoxListViewText.SelectionLength == 0)
                {
                    if (textBoxListViewText.Text.Contains("<i>", StringComparison.Ordinal))
                    {
                        textBoxListViewText.Text = HtmlUtil.RemoveOpenCloseTags(textBoxListViewText.Text, HtmlUtil.TagItalic);
                    }
                    else
                    {
                        textBoxListViewText.Text = string.Format("<i>{0}</i>", textBoxListViewText.Text);
                    }
                }
                else
                {
                    TextBoxListViewToggleTag(HtmlUtil.TagItalic);
                    e.SuppressKeyPress = true;
                }
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                textBoxListViewText.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitAtCursor == e.KeyData)
            {
                ToolStripMenuItemSplitTextAtCursorClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitAtCursorAndVideoPos == e.KeyData)
            {
                toolStripMenuItemSplitViaWaveform_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitSelectedLineBilingual == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1 && SubtitleListview1.SelectedItems.Count < 10)
                {
                    e.SuppressKeyPress = true;
                    SplitSelectedLineBilingual();
                }
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN1)
            {
                SetAlignment("{\\an1}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN2)
            {
                SetAlignment("", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN3)
            {
                SetAlignment("{\\an3}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN4)
            {
                SetAlignment("{\\an4}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN5)
            {
                SetAlignment("{\\an5}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN6)
            {
                SetAlignment("{\\an6}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN7)
            {
                SetAlignment("{\\an7}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN8)
            {
                SetAlignment("{\\an8}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN9)
            {
                SetAlignment("{\\an9}", false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewToggleMusicSymbols)
            {
                textBoxListViewText.Text = ToogleMusicSymbols("♪", textBoxListViewText.Text);
            }
            else if (e.KeyData == _shortcuts.MainInsertBefore)
            {
                InsertBefore();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainInsertAfter)
            {
                InsertAfter(string.Empty);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewRemoveTimeCodes)
            {
                int i = _subtitleListViewIndex;
                var p = _subtitle.GetParagraphOrDefault(i);
                if (p != null)
                {
                    p.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    p.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    RefreshSelectedParagraph();
                }
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSelectionToLower == e.KeyData && textBoxListViewText.SelectionLength > 0) // selection to lowercase
            {
                int start = textBoxListViewText.SelectionStart;
                int length = textBoxListViewText.SelectionLength;
                textBoxListViewText.SelectedText = textBoxListViewText.SelectedText.ToLowerInvariant();
                textBoxListViewText.SelectionStart = start;
                textBoxListViewText.SelectionLength = length;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSelectionToUpper == e.KeyData && textBoxListViewText.SelectionLength > 0) // selection to uppercase
            {
                int start = textBoxListViewText.SelectionStart;
                int length = textBoxListViewText.SelectionLength;
                textBoxListViewText.SelectedText = textBoxListViewText.SelectedText.ToUpperInvariant();
                textBoxListViewText.SelectionStart = start;
                textBoxListViewText.SelectionLength = length;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxToggleAutoDuration == e.KeyData) // toggle auto-duration
            {
                if (timerAutoDuration.Enabled)
                {
                    timerAutoDuration.Stop();
                    labelAutoDuration.Visible = false;
                }
                else
                {
                    timerAutoDuration.Start();
                    labelAutoDuration.Visible = true;
                }

                e.SuppressKeyPress = true;
            }

            // last key down in text
            _lastTextKeyDownTicks = DateTime.UtcNow.Ticks;

            UpdatePositionAndTotalLength(labelTextLineTotal, textBoxListViewText);
        }

        private void MoveFirstWordInNextUp()
        {
            int firstIndex = FirstSelectedIndex;
            if (firstIndex >= 0)
            {
                var p = _subtitle.GetParagraphOrDefault(firstIndex);
                var next = _subtitle.GetParagraphOrDefault(firstIndex + 1);
                if (p != null && next != null)
                {
                    var moveUpDown = new MoveWordUpDown(p.Text, next.Text);
                    moveUpDown.MoveWordUp();
                    if (moveUpDown.S1 != p.Text && moveUpDown.S2 != next.Text)
                    {
                        MakeHistoryForUndo(_language.BeforeLineUpdatedInListView);
                        p.Text = moveUpDown.S1;
                        next.Text = moveUpDown.S2;
                        SubtitleListview1.SetText(firstIndex, p.Text);
                        SubtitleListview1.SetText(firstIndex + 1, next.Text);
                        var selectionStart = textBoxListViewText.SelectionStart;
                        textBoxListViewText.Text = p.Text;
                        if (selectionStart >= 0)
                        {
                            textBoxListViewText.SelectionStart = selectionStart;
                        }
                    }
                }
            }
        }

        private void MoveLastWordDown()
        {
            int firstIndex = FirstSelectedIndex;
            if (firstIndex >= 0)
            {
                var p = _subtitle.GetParagraphOrDefault(firstIndex);
                var next = _subtitle.GetParagraphOrDefault(firstIndex + 1);
                if (p != null && next != null)
                {
                    var moveUpDown = new MoveWordUpDown(p.Text, next.Text);
                    moveUpDown.MoveWordDown();
                    if (moveUpDown.S1 != p.Text && moveUpDown.S2 != next.Text)
                    {
                        MakeHistoryForUndo(_language.BeforeLineUpdatedInListView);
                        p.Text = moveUpDown.S1;
                        next.Text = moveUpDown.S2;
                        SubtitleListview1.SetText(firstIndex, p.Text);
                        SubtitleListview1.SetText(firstIndex + 1, next.Text);
                        var selectionStart = textBoxListViewText.SelectionStart;
                        textBoxListViewText.Text = p.Text;
                        if (selectionStart >= 0)
                        {
                            textBoxListViewText.SelectionStart = selectionStart;
                        }
                    }
                }
            }
        }

        private void MakeAutoDurationSelectedLines()
        {
            if (_subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                MakeAutoDuration();
                return;
            }

            if (SubtitleListview1.SelectedItems.Count > 1)
            {
                MakeHistoryForUndo(_language.BeforeAutoDuration);
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p == null)
                    {
                        return;
                    }

                    double duration = Utilities.GetOptimalDisplayMilliseconds(textBoxListViewText.Text);
                    var next = _subtitle.GetParagraphOrDefault(index + 1);
                    if (next != null && p.StartTime.TotalMilliseconds + duration + Configuration.Settings.General.MinimumMillisecondsBetweenLines > next.StartTime.TotalMilliseconds)
                    {
                        duration = next.StartTime.TotalMilliseconds - p.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                    }

                    if (duration > 500)
                    {
                        p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
                    }
                }

                SaveSubtitleListviewIndices();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                RestoreSubtitleListviewIndices();
                RefreshSelectedParagraph();
            }
        }

        private void MakeAutoDuration()
        {
            int i = _subtitleListViewIndex;
            var p = _subtitle.GetParagraphOrDefault(i);
            if (p == null)
            {
                return;
            }

            double duration = Utilities.GetOptimalDisplayMilliseconds(textBoxListViewText.Text);
            var next = _subtitle.GetParagraphOrDefault(i + 1);
            if (next != null && p.StartTime.TotalMilliseconds + duration + Configuration.Settings.General.MinimumMillisecondsBetweenLines > next.StartTime.TotalMilliseconds)
            {
                duration = next.StartTime.TotalMilliseconds - p.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                if (duration < 400)
                {
                    return;
                }
            }

            SetDurationInSeconds(duration / TimeCode.BaseUnit);

            p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
            SubtitleListview1.SetDuration(i, p, _subtitle.GetParagraphOrDefault(i + 1));
        }

        private void SplitLineToolStripMenuItemClick(object sender, EventArgs e)
        {
            SplitSelectedParagraph(null, null);
        }

        private void SplitSelectedParagraph(double? splitSeconds, int? textIndex)
        {
            string language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
            int? alternateTextIndex = null;
            if (textBoxListViewTextAlternate.Focused)
            {
                alternateTextIndex = textIndex;
                textIndex = null;
            }

            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeSplitLine);

                int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;

                var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                var newParagraph = new Paragraph(currentParagraph);
                newParagraph.NewSection = false;

                currentParagraph.Text = currentParagraph.Text.Replace("< /i>", "</i>");
                currentParagraph.Text = currentParagraph.Text.Replace("< i>", "<i>");
                string oldText = currentParagraph.Text;
                var lines = currentParagraph.Text.SplitToLines();
                if (textIndex != null && textIndex.Value > 1 && textIndex.Value < oldText.Length - 1)
                {
                    string a = oldText.Substring(0, textIndex.Value).Trim();
                    string b = oldText.Substring(textIndex.Value).Trim();

                    if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) &&
                        Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                    {
                        a = a + "</i>";
                        b = "<i>" + b;
                    }
                    else if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) &&
                             Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                    {
                        a = a + "</b>";
                        b = "<b>" + b;
                    }

                    string aTrimmed = HtmlUtil.RemoveHtmlTags(a).TrimEnd('"').TrimEnd().TrimEnd('\'').TrimEnd();
                    if (aTrimmed.EndsWith('.') || aTrimmed.EndsWith('!') || aTrimmed.EndsWith('?') || aTrimmed.EndsWith('؟'))
                    {
                        a = DialogSplitMerge.RemoveStartDash(a);
                        b = DialogSplitMerge.RemoveStartDash(b);
                    }

                    currentParagraph.Text = Utilities.AutoBreakLine(a, language);
                    newParagraph.Text = Utilities.AutoBreakLine(b, language);
                }
                else
                {
                    var l0 = string.Empty;
                    if (lines.Count > 0)
                    {
                        l0 = HtmlUtil.RemoveHtmlTags(lines[0], true).Trim().TrimEnd('"', '\'').TrimEnd();
                    }

                    if (lines.Count == 2 && (l0.EndsWith('.') || l0.EndsWith('!') || l0.EndsWith('?') || l0.EndsWith('؟')))
                    {
                        currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                        newParagraph.Text = Utilities.AutoBreakLine(lines[1], language);
                        if (currentParagraph.Text.StartsWith("<i>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</i>") &&
                            newParagraph.Text.EndsWith("</i>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<i>"))
                        {
                            currentParagraph.Text = currentParagraph.Text + "</i>";
                            newParagraph.Text = "<i>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<b>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</b>") &&
                            newParagraph.Text.EndsWith("</b>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<b>"))
                        {
                            currentParagraph.Text = currentParagraph.Text + "</b>";
                            newParagraph.Text = "<b>" + newParagraph.Text;
                        }

                        currentParagraph.Text = DialogSplitMerge.RemoveStartDash(currentParagraph.Text);
                        newParagraph.Text = DialogSplitMerge.RemoveStartDash(newParagraph.Text);
                    }
                    else
                    {
                        string s = currentParagraph.Text;
                        var arr = HtmlUtil.RemoveHtmlTags(s, true).SplitToLines();
                        if (arr.Count == 1 || arr.Count == 2 && (arr[0].Length > Configuration.Settings.General.SubtitleLineMaximumLength || arr[1].Length > Configuration.Settings.General.SubtitleLineMaximumLength))
                        {
                            if (arr.Count == 2 && arr[0].StartsWith('-') && arr[1].StartsWith('-'))
                            {
                                if (lines[0].StartsWith("<i>-", StringComparison.Ordinal))
                                {
                                    lines[0] = "<i>" + lines[0].Remove(0, 4).TrimStart();
                                }

                                lines[0] = lines[0].TrimStart('-').TrimStart();
                                lines[1] = lines[1].TrimStart('-').TrimStart();
                                s = lines[0] + Environment.NewLine + lines[1];
                            }
                            else
                            {
                                s = Utilities.AutoBreakLine(currentParagraph.Text, 5, Configuration.Settings.General.MergeLinesShorterThan, language);
                            }
                        }

                        lines = s.SplitToLines();
                        if (lines.Count == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 20, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 18, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 15, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 2)
                        {
                            if (Utilities.CountTagInText(s, "<i>") == 1 && lines[0].StartsWith("<i>", StringComparison.Ordinal) && lines[1].EndsWith("</i>", StringComparison.Ordinal))
                            {
                                lines[0] += "</i>";
                                lines[1] = "<i>" + lines[1];
                            }

                            currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                            newParagraph.Text = Utilities.AutoBreakLine(lines[1], language);
                        }
                        else if (lines.Count == 1)
                        {
                            currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                            newParagraph.Text = string.Empty;
                        }
                        else if (lines.Count == 3)
                        {
                            currentParagraph.Text = Utilities.AutoBreakLine(lines[0] + Environment.NewLine + lines[1], language);
                            newParagraph.Text = lines[2];
                        }
                        else if (lines.Count > 3)
                        {
                            var half = lines.Count / 2;
                            var sb1 = new StringBuilder();
                            for (int i = 0; i < half; i++)
                            {
                                sb1.AppendLine(lines[i]);
                            }

                            currentParagraph.Text = Utilities.AutoBreakLine(sb1.ToString(), language);
                            sb1 = new StringBuilder();
                            for (int i = half; i < lines.Count; i++)
                            {
                                sb1.AppendLine(lines[i]);
                            }

                            newParagraph.Text = Utilities.AutoBreakLine(sb1.ToString(), language);
                        }

                        if (currentParagraph.Text.StartsWith("<i>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</i>", StringComparison.Ordinal) &&
                            newParagraph.Text.EndsWith("</i>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<i>", StringComparison.Ordinal))
                        {
                            currentParagraph.Text = currentParagraph.Text + "</i>";
                            newParagraph.Text = "<i>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<b>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</b>", StringComparison.Ordinal) &&
                            newParagraph.Text.EndsWith("</b>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<b>"))
                        {
                            currentParagraph.Text = currentParagraph.Text + "</b>";
                            newParagraph.Text = "<b>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<i>-", StringComparison.Ordinal) && (currentParagraph.Text.EndsWith(".</i>", StringComparison.Ordinal) || currentParagraph.Text.EndsWith("!</i>", StringComparison.Ordinal)) &&
                            newParagraph.Text.StartsWith("<i>-", StringComparison.Ordinal) && (newParagraph.Text.EndsWith(".</i>", StringComparison.Ordinal) || newParagraph.Text.EndsWith("!</i>", StringComparison.Ordinal)))
                        {
                            currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                            newParagraph.Text = newParagraph.Text.Remove(3, 1);
                        }
                    }
                }

                if (currentParagraph.Text.StartsWith("<i> ", StringComparison.Ordinal))
                {
                    currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                }

                if (newParagraph.Text.StartsWith("<i> ", StringComparison.Ordinal))
                {
                    newParagraph.Text = newParagraph.Text.Remove(3, 1);
                }

                var continuationStyle = Configuration.Settings.General.ContinuationStyle;
                if (continuationStyle != ContinuationStyle.None)
                {
                    if (language == "ar")
                    {
                        currentParagraph.Text = ContinuationUtilities.ConvertToForArabic(currentParagraph.Text);
                        newParagraph.Text = ContinuationUtilities.ConvertToForArabic(newParagraph.Text);
                    }

                    var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                    if (ContinuationUtilities.ShouldAddSuffix(currentParagraph.Text, continuationProfile))
                    {
                        currentParagraph.Text = ContinuationUtilities.AddSuffixIfNeeded(currentParagraph.Text, continuationProfile, false);
                        newParagraph.Text = ContinuationUtilities.AddPrefixIfNeeded(newParagraph.Text, continuationProfile, false);
                    }

                    if (language == "ar")
                    {
                        currentParagraph.Text = ContinuationUtilities.ConvertBackForArabic(currentParagraph.Text);
                        newParagraph.Text = ContinuationUtilities.ConvertBackForArabic(newParagraph.Text);
                    }
                }

                SetSplitTime(splitSeconds, currentParagraph, newParagraph, oldText);

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    var originalCurrent = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, _subtitleAlternate.Paragraphs);
                    if (originalCurrent != null)
                    {
                        string languageOriginal = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleAlternate);

                        originalCurrent.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        var originalNew = new Paragraph(newParagraph);
                        originalNew.NewSection = false;

                        lines = originalCurrent.Text.SplitToLines();

                        var l0Trimmed = string.Empty;
                        if (lines.Count > 0)
                        {
                            l0Trimmed = HtmlUtil.RemoveHtmlTags(lines[0]).TrimEnd('\'').TrimEnd('"');
                        }

                        oldText = originalCurrent.Text;
                        if (alternateTextIndex != null && alternateTextIndex.Value > 1 && alternateTextIndex.Value < oldText.Length - 1)
                        {
                            originalCurrent.Text = Utilities.AutoBreakLine(oldText.Substring(0, alternateTextIndex.Value).Trim(), language);
                            originalNew.Text = Utilities.AutoBreakLine(oldText.Substring(alternateTextIndex.Value).Trim(), language);
                            if (originalCurrent.Text.StartsWith("<i>", StringComparison.Ordinal) && !originalCurrent.Text.Contains("</i>", StringComparison.Ordinal) &&
                                originalNew.Text.EndsWith("</i>", StringComparison.Ordinal) && !originalNew.Text.Contains("<i>", StringComparison.Ordinal))
                            {
                                if (originalCurrent.Text.StartsWith("<i>-", StringComparison.Ordinal) && (originalCurrent.Text.EndsWith(".", StringComparison.Ordinal) || originalCurrent.Text.EndsWith("?", StringComparison.Ordinal) ||
                                                                                                          originalCurrent.Text.EndsWith("!", StringComparison.Ordinal) || originalCurrent.Text.EndsWith("؟", StringComparison.Ordinal)) && originalNew.Text.StartsWith("-", StringComparison.Ordinal))
                                {
                                    originalCurrent.Text = "<i>" + originalCurrent.Text.Remove(0, 4).Trim();
                                    originalNew.Text = originalNew.Text.TrimStart('-').Trim();
                                }

                                originalCurrent.Text = originalCurrent.Text + "</i>";
                                originalNew.Text = "<i>" + originalNew.Text;
                            }

                            if (originalCurrent.Text.StartsWith("<b>", StringComparison.Ordinal) && !originalCurrent.Text.Contains("</b>") &&
                                originalNew.Text.EndsWith("</b>", StringComparison.Ordinal) && !originalNew.Text.Contains("<b>"))
                            {
                                originalCurrent.Text = originalCurrent.Text + "</b>";
                                originalNew.Text = "<b>" + originalNew.Text;
                            }

                            if (l0Trimmed.EndsWith('.') || l0Trimmed.EndsWith('!') || l0Trimmed.EndsWith('?') || l0Trimmed.EndsWith('؟'))
                            {
                                originalCurrent.Text = DialogSplitMerge.RemoveStartDash(originalCurrent.Text);
                                originalNew.Text = DialogSplitMerge.RemoveStartDash(originalNew.Text);
                            }

                            lines.Clear();
                        }
                        else if (lines.Count == 2 && (l0Trimmed.EndsWith('.') || l0Trimmed.EndsWith('!') || l0Trimmed.EndsWith('?') || l0Trimmed.EndsWith('؟')))
                        {
                            string a = lines[0].Trim();
                            string b = lines[1].Trim();
                            if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) &&
                                Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                            {
                                a = a + "</i>";
                                b = "<i>" + b;
                            }

                            if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) &&
                                Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                            {
                                a = a + "</b>";
                                b = "<b>" + b;
                            }

                            a = DialogSplitMerge.RemoveStartDash(a);
                            b = DialogSplitMerge.RemoveStartDash(b);

                            lines[0] = a;
                            lines[1] = b;
                            originalCurrent.Text = Utilities.AutoBreakLine(a);
                            originalNew.Text = Utilities.AutoBreakLine(b);
                        }
                        else
                        {
                            string s = Utilities.AutoBreakLine(originalCurrent.Text, 5, Configuration.Settings.General.MergeLinesShorterThan, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 20, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 18, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 15, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Count == 2)
                        {
                            string a = lines[0].Trim();
                            string b = lines[1].Trim();
                            if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) &&
                                Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                            {
                                a = a + "</i>";
                                b = "<i>" + b;
                            }

                            if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) &&
                                Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                            {
                                a = a + "</b>";
                                b = "<b>" + b;
                            }

                            if (l0Trimmed.EndsWith('.') || l0Trimmed.EndsWith('!') || l0Trimmed.EndsWith('?') || l0Trimmed.EndsWith('؟'))
                            {
                                a = DialogSplitMerge.RemoveStartDash(a);
                                b = DialogSplitMerge.RemoveStartDash(b);
                            }

                            lines[0] = a;
                            lines[1] = b;

                            originalCurrent.Text = Utilities.AutoBreakLine(lines[0]);
                            originalNew.Text = Utilities.AutoBreakLine(lines[1]);
                        }
                        else if (lines.Count == 1)
                        {
                            originalNew.Text = string.Empty;
                        }

                        if (originalCurrent != null && originalNew != null)
                        {
                            if (originalCurrent.Text.StartsWith("<i> ", StringComparison.Ordinal))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(3, 1);
                            }

                            if (originalNew.Text.StartsWith("<i> ", StringComparison.Ordinal))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(3, 1);
                            }

                            if (continuationStyle != ContinuationStyle.None)
                            {
                                if (languageOriginal == "ar")
                                {
                                    originalCurrent.Text = ContinuationUtilities.ConvertToForArabic(originalCurrent.Text);
                                    originalNew.Text = ContinuationUtilities.ConvertToForArabic(originalNew.Text);
                                }

                                var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                                if (ContinuationUtilities.ShouldAddSuffix(originalCurrent.Text, continuationProfile))
                                {
                                    originalCurrent.Text = ContinuationUtilities.AddSuffixIfNeeded(originalCurrent.Text, continuationProfile, false);
                                    originalNew.Text = ContinuationUtilities.AddPrefixIfNeeded(originalNew.Text, continuationProfile, false);
                                }

                                if (languageOriginal == "ar")
                                {
                                    originalCurrent.Text = ContinuationUtilities.ConvertBackForArabic(originalCurrent.Text);
                                    originalNew.Text = ContinuationUtilities.ConvertBackForArabic(originalNew.Text);
                                }
                            }
                        }

                        _subtitleAlternate.InsertParagraphInCorrectTimeOrder(originalNew);
                        _subtitleAlternate.Renumber();
                    }
                }

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    SetDurationInSeconds(currentParagraph.Duration.TotalSeconds);
                    _networkSession.UpdateLine(_subtitle.GetIndex(currentParagraph), currentParagraph);
                    NetworkGetSendUpdates(new List<int>(), firstSelectedIndex + 1, newParagraph);
                }
                else
                {
                    _subtitle.Paragraphs.Insert(firstSelectedIndex + 1, newParagraph);
                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                }

                SubtitleListview1.SelectIndexAndEnsureVisible(Configuration.Settings.General.SplitBehavior == 0 ? firstSelectedIndex + 1 : firstSelectedIndex, true);
                ShowSource();
                ShowStatus(_language.LineSplitted);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }
        }

        private void SetSplitTime(double? splitSeconds, Paragraph currentParagraph, Paragraph newParagraph, string oldText)
        {
            double middle = currentParagraph.StartTime.TotalMilliseconds + (currentParagraph.Duration.TotalMilliseconds / 2);
            if (!string.IsNullOrWhiteSpace(HtmlUtil.RemoveHtmlTags(oldText)))
            {
                var lineOneTextNoHtml = HtmlUtil.RemoveHtmlTags(currentParagraph.Text, true).Replace(Environment.NewLine, string.Empty);
                var lineTwoTextNoHtml = HtmlUtil.RemoveHtmlTags(newParagraph.Text, true).Replace(Environment.NewLine, string.Empty);
                if (Math.Abs(lineOneTextNoHtml.Length - lineTwoTextNoHtml.Length) > 2)
                {
                    // give more time to the paragraph with most text
                    var oldTextNoHtml = HtmlUtil.RemoveHtmlTags(oldText, true).Replace(Environment.NewLine, string.Empty);
                    var startFactor = (double)lineOneTextNoHtml.Length / oldTextNoHtml.Length;
                    if (startFactor < 0.25)
                    {
                        startFactor = 0.25;
                    }

                    if (startFactor > 0.75)
                    {
                        startFactor = 0.75;
                    }

                    middle = currentParagraph.StartTime.TotalMilliseconds + (currentParagraph.Duration.TotalMilliseconds * startFactor);
                }
            }

            if (currentParagraph.StartTime.IsMaxTime && currentParagraph.EndTime.IsMaxTime)
            {
                newParagraph.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
            }
            else
            {
                if (splitSeconds.HasValue && splitSeconds.Value > (currentParagraph.StartTime.TotalSeconds + 0.2) && splitSeconds.Value < (currentParagraph.EndTime.TotalSeconds - 0.2))
                {
                    middle = splitSeconds.Value * TimeCode.BaseUnit;
                }

                newParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                currentParagraph.EndTime.TotalMilliseconds = middle;
                newParagraph.StartTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds + 1;
                if (Configuration.Settings.General.MinimumMillisecondsBetweenLines > 0)
                {
                    if (splitSeconds == null || Configuration.Settings.General.SplitBehavior == 1)
                    {
                        // SE decides split point (not user), so split gap time evenly
                        var halfGap = (int)Math.Round(Configuration.Settings.General.MinimumMillisecondsBetweenLines / 2.0);
                        currentParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds - halfGap;
                    }
                    else if (Configuration.Settings.General.SplitBehavior == 0)
                    {
                        currentParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                    }
                    newParagraph.StartTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                }
            }
        }

        private void MergeBeforeToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count >= 1)
            {
                var idx = SubtitleListview1.SelectedItems[0].Index;
                if (idx > 0)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(idx - 1, true);
                    MergeAfterToolStripMenuItemClick(null, null);
                }
            }
        }

        private void MergeSelectedLinesBilingual()
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 1)
            {
                var sb1 = new StringBuilder();
                var sb2 = new StringBuilder();
                var deleteIndices = new List<int>();
                bool first = true;
                int firstIndex = 0;
                double durationMilliseconds = 0;
                int next = 0;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    if (first)
                    {
                        firstIndex = index;
                        next = index + 1;
                        first = !first;
                    }
                    else
                    {
                        deleteIndices.Add(index);
                        if (next != index)
                        {
                            return;
                        }

                        next++;
                    }

                    var arr = _subtitle.Paragraphs[index].Text.Trim().SplitToLines();
                    if (arr.Count > 0)
                    {
                        int mid = (int)(arr.Count / 2);
                        for (var i = 0; i < arr.Count; i++)
                        {
                            var l = arr[i];
                            if (i < mid)
                            {
                                sb1.Append(l + " ");
                            }
                            else
                            {
                                sb2.Append(l + " ");
                            }
                        }
                    }

                    durationMilliseconds += _subtitle.Paragraphs[index].Duration.TotalMilliseconds;
                }

                if (sb1.Length > 150 || sb2.Length > 150)
                {
                    return;
                }

                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeMergeLines);

                var currentParagraph = _subtitle.Paragraphs[firstIndex];
                string text1 = sb1.ToString().TrimEnd();
                string text2 = sb2.ToString().TrimEnd();

                currentParagraph.Text = text1 + Environment.NewLine + text2;

                //display time
                currentParagraph.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + durationMilliseconds;

                var nextParagraph = _subtitle.GetParagraphOrDefault(next);
                if (nextParagraph != null && currentParagraph.EndTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && currentParagraph.StartTime.TotalMilliseconds < nextParagraph.StartTime.TotalMilliseconds)
                {
                    currentParagraph.EndTime.TotalMilliseconds = nextParagraph.StartTime.TotalMilliseconds - 1;
                }

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    _networkSession.UpdateLine(firstIndex, currentParagraph);
                    NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    for (int i = deleteIndices.Count - 1; i >= 0; i--)
                    {
                        _subtitle.Paragraphs.RemoveAt(deleteIndices[i]);
                    }

                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                }

                ShowSource();
                ShowStatus(_language.LinesMerged);
                SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }
        }

        private void SplitSelectedLineBilingual()
        {
            var idx = FirstSelectedIndex;
            if (_subtitle.Paragraphs.Count < 1 || idx < 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(idx);
            if (p == null)
            {
                return;
            }

            var tb = textBoxListViewText;
            var lines = tb.Text.SplitToLines();
            if (lines.Count != 2 || tb.SelectionLength < 3 || lines[0].Length < 2 || lines[1].Length < 2)
            {
                return;
            }

            var start = tb.SelectionStart;
            var end = start + tb.SelectionLength;
            var indexOfNewLine = tb.Text.IndexOf(Environment.NewLine, StringComparison.Ordinal);
            if (end < indexOfNewLine || start > indexOfNewLine)
            {
                return;
            }

            MakeHistoryForUndo(_language.BeforeSplitLine);
            var oldText = p.Text;
            string text1 = lines[0].Substring(0, start).Trim() + Environment.NewLine + lines[1].Substring(0, end - indexOfNewLine - 2).Trim();
            string text2 = lines[0].Remove(0, start).Trim() + Environment.NewLine + lines[1].Remove(0, end - indexOfNewLine - 2).Trim();
            var newParagraph = new Paragraph(p);
            newParagraph.NewSection = false;
            double? splitPos = null;
            if (!string.IsNullOrEmpty(_videoFileName))
            {
                splitPos = mediaPlayer.CurrentPosition;
            }

            SetSplitTime(splitPos, p, newParagraph, oldText);
            _subtitle.InsertParagraphInCorrectTimeOrder(newParagraph);
            _subtitle.Renumber();
            if (Configuration.Settings.General.SplitBehavior > 0)
            {
                _subtitleListViewIndex = -1;
            }
            p.Text = text1;
            newParagraph.Text = text2;
            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            SubtitleListview1.SelectIndexAndEnsureVisible(idx, true);
        }

        private void MergeSelectedLines(BreakMode breakMode = BreakMode.Normal)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 1)
            {
                var sb = new StringBuilder();
                var deleteIndices = new List<int>();
                bool first = true;
                int firstIndex = 0;
                double endMilliseconds = 0;
                int next = 0;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    if (first)
                    {
                        firstIndex = index;
                        next = index + 1;
                        first = !first;
                    }
                    else
                    {
                        deleteIndices.Add(index);
                        if (next != index)
                        {
                            return;
                        }

                        next++;
                    }

                    var continuationStyle = Configuration.Settings.General.ContinuationStyle;
                    if (continuationStyle != ContinuationStyle.None)
                    {
                        var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                        if (next < firstIndex + SubtitleListview1.SelectedIndices.Count)
                        {
                            var mergeResult = ContinuationUtilities.MergeHelper(_subtitle.Paragraphs[index].Text, _subtitle.Paragraphs[index + 1].Text, continuationProfile, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                            _subtitle.Paragraphs[index].Text = mergeResult.Item1;
                            _subtitle.Paragraphs[index + 1].Text = mergeResult.Item2;
                        }
                    }

                    var addText = _subtitle.Paragraphs[index].Text;

                    if (firstIndex != index)
                    {
                        addText = RemoveAssStartAlignmentTag(addText);
                    }

                    if (breakMode == BreakMode.UnbreakNoSpace)
                    {
                        sb.Append(addText);
                    }
                    else
                    {
                        sb.AppendLine(addText);
                    }

                    endMilliseconds = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                }

                if (sb.Length > 200)
                {
                    return;
                }

                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeMergeLines);

                var currentParagraph = _subtitle.Paragraphs[firstIndex];
                string text = sb.ToString();
                text = HtmlUtil.FixInvalidItalicTags(text);
                text = ChangeAllLinesTagsToSingleTag(text, "i");
                text = ChangeAllLinesTagsToSingleTag(text, "b");
                text = ChangeAllLinesTagsToSingleTag(text, "u");
                if (breakMode == BreakMode.Unbreak)
                {
                    text = Utilities.UnbreakLine(text);
                }
                else if (breakMode == BreakMode.UnbreakNoSpace)
                {
                    text = text.Replace(" " + Environment.NewLine + " ", string.Empty)
                        .Replace(Environment.NewLine + " ", string.Empty)
                        .Replace(" " + Environment.NewLine, string.Empty)
                        .Replace(Environment.NewLine, string.Empty);
                }
                else
                {
                    text = Utilities.AutoBreakLine(text, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                }

                currentParagraph.Text = text;

                //display time
                currentParagraph.EndTime.TotalMilliseconds = endMilliseconds;

                var nextParagraph = _subtitle.GetParagraphOrDefault(next);
                if (nextParagraph != null && currentParagraph.EndTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && currentParagraph.StartTime.TotalMilliseconds < nextParagraph.StartTime.TotalMilliseconds)
                {
                    currentParagraph.EndTime.TotalMilliseconds = nextParagraph.StartTime.TotalMilliseconds - 1;
                }

                // original subtitle
                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var original = Utilities.GetOriginalParagraph(firstIndex, currentParagraph, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        var originalTexts = new StringBuilder();
                        originalTexts.Append(original.Text.TrimEnd());
                        if (breakMode != BreakMode.UnbreakNoSpace)
                        {
                            originalTexts.Append(" ");
                        }

                        for (int i = 0; i < deleteIndices.Count; i++)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], _subtitle.Paragraphs[deleteIndices[i]], _subtitleAlternate.Paragraphs);
                            if (originalNext != null)
                            {
                                if (breakMode == BreakMode.UnbreakNoSpace)
                                {
                                    originalTexts.Append(originalNext.Text.Trim());
                                }
                                else
                                {
                                    originalTexts.Append(originalNext.Text + " ");
                                }
                            }

                        }

                        for (int i = deleteIndices.Count - 1; i >= 0; i--)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], _subtitle.Paragraphs[deleteIndices[i]], _subtitleAlternate.Paragraphs);
                            if (originalNext != null)
                            {
                                _subtitleAlternate.Paragraphs.Remove(originalNext);
                            }
                        }

                        original.Text = originalTexts.ToString().Replace("  ", " ");
                        original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "i");
                        original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "b");
                        original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "u");

                        if (breakMode == BreakMode.Unbreak)
                        {
                            original.Text = Utilities.UnbreakLine(original.Text);
                        }
                        else if (breakMode == BreakMode.UnbreakNoSpace)
                        {
                            original.Text = original.Text.Replace(" " + Environment.NewLine + " ", string.Empty)
                                .Replace(Environment.NewLine + " ", string.Empty)
                                .Replace(" " + Environment.NewLine, string.Empty)
                                .Replace(Environment.NewLine, string.Empty);
                        }
                        else
                        {
                            original.Text = Utilities.AutoBreakLine(original.Text, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleAlternate));
                        }

                        original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        _subtitleAlternate.Renumber();
                    }
                }

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    _networkSession.UpdateLine(firstIndex, currentParagraph);
                    NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    for (int i = deleteIndices.Count - 1; i >= 0; i--)
                    {
                        _subtitle.Paragraphs.RemoveAt(deleteIndices[i]);
                    }

                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                }

                ShowSource();
                ShowStatus(_language.LinesMerged);
                SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }
        }

        private void ExtendBeforeToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                ExtendSelectedLinesToPreviousLine();
            }
        }

        private void ExtendAfterToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                ExtendSelectedLinesToNextLine();
            }
        }

        private static string ChangeAllLinesTagsToSingleTag(string text, string tag)
        {
            if (!text.Contains("<" + tag + ">"))
            {
                return text;
            }

            foreach (var line in text.SplitToLines())
            {
                if (!line.TrimStart().StartsWith("<" + tag + ">", StringComparison.Ordinal) || !line.TrimEnd().EndsWith("</" + tag + ">", StringComparison.Ordinal))
                {
                    return text;
                }
            }

            return "<" + tag + ">" + HtmlUtil.RemoveOpenCloseTags(text, tag).Trim() + "</" + tag + ">";
        }

        private void MergeAfterToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                if (SubtitleListview1.SelectedItems.Count > 2)
                {
                    MergeSelectedLines();
                    return;
                }

                MergeWithLineAfter(false);
            }
        }

        public enum BreakMode
        {
            AutoBreak,
            Normal,
            Unbreak,
            UnbreakNoSpace
        }

        private void MergeWithLineAfter(bool insertDash, BreakMode breakMode = BreakMode.Normal)
        {
            var dialogHelper = new DialogSplitMerge { DialogStyle = Configuration.Settings.General.DialogStyle };
            int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;

            var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            var nextParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1);

            if (nextParagraph != null && currentParagraph != null)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeMergeLines);

                var continuationStyle = Configuration.Settings.General.ContinuationStyle;
                if (continuationStyle != ContinuationStyle.None)
                {
                    var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                    var mergeResult = ContinuationUtilities.MergeHelper(currentParagraph.Text, nextParagraph.Text, continuationProfile, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                    currentParagraph.Text = mergeResult.Item1;
                    nextParagraph.Text = mergeResult.Item2;
                }

                if (_subtitleAlternate != null)
                {
                    var original = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, _subtitleAlternate.Paragraphs);
                    var originalNext = Utilities.GetOriginalParagraph(firstSelectedIndex + 1, nextParagraph, _subtitleAlternate.Paragraphs);

                    if (original != null && originalNext != null)
                    {
                        if (continuationStyle != ContinuationStyle.None)
                        {
                            var continuationProfile = ContinuationUtilities.GetContinuationProfile(continuationStyle);
                            var mergeResult = ContinuationUtilities.MergeHelper(original.Text, originalNext.Text, continuationProfile, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleAlternate));
                            original.Text = mergeResult.Item1;
                            originalNext.Text = mergeResult.Item2;
                        }
                    }

                    if (originalNext != null)
                    {
                        if (original == null)
                        {
                            originalNext.StartTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds;
                            originalNext.EndTime.TotalMilliseconds = nextParagraph.EndTime.TotalMilliseconds;
                        }
                        else
                        {
                            if (insertDash && !string.IsNullOrEmpty(original.Text) && !string.IsNullOrEmpty(originalNext.Text))
                            {
                                string s = Utilities.UnbreakLine(original.Text);
                                original.Text = dialogHelper.InsertStartDash(s, 0);

                                s = Utilities.UnbreakLine(originalNext.Text);
                                original.Text += Environment.NewLine + dialogHelper.InsertStartDash(s, 1);

                                original.Text = original.Text.Replace("</i>" + Environment.NewLine + "<i>", Environment.NewLine).TrimEnd();
                            }
                            else
                            {
                                string old1 = original.Text;
                                string old2 = originalNext.Text;

                                if (breakMode == BreakMode.Unbreak)
                                {
                                    original.Text = old1.Replace(Environment.NewLine, " ");
                                    original.Text += Environment.NewLine + old2.Replace(Environment.NewLine, " ");
                                    original.Text = Utilities.UnbreakLine(original.Text);
                                }
                                else if (breakMode == BreakMode.UnbreakNoSpace)
                                {
                                    original.Text = old1.TrimEnd() + old2.TrimStart();
                                }
                                else
                                {
                                    original.Text = old1.Replace(Environment.NewLine, " ");
                                    original.Text += Environment.NewLine + old2.Replace(Environment.NewLine, " ");

                                    if (old1.Contains(Environment.NewLine) || old2.Contains(Environment.NewLine) ||
                                        old1.Length > Configuration.Settings.General.SubtitleLineMaximumLength || old2.Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                                    {
                                        original.Text = Utilities.AutoBreakLine(original.Text, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleAlternate));
                                    }
                                }

                                original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "i");
                                original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "b");
                                original.Text = ChangeAllLinesTagsToSingleTag(original.Text, "u");

                                if (string.IsNullOrWhiteSpace(old1))
                                {
                                    original.Text = original.Text.TrimStart();
                                }

                                if (string.IsNullOrWhiteSpace(old2))
                                {
                                    original.Text = original.Text.TrimEnd();
                                }
                            }

                            original.EndTime = originalNext.EndTime;
                            _subtitleAlternate.Paragraphs.Remove(originalNext);
                        }

                        _subtitleAlternate.Renumber();
                    }
                }

                if (insertDash && !string.IsNullOrEmpty(currentParagraph.Text) && !string.IsNullOrEmpty(nextParagraph.Text))
                {
                    string s = Utilities.UnbreakLine(currentParagraph.Text);
                    currentParagraph.Text = dialogHelper.InsertStartDash(s, 0);

                    s = Utilities.UnbreakLine(RemoveAssStartAlignmentTag(nextParagraph.Text));
                    currentParagraph.Text += Environment.NewLine + dialogHelper.InsertStartDash(s, 1);

                    currentParagraph.Text = currentParagraph.Text.Replace("</i>" + Environment.NewLine + "<i>", Environment.NewLine).TrimEnd();
                }
                else
                {
                    string old1 = currentParagraph.Text;
                    string old2 = nextParagraph.Text;
                    if (breakMode == BreakMode.Unbreak)
                    {
                        currentParagraph.Text = currentParagraph.Text.Replace(Environment.NewLine, " ");
                        currentParagraph.Text += Environment.NewLine + nextParagraph.Text.Replace(Environment.NewLine, " ");
                        currentParagraph.Text = Utilities.UnbreakLine(RemoveAssStartAlignmentTag(currentParagraph.Text));
                    }
                    else if (breakMode == BreakMode.UnbreakNoSpace)
                    {
                        currentParagraph.Text = currentParagraph.Text.TrimEnd() + RemoveAssStartAlignmentTag(nextParagraph.Text).TrimStart();
                    }
                    else if (breakMode == BreakMode.AutoBreak)
                    {
                        currentParagraph.Text = currentParagraph.Text.Replace(Environment.NewLine, " ");
                        currentParagraph.Text += Environment.NewLine + RemoveAssStartAlignmentTag(nextParagraph.Text).Replace(Environment.NewLine, " ");
                        var language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                        currentParagraph.Text = Utilities.AutoBreakLine(currentParagraph.Text, language);
                    }
                    else
                    {
                        currentParagraph.Text = (currentParagraph.Text.Trim() + Environment.NewLine +
                                                 RemoveAssStartAlignmentTag(nextParagraph.Text).Trim()).Trim();
                    }

                    currentParagraph.Text = ChangeAllLinesTagsToSingleTag(currentParagraph.Text, "i");
                    currentParagraph.Text = ChangeAllLinesTagsToSingleTag(currentParagraph.Text, "b");
                    currentParagraph.Text = ChangeAllLinesTagsToSingleTag(currentParagraph.Text, "u");

                    if (old1.Contains(Environment.NewLine) || old2.Contains(Environment.NewLine) ||
                        old1.Length > Configuration.Settings.General.SubtitleLineMaximumLength || old2.Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                    {
                        currentParagraph.Text = Utilities.AutoBreakLine(currentParagraph.Text, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                    }

                    if (string.IsNullOrWhiteSpace(old1) && old2 != null)
                    {
                        currentParagraph.Text = old2.Trim();
                    }

                    if (string.IsNullOrWhiteSpace(old2) && old1 != null)
                    {
                        currentParagraph.Text = old1.Trim();
                    }
                }

                currentParagraph.EndTime.TotalMilliseconds = nextParagraph.EndTime.TotalMilliseconds;

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    SetDurationInSeconds(currentParagraph.Duration.TotalSeconds);
                    _networkSession.UpdateLine(_subtitle.GetIndex(currentParagraph), currentParagraph);
                    var deleteIndices = new List<int>();
                    deleteIndices.Add(_subtitle.GetIndex(nextParagraph));
                    NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    _subtitle.Paragraphs.Remove(nextParagraph);
                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                }

                ShowSource();
                ShowStatus(_language.LinesMerged);
                SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
                SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            }
        }

        private static string RemoveAssStartAlignmentTag(string text)
        {
            var s = text.TrimStart();
            if (s.StartsWith("{\\an") && s.Length > 5 && s[5] == '}')
            {
                s = s.Remove(0, 6);
            }
            return s;
        }

        private void UpdateStartTimeInfo(TimeCode startTime)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0 && startTime != null)
            {
                UpdateOverlapErrors(startTime);

                // update _subtitle + listview
                var p = _subtitle.Paragraphs[_subtitleListViewIndex];
                p.EndTime.TotalMilliseconds += (startTime.TotalMilliseconds - p.StartTime.TotalMilliseconds);
                p.StartTime = startTime;
                SubtitleListview1.SetStartTimeAndDuration(_subtitleListViewIndex, p, _subtitle.GetParagraphOrDefault(_subtitleListViewIndex + 1), _subtitle.GetParagraphOrDefault(_subtitleListViewIndex - 1));
                StartUpdateListSyntaxColoring();
            }
        }

        private void StartUpdateListSyntaxColoring()
        {
            if (!_timerDoSyntaxColoring.Enabled)
            {
                _timerDoSyntaxColoring.Start();
            }
        }

        private void UpdateListSyntaxColoring()
        {
            if (_loading || _subtitle == null || _subtitleListViewIndex < 0 || _subtitleListViewIndex >= _subtitle.Paragraphs.Count)
            {
                return;
            }

            SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, _subtitleListViewIndex, _subtitle.Paragraphs[_subtitleListViewIndex]);
            var idx = _subtitleListViewIndex + 1;
            var p = _subtitle.GetParagraphOrDefault(idx);
            if (p != null)
            {
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, idx, p);
            }

            idx = _subtitleListViewIndex - 1;
            p = _subtitle.GetParagraphOrDefault(idx);
            if (p != null)
            {
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, idx, p);
            }
        }

        private void UpdateOverlapErrors(TimeCode startTime)
        {
            string startTimeWarning = string.Empty;
            string durationWarning = string.Empty;
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0 && startTime != null)
            {
                int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;

                var prevParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
                if (prevParagraph != null && !prevParagraph.EndTime.IsMaxTime && prevParagraph.EndTime.TotalMilliseconds > startTime.TotalMilliseconds && Configuration.Settings.Tools.ListViewSyntaxColorOverlap)
                {
                    startTimeWarning = string.Format(_languageGeneral.OverlapPreviousLineX, prevParagraph.EndTime.TotalSeconds - startTime.TotalSeconds);
                }

                var nextParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1);
                if (nextParagraph != null)
                {
                    double durationMilliSeconds = GetDurationInMilliseconds();
                    if (startTime.TotalMilliseconds + durationMilliSeconds > nextParagraph.StartTime.TotalMilliseconds &&
                        Configuration.Settings.Tools.ListViewSyntaxColorOverlap &&
                        !startTime.IsMaxTime)
                    {
                        durationWarning = string.Format(_languageGeneral.OverlapX, ((startTime.TotalMilliseconds + durationMilliSeconds) - nextParagraph.StartTime.TotalMilliseconds) / TimeCode.BaseUnit);
                    }

                    if (startTimeWarning.Length == 0 &&
                        startTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds &&
                        Configuration.Settings.Tools.ListViewSyntaxColorOverlap &&
                        !startTime.IsMaxTime)
                    {
                        double di = (startTime.TotalMilliseconds - nextParagraph.StartTime.TotalMilliseconds) / TimeCode.BaseUnit;
                        startTimeWarning = string.Format(_languageGeneral.OverlapNextX, di);
                    }
                    else if (numericUpDownDuration.Value < 0)
                    {
                        durationWarning = _languageGeneral.Negative;
                    }
                }
            }

            labelStartTimeWarning.Text = startTimeWarning;
            labelDurationWarning.Text = durationWarning;
        }

        private double _durationMsInitialValue = 0;
        private bool _durationIsDirty = false;

        private double GetDurationInMilliseconds()
        {
            if (!_durationIsDirty)
            {
                return _durationMsInitialValue;
            }

            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                var seconds = (int)numericUpDownDuration.Value;
                var frames = (int)Math.Round((Convert.ToDouble(numericUpDownDuration.Value) % 1.0 * 100.0));
                return seconds * TimeCode.BaseUnit + frames * (TimeCode.BaseUnit / Configuration.Settings.General.CurrentFrameRate);
            }

            return ((double)numericUpDownDuration.Value * TimeCode.BaseUnit);
        }

        private bool _skipDurationChangedEvent = false;
        private void SetDurationInSeconds(double seconds)
        {
            _durationIsDirty = false;
            _durationMsInitialValue = seconds * 1000.0;
            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                var wholeSeconds = (int)seconds;
                var frames = SubtitleFormat.MillisecondsToFrames(seconds % 1.0 * TimeCode.BaseUnit);
                var extraSeconds = (int)(frames / Configuration.Settings.General.CurrentFrameRate);
                var restFrames = (int)(frames % Configuration.Settings.General.CurrentFrameRate);
                var v = (decimal)(wholeSeconds + extraSeconds + restFrames / 100.0);
                if (v >= numericUpDownDuration.Minimum && v <= numericUpDownDuration.Maximum)
                {
                    _skipDurationChangedEvent = true;
                    numericUpDownDuration.Value = (decimal)(wholeSeconds + extraSeconds + restFrames / 100.0);
                    _skipDurationChangedEvent = false;

                    int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                    var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                    if (currentParagraph != null)
                    {
                        UpdateOverlapErrors(timeUpDownStartTime.TimeCode);
                        UpdateListViewTextCharactersPerSeconds(labelCharactersPerSecond, currentParagraph);

                        if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                        {
                            var original = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, _subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                                UpdateListViewTextCharactersPerSeconds(labelAlternateCharactersPerSecond, original);
                            }
                        }

                        SubtitleListview1.SetDuration(firstSelectedIndex, currentParagraph, _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1));
                        StartUpdateListSyntaxColoring();
                    }
                }
            }
            else
            {
                var d = (decimal)seconds;
                if (d > numericUpDownDuration.Maximum)
                {
                    numericUpDownDuration.Value = numericUpDownDuration.Maximum;
                }
                else if (d < numericUpDownDuration.Minimum)
                {
                    numericUpDownDuration.Value = numericUpDownDuration.Minimum;
                }
                else
                {
                    numericUpDownDuration.Value = d;
                }
            }
        }

        private void NumericUpDownDurationValueChanged(object sender, EventArgs e)
        {
            if (_skipDurationChangedEvent)
            {
                return;
            }

            _durationIsDirty = true;
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;

                var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (currentParagraph != null)
                {
                    // update _subtitle + listview
                    string oldDuration = currentParagraph.Duration.ToString();

                    var temp = new Paragraph(currentParagraph);

                    if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                    {
                        var seconds = (int)numericUpDownDuration.Value;
                        var frames = Convert.ToInt32((numericUpDownDuration.Value - seconds) * 100);
                        if (frames > Math.Round(Configuration.Settings.General.CurrentFrameRate) - 1)
                        {
                            numericUpDownDuration.ValueChanged -= NumericUpDownDurationValueChanged;
                            if (frames >= 99)
                            {
                                numericUpDownDuration.Value = (decimal)(seconds + (Math.Round((Configuration.Settings.General.CurrentFrameRate - 1)) / 100.0));
                            }
                            else
                            {
                                numericUpDownDuration.Value = seconds + 1;
                            }

                            numericUpDownDuration.ValueChanged += NumericUpDownDurationValueChanged;
                        }
                    }

                    temp.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + GetDurationInMilliseconds();

                    MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.DisplayTimeAdjustedX, "#" + currentParagraph.Number + ": " + oldDuration + " -> " + temp.Duration));

                    currentParagraph.EndTime.TotalMilliseconds = temp.EndTime.TotalMilliseconds;
                    SubtitleListview1.SetDuration(firstSelectedIndex, currentParagraph, _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1));

                    UpdateOverlapErrors(timeUpDownStartTime.TimeCode);
                    UpdateListViewTextCharactersPerSeconds(labelCharactersPerSecond, currentParagraph);

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                    {
                        var original = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                            UpdateListViewTextCharactersPerSeconds(labelAlternateCharactersPerSecond, original);
                        }
                    }

                    StartUpdateListSyntaxColoring();
                }

                labelStatus.Text = string.Empty;
                StartUpdateListSyntaxColoring();
            }
        }

        private void InitializeListViewEditBoxAlternate(Paragraph p, int firstSelectedIndex)
        {
            if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                var original = Utilities.GetOriginalParagraph(firstSelectedIndex, p, _subtitleAlternate.Paragraphs);
                if (original == null)
                {
                    textBoxListViewTextAlternate.Enabled = false;
                    textBoxListViewTextAlternate.Text = string.Empty;
                    labelAlternateCharactersPerSecond.Text = string.Empty;
                }
                else
                {
                    textBoxListViewTextAlternate.Enabled = true;
                    textBoxListViewTextAlternate.TextChanged -= TextBoxListViewTextAlternateTextChanged;
                    textBoxListViewTextAlternate.Text = original.Text;
                    textBoxListViewTextAlternate.TextChanged += TextBoxListViewTextAlternateTextChanged;
                    UpdateListViewTextCharactersPerSeconds(labelAlternateCharactersPerSecond, original);
                    _listViewAlternateTextUndoLast = original.Text;
                }
            }
        }

        private void InitializeListViewEditBox(Paragraph p)
        {
            textBoxListViewText.TextChanged -= TextBoxListViewTextTextChanged;
            textBoxListViewText.Text = p.Text;
            textBoxListViewText.TextChanged += TextBoxListViewTextTextChanged;
            _listViewTextUndoLast = p.Text;

            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            timeUpDownStartTime.TimeCode = p.StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;

            numericUpDownDuration.ValueChanged -= NumericUpDownDurationValueChanged;
            if (p.Duration.TotalSeconds > (double)numericUpDownDuration.Maximum)
            {
                SetDurationInSeconds((double)numericUpDownDuration.Maximum);
            }
            else
            {
                SetDurationInSeconds(p.Duration.TotalSeconds);
            }

            numericUpDownDuration.ValueChanged += NumericUpDownDurationValueChanged;

            UpdateOverlapErrors(timeUpDownStartTime.TimeCode);
            UpdateListViewTextCharactersPerSeconds(labelCharactersPerSecond, p);
            if (_subtitle != null && _subtitle.Paragraphs.Count > 0)
            {
                textBoxListViewText.Enabled = true;
            }

            StartUpdateListSyntaxColoring();
            ShowHideBookmark(p);
        }

        private void MaskedTextBoxTextChanged(object sender, EventArgs e)
        {
            if (_subtitleListViewIndex >= 0)
            {
                MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.StarTimeAdjustedX, "#" + (_subtitleListViewIndex + 1) + ": " + timeUpDownStartTime.TimeCode));

                int firstSelectedIndex = FirstSelectedIndex;
                var oldParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (oldParagraph != null)
                {
                    oldParagraph = new Paragraph(oldParagraph, false);
                }

                UpdateStartTimeInfo(timeUpDownStartTime.TimeCode);

                UpdateOriginalTimeCodes(oldParagraph);
                labelStatus.Text = string.Empty;
            }
        }

        private void UpdateOriginalTimeCodes(Paragraph currentPargraphBeforeChange, Paragraph p2Before = null)
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                Paragraph p1 = null;
                Paragraph o1 = null;
                if (currentPargraphBeforeChange != null)
                {
                    p1 = _subtitle.GetParagraphOrDefaultById(currentPargraphBeforeChange.Id);
                    if (p1 != null)
                    {
                        o1 = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.IndexOf(p1), currentPargraphBeforeChange, _subtitleAlternate.Paragraphs);
                    }
                }

                Paragraph p2 = null;
                Paragraph o2 = null;
                if (p2Before != null)
                {
                    p2 = _subtitle.GetParagraphOrDefaultById(p2Before.Id);
                    if (p2 != null)
                    {
                        o2 = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.IndexOf(p2), p2Before, _subtitleAlternate.Paragraphs);
                    }
                }

                if (o1 != null)
                {
                    o1.StartTime.TotalMilliseconds = p1.StartTime.TotalMilliseconds;
                    o1.EndTime.TotalMilliseconds = p1.EndTime.TotalMilliseconds;
                }

                if (o2 != null)
                {
                    o2.StartTime.TotalMilliseconds = p2.StartTime.TotalMilliseconds;
                    o2.EndTime.TotalMilliseconds = p2.EndTime.TotalMilliseconds;
                }
            }
        }

        private void FormMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            _lastDoNotPrompt = -1;
            ReloadFromSourceView();
            if (!ContinueNewOrExit())
            {
                e.Cancel = true;
            }
            else
            {
                if (_networkSession != null)
                {
                    try
                    {
                        _networkSession.TimerStop();
                        _networkSession.Leave();
                    }
                    catch
                    {
                    }
                }

                if (Configuration.Settings.General.StartRememberPositionAndSize && WindowState != FormWindowState.Minimized)
                {
                    Configuration.Settings.General.StartPosition = Left + ";" + Top;
                    if (WindowState == FormWindowState.Maximized)
                    {
                        Configuration.Settings.General.StartSize = "Maximized";
                    }
                    else
                    {
                        Configuration.Settings.General.StartSize = Width + ";" + Height;
                    }

                    Configuration.Settings.General.SplitContainerMainSplitterDistance = splitContainerMain.SplitterDistance;
                    Configuration.Settings.General.SplitContainer1SplitterDistance = splitContainer1.SplitterDistance;
                    Configuration.Settings.General.SplitContainerListViewAndTextSplitterDistance = splitContainerListViewAndText.SplitterDistance;
                }

                Configuration.Settings.General.AutoRepeatOn = checkBoxAutoRepeatOn.Checked;
                int autoRepeat;
                if (int.TryParse(comboBoxAutoRepeat.Text, out autoRepeat))
                {
                    Configuration.Settings.General.AutoRepeatCount = autoRepeat;
                }

                Configuration.Settings.General.AutoContinueOn = checkBoxAutoContinue.Checked;
                Configuration.Settings.General.AutoContinueDelay = comboBoxAutoContinue.SelectedIndex;
                Configuration.Settings.General.SyncListViewWithVideoWhilePlaying = checkBoxSyncListViewWithVideoWhilePlaying.Checked;
                Configuration.Settings.General.ShowWaveform = audioVisualizer.ShowWaveform;
                Configuration.Settings.General.ShowSpectrogram = audioVisualizer.ShowSpectrogram;
                if (Configuration.Settings.General.ShowRecentFiles && !string.IsNullOrEmpty(_fileName))
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                }

                if (SubtitleListview1.StateImageList?.Images.Count > 0)
                {
                    Configuration.Settings.General.ListViewNumberWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width - 18;
                }
                else
                {
                    Configuration.Settings.General.ListViewNumberWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width;
                }

                SaveUndockedPositions();
                SaveListViewWidths();
                Configuration.Settings.Save();

                if (mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.PauseAndDisposePlayer();
                }
            }
        }

        private void SaveListViewWidths()
        {
            if (Configuration.Settings.General.ListViewColumnsRememberSize)
            {
                if (SubtitleListview1.ColumnIndexNumber >= 0)
                {
                    Configuration.Settings.General.ListViewNumberWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width;
                }

                if (SubtitleListview1.ColumnIndexStart >= 0)
                {
                    Configuration.Settings.General.ListViewStartWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexStart].Width;
                }

                if (SubtitleListview1.ColumnIndexEnd >= 0)
                {
                    Configuration.Settings.General.ListViewEndWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexEnd].Width;
                }

                if (SubtitleListview1.ColumnIndexDuration >= 0)
                {
                    Configuration.Settings.General.ListViewDurationWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexDuration].Width;
                }

                if (SubtitleListview1.ColumnIndexCps >= 0)
                {
                    Configuration.Settings.General.ListViewCpsWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexCps].Width;
                }

                if (SubtitleListview1.ColumnIndexWpm >= 0)
                {
                    Configuration.Settings.General.ListViewWpmWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexWpm].Width;
                }

                if (SubtitleListview1.ColumnIndexText >= 0)
                {
                    Configuration.Settings.General.ListViewTextWidth = SubtitleListview1.Columns[SubtitleListview1.ColumnIndexText].Width;
                }
            }
        }

        private void SaveUndockedPositions()
        {
            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedVideoFullscreen = _videoPlayerUndocked.IsFullscreen;
                Configuration.Settings.General.UndockedVideoPosition = _videoPlayerUndocked.Left + @";" + _videoPlayerUndocked.Top + @";" + _videoPlayerUndocked.Width + @";" + _videoPlayerUndocked.Height;
            }

            if (_waveformUndocked != null && !_waveformUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedWaveformPosition = _waveformUndocked.Left + @";" + _waveformUndocked.Top + @";" + _waveformUndocked.Width + @";" + _waveformUndocked.Height;
            }

            if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedVideoControlsPosition = _videoControlsUndocked.Left + @";" + _videoControlsUndocked.Top + @";" + _videoControlsUndocked.Width + @";" + _videoControlsUndocked.Height;
            }
        }

        private void ButtonUnBreakClick(object sender, EventArgs e)
        {
            Unbreak();
        }

        private void BreakUnbreakTextBox(bool unbreak, TextBox tb)
        {
            var textCaretPos = tb.SelectionStart;
            var startText = tb.Text.Substring(0, textCaretPos);
            var numberOfNewLines = Utilities.CountTagInText(startText, Environment.NewLine);
            if (unbreak)
            {
                textCaretPos -= numberOfNewLines;
                tb.Text = Utilities.UnbreakLine(tb.Text);
            }
            else
            {
                int i = 0;
                string s;
                bool useLanguage = false;
                var language = "en";
                if (Configuration.Settings.Tools.UseNoLineBreakAfter && tb == textBoxListViewText)
                {
                    language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                    useLanguage = true;
                }
                else if (Configuration.Settings.Tools.UseNoLineBreakAfter && tb == textBoxListViewTextAlternate)
                {
                    language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleAlternate);
                    useLanguage = true;
                }

                if (useLanguage)
                {
                    s = Utilities.AutoBreakLine(tb.Text, language);
                }
                else
                {
                    s = Utilities.AutoBreakLine(tb.Text);
                }

                while (i < textCaretPos && i < s.Length)
                {
                    var ch = s[i];
                    if (ch == '\n')
                    {
                        textCaretPos++;
                    }

                    i++;
                }

                textCaretPos -= numberOfNewLines;
                tb.Text = s;
            }

            tb.SelectionStart = textCaretPos;
        }

        private void Unbreak(bool removeNewLineOnly = false)
        {
            _doAutoBreakOnTextChanged = false;

            var textCaretPos = textBoxListViewText.SelectionStart;
            var startText = textBoxListViewText.Text.Substring(0, textCaretPos);
            var numberOfNewLines = Utilities.CountTagInText(startText, Environment.NewLine);
            textCaretPos -= numberOfNewLines;
            bool historyAdded = false;

            if (SubtitleListview1.SelectedItems.Count > 1)
            {
                SubtitleListview1.BeginUpdate();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(index);
                    var oldText = p.Text;
                    var newText = p.Text;
                    if (removeNewLineOnly)
                    {
                        newText = newText.Replace(Environment.NewLine, string.Empty);
                    }
                    else
                    {
                        newText = Utilities.UnbreakLine(newText);
                    }

                    if (oldText != newText)
                    {
                        if (!historyAdded)
                        {
                            historyAdded = true;
                            MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);
                        }

                        p.Text = newText;
                        SubtitleListview1.SetText(index, p.Text);
                    }

                    if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(index, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            oldText = original.Text;
                            newText = original.Text;
                            if (removeNewLineOnly)
                            {
                                newText = newText.Replace(Environment.NewLine, string.Empty);
                            }
                            else
                            {
                                newText = Utilities.UnbreakLine(newText);
                            }

                            if (oldText != newText)
                            {
                                if (!historyAdded)
                                {
                                    historyAdded = true;
                                    MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);
                                }

                                original.Text = newText;
                                SubtitleListview1.SetAlternateText(index, original.Text);
                            }
                        }
                    }
                }

                SubtitleListview1.EndUpdate();
                RefreshSelectedParagraph();
            }
            else
            {
                var fixedText = removeNewLineOnly ? textBoxListViewText.Text.Replace(Environment.NewLine, string.Empty) : Utilities.UnbreakLine(textBoxListViewText.Text);
                var makeHistory = textBoxListViewText.Text != fixedText;
                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var alternateFixedText = Utilities.UnbreakLine(textBoxListViewTextAlternate.Text);
                    if (!makeHistory)
                    {
                        makeHistory = textBoxListViewTextAlternate.Text != alternateFixedText;
                    }

                    if (makeHistory)
                    {
                        MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);
                        textBoxListViewText.Text = fixedText;
                    }

                    textBoxListViewTextAlternate.Text = alternateFixedText;
                }
                else if (makeHistory)
                {
                    MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);
                    textBoxListViewText.Text = fixedText;
                }
            }

            _doAutoBreakOnTextChanged = true;
            textBoxListViewText.SelectionStart = textCaretPos;
        }

        private void TabControlSubtitleSelectedIndexChanged(object sender, EventArgs e)
        {
            var format = GetCurrentSubtitleFormat();
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                ShowSource();
                ShowSourceLineNumber();
                if (textBoxSource.CanFocus)
                {
                    textBoxSource.Focus();
                }

                // go to correct line in source view
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    if (format.GetType() == typeof(SubRip))
                    {
                        var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                        if (p != null)
                        {
                            string tc = p.StartTime + " --> " + p.EndTime;
                            int start = textBoxSource.Text.IndexOf(p.Number + Environment.NewLine + tc, StringComparison.Ordinal);
                            if (start < 0)
                            {
                                start = 0;
                            }

                            start = textBoxSource.Text.IndexOf(tc, start, StringComparison.Ordinal);
                            if (start > 0)
                            {
                                textBoxSource.SelectionStart = start + tc.Length + Environment.NewLine.Length;
                                textBoxSource.SelectionLength = 0;
                                textBoxSource.ScrollToCaret();
                            }
                        }
                    }
                    else if (format.GetType() == typeof(SubStationAlpha) || format.GetType() == typeof(AdvancedSubStationAlpha))
                    {
                        var p = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                        if (p != null)
                        {
                            const string timeCodeFormat = "{0}:{1:00}:{2:00}.{3:00}"; // h:mm:ss.cc
                            string startTimeCode = string.Format(timeCodeFormat, p.StartTime.Hours, p.StartTime.Minutes, p.StartTime.Seconds, p.StartTime.Milliseconds / 10);
                            string endTimeCode = string.Format(timeCodeFormat, p.EndTime.Hours, p.EndTime.Minutes, p.EndTime.Seconds, p.EndTime.Milliseconds / 10);
                            string tc = startTimeCode + "," + endTimeCode;
                            int start = textBoxSource.Text.IndexOf(tc, StringComparison.Ordinal);
                            if (start > 0)
                            {
                                int start2 = textBoxSource.Text.LastIndexOf("Dialogue:", start, StringComparison.Ordinal);
                                if (start2 > 0)
                                {
                                    start2 = (textBoxSource.Text + Environment.NewLine).IndexOf(Environment.NewLine, start2, StringComparison.Ordinal);
                                }

                                if (start2 > 0)
                                {
                                    start = start2;
                                }

                                textBoxSource.SelectionStart = start;
                                textBoxSource.SelectionLength = 0;
                                textBoxSource.ScrollToCaret();
                            }
                        }
                    }
                }
            }
            else
            {
                ReloadFromSourceView();
                ShowLineInformationListView();
                if (SubtitleListview1.CanFocus)
                {
                    SubtitleListview1.Focus();
                }

                // go to (select + focus) correct line in list view
                if (textBoxSource.SelectionStart > 0 && textBoxSource.TextLength > 30)
                {
                    if (format.GetType() == typeof(SubRip))
                    {
                        var timeCodeRegEx = new Regex(@"^-?\d+:-?\d+:-?\d+[:,]-?\d+\s*-->\s*-?\d+:-?\d+:-?\d+[:,]-?\d+$");
                        var lineNumber = textBoxSource.GetLineFromCharIndex(textBoxSource.SelectionStart);
                        var lines = textBoxSource.Lines.ToList();
                        if (lineNumber >= lines.Count)
                        {
                            lineNumber = lines.Count - 1;
                        }

                        var currentLine = lines[lineNumber];
                        var nextLine = lineNumber + 1 < lines.Count ? lines[lineNumber + 1] : string.Empty;
                        var startLine = 0;
                        if (Utilities.IsInteger(currentLine) && timeCodeRegEx.IsMatch(nextLine))
                        {
                            startLine = lineNumber;
                        }
                        else
                        {
                            for (int i = lineNumber; i > 0; i--)
                            {
                                if (timeCodeRegEx.IsMatch(lines[i]) && Utilities.IsInteger(lines[i - 1]))
                                {
                                    startLine = i - 1;
                                    break;
                                }
                            }
                        }

                        var sb = new StringBuilder();
                        for (int i = startLine; i < lines.Count; i++)
                        {
                            sb.AppendLine(lines[i]);
                        }

                        var sub = new Subtitle();
                        new SubRip().LoadSubtitle(sub, sb.ToString().SplitToLines().ToList(), null);
                        if (sub.Paragraphs.Count > 0)
                        {
                            foreach (var p in _subtitle.Paragraphs)
                            {
                                if (sub.Paragraphs[0].Number == p.Number &&
                                    sub.Paragraphs[0].StartTime.TotalMilliseconds == p.StartTime.TotalMilliseconds &&
                                    sub.Paragraphs[0].EndTime.TotalMilliseconds == p.EndTime.TotalMilliseconds)
                                {
                                    _subtitleListViewIndex = -1;
                                    var index = _subtitle.Paragraphs.IndexOf(p);
                                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                    break;
                                }
                            }
                        }
                    }
                    else if (format.GetType() == typeof(SubStationAlpha) || format.GetType() == typeof(AdvancedSubStationAlpha))
                    {
                        int pos = textBoxSource.SelectionStart;
                        string s = textBoxSource.Text;
                        if (pos > 0)
                        {
                            pos--;
                        }

                        while (pos > 0 && pos + 3 < s.Length && !s.Substring(pos, 3).StartsWith(Environment.NewLine, StringComparison.Ordinal))
                        {
                            pos--;
                        }

                        s = s.Substring(pos).Trim();
                        int lastTimeCode = s.IndexOf("Dialogue:", StringComparison.Ordinal);

                        if (lastTimeCode >= 0)
                        {
                            string tc = s.Substring(lastTimeCode).Trim();
                            while (tc.Length > 0 && !char.IsDigit(tc[0]))
                            {
                                tc = tc.Remove(0, 1);
                            }

                            if (tc.Length > 12)
                            {
                                tc = tc.Substring(0, 13);
                                var timeCode = tc.Split(new[] { ':', '.', ',' }, StringSplitOptions.RemoveEmptyEntries);
                                var realTC = new TimeCode();
                                try
                                {
                                    realTC = new TimeCode(int.Parse(timeCode[1]), int.Parse(timeCode[2]), int.Parse(timeCode[3]), int.Parse(timeCode[4]) * 10);
                                }
                                catch
                                {
                                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                                    return;
                                }

                                int index = 0;
                                foreach (var p in _subtitle.Paragraphs)
                                {
                                    if (Math.Abs(realTC.TotalMilliseconds - p.StartTime.TotalMilliseconds) < 50)
                                    {
                                        SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                        break;
                                    }

                                    index++;
                                }
                            }
                        }
                    }
                }
                else if (textBoxSource.SelectionStart == 0 && textBoxSource.TextLength > 30)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                }
            }
        }

        private void ColorToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {

                string color;
                var formatType = GetCurrentSubtitleFormat().GetType();
                if (formatType == typeof(Ebu))
                {
                    using (var form = new EbuColorPicker(true))
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }

                        color = form.Color;
                    }
                }
                else if (formatType == typeof(ScenaristClosedCaptions) || formatType == typeof(ScenaristClosedCaptionsDropFrame))
                {
                    using (var form = new EbuColorPicker(false))
                    {
                        if (form.ShowDialog(this) != DialogResult.OK)
                        {
                            return;
                        }

                        color = form.Color;
                    }
                }
                else
                {
                    if (colorDialog1.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }

                    color = Utilities.ColorToHex(colorDialog1.Color);
                }

                MakeHistoryForUndo(_language.BeforeSettingColor);
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    var p = _subtitle.GetParagraphOrDefault(item.Index);
                    if (p != null)
                    {
                        SetFontColor(p, color);
                        SubtitleListview1.SetText(item.Index, p.Text);
                        if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                        {
                            var original = Utilities.GetOriginalParagraph(item.Index, p, _subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                SetFontColor(original, color);
                                SubtitleListview1.SetAlternateText(item.Index, original.Text);
                            }
                        }
                    }
                }

                RefreshSelectedParagraph();

            }
        }

        private static void SetFontColor(Paragraph p, string color)
        {
            if (p == null)
            {
                return;
            }

            string pre = string.Empty;
            if (p.Text.StartsWith("{\\", StringComparison.Ordinal) && p.Text.IndexOf('}') >= 0)
            {
                int endIndex = p.Text.IndexOf('}') + 1;
                pre = p.Text.Substring(0, endIndex);
                p.Text = p.Text.Remove(0, endIndex);
            }

            string s = p.Text;
            if (s.StartsWith("<font ", StringComparison.OrdinalIgnoreCase))
            {
                int end = s.IndexOf('>');
                if (end > 0)
                {
                    string f = s.Substring(0, end);

                    if (f.Contains(" face=", StringComparison.OrdinalIgnoreCase) && !f.Contains(" color=", StringComparison.OrdinalIgnoreCase))
                    {
                        var start = s.IndexOf(" face=", StringComparison.OrdinalIgnoreCase);
                        s = s.Insert(start, string.Format(" color=\"{0}\"", color));
                        p.Text = pre + s;
                        return;
                    }

                    var colorStart = f.IndexOf(" color=", StringComparison.OrdinalIgnoreCase);
                    if (colorStart >= 0)
                    {
                        if (s.IndexOf('"', colorStart + 8) > 0)
                        {
                            end = s.IndexOf('"', colorStart + 8);
                        }

                        s = s.Substring(0, colorStart) + string.Format(" color=\"{0}", color) + s.Substring(end);
                        p.Text = pre + s;
                        return;
                    }
                }
            }

            p.Text = $"{pre}<font color=\"{color}\">{p.Text}</font>";
        }

        private void toolStripMenuItemFont_Click(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                using (var form = new ChooseFontName())
                {

                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeSettingFontName);

                        foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                        {
                            var p = _subtitle.GetParagraphOrDefault(item.Index);
                            if (p != null)
                            {
                                SetFontName(p, form.FontName);
                                SubtitleListview1.SetText(item.Index, p.Text);
                                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                                {
                                    var original = Utilities.GetOriginalParagraph(item.Index, p, _subtitleAlternate.Paragraphs);
                                    if (original != null)
                                    {
                                        SetFontName(original, form.FontName);
                                        SubtitleListview1.SetAlternateText(item.Index, original.Text);
                                    }
                                }
                            }
                        }

                        RefreshSelectedParagraph();
                    }
                }
            }
        }

        private void SetFontName(Paragraph p, string fontName)
        {
            if (p == null)
            {
                return;
            }

            string pre = string.Empty;
            if (p.Text.StartsWith("{\\", StringComparison.Ordinal) && p.Text.IndexOf('}') >= 0)
            {
                int endIndex = p.Text.IndexOf('}') + 1;
                pre = p.Text.Substring(0, endIndex);
                p.Text = p.Text.Remove(0, endIndex);
            }

            string s = p.Text;
            if (s.StartsWith("<font ", StringComparison.OrdinalIgnoreCase))
            {
                var end = s.IndexOf('>');
                if (end > 0)
                {
                    var f = s.Substring(0, end);

                    if (f.Contains(" color=", StringComparison.OrdinalIgnoreCase) && !f.Contains(" face=", StringComparison.OrdinalIgnoreCase))
                    {
                        var start = s.IndexOf(" color=", StringComparison.OrdinalIgnoreCase);
                        p.Text = pre + s.Insert(start, string.Format(" face=\"{0}\"", fontName));
                        return;
                    }

                    var faceStart = f.IndexOf(" face=", StringComparison.OrdinalIgnoreCase);
                    if (f.Contains(" face=", StringComparison.OrdinalIgnoreCase))
                    {
                        if (s.IndexOf('"', faceStart + 7) > 0)
                        {
                            end = s.IndexOf('"', faceStart + 7);
                        }

                        p.Text = pre + s.Substring(0, faceStart) + string.Format(" face=\"{0}", fontName) + s.Substring(end);
                        return;
                    }
                }
            }

            p.Text = $"{pre}<font face=\"{fontName}\">{s}</font>";
        }

        private void TypeEffectToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                using (var typewriter = new EffectTypewriter())
                {
                    typewriter.Initialize(SubtitleListview1.GetSelectedParagraph(_subtitle));

                    if (typewriter.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeTypeWriterEffect);
                        bool isframeBased = GetCurrentSubtitleFormat().IsFrameBased;
                        int lastSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                        int i = SubtitleListview1.SelectedItems.Count - 1;
                        while (i >= 0)
                        {
                            var item = SubtitleListview1.SelectedItems[i];
                            var p = _subtitle.GetParagraphOrDefault(item.Index);
                            if (p != null)
                            {
                                typewriter.Initialize(p);
                                typewriter.MakeAnimation();
                                int index = item.Index;
                                _subtitle.Paragraphs.RemoveAt(index);
                                foreach (var tp in typewriter.TypewriterParagraphs)
                                {
                                    _subtitle.Paragraphs.Insert(index, tp);
                                    index++;
                                }
                            }

                            i--;
                        }

                        _subtitle.Renumber();
                        _subtitleListViewIndex = -1;
                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex, true);
                    }
                }
            }
        }

        private void KarokeeEffectToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                using (var karaoke = new EffectKaraoke())
                {
                    karaoke.Initialize(SubtitleListview1.GetSelectedParagraph(_subtitle));

                    if (karaoke.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeKaraokeEffect);
                        int lastSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                        bool isframeBased = GetCurrentSubtitleFormat().IsFrameBased;

                        int i = SubtitleListview1.SelectedItems.Count - 1;
                        while (i >= 0)
                        {
                            var item = SubtitleListview1.SelectedItems[i];
                            var p = _subtitle.GetParagraphOrDefault(item.Index);
                            if (p != null)
                            {
                                int index = item.Index;
                                _subtitle.Paragraphs.RemoveAt(index);
                                foreach (var kp in karaoke.MakeAnimation(p))
                                {
                                    _subtitle.Paragraphs.Insert(index, kp);
                                    index++;
                                }
                            }

                            i--;
                        }

                        _subtitle.Renumber();
                        _subtitleListViewIndex = -1;
                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex, true);
                    }
                }
            }
        }

        private void MatroskaImportStripMenuItemClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _language.OpenMatroskaFile;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = _language.MatroskaFiles + "|*.mkv;*.mks|" + _languageGeneral.AllFiles + "|*.*";
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = Path.GetDirectoryName(openFileDialog1.FileName);
                ImportSubtitleFromMatroskaFile(openFileDialog1.FileName);
            }
        }

        private void ImportSubtitleFromMatroskaFile(string fileName)
        {
            using (var matroska = new MatroskaFile(fileName))
            {
                if (matroska.IsValid)
                {
                    var subtitleList = matroska.GetTracks(true);
                    if (subtitleList.Count == 0)
                    {
                        MessageBox.Show(_language.NoSubtitlesFound);
                    }
                    else if (ContinueNewOrExit())
                    {
                        if (subtitleList.Count > 1)
                        {
                            using (var subtitleChooser = new MatroskaSubtitleChooser("mkv"))
                            {
                                subtitleChooser.Initialize(subtitleList);
                                if (_loading)
                                {
                                    subtitleChooser.Icon = (Icon)this.Icon.Clone();
                                    subtitleChooser.ShowInTaskbar = true;
                                    subtitleChooser.ShowIcon = true;
                                }

                                if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                {
                                    if (LoadMatroskaSubtitle(subtitleList[subtitleChooser.SelectedIndex], matroska, false) &&
                                        (Path.GetExtension(matroska.Path).Equals(".mkv", StringComparison.OrdinalIgnoreCase) ||
                                         Path.GetExtension(matroska.Path).Equals(".mks", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                                        {
                                            matroska.Dispose();
                                            OpenVideo(matroska.Path);
                                        }
                                    }
                                    else
                                    {
                                        _exitWhenLoaded = _loading;
                                    }
                                }
                            }
                        }
                        else
                        {
                            var ext = Path.GetExtension(matroska.Path).ToLowerInvariant();
                            if (LoadMatroskaSubtitle(subtitleList[0], matroska, false) &&
                                (ext == ".mkv" || ext == ".mks"))
                            {
                                if (!Configuration.Settings.General.DisableVideoAutoLoading)
                                {
                                    matroska.Dispose();
                                    if (ext == ".mkv")
                                    {
                                        OpenVideo(matroska.Path);
                                    }
                                    else
                                    {
                                        TryToFindAndOpenVideoFile(Path.Combine(Path.GetDirectoryName(matroska.Path), Path.GetFileNameWithoutExtension(matroska.Path)));
                                    }
                                }
                            }
                            else
                            {
                                _exitWhenLoaded = _loading;
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show(string.Format(_language.NotAValidMatroskaFileX, fileName));
                }
            }
        }

        private int _lastProgressPercent = -1;

        private void UpdateProgress(long position, long total, string statusMessage)
        {
            var percent = (int)Math.Round(position * 100.0 / total);
            if (percent == _lastProgressPercent)
            {
                return;
            }

            ShowStatus(string.Format("{0}, {1:0}%", statusMessage, _lastProgressPercent));
            statusStrip1.Refresh();
            TaskbarList.SetProgressValue(Handle, percent, 100);
            if (DateTime.UtcNow.Ticks % 10 == 0)
            {
                Application.DoEvents();
            }

            _lastProgressPercent = percent;
        }

        private void MatroskaProgress(long position, long total)
        {
            UpdateProgress(position, total, _language.ParsingMatroskaFile);
        }

        private Subtitle LoadMatroskaSubtitleForSync(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            var subtitle = new Subtitle();
            bool isSsa = false;

            if (matroskaSubtitleInfo.CodecId.Equals("S_VOBSUB", StringComparison.OrdinalIgnoreCase))
            {
                return subtitle;
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_HDMV/PGS", StringComparison.OrdinalIgnoreCase))
            {
                return subtitle;
            }

            SubtitleFormat format;
            var codecPrivate = matroskaSubtitleInfo.GetCodecPrivate();
            if (codecPrivate.Contains("[script info]", StringComparison.OrdinalIgnoreCase))
            {
                if (codecPrivate.Contains("[V4 Styles]", StringComparison.OrdinalIgnoreCase))
                {
                    format = new SubStationAlpha();
                }
                else
                {
                    format = new AdvancedSubStationAlpha();
                }

                isSsa = true;
            }
            else
            {
                format = new SubRip();
            }

            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            if (isSsa)
            {
                foreach (var p in Utilities.LoadMatroskaSSA(matroskaSubtitleInfo, matroska.Path, format, sub).Paragraphs)
                {
                    subtitle.Paragraphs.Add(p);
                }
            }
            else
            {
                foreach (var p in sub)
                {
                    subtitle.Paragraphs.Add(new Paragraph(p.GetText(matroskaSubtitleInfo), p.Start, p.End));
                }
            }

            return subtitle;
        }

        private bool LoadMatroskaSubtitle(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska, bool batchMode)
        {
            if (matroskaSubtitleInfo.CodecId.Equals("S_VOBSUB", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return LoadVobSubFromMatroska(matroskaSubtitleInfo, matroska);
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_HDMV/PGS", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return LoadBluRaySubFromMatroska(matroskaSubtitleInfo, matroska);
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_HDMV/TEXTST", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return LoadTextSTFromMatroska(matroskaSubtitleInfo, matroska, batchMode);
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_DVBSUB", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return LoadDvbFromMatroska(matroskaSubtitleInfo, matroska, batchMode);
            }

            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            if (!batchMode)
            {
                ResetSubtitle();
            }

            _subtitle.Paragraphs.Clear();

            var format = Utilities.LoadMatroskaTextSubtitle(matroskaSubtitleInfo, matroska, sub, _subtitle);

            if (matroskaSubtitleInfo.GetCodecPrivate().Contains("[script info]", StringComparison.OrdinalIgnoreCase))
            {
                if (_networkSession == null)
                {
                    SubtitleListview1.ShowExtraColumn(_languageGeneral.Style);
                }
            }
            else if (_networkSession == null)
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
            }

            comboBoxSubtitleFormats.SelectedIndexChanged -= ComboBoxSubtitleFormatsSelectedIndexChanged;
            SetCurrentFormat(format);
            comboBoxSubtitleFormats.SelectedIndexChanged += ComboBoxSubtitleFormatsSelectedIndexChanged;
            _oldSubtitleFormat = format;
            SetEncoding(Encoding.UTF8);
            ShowStatus(_language.SubtitleImportedFromMatroskaFile);
            _subtitle.Renumber();
            if (matroska.Path.EndsWith(".mkv", StringComparison.OrdinalIgnoreCase) || matroska.Path.EndsWith(".mks", StringComparison.OrdinalIgnoreCase))
            {
                _fileName = matroska.Path.Remove(matroska.Path.Length - 4) + format.Extension;
            }

            SetTitle();
            _fileDateTime = new DateTime();
            _converted = true;

            if (batchMode)
            {
                return true;
            }

            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            if (_subtitle.Paragraphs.Count > 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
            }

            ShowSource();
            return true;
        }

        private bool LoadTextSTFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska, bool batchMode)
        {
            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            if (!batchMode)
            {
                ResetSubtitle();
            }

            _subtitle.Paragraphs.Clear();

            Utilities.LoadMatroskaTextSubtitle(matroskaSubtitleInfo, matroska, sub, _subtitle);
            for (int index = 0; index < sub.Count; index++)
            {
                try
                {
                    var msub = sub[index];
                    int idx = -6; // MakeMKV starts at DialogPresentationSegment
                    var data = msub.GetData(matroskaSubtitleInfo);
                    if (VobSubParser.IsPrivateStream2(data, 0))
                    {
                        idx = 0; //  starts with MPEG2 private stream 2 (just to be sure)
                    }

                    var dps = new TextST.DialogPresentationSegment(data, idx);
                    _subtitle.Paragraphs[index].Text = dps.Text;
                }
                catch (Exception exception)
                {
                    _subtitle.Paragraphs[index].Text = exception.Message;
                }
            }

            if (_networkSession == null)
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Extra);
            }

            comboBoxSubtitleFormats.SelectedIndexChanged -= ComboBoxSubtitleFormatsSelectedIndexChanged;
            SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
            comboBoxSubtitleFormats.SelectedIndexChanged += ComboBoxSubtitleFormatsSelectedIndexChanged;
            SetEncoding(Encoding.UTF8);
            ShowStatus(_language.SubtitleImportedFromMatroskaFile);
            _subtitle.Renumber();
            if (matroska.Path.EndsWith(".mkv", StringComparison.OrdinalIgnoreCase) || matroska.Path.EndsWith(".mks", StringComparison.OrdinalIgnoreCase))
            {
                _fileName = matroska.Path.Remove(matroska.Path.Length - 4) + GetCurrentSubtitleFormat().Extension;
            }

            SetTitle();
            _fileDateTime = new DateTime();
            _converted = true;
            if (batchMode)
            {
                return true;
            }

            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            if (_subtitle.Paragraphs.Count > 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
            }

            ShowSource();
            return true;
        }

        private bool LoadDvbFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska, bool batchMode)
        {
            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            if (!batchMode)
            {
                ResetSubtitle();
            }

            _subtitle.Paragraphs.Clear();
            var subtitleImages = new List<DvbSubPes>();
            var subtitle = new Subtitle();
            Utilities.LoadMatroskaTextSubtitle(matroskaSubtitleInfo, matroska, sub, _subtitle);
            for (int index = 0; index < sub.Count; index++)
            {
                try
                {
                    var msub = sub[index];
                    DvbSubPes pes = null;
                    var data = msub.GetData(matroskaSubtitleInfo);
                    if (data != null && data.Length > 9 && data[0] == 15 && data[1] >= SubtitleSegment.PageCompositionSegment && data[1] <= SubtitleSegment.DisplayDefinitionSegment) // sync byte + segment id
                    {
                        var buffer = new byte[data.Length + 3];
                        Buffer.BlockCopy(data, 0, buffer, 2, data.Length);
                        buffer[0] = 32;
                        buffer[1] = 0;
                        buffer[buffer.Length - 1] = 255;
                        pes = new DvbSubPes(0, buffer);
                    }
                    else if (VobSubParser.IsMpeg2PackHeader(data))
                    {
                        pes = new DvbSubPes(data, Mpeg2Header.Length);
                    }
                    else if (VobSubParser.IsPrivateStream1(data, 0))
                    {
                        pes = new DvbSubPes(data, 0);
                    }
                    else if (data.Length > 9 && data[0] == 32 && data[1] == 0 && data[2] == 14 && data[3] == 16)
                    {
                        pes = new DvbSubPes(0, data);
                    }

                    if (pes == null && subtitle.Paragraphs.Count > 0)
                    {
                        var last = subtitle.Paragraphs[subtitle.Paragraphs.Count - 1];
                        if (last.Duration.TotalMilliseconds < 100)
                        {
                            last.EndTime.TotalMilliseconds = msub.Start;
                            if (last.Duration.TotalMilliseconds > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                            {
                                last.EndTime.TotalMilliseconds = last.StartTime.TotalMilliseconds + 3000;
                            }
                        }
                    }

                    if (pes != null && pes.PageCompositions != null && pes.PageCompositions.Any(p => p.Regions.Count > 0))
                    {
                        subtitleImages.Add(pes);
                        subtitle.Paragraphs.Add(new Paragraph(string.Empty, msub.Start, msub.End));
                    }
                }
                catch
                {
                    // continue
                }
            }

            if (subtitleImages.Count == 0)
            {
                return false;
            }

            for (int index = 0; index < subtitle.Paragraphs.Count; index++)
            {
                var p = subtitle.Paragraphs[index];
                if (p.Duration.TotalMilliseconds < 200)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + 3000;
                }

                var next = subtitle.GetParagraphOrDefault(index + 1);
                if (next != null && next.StartTime.TotalMilliseconds < p.EndTime.TotalMilliseconds)
                {
                    p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                }
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitle, subtitleImages, Configuration.Settings.VobSubOcr); // TODO: language???
                if (_loading)
                {
                    formSubOcr.Icon = (Icon)Icon.Clone();
                    formSubOcr.ShowInTaskbar = true;
                    formSubOcr.ShowIcon = true;
                }

                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    ResetSubtitle();
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(matroska.Path) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();

                    Configuration.Settings.Save();
                    return true;
                }
            }

            return false;
        }

        public static void CopyStream(Stream input, Stream output)
        {
            var buffer = new byte[128 * 1024];
            int len;
            while ((len = input.Read(buffer, 0, buffer.Length)) > 0)
            {
                output.Write(buffer, 0, len);
            }

            output.Flush();
        }

        private bool LoadVobSubFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            if (matroskaSubtitleInfo.ContentEncodingType == 1)
            {
                MessageBox.Show(_language.NoSupportEncryptedVobSub);
            }

            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            _subtitle.Paragraphs.Clear();

            List<VobSubMergedPack> mergedVobSubPacks = new List<VobSubMergedPack>();
            var idx = new Core.VobSub.Idx(matroskaSubtitleInfo.GetCodecPrivate().SplitToLines());
            foreach (var p in sub)
            {
                mergedVobSubPacks.Add(new VobSubMergedPack(p.GetData(matroskaSubtitleInfo), TimeSpan.FromMilliseconds(p.Start), 32, null));
                if (mergedVobSubPacks.Count > 0)
                {
                    mergedVobSubPacks[mergedVobSubPacks.Count - 1].EndTime = TimeSpan.FromMilliseconds(p.End);
                }

                // fix overlapping (some versions of Handbrake makes overlapping time codes - thx Hawke)
                if (mergedVobSubPacks.Count > 1 && mergedVobSubPacks[mergedVobSubPacks.Count - 2].EndTime > mergedVobSubPacks[mergedVobSubPacks.Count - 1].StartTime)
                {
                    mergedVobSubPacks[mergedVobSubPacks.Count - 2].EndTime = TimeSpan.FromMilliseconds(mergedVobSubPacks[mergedVobSubPacks.Count - 1].StartTime.TotalMilliseconds - 1);
                }
            }

            // Remove bad packs
            for (int i = mergedVobSubPacks.Count - 1; i >= 0; i--)
            {
                if (mergedVobSubPacks[i].SubPicture.SubPictureDateSize <= 2)
                {
                    mergedVobSubPacks.RemoveAt(i);
                }
                else if (mergedVobSubPacks[i].SubPicture.SubPictureDateSize <= 67 && mergedVobSubPacks[i].SubPicture.Delay.TotalMilliseconds < 35)
                {
                    mergedVobSubPacks.RemoveAt(i);
                }
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(mergedVobSubPacks, idx.Palette, Configuration.Settings.VobSubOcr, null); // TODO: language???
                if (_loading)
                {
                    formSubOcr.Icon = (Icon)Icon.Clone();
                    formSubOcr.ShowInTaskbar = true;
                    formSubOcr.ShowIcon = true;
                }

                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    ResetSubtitle();
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(matroska.Path) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();

                    Configuration.Settings.Save();
                    return true;
                }
            }

            return false;
        }

        private bool LoadBluRaySubFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            if (matroskaSubtitleInfo.ContentEncodingType == 1)
            {
                MessageBox.Show(_language.NoSupportEncryptedVobSub);
            }

            ShowStatus(_language.ParsingMatroskaFile);
            Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, MatroskaProgress);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            int noOfErrors = 0;
            string lastError = string.Empty;
            MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
            _subtitleListViewIndex = -1;
            _subtitle.Paragraphs.Clear();
            var subtitles = new List<BluRaySupParser.PcsData>();
            var log = new StringBuilder();
            var clusterStream = new MemoryStream();
            var lastPalettes = new Dictionary<int, List<PaletteInfo>>();
            foreach (var p in sub)
            {
                byte[] buffer = p.GetData(matroskaSubtitleInfo);
                if (buffer != null && buffer.Length > 2)
                {
                    clusterStream.Write(buffer, 0, buffer.Length);
                    if (ContainsBluRayStartSegment(buffer))
                    {
                        if (subtitles.Count > 0 && subtitles[subtitles.Count - 1].StartTime == subtitles[subtitles.Count - 1].EndTime)
                        {
                            subtitles[subtitles.Count - 1].EndTime = (long)((p.Start - 1) * 90.0);
                        }

                        clusterStream.Position = 0;
                        var list = BluRaySupParser.ParseBluRaySup(clusterStream, log, true, lastPalettes);
                        foreach (var sup in list)
                        {
                            sup.StartTime = (long)((p.Start - 1) * 90.0);
                            sup.EndTime = (long)((p.End - 1) * 90.0);
                            subtitles.Add(sup);

                            // fix overlapping
                            if (subtitles.Count > 1 && sub[subtitles.Count - 2].End > sub[subtitles.Count - 1].Start)
                            {
                                subtitles[subtitles.Count - 2].EndTime = subtitles[subtitles.Count - 1].StartTime - 1;
                            }
                        }

                        clusterStream = new MemoryStream();
                    }
                }
                else if (subtitles.Count > 0)
                {
                    var lastSub = subtitles[subtitles.Count - 1];
                    if (lastSub.StartTime == lastSub.EndTime)
                    {
                        lastSub.EndTime = (long)((p.Start - 1) * 90.0);
                        if (lastSub.EndTime - lastSub.StartTime > 1000000)
                        {
                            lastSub.EndTime = lastSub.StartTime;
                        }
                    }
                }
            }

            if (noOfErrors > 0)
            {
                MessageBox.Show(string.Format("{0} error(s) occurred during extraction of bdsup\r\n\r\n{1}", noOfErrors, lastError));
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, matroska.Path);
                if (_loading)
                {
                    formSubOcr.Icon = (Icon)Icon.Clone();
                    formSubOcr.ShowInTaskbar = true;
                    formSubOcr.ShowIcon = true;
                }

                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);

                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = string.Empty;
                    SetTitle();

                    Configuration.Settings.Save();
                    return true;
                }
            }

            return false;
        }

        private bool ContainsBluRayStartSegment(byte[] buffer)
        {
            const int epochStart = 0x80;
            var position = 0;
            while (position + 3 <= buffer.Length)
            {
                var segmentType = buffer[position];
                if (segmentType == epochStart)
                {
                    return true;
                }

                int length = BluRaySupParser.BigEndianInt16(buffer, position + 1) + 3;
                position += length;
            }

            return false;
        }

        private void ImportSubtitleFromDvbSupFile(string fileName)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                string language = null;
                var programMapTableParser = new ProgramMapTableParser();
                programMapTableParser.Parse(fileName); // get languages
                if (programMapTableParser.GetSubtitlePacketIds().Count > 0)
                {
                    language = programMapTableParser.GetSubtitleLanguageTwoLetter(programMapTableParser.GetSubtitlePacketIds().First());
                }

                var subtitles = TransportStreamParser.GetDvbSup(fileName);
                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName, language);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);

                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = string.Empty;
                    SetTitle();

                    Configuration.Settings.Save();
                }
            }
        }

        private bool ImportSubtitleFromTransportStream(string fileName)
        {
            ShowStatus(_language.ParsingTransportStream);
            Refresh();
            var tsParser = new TransportStreamParser();
            tsParser.Parse(fileName, (pos, total) => UpdateProgress(pos, total, _language.ParsingTransportStreamFile));
            ShowStatus(string.Empty);
            TaskbarList.SetProgressState(Handle, TaskbarButtonProgressFlags.NoProgress);

            if (tsParser.SubtitlePacketIds.Count == 0 && tsParser.TeletextSubtitlesLookup.Count == 0)
            {
                MessageBox.Show(_language.NoSubtitlesFound);
                _exitWhenLoaded = _loading;
                return false;
            }

            if (tsParser.SubtitlePacketIds.Count == 0 && tsParser.TeletextSubtitlesLookup.Count == 1 && tsParser.TeletextSubtitlesLookup.First().Value.Count() == 1)
            {
                _subtitle = new Subtitle(tsParser.TeletextSubtitlesLookup.First().Value.First().Value);
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle);
                SubtitleListview1.SelectIndexAndEnsureVisible(0);
                if (!Configuration.Settings.General.DisableVideoAutoLoading)
                {
                    OpenVideo(fileName);
                }

                _fileName = Path.GetFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                _converted = true;
                SetTitle();
                return true;
            }

            int packetId;
            if (tsParser.SubtitlePacketIds.Count + tsParser.TeletextSubtitlesLookup.Sum(p => p.Value.Count()) > 1)
            {
                using (var subChooser = new TransportStreamSubtitleChooser())
                {
                    subChooser.Initialize(tsParser, fileName);
                    if (subChooser.ShowDialog(this) == DialogResult.Cancel)
                    {
                        return false;
                    }

                    if (subChooser.IsTeletext)
                    {
                        new SubRip().LoadSubtitle(_subtitle, subChooser.Srt.SplitToLines(), null);
                        _subtitle.Renumber();
                        SubtitleListview1.Fill(_subtitle);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0);
                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                        {
                            OpenVideo(fileName);
                        }

                        _fileName = Path.GetFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                        _converted = true;
                        SetTitle();
                        return true;
                    }

                    packetId = tsParser.SubtitlePacketIds[subChooser.SelectedIndex];
                }
            }
            else
            {
                packetId = tsParser.SubtitlePacketIds[0];
            }


            var subtitles = tsParser.GetDvbSubtitles(packetId);
            using (var formSubOcr = new VobSubOcr())
            {
                string language = null;
                var programMapTableParser = new ProgramMapTableParser();
                programMapTableParser.Parse(fileName); // get languages
                if (programMapTableParser.GetSubtitlePacketIds().Count > 0)
                {
                    language = programMapTableParser.GetSubtitleLanguage(packetId);
                }

                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName, language);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);

                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = string.Empty;
                    if (!string.IsNullOrEmpty(formSubOcr.FileName))
                    {
                        var currentFormat = GetCurrentSubtitleFormat();
                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(formSubOcr.FileName) + currentFormat.Extension;
                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                        {
                            OpenVideo(fileName);
                        }
                        _converted = true;
                    }
                    SetTitle();
                    Configuration.Settings.Save();
                    return true;
                }
            }

            _exitWhenLoaded = _loading;
            return false;
        }

        private bool ImportSubtitleFromMp4(string fileName)
        {
            var mp4Parser = new MP4Parser(fileName);
            var mp4SubtitleTracks = mp4Parser.GetSubtitleTracks();
            if (mp4SubtitleTracks.Count == 0)
            {
                MessageBox.Show(_language.NoSubtitlesFound);
                return false;
            }
            else if (mp4SubtitleTracks.Count == 1)
            {
                LoadMp4Subtitle(fileName, mp4SubtitleTracks[0]);
                return true;
            }
            else
            {
                using (var subtitleChooser = new MatroskaSubtitleChooser("mp4"))
                {
                    subtitleChooser.Initialize(mp4SubtitleTracks);
                    if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                    {
                        LoadMp4Subtitle(fileName, mp4SubtitleTracks[subtitleChooser.SelectedIndex]);
                        return true;
                    }
                }

                return false;
            }
        }

        private bool ImportSubtitleFromDivX(string fileName)
        {
            var count = 0;
            var list = new List<XSub>();
            using (var f = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                var searchBuffer = new byte[2048];
                long pos = 0;
                long length = f.Length - 50;
                while (pos < length)
                {
                    f.Position = pos;
                    int readCount = f.Read(searchBuffer, 0, searchBuffer.Length);
                    for (int i = 0; i < readCount; i++)
                    {
                        if (searchBuffer[i] != 0x5b || (i + 4 < readCount && (searchBuffer[i + 1] < 0x30 || searchBuffer[i + 1] > 0x39 || searchBuffer[i + 3] != 0x3a)))
                        {
                            continue;
                        }

                        f.Position = pos + i + 1;

                        var buffer = new byte[26];
                        f.Read(buffer, 0, buffer.Length);

                        if (buffer[2] == 0x3a && // :
                            buffer[5] == 0x3a && // :
                            buffer[8] == 0x2e && // .
                            buffer[12] == 0x2d && // -
                            buffer[15] == 0x3a && // :
                            buffer[18] == 0x3a && // :
                            buffer[21] == 0x2e && // .
                            buffer[25] == 0x5d) // ]
                        { // subtitle time code
                            string timeCode = Encoding.ASCII.GetString(buffer, 0, 25);

                            f.Read(buffer, 0, 2);
                            int width = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int height = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int x = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int y = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int xEnd = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int yEnd = BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int RleLength = BitConverter.ToUInt16(buffer, 0);

                            var colorBuffer = new byte[4 * 3]; // four colors with rgb (3 bytes)
                            f.Read(colorBuffer, 0, colorBuffer.Length);

                            buffer = new byte[RleLength];
                            int bytesRead = f.Read(buffer, 0, buffer.Length);

                            if (width > 0 && height > 0 && bytesRead == buffer.Length)
                            {
                                var xSub = new XSub(timeCode, width, height, colorBuffer, buffer);
                                list.Add(xSub);
                                count++;
                            }
                        }
                    }

                    pos += searchBuffer.Length;
                }
            }

            if (count == 0)
            {
                return false;
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(list, Configuration.Settings.VobSubOcr, fileName); // TODO: language???
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                    _subtitleListViewIndex = -1;
                    FileNew();
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                    _converted = true;
                    SetTitle();

                    Configuration.Settings.Save();
                    if (!Configuration.Settings.General.DisableVideoAutoLoading)
                    {
                        OpenVideo(fileName);
                    }
                }
            }

            return true;
        }

        private static Subtitle LoadMp4SubtitleForSync(Trak mp4SubtitleTrack)
        {
            var subtitle = new Subtitle();
            if (mp4SubtitleTrack.Mdia.IsVobSubSubtitle)
            {
                return subtitle;
            }
            else
            {
                subtitle.Paragraphs.AddRange(mp4SubtitleTrack.Mdia.Minf.Stbl.GetParagraphs());
            }

            return subtitle;
        }

        private void LoadMp4Subtitle(string fileName, Trak mp4SubtitleTrack)
        {
            if (mp4SubtitleTrack.Mdia.IsVobSubSubtitle)
            {
                var subPicturesWithTimeCodes = new List<VobSubOcr.SubPicturesWithSeparateTimeCodes>();
                var paragraphs = mp4SubtitleTrack.Mdia.Minf.Stbl.GetParagraphs();
                for (int i = 0; i < paragraphs.Count; i++)
                {
                    if (mp4SubtitleTrack.Mdia.Minf.Stbl.SubPictures.Count > i)
                    {
                        var start = paragraphs[i].StartTime.TimeSpan;
                        var end = paragraphs[i].EndTime.TimeSpan;
                        subPicturesWithTimeCodes.Add(new VobSubOcr.SubPicturesWithSeparateTimeCodes(mp4SubtitleTrack.Mdia.Minf.Stbl.SubPictures[i], start, end));
                    }
                }

                using (var formSubOcr = new VobSubOcr())
                {
                    formSubOcr.Initialize(subPicturesWithTimeCodes, Configuration.Settings.VobSubOcr, fileName); // TODO: language???
                    if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                    {
                        MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                        _subtitleListViewIndex = -1;
                        FileNew();
                        foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(p);
                        }

                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        _subtitleListViewIndex = -1;
                        SubtitleListview1.FirstVisibleIndex = -1;
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                        _fileName = Utilities.GetPathAndFileNameWithoutExtension(fileName) + GetCurrentSubtitleFormat().Extension;
                        _converted = true;
                        SetTitle();

                        Configuration.Settings.Save();
                    }
                }
            }
            else
            {
                MakeHistoryForUndo(_language.BeforeImportFromMatroskaFile);
                _subtitleListViewIndex = -1;
                FileNew();

                _subtitle.Paragraphs.AddRange(mp4SubtitleTrack.Mdia.Minf.Stbl.GetParagraphs());

                SetEncoding(Encoding.UTF8);
                ShowStatus(_language.SubtitleImportedFromMatroskaFile);
                _subtitle.Renumber();
                if (fileName.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) || fileName.EndsWith(".m4v", StringComparison.OrdinalIgnoreCase))
                {
                    _fileName = fileName.Substring(0, fileName.Length - 4) + GetCurrentSubtitleFormat().Extension;
                }

                SetTitle();
                _fileDateTime = new DateTime();
                _converted = true;
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                if (_subtitle.Paragraphs.Count > 0)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                }

                ShowSource();
            }
        }

        private void SubtitleListview1_DragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        private void SubtitleListview1_DragDrop(object sender, DragEventArgs e)
        {
            _dragAndDropFiles = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (_dragAndDropFiles.Length == 1)
            {
                _dragAndDropTimer.Start();
            }
            else
            {
                MessageBox.Show(_language.DropOnlyOneFile);
            }
        }

        private void DoSubtitleListview1Drop(object sender, EventArgs e)
        {
            _dragAndDropTimer.Stop();

            if (ContinueNewOrExit())
            {
                string fileName = _dragAndDropFiles[0];
                var file = new FileInfo(fileName);

                // Do not allow directory drop
                if (FileUtil.IsDirectory(fileName))
                {
                    MessageBox.Show(_language.ErrorDirectoryDropNotAllowed, file.Name, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                var dirName = Path.GetDirectoryName(fileName);
                saveFileDialog1.InitialDirectory = dirName;
                openFileDialog1.InitialDirectory = dirName;
                var ext = file.Extension.ToLowerInvariant();

                if (ext == ".mkv" || ext == ".mks")
                {
                    using (var matroska = new MatroskaFile(fileName))
                    {
                        if (matroska.IsValid)
                        {
                            var subtitleList = matroska.GetTracks(true);
                            if (subtitleList.Count == 0)
                            {
                                MessageBox.Show(_language.NoSubtitlesFound);
                            }
                            else if (subtitleList.Count > 1)
                            {
                                using (var subtitleChooser = new MatroskaSubtitleChooser("mkv"))
                                {
                                    subtitleChooser.Initialize(subtitleList);
                                    if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                    {
                                        ResetSubtitle();
                                        if (LoadMatroskaSubtitle(subtitleList[subtitleChooser.SelectedIndex], matroska, false) &&
                                            (ext.Equals(".mkv", StringComparison.Ordinal) || ext.Equals(".mks", StringComparison.Ordinal)) &&
                                            !Configuration.Settings.General.DisableVideoAutoLoading)
                                        {
                                            OpenVideo(fileName);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                ResetSubtitle();
                                if (LoadMatroskaSubtitle(subtitleList[0], matroska, false) &&
                                    (ext.Equals(".mkv", StringComparison.Ordinal) || ext.Equals(".mks", StringComparison.Ordinal)) &&
                                    !Configuration.Settings.General.DisableVideoAutoLoading)
                                {
                                    OpenVideo(fileName);
                                }
                            }

                            return;
                        }
                    }
                }
                else if (ext == ".mp4" || ext == ".m4v" || ext == ".3gp")
                {
                    var mp4Parser = new MP4Parser(fileName);
                    var mp4SubtitleTracks = mp4Parser.GetSubtitleTracks();
                    if (mp4SubtitleTracks.Count > 0)
                    {
                        ImportSubtitleFromMp4(fileName);
                        return;
                    }

                    MessageBox.Show(_language.NoSubtitlesFound);
                    return;
                }
                else if (ext == ".vob" || ext == ".ifo")
                {
                    ImportDvdSubtitle(fileName);
                    return;
                }
                else if (ext == ".idx")
                {
                    var subFileName = fileName.Substring(0, fileName.Length - 3) + "sub";
                    if (File.Exists(subFileName) && FileUtil.IsVobSub(subFileName))
                    {
                        ImportAndOcrVobSubSubtitleNew(subFileName, _loading);
                        return;
                    }
                }

                comboBoxEncoding.BeginUpdate();
                comboBoxSubtitleFormats.BeginUpdate();

                if (file.Length < Subtitle.MaxFileSize)
                {
                    if (!OpenFromRecentFiles(fileName))
                    {
                        OpenSubtitle(fileName, null);
                    }
                }
                else if (file.Length < 150000000 && ext == ".sub" && IsVobSubFile(fileName, true)) // max 150 mb
                {
                    OpenSubtitle(fileName, null);
                }
                else if (file.Length < 250000000 && ext == ".sup" && FileUtil.IsBluRaySup(fileName)) // max 250 mb
                {
                    OpenSubtitle(fileName, null);
                }
                else if ((ext == ".ts" || ext == ".rec" || ext == ".mpg" || ext == ".mpeg") && FileUtil.IsTransportStream(fileName))
                {
                    OpenSubtitle(fileName, null);
                }
                else if ((ext == ".m2ts" || ext == ".ts" || ext == ".mts") && FileUtil.IsM2TransportStream(fileName))
                {
                    OpenSubtitle(fileName, null);
                }
                else
                {
                    MessageBox.Show(string.Format(_language.DropFileXNotAccepted, fileName));
                }

                comboBoxSubtitleFormats.EndUpdate();
                comboBoxEncoding.EndUpdate();
            }
        }

        private void TextBoxSourceDragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        private void TextBoxSourceDragDrop(object sender, DragEventArgs e)
        {
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length == 1)
            {
                if (ContinueNewOrExit())
                {
                    OpenSubtitle(files[0], null);
                }
            }
            else
            {
                MessageBox.Show(_language.DropOnlyOneFile);
            }
        }

        private void ToolStripMenuItemManualAnsiClick(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            openFileDialog1.Title = _language.OpenAnsiSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                var chooseEncoding = new ChooseEncoding();
                chooseEncoding.Initialize(openFileDialog1.FileName);
                if (chooseEncoding.ShowDialog(this) == DialogResult.OK)
                {
                    Encoding encoding = chooseEncoding.GetEncoding();
                    SetEncoding(Encoding.UTF8);
                    OpenSubtitle(openFileDialog1.FileName, encoding);
                }
            }
        }

        private void ChangeCasingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ChangeCasing(false);
        }

        private void ChangeCasing(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            SaveSubtitleListviewIndices();
            using (var changeCasing = new ChangeCasing())
            {
                if (onlySelectedLines)
                {
                    changeCasing.Text += " - " + _language.SelectedLines;
                }

                ReloadFromSourceView();
                if (changeCasing.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeChangeCasing);

                    Cursor.Current = Cursors.WaitCursor;
                    var selectedLines = new Subtitle();
                    var selectedIndices = new List<int>(SubtitleListview1.GetSelectedIndices());
                    if (onlySelectedLines)
                    {
                        foreach (int index in selectedIndices)
                        {
                            selectedLines.Paragraphs.Add(new Paragraph(_subtitle.Paragraphs[index]));
                        }
                    }
                    else
                    {
                        foreach (var p in _subtitle.Paragraphs)
                        {
                            selectedLines.Paragraphs.Add(new Paragraph(p));
                        }
                    }

                    bool saveChangeCaseChanges = true;
                    var casingNamesLinesChanged = 0;

                    if (changeCasing.ChangeNamesToo && changeCasing.OnlyAllUpper)
                    {
                        selectedIndices = new List<int>();
                        var allUpperSubtitle = new Subtitle();
                        var sub = onlySelectedLines ? selectedLines : _subtitle;
                        for (var index = 0; index < sub.Paragraphs.Count; index++)
                        {
                            var p = sub.Paragraphs[index];
                            var noTags = HtmlUtil.RemoveHtmlTags(p.Text, true);
                            if (noTags == noTags.ToUpperInvariant())
                            {
                                allUpperSubtitle.Paragraphs.Add(p);
                                selectedIndices.Add(index);
                            }
                        }

                        selectedLines = allUpperSubtitle;
                        onlySelectedLines = true;
                    }

                    changeCasing.FixCasing(selectedLines, LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle));
                    if (changeCasing.ChangeNamesToo)
                    {
                        using (var changeCasingNames = new ChangeCasingNames())
                        {
                            changeCasingNames.Initialize(selectedLines);
                            if (changeCasingNames.ShowDialog(this) == DialogResult.OK)
                            {
                                changeCasingNames.FixCasing();
                                casingNamesLinesChanged = changeCasingNames.LinesChanged;

                                if (changeCasing.LinesChanged == 0)
                                {
                                    ShowStatus(string.Format(_language.CasingCompleteMessageOnlyNames, casingNamesLinesChanged, _subtitle.Paragraphs.Count));
                                }
                                else
                                {
                                    ShowStatus(string.Format(_language.CasingCompleteMessage, changeCasing.LinesChanged, _subtitle.Paragraphs.Count, casingNamesLinesChanged));
                                }
                            }
                            else
                            {
                                saveChangeCaseChanges = false;
                            }
                        }
                    }
                    else
                    {
                        ShowStatus(string.Format(_language.CasingCompleteMessageNoNames, changeCasing.LinesChanged, _subtitle.Paragraphs.Count));
                    }

                    if (saveChangeCaseChanges)
                    {
                        if (onlySelectedLines)
                        {
                            int i = 0;
                            foreach (int index in selectedIndices)
                            {
                                _subtitle.Paragraphs[index].Text = selectedLines.Paragraphs[i].Text;
                                i++;
                            }
                        }
                        else
                        {
                            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
                            {
                                _subtitle.Paragraphs[i].Text = selectedLines.Paragraphs[i].Text;
                            }
                        }

                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        if (changeCasing.LinesChanged > 0 || casingNamesLinesChanged > 0)
                        {
                            _subtitleListViewIndex = -1;
                            RestoreSubtitleListviewIndices();
                            UpdateSourceView();
                        }
                    }

                    Cursor.Current = Cursors.Default;
                }
            }
        }

        private void ToolStripMenuItemChangeFrameRateClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            int lastSelectedIndex = 0;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                lastSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            }

            ReloadFromSourceView();
            using (var changeFrameRate = new ChangeFrameRate())
            {
                changeFrameRate.Initialize(CurrentFrameRate.ToString());
                if (changeFrameRate.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeChangeFrameRate);

                    double oldFrameRate = changeFrameRate.OldFrameRate;
                    double newFrameRate = changeFrameRate.NewFrameRate;
                    _subtitle.ChangeFrameRate(oldFrameRate, newFrameRate);

                    ShowStatus(string.Format(_language.FrameRateChangedFromXToY, oldFrameRate, newFrameRate));
                    toolStripComboBoxFrameRate.Text = newFrameRate.ToString();

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex, true);
                }
            }
        }

        private bool IsVobSubFile(string subFileName, bool verbose)
        {
            try
            {
                if (FileUtil.IsVobSub(subFileName))
                {
                    if (!verbose)
                    {
                        return true;
                    }

                    var idxFileName = Utilities.GetPathAndFileNameWithoutExtension(subFileName) + ".idx";
                    if (File.Exists(idxFileName))
                    {
                        return true;
                    }

                    var dr = MessageBox.Show(string.Format(_language.IdxFileNotFoundWarning, idxFileName), _title, MessageBoxButtons.YesNoCancel);
                    return dr == DialogResult.Yes;
                }

                if (verbose)
                {
                    MessageBox.Show(string.Format(_language.InvalidVobSubHeader, subFileName));
                }
            }
            catch (Exception ex)
            {
                if (verbose)
                {
                    MessageBox.Show(ex.Message);
                }
            }

            return false;
        }

        private void ImportAndOcrSpDvdSup(string fileName, bool showInTaskbar)
        {
            var spList = new List<SpHeader>();

            using (var fs = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                var buffer = new byte[SpHeader.SpHeaderLength];
                int bytesRead = fs.Read(buffer, 0, buffer.Length);
                var header = new SpHeader(buffer);

                while (header.Identifier == "SP" && bytesRead > 0 && header.NextBlockPosition > 4)
                {
                    buffer = new byte[header.NextBlockPosition];
                    bytesRead = fs.Read(buffer, 0, buffer.Length);
                    if (bytesRead == buffer.Length)
                    {
                        header.AddPicture(buffer);
                        spList.Add(header);
                    }

                    buffer = new byte[SpHeader.SpHeaderLength];
                    bytesRead = fs.Read(buffer, 0, buffer.Length);
                    while (bytesRead == buffer.Length && Encoding.ASCII.GetString(buffer, 0, 2) != "SP")
                    {
                        fs.Seek(fs.Position - buffer.Length + 1, SeekOrigin.Begin);
                        bytesRead = fs.Read(buffer, 0, buffer.Length);
                    }
                    header = new SpHeader(buffer);
                }
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)this.Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                vobSubOcr.Initialize(fileName, null, Configuration.Settings.VobSubOcr, spList);
                if (vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingVobSubFile);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(vobSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;

                    Configuration.Settings.Save();
                }
                else
                {
                    _exitWhenLoaded = _loading;
                }
            }
        }

        private void ImportAndOcrVobSubSubtitleNew(string fileName, bool showInTaskbar)
        {
            if (!IsVobSubFile(fileName, true))
            {
                return;
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                if (vobSubOcr.Initialize(fileName, Configuration.Settings.VobSubOcr, this) && vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingVobSubFile);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(vobSubOcr.FileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;

                    Configuration.Settings.Save();
                }
                else
                {
                    _exitWhenLoaded = _loading;
                }
            }
        }

        private void ToolStripMenuItemMergeLinesClick(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1)
            {
                // check consecutive numbers
                var last = SubtitleListview1.SelectedIndices[0] - 1;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    if (last != index - 1)
                    {
                        return;
                    }

                    last = index;
                }

                MergeAfterToolStripMenuItemClick(null, null);
            }
        }

        private void VisualSyncSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            ShowVisualSync(true);
        }

        private void SaveSubtitleListviewIndices()
        {
            _selectedIndices = new List<int>();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                _selectedIndices.Add(index);
            }
        }

        private void RestoreSubtitleListviewIndices()
        {
            _subtitleListViewIndex = -1;
            if (_selectedIndices != null)
            {
                SubtitleListview1.SelectNone();
                int i = 0;
                foreach (int index in _selectedIndices)
                {
                    if (index >= 0 && index < SubtitleListview1.Items.Count)
                    {
                        SubtitleListview1.Items[index].Selected = true;
                        if (i == 0)
                        {
                            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                        }
                    }

                    i++;
                }
            }
        }

        private void ShowSelectedLinesEarlierlaterToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            if (_showEarlierOrLater != null && !_showEarlierOrLater.IsDisposed)
            {
                _showEarlierOrLater.WindowState = FormWindowState.Normal;
                _showEarlierOrLater.Focus();
                return;
            }

            bool waveformEnabled = timerWaveform.Enabled;
            timerWaveform.Stop();
            timer1.Stop();

            _showEarlierOrLater = new ShowEarlierLater();
            if (!_showEarlierOrLater.IsPositionAndSizeSaved)
            {
                _showEarlierOrLater.Top = Top + 100;
                _showEarlierOrLater.Left = Left + (Width / 2) - (_showEarlierOrLater.Width / 3);
            }

            _showEarlierOrLater.Initialize(ShowEarlierOrLater, true);
            MakeHistoryForUndo(_language.BeforeShowSelectedLinesEarlierLater);
            _showEarlierOrLater.Show(this);

            timerWaveform.Enabled = waveformEnabled;
            timer1.Start();

            RefreshSelectedParagraph();
        }

        public static Control FindFocusedControl(Control control)
        {
            var container = control as ContainerControl;
            while (container != null)
            {
                control = container.ActiveControl;
                container = control as ContainerControl;
            }

            return control;
        }

        internal void MainKeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.LWin)
            {
                _winLeftDownTicks = DateTime.UtcNow.Ticks;
            }

            if (e.KeyCode == Keys.RWin)
            {
                _winRightDownTicks = DateTime.UtcNow.Ticks;
            }

            if ((DateTime.UtcNow.Ticks - _winLeftDownTicks) <= 10000 * 999 || (DateTime.UtcNow.Ticks - _winRightDownTicks) <= 10000 * 999) // less than 999 ms
            {
                // if it's less than one second since Win key was pressed we ignore key (not perfect...)
                e.SuppressKeyPress = true;
                e.Handled = true;
                return;
            }

            if (e.Modifiers == Keys.Alt && e.KeyCode == (Keys.RButton | Keys.ShiftKey) && textBoxListViewText.Focused)
            { // annoying that focus leaves textbox while typing, when pressing Alt alone
                e.SuppressKeyPress = true;
                return;
            }

            if (e.Modifiers == Keys.Alt && e.KeyCode == (Keys.RButton | Keys.ShiftKey))
            {
                return;
            }

            if (e.Modifiers == Keys.Shift && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == (Keys.LButton | Keys.ShiftKey))
            {
                return;
            }

            if (e.Modifiers == (Keys.Control | Keys.Shift) && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            var fc = FindFocusedControl(this);
            if (fc != null && e.Modifiers != Keys.Control && e.Modifiers != (Keys.Control | Keys.Shift) && e.Modifiers != (Keys.Control | Keys.Shift | Keys.Alt))
            {
                // do not check for shortcuts if text is being entered and a textbox is focused
                if ((fc.Name == textBoxListViewText.Name || fc.Name == textBoxListViewTextAlternate.Name || fc.Name == textBoxSearchWord.Name) && ((e.KeyCode >= Keys.A && e.KeyCode <= Keys.Z) || (e.KeyCode >= Keys.OemSemicolon && e.KeyCode <= Keys.OemBackslash)))
                {
                    return;
                }

                // do not check for shortcuts if a number is being entered and a time box is focused
                if (fc.Parent != null && (fc.Parent.Name == timeUpDownStartTime.Name || fc.Parent.Name == numericUpDownDuration.Name) &&
                    (e.KeyCode >= Keys.NumPad0 && e.KeyCode <= Keys.NumPad9 || e.KeyValue >= 48 && e.KeyValue <= 57))
                {
                    return;
                }
            }

            bool inListView = tabControlSubtitle.SelectedIndex == TabControlListView;


            if (e.KeyCode == Keys.Escape && !_cancelWordSpellCheck)
            {
                _cancelWordSpellCheck = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformVerticalZoom)
            {
                audioVisualizer.VerticalZoomFactor *= 1.1;
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformVerticalZoomOut)
            {
                audioVisualizer.VerticalZoomFactor /= 1.1;
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformZoomIn)
            {
                audioVisualizer.ZoomIn();
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformZoomOut)
            {
                audioVisualizer.ZoomOut();
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformSplit)
            {
                if (mediaPlayer.IsPaused)
                {
                    var pos = mediaPlayer.VideoPlayer.CurrentPosition;
                    var paragraph = _subtitle.GetFirstParagraphOrDefaultByTime(pos * TimeCode.BaseUnit);
                    if (paragraph != null &&
                        pos * TimeCode.BaseUnit + 100 > paragraph.StartTime.TotalMilliseconds &&
                        pos * TimeCode.BaseUnit - 100 < paragraph.EndTime.TotalMilliseconds)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(paragraph);
                        SplitSelectedParagraph(pos, null);
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoPlayFirstSelected && !string.IsNullOrEmpty(_videoFileName))
            {
                PlayFirstSelectedSubtitle();
            }
            else if (audioVisualizer.Visible && (e.KeyData == _shortcuts.WaveformPlaySelection || e.KeyData == _shortcuts.WaveformPlaySelectionEnd))
            {
                WaveformPlaySelection(nearEnd: e.KeyData == _shortcuts.WaveformPlaySelectionEnd);
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformSearchSilenceForward)
            {
                if (audioVisualizer.WavePeaks != null)
                {
                    audioVisualizer.FindDataBelowThreshold(Configuration.Settings.VideoControls.WaveformSeeksSilenceMaxVolume, Configuration.Settings.VideoControls.WaveformSeeksSilenceDurationSeconds);
                }
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Visible && e.KeyData == _shortcuts.WaveformSearchSilenceBack)
            {
                if (audioVisualizer.WavePeaks != null)
                {
                    audioVisualizer.FindDataBelowThresholdBack(Configuration.Settings.VideoControls.WaveformSeeksSilenceMaxVolume, Configuration.Settings.VideoControls.WaveformSeeksSilenceDurationSeconds);
                }
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainInsertAfter == e.KeyData && inListView)
            {
                InsertAfter(string.Empty);
                e.SuppressKeyPress = true;
                textBoxListViewText.Focus();
            }
            else if (_shortcuts.MainInsertBefore == e.KeyData && inListView)
            {
                InsertBefore();
                e.SuppressKeyPress = true;
                textBoxListViewText.Focus();
            }
            else if (_shortcuts.MainMergeDialog == e.KeyData && inListView)
            {
                MergeDialogs();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainListViewToggleDashes == e.KeyData && inListView)
            {
                if (textBoxListViewText.Focused)
                {
                    ToggleDashesTextBox(textBoxListViewText);
                }
                else if (textBoxListViewTextAlternate.Focused)
                {
                    ToggleDashesTextBox(textBoxListViewTextAlternate);
                }
                else
                {
                    ToggleDashes();
                }
                e.SuppressKeyPress = true;
            }
            else if (!toolStripMenuItemReverseRightToLeftStartEnd.Visible && _shortcuts.MainEditReverseStartAndEndingForRtl == e.KeyData && inListView)
            {
                ReverseStartAndEndingForRtl();
                e.SuppressKeyPress = true;
            }
            else if (toolStripMenuItemUndo.ShortcutKeys == e.KeyData) // undo
            {
                toolStripMenuItemUndo_Click(sender, e);
                e.SuppressKeyPress = true;
            }
            else if (toolStripMenuItemRedo.ShortcutKeys == e.KeyData) // redo
            {
                toolStripMenuItemRedo_Click(sender, e);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.Down && e.Modifiers == Keys.Alt)
            {
                if (AutoRepeatContinueOn || AutoRepeatOn)
                {
                    PlayNext();
                }
                else
                {
                    ButtonNextClick(null, null);
                }
            }
            else if (e.KeyCode == Keys.Up && e.Modifiers == Keys.Alt)
            {
                if (AutoRepeatContinueOn || AutoRepeatOn)
                {
                    PlayPrevious();
                }
                else
                {
                    ButtonPreviousClick(null, null);
                }

                e.SuppressKeyPress = true;
                e.Handled = true;
            }
            else if (_shortcuts.MainGeneralGoToNextSubtitle == e.KeyData)
            {
                ButtonNextClick(null, null);
                e.SuppressKeyPress = true;
                e.Handled = true;
            }
            else if (_shortcuts.MainGeneralGoToPrevSubtitle == e.KeyData)
            {
                if (AutoRepeatContinueOn || AutoRepeatOn)
                {
                    PlayPrevious();
                }
                else
                {
                    ButtonPreviousClick(null, null);
                }

                e.SuppressKeyPress = true;
                e.Handled = true;
            }
            else if (_shortcuts.MainGeneralGoToStartOfCurrentSubtitle == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count == 1 && mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.CurrentPosition = _subtitle.Paragraphs[SubtitleListview1.SelectedItems[0].Index].StartTime.TotalSeconds;
                    e.SuppressKeyPress = true;
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToEndOfCurrentSubtitle == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count == 1 && mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.CurrentPosition = _subtitle.Paragraphs[SubtitleListview1.SelectedItems[0].Index].EndTime.TotalSeconds;
                    e.SuppressKeyPress = true;
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGoToPreviousSubtitleAndFocusVideo == e.KeyData)
            {
                int newIndex = _subtitleListViewIndex - 1;
                if (newIndex >= 0)
                {
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisibleFaster(newIndex);
                    _subtitleListViewIndex = newIndex;
                    textBoxListViewText.Focus();
                    textBoxListViewText.SelectAll();
                    GotoSubtitleIndex(newIndex);
                    ShowSubtitle();
                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainGoToNextSubtitleAndFocusVideo == e.KeyData)
            {
                int newIndex = _subtitleListViewIndex + 1;
                if (newIndex < _subtitle.Paragraphs.Count)
                {
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisibleFaster(newIndex);
                    _subtitleListViewIndex = newIndex;
                    textBoxListViewText.Focus();
                    textBoxListViewText.SelectAll();
                    GotoSubtitleIndex(newIndex);
                    ShowSubtitle();
                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainGoToNextSubtitleAndPlay == e.KeyData && mediaPlayer != null)
            {
                int newIndex = _subtitleListViewIndex + 1;
                if (newIndex < _subtitle.Paragraphs.Count)
                {
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisibleFaster(newIndex);
                    _subtitleListViewIndex = newIndex;
                    textBoxListViewText.Focus();
                    textBoxListViewText.SelectAll();
                    GotoSubtitleIndex(newIndex);
                    var p = _subtitle.GetParagraphOrDefault(newIndex);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        ShowSubtitle();
                        mediaPlayer.Play();
                        _endSeconds = p.EndTime.TotalSeconds;
                    }

                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainGoToPrevSubtitleAndPlay == e.KeyData && mediaPlayer != null)
            {
                int newIndex = _subtitleListViewIndex - 1;
                if (newIndex > 0)
                {
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisibleFaster(newIndex);
                    _subtitleListViewIndex = newIndex;
                    textBoxListViewText.Focus();
                    textBoxListViewText.SelectAll();
                    GotoSubtitleIndex(newIndex);
                    var p = _subtitle.GetParagraphOrDefault(newIndex);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        ShowSubtitle();
                        mediaPlayer.Play();
                        _endSeconds = p.EndTime.TotalSeconds;
                    }

                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainUnbreakNoSpace == e.KeyData)
            {
                Unbreak(true);
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralToggleBookmarks == e.KeyData)
            {
                ToggleBookmarks(false);
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralClearBookmarks == e.KeyData)
            {
                ClearBookmarks();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToBookmark == e.KeyData)
            {
                e.Handled = true;
                e.SuppressKeyPress = true;
                GoToBookmark();
            }
            else if (_shortcuts.MainGeneralGoToPreviousBookmark == e.KeyData)
            {
                GoToPrevoiusBookmark();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToNextBookmark == e.KeyData)
            {
                GoToNextBookmark();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralChooseProfile == e.KeyData)
            {
                ChooseProfile();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralDuplicateLine == e.KeyData && SubtitleListview1.SelectedItems.Count == 1)
            {
                DuplicateLine();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralFileSaveAll == e.KeyData)
            {
                SaveAll();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainToggleFocus == e.KeyData && inListView)
            {
                if (SubtitleListview1.Focused)
                {
                    textBoxListViewText.Focus();
                }
                else
                {
                    SubtitleListview1.Focus();
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.Home && e.Modifiers == Keys.Alt)
            {
                SubtitleListview1.FirstVisibleIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.End && e.Modifiers == Keys.Alt)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(SubtitleListview1.Items.Count - 1, true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToFirstSelectedLine == e.KeyData) //Locate first selected line in subtitle listview
            {
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    SubtitleListview1.SelectedItems[0].EnsureVisible();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralGoToFirstEmptyLine == e.KeyData) //Go to first empty line - if any
            {
                GoToFirstEmptyLine();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralMergeSelectedLines == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    if (SubtitleListview1.SelectedItems.Count == 2)
                    {
                        MergeAfterToolStripMenuItemClick(null, null);
                    }
                    else
                    {
                        MergeSelectedLines();
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesAndAutoBreak == e.KeyData)
            {
                e.SuppressKeyPress = true;
                if (SubtitleListview1.SelectedItems.Count == 2)
                {
                    MergeWithLineAfter(false, BreakMode.AutoBreak);
                }
                else
                {
                    MergeSelectedLines(BreakMode.AutoBreak);
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesAndUnbreak == e.KeyData)
            {
                e.SuppressKeyPress = true;
                if (SubtitleListview1.SelectedItems.Count == 2)
                {
                    MergeWithLineAfter(false, BreakMode.Unbreak);
                }
                else
                {
                    MergeSelectedLines(BreakMode.Unbreak);
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesAndUnbreakNoSpace == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    if (SubtitleListview1.SelectedItems.Count == 2)
                    {
                        MergeWithLineAfter(false, BreakMode.UnbreakNoSpace);
                    }
                    else
                    {
                        MergeSelectedLines(BreakMode.UnbreakNoSpace);
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesBilingual == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1 && SubtitleListview1.SelectedItems.Count < 10)
                {
                    e.SuppressKeyPress = true;
                    MergeSelectedLinesBilingual();
                }
            }
            else if (_shortcuts.MainGeneralMergeSelectedLinesOnlyFirstText == e.KeyData)
            {
                if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    MergeSelectedLinesOnlyFirstText();
                }
            }
            else if (_shortcuts.MainGeneralMergeWithNext == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx >= 0 && _subtitle.Paragraphs.Count > idx + 1)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(idx, true);
                        MergeAfterToolStripMenuItemClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (_shortcuts.MainGeneralMergeWithPrevious == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    if (idx > 0)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(idx - 1, true);
                        MergeAfterToolStripMenuItemClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (_shortcuts.MainGeneralToggleTranslationMode == e.KeyData)
            { // toggle translator mode
                EditToolStripMenuItemDropDownOpening(null, null);
                toolStripMenuItemTranslationMode_Click(null, null);
            }
            else if (e.KeyData == _shortcuts.VideoPlayPauseToggle)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    if (_shortcuts.VideoPlayPauseToggle == Keys.Space &&
                        (textBoxListViewText.Focused || textBoxListViewTextAlternate.Focused || textBoxSearchWord.Focused))
                    {
                        return;
                    }

                    _endSeconds = -1;
                    e.SuppressKeyPress = true;
                    e.Handled = true;
                    System.Threading.SynchronizationContext.Current.Post(TimeSpan.FromMilliseconds(1), () => mediaPlayer.TogglePlayPause());
                }
            }
            else if (e.KeyData == _shortcuts.VideoPause)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    _endSeconds = -1;
                    mediaPlayer.Pause();
                    e.SuppressKeyPress = true;
                    e.Handled = true;
                }
            }
            else if (_shortcuts.MainVideoPlayFromJustBefore == e.KeyData)
            {
                buttonBeforeText_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == (Keys.Control | Keys.Shift) && e.KeyCode == Keys.Right)
            {
                if (!textBoxListViewText.Focused && !textBoxListViewTextAlternate.Focused)
                {
                    mediaPlayer.CurrentPosition += 1.0;
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.Modifiers == (Keys.Control | Keys.Shift) && e.KeyCode == Keys.Left)
            {
                if (!textBoxListViewText.Focused && !textBoxListViewTextAlternate.Focused)
                {
                    mediaPlayer.CurrentPosition -= 1.0;
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.Space)
            {
                if (!textBoxListViewText.Focused && !textBoxListViewTextAlternate.Focused && !textBoxSource.Focused && mediaPlayer.VideoPlayer != null)
                {
                    if (audioVisualizer.Focused || mediaPlayer.Focused || SubtitleListview1.Focused)
                    {
                        _endSeconds = -1;
                        mediaPlayer.TogglePlayPause();
                        e.SuppressKeyPress = true;
                        e.Handled = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D1)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D2)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.EndTime.TotalSeconds;
                    }
                }
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D3)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    int index = SubtitleListview1.SelectedItems[0].Index - 1;
                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D4)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    int index = SubtitleListview1.SelectedItems[0].Index + 1;
                    var p = _subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    }
                }
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideoToggleStartEndCurrent == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.Pause();
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        if (Math.Abs(mediaPlayer.CurrentPosition - p.StartTime.TotalSeconds) < 0.1)
                        {
                            mediaPlayer.CurrentPosition = p.EndTime.TotalSeconds;
                        }
                        else
                        {
                            mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        }
                    }
                }
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideoPlayCurrent == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle != null && mediaPlayer.VideoPlayer != null)
                {
                    var p = _subtitle.GetParagraphOrDefault(SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        ShowSubtitle();
                        mediaPlayer.Play();
                        _endSeconds = p.EndTime.TotalSeconds;
                    }
                }
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideoGoToStartCurrent == e.KeyData)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    GotoSubPositionAndPause();
                }
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainVideo3000MsLeft == e.KeyData)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    GoBackSeconds(3);
                }
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.W) // watermark
            {
                var enc = GetCurrentEncoding();
                if (enc != Encoding.UTF8 && enc != Encoding.UTF32 && enc != Encoding.Unicode && enc != Encoding.UTF7)
                {
                    MessageBox.Show(Configuration.Settings.Language.Watermark.ErrorUnicodeEncodingOnly);
                }
                else
                {
                    using (var watermarkForm = new Watermark())
                    {
                        MakeHistoryForUndo(Configuration.Settings.Language.Watermark.BeforeWatermark);
                        watermarkForm.Initialize(_subtitle, FirstSelectedIndex);
                        if (watermarkForm.ShowDialog(this) == DialogResult.OK)
                        {
                            watermarkForm.AddOrRemove(_subtitle);
                            RefreshSelectedParagraph();
                        }
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.F) // Toggle HHMMSSFF / HHMMSSMMM
            {
                Configuration.Settings.General.UseTimeFormatHHMMSSFF = !Configuration.Settings.General.UseTimeFormatHHMMSSFF;
                RefreshTimeCodeMode();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralSwitchTranslationAndOriginal == e.KeyData) // switch original/current
            {
                if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0 && _networkSession == null)
                {
                    int firstIndex = FirstSelectedIndex;
                    double firstMs = -1;
                    if (firstIndex >= 0)
                    {
                        firstMs = _subtitle.Paragraphs[firstIndex].StartTime.TotalMilliseconds;
                    }

                    var temp = _subtitle;
                    _subtitle = _subtitleAlternate;
                    _subtitleAlternate = temp;

                    var tempName = _fileName;
                    _fileName = _subtitleAlternateFileName;
                    _subtitleAlternateFileName = tempName;

                    var tempChangeSubText = _changeSubtitleHash;
                    _changeSubtitleHash = _changeAlternateSubtitleHash;
                    _changeAlternateSubtitleHash = tempChangeSubText;

                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);

                    _subtitleListViewIndex = -1;
                    if (firstIndex >= 0 && _subtitle.Paragraphs.Count > firstIndex && Math.Abs(_subtitle.Paragraphs[firstIndex].StartTime.TotalMilliseconds - firstMs) < 0.01)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                    }
                    else
                    {
                        RefreshSelectedParagraph();
                    }

                    SetTitle();

                    _fileDateTime = new DateTime();
                }
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainGeneralMergeTranslationAndOriginal == e.KeyData) // Merge translation and original
            {
                if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0 && _networkSession == null)
                {
                    if (ContinueNewOrExit())
                    {
                        var subtitle = new Subtitle();
                        var fr = CurrentFrameRate;
                        var format = GetCurrentSubtitleFormat();
                        var videoFileName = _videoFileName;
                        foreach (var p in _subtitle.Paragraphs)
                        {
                            var newP = new Paragraph(p);
                            var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(p), p, _subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                newP.Text = (newP.Text.TrimEnd() + Environment.NewLine + original.Text.TrimStart()).Trim();
                            }

                            subtitle.Paragraphs.Add(newP);
                        }

                        RemoveAlternate(true, true);
                        FileNew();
                        SetCurrentFormat(format);
                        toolStripComboBoxFrameRate.Text = fr.ToString();
                        _subtitle = subtitle;
                        _subtitleListViewIndex = -1;
                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                        if (!string.IsNullOrEmpty(videoFileName))
                        {
                            OpenVideo(videoFileName);
                        }
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.KeyData == _shortcuts.ToggleVideoDockUndock)
            {
                if (_isVideoControlsUndocked)
                {
                    RedockVideoControlsToolStripMenuItemClick(null, null);
                }
                else
                {
                    UndockVideoControlsToolStripMenuItemClick(null, null);
                }
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video1FrameLeft)
            {
                var libMpv = mediaPlayer.VideoPlayer as LibMpvDynamic;
                if (libMpv != null)
                {
                    libMpv.GetPreviousFrame();
                }
                else
                {
                    MoveVideoSeconds(-1.0 / Configuration.Settings.General.CurrentFrameRate);
                }

                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video1FrameRight)
            {
                var libMpv = mediaPlayer.VideoPlayer as LibMpvDynamic;
                if (libMpv != null)
                {
                    libMpv.GetNextFrame();
                }
                else
                {
                    MoveVideoSeconds(1.0 / Configuration.Settings.General.CurrentFrameRate);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.Video1FrameLeftWithPlay)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    double startSeconds = mediaPlayer.CurrentPosition - (1.0 / Configuration.Settings.General.CurrentFrameRate);
                    _endSeconds = startSeconds + (1.0 / Configuration.Settings.General.CurrentFrameRate);
                    _endSecondsNewPosition = startSeconds;
                    mediaPlayer.CurrentPosition = startSeconds;
                    UiUtil.ShowSubtitle(_subtitle, mediaPlayer);
                    mediaPlayer.Play();
                    _endSecondsNewPositionTicks = DateTime.UtcNow.Ticks;
                }
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.Video1FrameRightWithPlay)
            {
                if (mediaPlayer.VideoPlayer != null)
                {
                    double startSeconds = mediaPlayer.CurrentPosition + (1.0 / Configuration.Settings.General.CurrentFrameRate);
                    _endSeconds = startSeconds + (1.0 / Configuration.Settings.General.CurrentFrameRate);
                    _endSecondsNewPosition = startSeconds;
                    mediaPlayer.CurrentPosition = startSeconds;
                    UiUtil.ShowSubtitle(_subtitle, mediaPlayer);
                    mediaPlayer.Play();
                    _endSecondsNewPositionTicks = DateTime.UtcNow.Ticks;
                }
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video100MsLeft)
            {
                MoveVideoSeconds(-0.1);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video100MsRight)
            {
                MoveVideoSeconds(0.1);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video500MsLeft)
            {
                MoveVideoSeconds(-0.5);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video500MsRight)
            {
                MoveVideoSeconds(0.5);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video1000MsLeft)
            {
                MoveVideoSeconds(-1.0);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video1000MsRight)
            {
                MoveVideoSeconds(1.0);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video5000MsLeft)
            {
                MoveVideoSeconds(-5.0);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && e.KeyData == _shortcuts.Video5000MsRight)
            {
                MoveVideoSeconds(5.0);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainToolsBeamer == e.KeyData)
            {
                var beamer = new Beamer(this, _subtitle, _subtitleListViewIndex);
                beamer.ShowDialog(this);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainVideoFullscreen) // fullscreen
            {
                GoFullscreen(false);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainVideoSlower)
            {
                e.SuppressKeyPress = true;
                for (var index = 0; index < toolStripSplitButtonPlayRate.DropDownItems.Count; index++)
                {
                    var item = (ToolStripMenuItem)toolStripSplitButtonPlayRate.DropDownItems[index];
                    if (item.Checked && index > 0)
                    {
                        SetPlayRate(toolStripSplitButtonPlayRate.DropDownItems[index - 1], null);
                        return;
                    }
                }
            }
            else if (e.KeyData == _shortcuts.MainVideoFaster)
            {
                e.SuppressKeyPress = true;
                for (var index = 0; index < toolStripSplitButtonPlayRate.DropDownItems.Count; index++)
                {
                    var item = (ToolStripMenuItem)toolStripSplitButtonPlayRate.DropDownItems[index];
                    if (item.Checked && index + 1 < toolStripSplitButtonPlayRate.DropDownItems.Count)
                    {
                        SetPlayRate(toolStripSplitButtonPlayRate.DropDownItems[index + 1], null);
                        return;
                    }
                }
            }
            else if (e.KeyData == _shortcuts.MainVideoReset)
            {
                e.SuppressKeyPress = true;
                if (audioVisualizer != null)
                {
                    audioVisualizer.ZoomFactor = 1.0;
                    audioVisualizer.VerticalZoomFactor = 1.0;
                    InitializeWaveformZoomDropdown();
                }

                if (mediaPlayer != null && mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.VideoPlayer.PlayRate = 1.0;
                    InitializePlayRateDropDown();
                    toolStripSplitButtonPlayRate.Image = imageListPlayRate.Images[0];
                }
            }
            else if (audioVisualizer.Focused && audioVisualizer.NewSelectionParagraph != null && e.KeyData == _shortcuts.WaveformAddTextAtHere)
            {
                addParagraphHereToolStripMenuItem_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Focused && audioVisualizer.NewSelectionParagraph != null && e.KeyData == _shortcuts.WaveformAddTextAtHereFromClipboard)
            {
                addParagraphAndPasteToolStripMenuItem_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Focused && audioVisualizer.NewSelectionParagraph != null && e.KeyData == _shortcuts.WaveformSetParagraphAsNewSelection)
            {
                toolStripMenuItemSetParagraphAsSelection_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Focused && e.KeyData == _shortcuts.WaveformFocusListView)
            {
                SubtitleListview1.Focus();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoGoToPrevSubtitle)
            {
                GoToPreviousSubtitle(mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoGoToNextSubtitle)
            {
                GoToNextSubtitle(mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.VideoSelectNextSubtitle)
            {
                var cp = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
                foreach (var p in _subtitle.Paragraphs)
                {
                    if (p.StartTime.TotalMilliseconds > cp)
                    {
                        SubtitleListview1.SelectNone();
                        SubtitleListview1.Items[_subtitle.Paragraphs.IndexOf(p)].Selected = true;
                        SubtitleListview1.Items[_subtitle.Paragraphs.IndexOf(p)].Focused = true;
                        break;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.SceneChanges != null && e.KeyData == _shortcuts.WaveformGoToPreviousSceneChange)
            {
                var cp = mediaPlayer.CurrentPosition - 0.01;
                foreach (var sceneChange in audioVisualizer.SceneChanges.Reverse<double>())
                {
                    if (sceneChange < cp)
                    {
                        mediaPlayer.CurrentPosition = sceneChange;
                        break;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.SceneChanges != null && e.KeyData == _shortcuts.WaveformGoToNextSceneChange)
            {
                var cp = mediaPlayer.CurrentPosition + 0.01;
                foreach (var sceneChange in audioVisualizer.SceneChanges)
                {
                    if (sceneChange > cp)
                    {
                        mediaPlayer.CurrentPosition = sceneChange;
                        break;
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.SceneChanges != null && mediaPlayer.IsPaused && e.KeyData == _shortcuts.WaveformToggleSceneChange)
            {
                var cp = mediaPlayer.CurrentPosition;
                var idx = audioVisualizer.GetSceneChangeIndex(cp);
                if (idx >= 0)
                {
                    RemoveSceneChange(idx);
                }
                else
                { // add scene change
                    var list = audioVisualizer.SceneChanges.Where(p => p > 0).ToList();
                    list.Add(cp);
                    list.Sort();
                    audioVisualizer.SceneChanges = list;
                    SceneChangeHelper.SaveSceneChanges(_videoFileName, list);
                }

                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.SceneChanges != null && mediaPlayer.IsPaused && e.KeyData == _shortcuts.WaveformGuessStart)
            {
                AutoGuessStartTime(_subtitleListViewIndex);
                e.SuppressKeyPress = true;
            }
            else if (audioVisualizer.Focused && e.KeyCode == Keys.Delete)
            {
                ToolStripMenuItemDeleteClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainToolsAutoDuration == e.KeyData)
            {
                MakeAutoDuration();
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.I)
            {
                using (var form = new ImportUnknownFormat(string.Empty))
                {
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        if (form.ImportedSubitle?.Paragraphs.Count > 0)
                        {
                            _subtitle = form.ImportedSubitle;
                            _fileName = null;
                            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                            SetTitle();
                        }
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if ((textBoxListViewText.Focused || (SubtitleListview1.Focused && SubtitleListview1.SelectedItems.Count == 1) || (audioVisualizer.Focused && SubtitleListview1.SelectedItems.Count == 1)) && _shortcuts.MainTextBoxMoveLastWordDown == e.KeyData)
            {
                MoveLastWordDown();
                e.SuppressKeyPress = true;
            }
            else if ((textBoxListViewText.Focused || (SubtitleListview1.Focused && SubtitleListview1.SelectedItems.Count == 1) || (audioVisualizer.Focused && SubtitleListview1.SelectedItems.Count == 1)) && _shortcuts.MainTextBoxMoveFirstWordFromNextUp == e.KeyData)
            {
                MoveFirstWordInNextUp();
                e.SuppressKeyPress = true;
            }
            else if ((textBoxListViewText.Focused || (SubtitleListview1.Focused && SubtitleListview1.SelectedItems.Count == 1) || (audioVisualizer.Focused && SubtitleListview1.SelectedItems.Count == 1)) && _shortcuts.MainTextBoxMoveLastWordDownCurrent == e.KeyData)
            {
                MoveWordUpDownInCurrent(true);
                e.SuppressKeyPress = true;
            }
            else if ((textBoxListViewText.Focused || (SubtitleListview1.Focused && SubtitleListview1.SelectedItems.Count == 1) || (audioVisualizer.Focused && SubtitleListview1.SelectedItems.Count == 1)) && _shortcuts.MainTextBoxMoveFirstWordUpCurrent == e.KeyData)
            {
                MoveWordUpDownInCurrent(false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAutoCalcCurrentDuration == e.KeyData)
            {
                e.SuppressKeyPress = true;
                if (SubtitleListview1.SelectedItems.Count >= 1)
                {
                    MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);
                    _makeHistoryPaused = true;
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    _subtitle.RecalculateDisplayTime(Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds, idx, Configuration.Settings.General.SubtitleOptimalCharactersPerSeconds);
                    SetDurationInSeconds(_subtitle.Paragraphs[idx].Duration.TotalSeconds);
                    _makeHistoryPaused = false;
                }
            }
            else if (_shortcuts.MainAdjustExtendCurrentSubtitle == e.KeyData)
            {
                if (SubtitleListview1.SelectedItems.Count == 1)
                {
                    var historyAdded = false;
                    var idx = SubtitleListview1.SelectedItems[0].Index;
                    var p = _subtitle.Paragraphs[idx];
                    var next = _subtitle.GetParagraphOrDefault(idx + 1);
                    if (next == null || next.StartTime.TotalMilliseconds > p.EndTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendCurrentSubtitle));
                        historyAdded = true;
                        p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds;
                    }
                    else if (next != null && next.StartTime.TotalMilliseconds > p.EndTime.TotalMilliseconds)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendCurrentSubtitle));
                        historyAdded = true;
                        p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                    }

                    if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            var originalNext = _subtitleAlternate.GetParagraphOrDefault(_subtitleAlternate.GetIndex(original) + 1);
                            if (originalNext == null || originalNext.StartTime.TotalMilliseconds > original.EndTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines)
                            {
                                if (!historyAdded)
                                {
                                    MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendCurrentSubtitle));
                                }

                                original.EndTime.TotalMilliseconds = original.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds;
                            }
                            else if (originalNext != null && originalNext.StartTime.TotalMilliseconds > original.EndTime.TotalMilliseconds)
                            {
                                if (!historyAdded)
                                {
                                    MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendCurrentSubtitle));
                                }

                                original.EndTime.TotalMilliseconds = originalNext.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                            }
                        }
                    }

                    RefreshSelectedParagraph();
                    e.SuppressKeyPress = true;
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.F3 && e.Modifiers == Keys.Shift)
            {
                FindPrevious();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToNextSubtitle == e.KeyData)
            {
                ExtendSelectedLinesToNextLine();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToPreviousSubtitle == e.KeyData)
            {
                ExtendSelectedLinesToPreviousLine();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToNextSceneChange == e.KeyData)
            {
                ExtendSelectedLinesToNextSceneChange();
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToNextSceneChangeWithGap == e.KeyData)
            {
                ExtendSelectedLinesToNextSceneChange(true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustExtendToPreviousSceneChange == e.KeyData)
            {
                ExtendSelectedLinesToPreviousSceneChange();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewGoToNextError)
            {
                GoToNextSyntaxError();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainWaveformAdd)
            {
                if (audioVisualizer.WavePeaks == null)
                {
                    AudioWaveform_Click(null, null);
                }
                e.SuppressKeyPress = true;
            }


            //TABS: Create / adjust / translate

            // create
            else if (_shortcuts.MainCreateInsertSubAtVideoPos == e.KeyData)
            {
                ButtonInsertNewTextClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateInsertSubAtVideoPosNoTextBoxFocus == e.KeyData)
            {
                var p = InsertNewTextAtVideoPosition();
                p.Text = string.Empty;
                SubtitleListview1.SetText(_subtitle.GetIndex(p), p.Text);
                textBoxListViewText.Text = p.Text;
                e.SuppressKeyPress = true;
            }
            else if (tabControlButtons.SelectedTab == tabPageCreate && e.Modifiers == Keys.Alt && e.KeyCode == Keys.F9)
            {
                StopAutoDuration();
                ButtonSetEndClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateSetStart == e.KeyData)
            {
                buttonSetStartTime_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateSetEnd == e.KeyData)
            {
                StopAutoDuration();
                ButtonSetEndClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSetEndAndPause == e.KeyData)
            {
                StopAutoDuration();
                mediaPlayer.Pause();
                ButtonSetEndClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainCreateSetEndAddNewAndGoToNew == e.KeyData)
            {
                StopAutoDuration();
                e.SuppressKeyPress = true;

                if (SubtitleListview1.SelectedItems.Count == 1)
                {
                    double videoPosition = mediaPlayer.CurrentPosition;
                    if (!mediaPlayer.IsPaused)
                    {
                        videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                    }

                    int index = SubtitleListview1.SelectedItems[0].Index;
                    MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + _subtitle.Paragraphs[index].Number + " " + _subtitle.Paragraphs[index].Text));

                    var p = _subtitle.Paragraphs[index];
                    p.EndTime = TimeCode.FromSeconds(videoPosition);
                    if (p.Duration.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines > Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                    {
                        var newEndTime = new TimeCode(p.EndTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines);
                        double charactersPerSecond = Utilities.GetCharactersPerSecond(new Paragraph(p) { EndTime = newEndTime });
                        if (charactersPerSecond <= Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds)
                        {
                            p.EndTime = newEndTime;
                        }
                    }

                    SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    SetDurationInSeconds(_subtitle.Paragraphs[index].Duration.TotalSeconds);
                    ButtonInsertNewTextClick(null, null);
                }
            }
            else if (_shortcuts.MainCreateStartDownEndUp == e.KeyData)
            {
                if (_mainCreateStartDownEndUpParagraph == null)
                {
                    _mainCreateStartDownEndUpParagraph = InsertNewTextAtVideoPosition();
                }

                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSelected100MsForward == e.KeyData)
            {
                ShowEarlierOrLater(100, SelectionChoice.SelectionOnly);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSelected100MsBack == e.KeyData)
            {
                ShowEarlierOrLater(-100, SelectionChoice.SelectionOnly);
                e.SuppressKeyPress = true;
            }


            // adjust
            else if (_shortcuts.MainAdjustSelected100MsForward == e.KeyData)
            {
                ShowEarlierOrLater(100, SelectionChoice.SelectionOnly);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustSelected100MsBack == e.KeyData)
            {
                ShowEarlierOrLater(-100, SelectionChoice.SelectionOnly);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustAdjustStartXMsBack == e.KeyData)
            {
                MoveStartCurrent(-Configuration.Settings.Tools.MoveStartEndMs, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustAdjustStartXMsForward == e.KeyData)
            {
                MoveStartCurrent(Configuration.Settings.Tools.MoveStartEndMs, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustAdjustEndXMsBack == e.KeyData)
            {
                MoveEndCurrent(-Configuration.Settings.Tools.MoveStartEndMs, false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustAdjustEndXMsForward == e.KeyData)
            {
                MoveEndCurrent(Configuration.Settings.Tools.MoveStartEndMs, false);
                e.SuppressKeyPress = true;
            }

            else if (_shortcuts.MainAdjustMoveStartOneFrameBack == e.KeyData)
            {
                MoveStartCurrent(-(int)Math.Round(1000.0 / CurrentFrameRate), false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveStartOneFrameForward == e.KeyData)
            {
                MoveStartCurrent((int)Math.Round(1000.0 / CurrentFrameRate), false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveEndOneFrameBack == e.KeyData)
            {
                MoveEndCurrent(-(int)Math.Round(1000.0 / CurrentFrameRate), false);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveEndOneFrameForward == e.KeyData)
            {
                MoveEndCurrent((int)Math.Round(1000.0 / CurrentFrameRate), false);
                e.SuppressKeyPress = true;
            }

            else if (_shortcuts.MainAdjustMoveStartOneFrameBackKeepGapPrev == e.KeyData)
            {
                MoveStartCurrent(-(int)Math.Round(1000.0 / CurrentFrameRate), true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveStartOneFrameForwardKeepGapPrev == e.KeyData)
            {
                MoveStartCurrent((int)Math.Round(1000.0 / CurrentFrameRate), true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveEndOneFrameBackKeepGapNext == e.KeyData)
            {
                MoveEndCurrent(-(int)Math.Round(1000.0 / CurrentFrameRate), true);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainAdjustMoveEndOneFrameForwardKeepGapNext == e.KeyData)
            {
                MoveEndCurrent((int)Math.Round(1000.0 / CurrentFrameRate), true);
                e.SuppressKeyPress = true;
            }

            else if (mediaPlayer.VideoPlayer != null && (_shortcuts.MainAdjustSetStartAndOffsetTheRest == e.KeyData || _shortcuts.MainAdjustSetStartAndOffsetTheRest2 == e.KeyData))
            {
                ButtonSetStartAndOffsetRestClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndAndOffsetTheRest == e.KeyData)
            {
                SetEndAndOffsetTheRest(false);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndAndOffsetTheRestAndGoToNext == e.KeyData)
            {
                SetEndAndOffsetTheRest(true);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndAndGotoNext == e.KeyData)
            {
                ShowNextSubtitleLabel();
                ButtonSetEndAndGoToNextClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetStartKeepDuration == e.KeyData)
            {
                SetStartTime(true);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustInsertViaEndAutoStart == e.KeyData)
            {
                SetCurrentViaEndPositionAndGotoNext(FirstSelectedIndex, false);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustInsertViaEndAutoStartAndGoToNext == e.KeyData)
            {
                ShowNextSubtitleLabel();
                SetCurrentViaEndPositionAndGotoNext(FirstSelectedIndex, true);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetStartAutoDurationAndGoToNext == e.KeyData)
            {
                SetCurrentStartAutoDurationAndGotoNext(FirstSelectedIndex);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustSetEndNextStartAndGoToNext == e.KeyData)
            {
                ShowNextSubtitleLabel();
                SetCurrentEndNextStartAndGoToNext(FirstSelectedIndex);
                e.SuppressKeyPress = true;
            }
            else if (mediaPlayer.VideoPlayer != null && _shortcuts.MainAdjustStartDownEndUpAndGoToNext == e.KeyData && _mainAdjustStartDownEndUpAndGoToNextParagraph == null)
            {
                ShowNextSubtitleLabel();
                _mainAdjustStartDownEndUpAndGoToNextParagraph = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                SetStartTime(true);
                e.SuppressKeyPress = true;
            }

            // translate
            else if (_shortcuts.MainTranslateGoogleIt == e.KeyData)
            {
                e.SuppressKeyPress = true;
                buttonGoogleIt_Click(null, null);
            }
            else if (_shortcuts.MainTranslateCustomSearch1 == e.KeyData)
            {
                e.SuppressKeyPress = true;
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl1);
            }
            else if (_shortcuts.MainTranslateCustomSearch2 == e.KeyData)
            {
                e.SuppressKeyPress = true;
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl2);
            }
            else if (_shortcuts.MainTranslateCustomSearch3 == e.KeyData)
            {
                e.SuppressKeyPress = true;
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl3);
            }
            else if (_shortcuts.MainTranslateCustomSearch4 == e.KeyData)
            {
                e.SuppressKeyPress = true;
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl4);
            }
            else if (_shortcuts.MainTranslateCustomSearch5 == e.KeyData)
            {
                e.SuppressKeyPress = true;
                RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl5);
            }
            // put new entries above tabs
        }

        private void ExtendSelectedLinesToNextLine()
        {
            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                var next = _subtitle.GetParagraphOrDefault(idx + 1);
                if (next != null)
                {
                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendToNextSubtitle));
                        historyAdded = true;
                    }
                    p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                }

                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var original = Utilities.GetOriginalParagraph(idx, p, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        var originalNext = _subtitleAlternate.GetParagraphOrDefault(_subtitleAlternate.GetIndex(original) + 1);
                        if (originalNext != null)
                        {
                            if (!historyAdded)
                            {
                                MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendToNextSubtitle));
                                historyAdded = true;
                            }

                            original.EndTime.TotalMilliseconds = originalNext.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                        }
                    }
                }

                RefreshSelectedParagraphs();
            }
        }

        private void ExtendSelectedLinesToPreviousLine()
        {
            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                var previous = _subtitle.GetParagraphOrDefault(idx - 1);
                if (previous != null)
                {
                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendToPreviousSubtitle));
                        historyAdded = true;
                    }
                    if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            var originalPrevious = _subtitleAlternate.GetParagraphOrDefault(_subtitleAlternate.GetIndex(original) - 1);
                            if (originalPrevious != null)
                            {
                                if (!historyAdded)
                                {
                                    MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendToPreviousSubtitle));
                                    historyAdded = true;
                                }

                                original.StartTime.TotalMilliseconds = originalPrevious.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                            }
                        }
                    }
                    p.StartTime.TotalMilliseconds = previous.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                }

                RefreshSelectedParagraphs();
            }
        }

        private void ExtendSelectedLinesToNextSceneChange(bool withGap = false)
        {
            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                List<double> nextSceneChanges = audioVisualizer.SceneChanges.Count > 0 ? audioVisualizer.SceneChanges.Where(x => x > p.EndTime.TotalSeconds + 0.01).ToList() : new List<double>();
                if (nextSceneChanges.Count > 0)
                {
                    var next = _subtitle.GetParagraphOrDefault(idx + 1);
                    double nearestSceneChange = nextSceneChanges.Aggregate((x, y) => Math.Abs(x - p.EndTime.TotalSeconds) < Math.Abs(y - p.EndTime.TotalSeconds) ? x : y);
                    double nearestStartTimeWithGap = next != null ? next.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines : Double.MaxValue;

                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendToNextSceneChange));
                        historyAdded = true;
                    }

                    if (!withGap)
                    {
                        p.EndTime.TotalMilliseconds = Math.Min(nearestSceneChange * 1000, nearestStartTimeWithGap);
                    }
                    else
                    {
                        p.EndTime.TotalMilliseconds = Math.Min(nearestSceneChange * 1000 - Configuration.Settings.General.MinimumMillisecondsBetweenLines, nearestStartTimeWithGap);
                    }

                    if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            var originalNext = _subtitleAlternate.GetParagraphOrDefault(_subtitleAlternate.GetIndex(original) + 1);
                            double nearestOriginalStartTimeWithGap = originalNext != null ? originalNext.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines : Double.MaxValue;

                            if (!historyAdded)
                            {
                                MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendToNextSceneChange));
                                historyAdded = true;
                            }

                            original.EndTime.TotalMilliseconds = Math.Min(nearestSceneChange * 1000, nearestOriginalStartTimeWithGap);
                        }
                    }
                }

                RefreshSelectedParagraphs();
            }
        }

        private void ExtendSelectedLinesToPreviousSceneChange()
        {
            var historyAdded = false;
            foreach (ListViewItem selectedItem in SubtitleListview1.SelectedItems)
            {
                var idx = selectedItem.Index;
                var p = _subtitle.Paragraphs[idx];
                List<double> previousSceneChanges = audioVisualizer.SceneChanges.Count > 0 ? audioVisualizer.SceneChanges.Where(x => x < p.StartTime.TotalSeconds - 0.01).ToList() : new List<double>();
                if (previousSceneChanges.Count > 0)
                {
                    var previous = _subtitle.GetParagraphOrDefault(idx - 1);
                    double nearestSceneChange = previousSceneChanges.Aggregate((x, y) => Math.Abs(x - p.StartTime.TotalSeconds) < Math.Abs(y - p.StartTime.TotalSeconds) ? x : y);
                    double nearestEndTimeWithGap = previous != null ? previous.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines : -9999;

                    if (!historyAdded)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendToPreviousSceneChange));
                        historyAdded = true;
                    }
                    if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            var originalPrevious = _subtitleAlternate.GetParagraphOrDefault(_subtitleAlternate.GetIndex(original) - 1);
                            double nearestOriginalEndTimeWithGap = originalPrevious != null ? originalPrevious.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines : -9999;

                            if (!historyAdded)
                            {
                                MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.AdjustExtendToPreviousSceneChange));
                                historyAdded = true;
                            }

                            original.StartTime.TotalMilliseconds = Math.Max(nearestSceneChange * 1000, nearestOriginalEndTimeWithGap);
                        }
                    }

                    p.StartTime.TotalMilliseconds = Math.Max(nearestSceneChange * 1000, nearestEndTimeWithGap);
                }

                RefreshSelectedParagraphs();
            }
        }

        private void GoToPreviousSubtitle(double currentPosition)
        {
            var found = false;
            foreach (var p in _subtitle.Paragraphs)
            {
                if (p.StartTime.TotalMilliseconds > currentPosition - 1)
                {
                    var prev = _subtitle.GetParagraphOrDefault(_subtitle.Paragraphs.IndexOf(p) - 1);
                    if (prev == null)
                    {
                        break;
                    }

                    mediaPlayer.CurrentPosition = prev.StartTime.TotalSeconds;
                    SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.IndexOf(prev), true);
                    if (audioVisualizer.WavePeaks != null && p.StartTime.TotalSeconds > audioVisualizer.EndPositionSeconds + 0.2)
                    {
                        audioVisualizer.StartPositionSeconds = mediaPlayer.CurrentPosition - 0.2;
                    }
                    found = true;
                    break;
                }
            }
            if (!found && _subtitle.Paragraphs.Count > 0 && _subtitle.Paragraphs[_subtitle.Paragraphs.Count - 1].StartTime.TotalMilliseconds < currentPosition)
            {
                var p = _subtitle.Paragraphs[_subtitle.Paragraphs.Count - 1];
                mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.Count - 1, true);
                if (audioVisualizer.WavePeaks != null && p.StartTime.TotalSeconds > audioVisualizer.EndPositionSeconds + 0.2)
                {
                    audioVisualizer.StartPositionSeconds = mediaPlayer.CurrentPosition - 0.2;
                }
            }
        }

        private void GoToNextSubtitle(double currentPosition)
        {
            foreach (var p in _subtitle.Paragraphs)
            {
                if (p.StartTime.TotalMilliseconds > currentPosition)
                {
                    mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.IndexOf(p), true);
                    if (audioVisualizer.WavePeaks != null && p.StartTime.TotalSeconds > audioVisualizer.EndPositionSeconds + 0.2)
                    {
                        audioVisualizer.StartPositionSeconds = mediaPlayer.CurrentPosition - 0.2;
                    }

                    break;
                }
            }
        }

        private void AutoGuessStartTime(int index)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            var silenceLengthInSeconds = 0.08;
            var lowPercent = audioVisualizer.FindLowPercentage(p.StartTime.TotalSeconds - 0.3, p.StartTime.TotalSeconds + 0.1);
            var highPercent = audioVisualizer.FindHighPercentage(p.StartTime.TotalSeconds - 0.3, p.StartTime.TotalSeconds + 0.4);
            var add = 5.0;
            if (highPercent > 40)
            {
                add = 8;
            }
            else if (highPercent < 5)
            {
                add = highPercent - lowPercent - 0.3;
            }
            for (var startVolume = lowPercent + add; startVolume < 14; startVolume += 0.3)
            {
                var pos = audioVisualizer.FindDataBelowThresholdBackForStart(startVolume, silenceLengthInSeconds, p.StartTime.TotalSeconds);
                var pos2 = audioVisualizer.FindDataBelowThresholdBackForStart(startVolume + 0.3, silenceLengthInSeconds, p.StartTime.TotalSeconds);
                if (pos >= 0 && pos > p.StartTime.TotalSeconds - 1)
                {
                    if (pos2 > pos && pos2 >= 0 && pos2 > p.StartTime.TotalSeconds - 1)
                    {
                        pos = pos2;
                    }

                    var newStartTimeMs = pos * TimeCode.BaseUnit;
                    var prev = _subtitle.GetParagraphOrDefault(index - 1);
                    if (prev != null && prev.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines >= newStartTimeMs)
                    {
                        newStartTimeMs = prev.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                        if (newStartTimeMs >= p.StartTime.TotalMilliseconds)
                        {
                            break; // cannot move start time
                        }
                    }

                    // check for scene changes
                    if (audioVisualizer.SceneChanges != null)
                    {
                        var matchingSceneChanges = audioVisualizer.SceneChanges
                            .Where(sc => sc > p.StartTime.TotalSeconds - 0.3 && sc < p.StartTime.TotalSeconds + 0.2)
                            .OrderBy(sc => Math.Abs(sc - p.StartTime.TotalSeconds));
                        if (matchingSceneChanges.Count() > 0)
                        {
                            newStartTimeMs = matchingSceneChanges.First() * TimeCode.BaseUnit;
                        }
                    }

                    if (Math.Abs(p.StartTime.TotalMilliseconds - newStartTimeMs) < 10)
                    {
                        break; // diff too small
                    }

                    var newEndTimeMs = p.EndTime.TotalMilliseconds;
                    if (newStartTimeMs > p.StartTime.TotalMilliseconds)
                    {
                        var temp = new Paragraph(p);
                        temp.StartTime.TotalMilliseconds = newStartTimeMs;
                        if (temp.Duration.TotalMilliseconds < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds ||
                            Utilities.GetCharactersPerSecond(temp) > Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds)
                        {
                            var next = _subtitle.GetParagraphOrDefault(index + 1);
                            if (next == null ||
                                next.StartTime.TotalMilliseconds > newStartTimeMs + p.Duration.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines)
                            {
                                newEndTimeMs = newStartTimeMs + p.Duration.TotalMilliseconds;
                            }
                        }
                    }

                    MakeHistoryForUndo(string.Format(Configuration.Settings.Language.Main.BeforeX, Configuration.Settings.Language.Settings.WaveformGuessStart));

                    if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(index, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            original.StartTime.TotalMilliseconds = newStartTimeMs;
                            original.EndTime.TotalMilliseconds = newEndTimeMs;
                        }
                    }

                    p.StartTime.TotalMilliseconds = newStartTimeMs;
                    p.EndTime.TotalMilliseconds = newEndTimeMs;
                    RefreshSelectedParagraph();
                    SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    break;
                }
            }
        }

        private void GoToBookmark()
        {
            using (var form = new BookmarksGoTo(_subtitle))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(form.BookmarkIndex, true);
                    if (mediaPlayer.VideoPlayer != null)
                    {
                        mediaPlayer.VideoPlayer.CurrentPosition = _subtitle.Paragraphs[form.BookmarkIndex].StartTime.TotalSeconds;
                    }
                }
            }
        }

        private void GoToPrevoiusBookmark()
        {
            int idx = FirstSelectedIndex - 1;
            try
            {
                for (int i = idx; i >= 0; i--)
                {
                    var p = _subtitle.Paragraphs[i];
                    if (p.Bookmark != null)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(i, true);
                        if (mediaPlayer.VideoPlayer != null)
                        {
                            mediaPlayer.VideoPlayer.CurrentPosition = _subtitle.Paragraphs[i].StartTime.TotalSeconds;
                        }

                        return;
                    }
                }
            }
            catch
            {
            }
        }

        private void GoToNextBookmark()
        {
            int idx = FirstSelectedIndex + 1;
            try
            {
                for (int i = idx; i < _subtitle.Paragraphs.Count; i++)
                {
                    var p = _subtitle.Paragraphs[i];
                    if (p.Bookmark != null)
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(i, true);
                        if (mediaPlayer.VideoPlayer != null)
                        {
                            mediaPlayer.VideoPlayer.CurrentPosition = _subtitle.Paragraphs[i].StartTime.TotalSeconds;
                        }

                        return;
                    }
                }
            }
            catch
            {
            }
        }

        private void ToggleBookmarks(bool setText)
        {
            bool first = true;
            string newValue = null;
            if (setText)
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.ToggleBookmarksWithComment));
            }
            else
            {
                MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.ToggleBookmarks));
            }

            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                if (first)
                {
                    if (p.Bookmark == null)
                    {
                        if (setText)
                        {
                            using (var form = new BookmarkAdd(p))
                            {
                                var result = form.ShowDialog(this);
                                if (result != DialogResult.OK)
                                {
                                    return;
                                }

                                newValue = form.Comment;
                            }
                        }
                        else
                        {
                            newValue = string.Empty;
                        }
                    }
                    else
                    {
                        newValue = null;
                    }

                    first = false;
                }

                p.Bookmark = newValue;
                SubtitleListview1.ShowState(index, p);
                ShowHideBookmark(p);
            }

            SetListViewStateImages();
            new BookmarkPersistence(_subtitle, _fileName).Save();
        }

        private void SetListViewStateImages()
        {
            var oldStaeImageList = SubtitleListview1.StateImageList;
            SubtitleListview1.StateImageList = _subtitle != null && _subtitle.Paragraphs.Any(p => p.Bookmark != null) ? imageListBookmarks : null;
            if (SubtitleListview1.StateImageList == null)
            {
                SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Text = Configuration.Settings.Language.General.NumberSymbol;
            }
            else
            {
                SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Text = "    " + Configuration.Settings.Language.General.NumberSymbol;
            }

            if (oldStaeImageList == SubtitleListview1.StateImageList)
            {
                return;
            }

            if (!_loading)
            {
                if (SubtitleListview1.StateImageList == null)
                {
                    SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width = Configuration.Settings.General.ListViewNumberWidth - 18;
                }
                else
                {
                    SubtitleListview1.Columns[SubtitleListview1.ColumnIndexNumber].Width = Configuration.Settings.General.ListViewNumberWidth + 18;
                }
            }

            SubtitleListview1.SubtitleListViewLastColumnFill(null, null);
        }

        private void ClearBookmarks()
        {
            MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.ClearBookmarks));
            for (var index = 0; index < _subtitle.Paragraphs.Count; index++)
            {
                var paragraph = _subtitle.Paragraphs[index];
                if (paragraph.Bookmark != null)
                {
                    paragraph.Bookmark = null;
                    SubtitleListview1.ShowState(index, paragraph);
                }
            }

            var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
            if (p != null)
            {
                ShowHideBookmark(p);
            }

            SetListViewStateImages();
            new BookmarkPersistence(_subtitle, _fileName).Save();
        }

        private void MoveWordUpDownInCurrent(bool down)
        {
            int firstIndex = FirstSelectedIndex;
            if (firstIndex < 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(firstIndex);
            if (p == null)
            {
                return;
            }

            var lines = p.Text.SplitToLines();
            if (lines.Count == 1)
            {
                lines.Add(string.Empty);
            }

            if (lines.Count != 2)
            {
                return;
            }

            var line1Words = lines[0].Split(' ').ToList();
            var line2Words = lines[1].Split(' ').ToList();
            if (down)
            {
                if (line1Words.Count > 0)
                {
                    line2Words.Insert(0, line1Words[line1Words.Count - 1]);
                    line1Words.RemoveAt(line1Words.Count - 1);
                }
            }
            else // up
            {
                if (line2Words.Count > 0)
                {
                    line1Words.Add(line2Words[0]);
                    line2Words.RemoveAt(0);
                }
            }

            var newText = (string.Join(" ", line1Words.ToArray()).Trim() + Environment.NewLine +
                           string.Join(" ", line2Words.ToArray()).Trim()).Trim();
            if (newText != p.Text)
            {
                var oldText = p.Text;
                MakeHistoryForUndo(_language.BeforeLineUpdatedInListView);
                var textCaretPos = textBoxListViewText.SelectionStart;
                p.Text = newText;
                SubtitleListview1.SetText(firstIndex, p.Text);
                textBoxListViewText.Text = p.Text;

                // keep cursor position
                KeepCursorMoveWordUpdown(down, newText, oldText, textCaretPos);
            }
        }

        private void KeepCursorMoveWordUpdown(bool down, string newText, string oldText, int textCaretPos)
        {
            if (textCaretPos > textBoxListViewText.Text.Length)
            {
                // set cursor at end of textbox
                textBoxListViewText.SelectionStart = textCaretPos;
                int end = textBoxListViewText.Text.Length;
                textBoxListViewText.SelectionStart = end;
                textBoxListViewText.SelectionLength = 0;
                return;
            }

            int indexOfNewLine = newText.IndexOf(Environment.NewLine, StringComparison.Ordinal);
            int oldIndexOfNewLine = oldText.IndexOf(Environment.NewLine, StringComparison.Ordinal);

            if (down)
            {
                if (indexOfNewLine == -1 && oldIndexOfNewLine > 0 && textCaretPos > oldIndexOfNewLine)
                {
                    textCaretPos--;
                }
                else if (textCaretPos > indexOfNewLine && textCaretPos > oldIndexOfNewLine && oldIndexOfNewLine >= 0 ||
                         textCaretPos < indexOfNewLine && (oldIndexOfNewLine == -1 || textCaretPos < oldIndexOfNewLine) ||
                         textCaretPos < oldIndexOfNewLine && indexOfNewLine == -1)
                {
                }
                else
                {
                    textCaretPos++;
                }
            }
            else // up
            {
                if (textCaretPos <= oldIndexOfNewLine || textCaretPos > oldIndexOfNewLine && textCaretPos > indexOfNewLine && indexOfNewLine >= 0)
                {
                }
                else
                {
                    textCaretPos--;
                }
            }

            if (textBoxListViewText.Text.Length > textCaretPos && '\n' == textBoxListViewText.Text[textCaretPos])
            {
                textCaretPos--;
            }

            if (textCaretPos >= 0)
            {
                textBoxListViewText.SelectionStart = textCaretPos;
                textBoxListViewText.SelectionStart = textCaretPos;
                textBoxListViewText.SelectionStart = textCaretPos;
            }
        }

        private void MoveStartCurrent(int ms, bool keepGapPrevIfClose)
        {
            var i = _subtitleListViewIndex;
            if (i < 0 || i >= _subtitle.Paragraphs.Count || ms == 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(i);
            if (p == null)
            {
                return;
            }

            // snap to scene change
            if (Configuration.Settings.VideoControls.WaveformSnapToSceneChanges && audioVisualizer?.SceneChanges?.Count > 0)
            {
                var seconds = (p.StartTime.TotalMilliseconds + ms) / 1000.0;
                var closest = audioVisualizer.SceneChanges.OrderBy(sc => Math.Abs(seconds - sc)).First() * 1000.0;
                if (Math.Abs(p.StartTime.TotalMilliseconds + ms - closest) < CurrentFrameRate * 0.9)
                {
                    ms = (int)Math.Round(closest - p.StartTime.TotalMilliseconds);
                }
            }

            var prevGap = 0.0;
            var prev = _subtitle.GetParagraphOrDefault(i - 1);
            if (keepGapPrevIfClose && prev != null)
            {
                if (prev.EndTime.TotalMilliseconds <= p.StartTime.TotalMilliseconds && prev.EndTime.TotalMilliseconds + 200 >= p.StartTime.TotalMilliseconds)
                {
                    prevGap = p.StartTime.TotalMilliseconds - prev.EndTime.TotalMilliseconds;
                    if (ms < 0 && prev.Duration.TotalMilliseconds + ms < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                    {
                        return;
                    }
                }
                else
                {
                    prev = null;
                }
            }

            if (ms > 0)
            {
                if (p.StartTime.TotalMilliseconds + ms + Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds > p.EndTime.TotalMilliseconds)
                {
                    return; // do not allow duration smaller than min duration in ms
                }

                p.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + ms;
            }
            else
            {
                if (p.Duration.TotalMilliseconds + Math.Abs(ms) > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                {
                    return;
                }

                if (p.StartTime.TotalMilliseconds + ms < 0)
                {
                    return;
                }

                if (keepGapPrevIfClose || prev == null || p.StartTime.TotalMilliseconds - (Math.Abs(ms) + Configuration.Settings.General.MinimumMillisecondsBetweenLines) > prev.EndTime.TotalMilliseconds)
                {
                    p.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + ms;
                }
                else
                {
                    var newStartMs = prev.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                    if (newStartMs < p.StartTime.TotalMilliseconds)
                    {
                        p.StartTime.TotalMilliseconds = newStartMs;
                    }
                }
            }

            SubtitleListview1.SetStartTimeAndDuration(i, p, _subtitle.GetParagraphOrDefault(i + 1), _subtitle.GetParagraphOrDefault(i - 1));
            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            timeUpDownStartTime.TimeCode = p.StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            SetDurationInSeconds(p.Duration.TotalSeconds);

            if (keepGapPrevIfClose && prev != null)
            {
                prev.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds - prevGap;
                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(prev), prev, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        original.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                    }
                }
                SubtitleListview1.SetStartTimeAndDuration(i - 1, prev, p, _subtitle.GetParagraphOrDefault(i - 2));
            }

            if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
            {
                var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(p), p, _subtitleAlternate.Paragraphs);
                if (original != null)
                {
                    original.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                    original.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                }
            }

            SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, i, p);
        }

        private void MoveEndCurrent(int ms, bool keepGapNextIfClose)
        {
            var i = _subtitleListViewIndex;
            if (i < 0 || i >= _subtitle.Paragraphs.Count || ms == 0)
            {
                return;
            }

            var p = _subtitle.GetParagraphOrDefault(i);
            if (p == null)
            {
                return;
            }

            // snap to scene change
            if (Configuration.Settings.VideoControls.WaveformSnapToSceneChanges && audioVisualizer?.SceneChanges?.Count > 0)
            {
                var seconds = (p.EndTime.TotalMilliseconds + ms) / 1000.0;
                var closest = audioVisualizer.SceneChanges.OrderBy(sc => Math.Abs(seconds - sc)).First() * 1000.0;
                if (Math.Abs(p.EndTime.TotalMilliseconds + ms - closest) < CurrentFrameRate * 0.9)
                {
                    ms = (int)Math.Round(closest - p.EndTime.TotalMilliseconds);
                }
            }

            var nextGap = 0.0;
            var next = _subtitle.GetParagraphOrDefault(i + 1);
            if (keepGapNextIfClose && next != null)
            {
                if (next.StartTime.TotalMilliseconds >= p.EndTime.TotalMilliseconds && next.StartTime.TotalMilliseconds - 200 < p.EndTime.TotalMilliseconds)
                {
                    nextGap = next.StartTime.TotalMilliseconds - p.EndTime.TotalMilliseconds;
                    if (ms > 0 && next.Duration.TotalMilliseconds + ms < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                    {
                        return;
                    }
                }
                else
                {
                    next = null;
                }
            }

            if (ms > 0)
            {
                if (p.Duration.TotalMilliseconds + ms > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                {
                    return;
                }

                if (keepGapNextIfClose || next == null || p.EndTime.TotalMilliseconds + ms + Configuration.Settings.General.MinimumMillisecondsBetweenLines < next.StartTime.TotalMilliseconds)
                {
                    p.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + ms;
                }
                else
                {
                    var newEndMs = next.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                    if (newEndMs > p.EndTime.TotalMilliseconds)
                    {
                        p.EndTime.TotalMilliseconds = newEndMs;
                    }
                }
            }
            else
            {
                if (p.EndTime.TotalMilliseconds + ms - Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds < p.StartTime.TotalMilliseconds)
                {
                    return; // do not allow duration smaller than min duration in ms
                }

                p.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + ms;
            }

            SubtitleListview1.SetStartTimeAndDuration(i, p, _subtitle.GetParagraphOrDefault(i + 1), _subtitle.GetParagraphOrDefault(i - 1));
            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            timeUpDownStartTime.TimeCode = p.StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            SetDurationInSeconds(p.Duration.TotalSeconds);

            if (keepGapNextIfClose && next != null)
            {
                next.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + nextGap;
                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(next), next, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds;
                    }
                }
                SubtitleListview1.SetStartTimeAndDuration(i + 1, next, _subtitle.GetParagraphOrDefault(i + 2), p);
            }

            if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
            {
                var original = Utilities.GetOriginalParagraph(_subtitle.GetIndex(p), p, _subtitleAlternate.Paragraphs);
                if (original != null)
                {
                    original.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                    original.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                }
            }

            SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, i, p);
        }

        private void ShowNextSubtitleLabel()
        {
            if (audioVisualizer.Visible && audioVisualizer.WavePeaks != null && audioVisualizer.Width > 300 && _subtitleListViewIndex >= 0)
            {
                var next = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex + 1);
                if (next != null && !string.IsNullOrEmpty(next.Text))
                {
                    labelNextWord.Top = audioVisualizer.Top;
                    labelNextWord.Text = string.Format(_language.NextX, HtmlUtil.RemoveHtmlTags(next.Text, true).Replace(Environment.NewLine, " "));
                    labelNextWord.Left = audioVisualizer.Width / 2 - labelNextWord.Width / 2 + audioVisualizer.Left;
                    labelNextWord.Visible = true;
                    _labelNextTicks = DateTime.UtcNow.Ticks;
                }
                else
                {
                    labelNextWord.Visible = false;
                }
            }
            else
            {
                labelNextWord.Visible = false;
            }
        }

        private void MergeSelectedLinesOnlyFirstText()
        {
            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 1)
            {
                var deleteIndices = new List<int>();
                bool first = true;
                int firstIndex = 0;
                int next = 0;
                string text = string.Empty;
                double endTime = 0;
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    if (first)
                    {
                        firstIndex = index;
                        next = index + 1;
                    }
                    else
                    {
                        deleteIndices.Add(index);
                        if (next != index)
                        {
                            return;
                        }

                        next++;
                    }

                    first = false;
                    if (string.IsNullOrEmpty(text))
                    {
                        text = _subtitle.Paragraphs[index].Text.Trim();
                    }

                    endTime = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                }

                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(_language.BeforeMergeLines);

                var currentParagraph = _subtitle.Paragraphs[firstIndex];
                currentParagraph.Text = text;
                currentParagraph.EndTime.TotalMilliseconds = endTime;

                var nextParagraph = _subtitle.GetParagraphOrDefault(next);
                if (nextParagraph != null && currentParagraph.EndTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && currentParagraph.StartTime.TotalMilliseconds < nextParagraph.StartTime.TotalMilliseconds)
                {
                    currentParagraph.EndTime.TotalMilliseconds = nextParagraph.StartTime.TotalMilliseconds - 1;
                }

                // original subtitle
                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var original = Utilities.GetOriginalParagraph(firstIndex, currentParagraph, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        string originalText = string.Empty;
                        for (int i = 0; i < deleteIndices.Count; i++)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], _subtitle.Paragraphs[deleteIndices[i]], _subtitleAlternate.Paragraphs);
                            if (originalNext != null && string.IsNullOrEmpty(originalText))
                            {
                                originalText = originalNext.Text;
                            }
                        }

                        for (int i = deleteIndices.Count - 1; i >= 0; i--)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], _subtitle.Paragraphs[deleteIndices[i]], _subtitleAlternate.Paragraphs);
                            if (originalNext != null)
                            {
                                _subtitleAlternate.Paragraphs.Remove(originalNext);
                            }
                        }

                        original.Text = originalText;
                        original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        _subtitleAlternate.Renumber();
                    }
                }

                if (_networkSession != null)
                {
                    _networkSession.TimerStop();
                    _networkSession.UpdateLine(firstIndex, currentParagraph);
                    NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    for (int i = deleteIndices.Count - 1; i >= 0; i--)
                    {
                        _subtitle.Paragraphs.RemoveAt(deleteIndices[i]);
                    }

                    _subtitle.Renumber();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                }

                ShowSource();
                ShowStatus(_language.LinesMerged);
                SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                RefreshSelectedParagraph();
            }
        }

        private void GoToFirstEmptyLine()
        {
            var index = FirstSelectedIndex + 1;
            for (; index < _subtitle.Paragraphs.Count; index++)
            {
                if (string.IsNullOrWhiteSpace(_subtitle.Paragraphs[index].Text))
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    if (mediaPlayer.VideoPlayer != null)
                    {
                        mediaPlayer.VideoPlayer.CurrentPosition = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                    }

                    return;
                }
            }
        }

        private void PlayFirstSelectedSubtitle()
        {
            if (_subtitleListViewIndex >= 0 && mediaPlayer.VideoPlayer != null)
            {
                GotoSubtitleIndex(_subtitleListViewIndex);
                var paragraph = _subtitle.Paragraphs[_subtitleListViewIndex];
                double startSeconds = paragraph.StartTime.TotalSeconds;
                _endSeconds = paragraph.EndTime.TotalSeconds;
                mediaPlayer.CurrentPosition = startSeconds;
                ShowSubtitle();
                mediaPlayer.Play();
            }
        }

        private void SetEndAndOffsetTheRest(bool goToNext)
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                bool oldSync = checkBoxSyncListViewWithVideoWhilePlaying.Checked;
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = false;

                int index = SubtitleListview1.SelectedItems[0].Index;
                double videoPosition = mediaPlayer.CurrentPosition;
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                var tc = TimeCode.FromSeconds(videoPosition);

                double offset = tc.TotalMilliseconds - _subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                if (_subtitle.Paragraphs[index].StartTime.TotalMilliseconds + 100 > tc.TotalMilliseconds || offset > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                {
                    return;
                }

                MakeHistoryForUndo(_language.BeforeSetEndTimeAndOffsetTheRest + @"  " + _subtitle.Paragraphs[index].Number + @" - " + tc);

                numericUpDownDuration.ValueChanged -= NumericUpDownDurationValueChanged;
                _subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                SubtitleListview1.SetDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                numericUpDownDuration.Value = (decimal)_subtitle.Paragraphs[index].Duration.TotalSeconds;
                numericUpDownDuration.ValueChanged += NumericUpDownDurationValueChanged;
                RefreshSelectedParagraph();

                for (int i = index + 1; i < SubtitleListview1.Items.Count; i++)
                {
                    if (!_subtitle.Paragraphs[i].StartTime.IsMaxTime)
                    {
                        _subtitle.Paragraphs[i].StartTime = new TimeCode(_subtitle.Paragraphs[i].StartTime.TotalMilliseconds + offset);
                        _subtitle.Paragraphs[i].EndTime = new TimeCode(_subtitle.Paragraphs[i].EndTime.TotalMilliseconds + offset);
                        SubtitleListview1.SetDuration(i, _subtitle.Paragraphs[i], _subtitle.GetParagraphOrDefault(i + 1));
                    }
                }

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index], _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        index = _subtitleAlternate.GetIndex(original);
                        for (int i = index; i < _subtitleAlternate.Paragraphs.Count; i++)
                        {
                            if (!_subtitleAlternate.Paragraphs[i].StartTime.IsMaxTime)
                            {
                                _subtitleAlternate.Paragraphs[i].StartTime = new TimeCode(_subtitleAlternate.Paragraphs[i].StartTime.TotalMilliseconds + offset);
                                _subtitleAlternate.Paragraphs[i].EndTime = new TimeCode(_subtitleAlternate.Paragraphs[i].EndTime.TotalMilliseconds + offset);
                            }
                        }
                    }
                }

                checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;

                if (goToNext)
                {
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
                    if (mediaPlayer.IsPaused && index + 1 < _subtitle.Paragraphs.Count)
                    {
                        mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index + 1].StartTime.TotalSeconds;
                    }
                }
            }
        }

        private void MoveVideoSeconds(double seconds)
        {
            var oldPosition = mediaPlayer.CurrentPosition;
            var newPosition = oldPosition + seconds;
            if (newPosition < 0)
            {
                newPosition = 0;
            }

            if (mediaPlayer.IsPaused && Configuration.Settings.General.MoveVideo100Or500MsPlaySmallSample)
            {
                mediaPlayer.CurrentPosition = newPosition;
                mediaPlayer.Play();
                System.Threading.Thread.Sleep(99);
                mediaPlayer.Stop();
            }

            mediaPlayer.CurrentPosition = newPosition;
        }

        private void RunCustomSearch(string url)
        {
            if (!string.IsNullOrEmpty(url))
            {
                RunTranslateSearch((text) =>
                {
                    url = string.Format(url, Utilities.UrlEncode(text));
                    UiUtil.OpenURL(url);
                });
            }
        }

        private void GoFullscreen(bool force)
        {
            if (mediaPlayer.VideoPlayer == null && !force)
            {
                return;
            }

            mediaPlayer.ShowFullScreenControls();
            bool setRedockOnFullscreenEnd = false;

            if (_videoPlayerUndocked == null || _videoPlayerUndocked.IsDisposed)
            {
                UndockVideoControlsToolStripMenuItemClick(null, null);
                setRedockOnFullscreenEnd = true;
            }

            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                _videoPlayerUndocked.Focus();
                _videoPlayerUndocked.GoFullscreen();
                if (setRedockOnFullscreenEnd)
                {
                    _videoPlayerUndocked.RedockOnFullscreenEnd = true;
                }
            }
        }

        private void RefreshTimeCodeMode()
        {
            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                numericUpDownDuration.DecimalPlaces = 2;
                numericUpDownDuration.Increment = (decimal)(0.01);

                toolStripSeparatorFrameRate.Visible = true;
                toolStripLabelFrameRate.Visible = true;
                toolStripComboBoxFrameRate.Visible = true;
                toolStripButtonGetFrameRate.Visible = true;
            }
            else
            {
                numericUpDownDuration.DecimalPlaces = 3;
                numericUpDownDuration.Increment = (decimal)(0.1);

                toolStripSeparatorFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                toolStripLabelFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                toolStripComboBoxFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                toolStripButtonGetFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
            }

            SaveSubtitleListviewIndices();
            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            RestoreSubtitleListviewIndices();
            RefreshSelectedParagraph();
        }

        private void ReverseStartAndEndingForRtl()
        {
            MakeHistoryForUndo(toolStripMenuItemReverseRightToLeftStartEnd.Text);
            int selectedIndex = FirstSelectedIndex;
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                p.Text = Utilities.ReverseStartAndEndingForRightToLeft(p.Text);
                SubtitleListview1.SetText(index, p.Text);
                if (index == selectedIndex)
                {
                    textBoxListViewText.Text = p.Text;
                }
            }
        }

        private void MergeDialogs()
        {
            if (SubtitleListview1.SelectedItems.Count == 2 && SubtitleListview1.SelectedIndices[0] + 1 == SubtitleListview1.SelectedIndices[1])
            {
                MergeWithLineAfter(true);
            }
        }

        private void ToggleDashes()
        {
            var index = FirstSelectedIndex;
            if (index >= 0)
            {
                var hasStartDash = false;
                var p = _subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                foreach (var line in lines)
                {
                    var trimmed = HtmlUtil.RemoveHtmlTags(line, true).TrimStart();
                    if (trimmed.StartsWith('-'))
                    {
                        hasStartDash = true;
                        break;
                    }
                }

                if (!hasStartDash && _subtitleAlternate != null && textBoxListViewTextAlternate.Visible)
                {
                    var original = Utilities.GetOriginalParagraph(index, p, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        lines = original.Text.SplitToLines();
                        foreach (var line in lines)
                        {
                            var trimmed = HtmlUtil.RemoveHtmlTags(line, true).TrimStart();
                            if (trimmed.StartsWith('-'))
                            {
                                hasStartDash = true;
                                break;
                            }
                        }
                    }
                }

                MakeHistoryForUndo(_language.BeforeToggleDialogDashes);
                if (hasStartDash)
                {
                    RemoveDashes();
                }
                else
                {
                    AddDashes();
                }
            }
        }

        private void ToggleDashesTextBox(TextBox tb)
        {
            var hasStartDash = false;
            var lines = tb.Text.TrimEnd().SplitToLines();
            foreach (var line in lines)
            {
                var trimmed = HtmlUtil.RemoveHtmlTags(line, true).TrimStart();
                if (trimmed.StartsWith('-'))
                {
                    hasStartDash = true;
                    break;
                }
            }

            MakeHistoryForUndo(_language.BeforeToggleDialogDashes);
            var sb = new StringBuilder();
            if (hasStartDash)
            {
                // remove dashes
                foreach (var line in lines)
                {
                    var pre = string.Empty;
                    var s = SplitStartTags(line, ref pre);
                    sb.AppendLine(pre + s.TrimStart('-').TrimStart());
                }

                tb.Text = sb.ToString().Trim();
            }
            else
            {
                // add dashes
                if (CouldBeDialog(lines))
                {
                    foreach (var line in lines)
                    {
                        var pre = string.Empty;
                        var s = SplitStartTags(line, ref pre);
                        sb.AppendLine(pre + "- " + s);
                    }
                }
                else
                {
                    sb.Append(tb.Text);
                }

                var text = sb.ToString().Trim();
                var dialogHelper = new DialogSplitMerge { DialogStyle = Configuration.Settings.General.DialogStyle, SkipLineEndingCheck = true };
                text = dialogHelper.FixDashesAndSpaces(text);
                tb.Text = text;
            }
        }

        private void AddDashes()
        {
            var dialogHelper = new DialogSplitMerge { DialogStyle = Configuration.Settings.General.DialogStyle, SkipLineEndingCheck = true };
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                var sb = new StringBuilder();
                if (CouldBeDialog(lines))
                {
                    foreach (var line in lines)
                    {
                        var pre = string.Empty;
                        var s = SplitStartTags(line, ref pre);
                        sb.AppendLine(pre + "- " + s);
                    }
                }
                else
                {
                    sb.Append(p.Text);
                }

                var text = sb.ToString().Trim();
                text = dialogHelper.FixDashesAndSpaces(text);
                _subtitle.Paragraphs[index].Text = text;
                SubtitleListview1.SetText(index, text);
                if (index == _subtitleListViewIndex)
                {
                    textBoxListViewText.Text = text;
                }

                if (_subtitleAlternate != null && textBoxListViewTextAlternate.Visible)
                {
                    var original = Utilities.GetOriginalParagraph(index, p, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        lines = original.Text.SplitToLines();
                        sb = new StringBuilder();
                        if (CouldBeDialog(lines))
                        {
                            foreach (var line in lines)
                            {
                                var pre = string.Empty;
                                var s = SplitStartTags(line, ref pre);
                                if (!line.StartsWith("-"))
                                {
                                    sb.AppendLine(pre + "- " + s);
                                }
                                else
                                {
                                    sb.AppendLine(pre + s);
                                }
                            }
                        }
                        else
                        {
                            sb.Append(original.Text);
                        }

                        text = sb.ToString().Trim();
                        text = dialogHelper.FixDashesAndSpaces(text);
                        _subtitleAlternate.Paragraphs[index].Text = text;
                        SubtitleListview1.SetAlternateText(index, text);
                        if (index == _subtitleListViewIndex)
                        {
                            textBoxListViewTextAlternate.Text = text;
                        }
                    }
                }
            }
        }

        private static bool CouldBeDialog(List<string> lines)
        {
            return lines.Count >= 2 && lines.Count <= 3;
        }

        private void RemoveDashes()
        {
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                var sb = new StringBuilder();
                foreach (var line in lines)
                {
                    var pre = string.Empty;
                    var s = SplitStartTags(line, ref pre);
                    sb.AppendLine(pre + s.TrimStart('-').TrimStart());
                }

                string text = sb.ToString().Trim();
                _subtitle.Paragraphs[index].Text = text;
                SubtitleListview1.SetText(index, text);
                if (index == _subtitleListViewIndex)
                {
                    textBoxListViewText.Text = text;
                }

                if (_subtitleAlternate != null && textBoxListViewTextAlternate.Visible)
                {
                    var original = Utilities.GetOriginalParagraph(index, p, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        lines = original.Text.SplitToLines();
                        sb = new StringBuilder();
                        foreach (var line in lines)
                        {
                            var pre = string.Empty;
                            var s = SplitStartTags(line, ref pre);
                            sb.AppendLine(pre + s.TrimStart('-').TrimStart());
                        }

                        text = sb.ToString().Trim();
                        _subtitleAlternate.Paragraphs[index].Text = text;
                        SubtitleListview1.SetAlternateText(index, text);
                        if (index == _subtitleListViewIndex)
                        {
                            textBoxListViewTextAlternate.Text = text;
                        }
                    }
                }
            }
        }

        private static string SplitStartTags(string line, ref string pre)
        {
            var s = line;
            if (s.StartsWith("{\\", StringComparison.Ordinal) && s.IndexOf('}') > 0)
            {
                pre = s.Substring(0, s.IndexOf('}') + 1);
                s = s.Remove(0, pre.Length);
            }

            bool updated = true;
            while (updated)
            {
                updated = false;
                if (s.StartsWith(' '))
                {
                    pre += ' ';
                    s = s.Remove(0, 1);
                    updated = true;
                }
                else if (s.StartsWith("<i>", StringComparison.OrdinalIgnoreCase) ||
                         s.StartsWith("<b>", StringComparison.OrdinalIgnoreCase) ||
                         s.StartsWith("<u>", StringComparison.OrdinalIgnoreCase))
                {
                    pre += s.Substring(0, 3);
                    s = s.Remove(0, 3);
                    updated = true;
                }
                else if (s.StartsWith("<font", StringComparison.OrdinalIgnoreCase))
                {
                    int endFont = s.IndexOf('>');
                    if (endFont > 0)
                    {
                        pre += s.Substring(0, endFont + 1);
                        s = s.Remove(0, endFont + 1);
                        updated = true;
                    }
                }
            }

            return s;
        }

        private void SetTitle()
        {
            var text = "Untitled";
            string separator = " + ";
            if (!string.IsNullOrEmpty(_fileName))
            {
                text = _fileName;
            }

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                text += separator;
                if (string.IsNullOrEmpty(_fileName))
                {
                    text = text + _language.New + " + ";
                }

                if (!string.IsNullOrEmpty(_subtitleAlternateFileName))
                {
                    text += _subtitleAlternateFileName;
                }
                else
                {
                    text += _language.New;
                }
            }

            Text = text + " - " + Title;
        }

        private void SubtitleListview1KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.C && e.Modifiers == Keys.Control) //Ctrl+c = Copy to clipboard
            {
                var tmp = new Subtitle();
                foreach (int i in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        tmp.Paragraphs.Add(new Paragraph(p));
                    }
                }

                if (tmp.Paragraphs.Count > 0)
                {
                    if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
                    {
                        tmp.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(Configuration.Settings.General.CurrentVideoOffsetInMs));
                    }

                    Clipboard.SetText(tmp.ToText(new SubRip()).TrimEnd());
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewCopyText)
            {
                var sb = new StringBuilder();
                foreach (int i in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        sb.AppendLine(p.Text + Environment.NewLine);
                    }
                }

                if (sb.ToString().TrimEnd().Length > 0)
                {
                    Clipboard.SetText(sb.ToString().TrimEnd());
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAutoDuration)
            {
                MakeAutoDurationSelectedLines();
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN1)
            {
                SetAlignment("{\\an1}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN2)
            {
                SetAlignment("", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN3)
            {
                SetAlignment("{\\an3}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN4)
            {
                SetAlignment("{\\an4}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN5)
            {
                SetAlignment("{\\an5}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN6)
            {
                SetAlignment("{\\an6}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN7)
            {
                SetAlignment("{\\an7}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN8)
            {
                SetAlignment("{\\an8}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewAlignmentN9)
            {
                SetAlignment("{\\an9}", true);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewFocusWaveform)
            {
                if (audioVisualizer.CanFocus)
                {
                    audioVisualizer.Focus();
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.KeyData == _shortcuts.MainListViewGoToNextError)
            {
                GoToNextSyntaxError();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainListViewRemoveTimeCodes)
            {
                RemoveTimeCodesFromSelectedLines();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.V && e.Modifiers == Keys.Control) //Ctrl+V = Paste from clipboard
            {
                if (Clipboard.ContainsText())
                {
                    var text = Clipboard.GetText();
                    var tmp = new Subtitle();
                    var format = new SubRip();
                    var list = new List<string>(text.SplitToLines());
                    format.LoadSubtitle(tmp, list, null);
                    if (SubtitleListview1.SelectedItems.Count == 1 && tmp.Paragraphs.Count > 0)
                    {
                        MakeHistoryForUndo(_language.BeforeInsertLine);
                        int firstIndex = FirstSelectedIndex;
                        var lastParagraph = _subtitle.Paragraphs[firstIndex];
                        double addMs = 0;
                        if (lastParagraph.EndTime.TotalMilliseconds > tmp.Paragraphs[0].StartTime.TotalMilliseconds)
                        { // add time to pasted subtitles to prevent overlap, but only if necessary
                            addMs = lastParagraph.EndTime.TotalMilliseconds - tmp.Paragraphs[0].StartTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                        }
                        else if (firstIndex <= _subtitle.Paragraphs.Count - 2 && _subtitle.Paragraphs[firstIndex + 1].StartTime.TotalMilliseconds < tmp.Paragraphs[0].StartTime.TotalMilliseconds)
                        { // inserting between two subtitle... with overlapping codes
                            addMs = lastParagraph.EndTime.TotalMilliseconds - tmp.Paragraphs[0].StartTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                        }

                        var selectIndices = new List<int>();
                        for (int i = 0; i < tmp.Paragraphs.Count; i++)
                        {
                            var p = tmp.Paragraphs[i];
                            p.StartTime.TotalMilliseconds += addMs;
                            p.EndTime.TotalMilliseconds += addMs;
                            _subtitle.Paragraphs.Insert(firstIndex + i + 1, p);
                            selectIndices.Insert(0, firstIndex + i + 1);
                            if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                            {
                                var original = Utilities.GetOriginalParagraph(firstIndex + i + 1, p, _subtitleAlternate.Paragraphs);
                                if (original == null)
                                {
                                    _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds));
                                }
                            }
                        }

                        _subtitle.Renumber();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        SubtitleListview1.BeginUpdate();
                        foreach (var selectIndex in selectIndices)
                        {
                            SubtitleListview1.Items[selectIndex].Selected = true;
                        }

                        SubtitleListview1.EndUpdate();
                        SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex + 1, true);
                    }
                    else if (SubtitleListview1.Items.Count == 0 && tmp.Paragraphs.Count > 0)
                    { // insert into empty subtitle
                        MakeHistoryForUndo(_language.BeforeInsertLine);
                        foreach (var p in tmp.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(p);
                            if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                            {
                                var original = Utilities.GetOriginalParagraph(_subtitle.Paragraphs.Count - 1, p, _subtitleAlternate.Paragraphs);
                                if (original == null)
                                {
                                    _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds));
                                }
                            }
                        }

                        _subtitle.Renumber();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }
                    else if (SubtitleListview1.Items.Count > 1 && tmp.Paragraphs.Count > 0)
                    {
                        // multiple lines selected - first delete, then insert
                        int firstIndex = FirstSelectedIndex;
                        if (firstIndex >= 0)
                        {
                            var idx = firstIndex;
                            MakeHistoryForUndo(_language.BeforeInsertLine);
                            _makeHistoryPaused = true;

                            DeleteSelectedLines();
                            _subtitleListViewIndex = -1;
                            var selectedIndices = new List<int>();
                            foreach (var p in tmp.Paragraphs)
                            {
                                _subtitle.Paragraphs.Insert(idx, p);
                                selectedIndices.Add(idx);
                                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                                {
                                    var original = Utilities.GetOriginalParagraph(idx, p, _subtitleAlternate.Paragraphs);
                                    if (original == null)
                                    {
                                        _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds));
                                    }
                                }

                                idx++;
                            }

                            _subtitle.Renumber();
                            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                            SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                            foreach (var selectedIndex in selectedIndices)
                            {
                                SubtitleListview1.Items[selectedIndex].Selected = true;
                            }
                            RestartHistory();
                        }
                    }
                    else if (SubtitleListview1.Items.Count > 0 && list.Count >= 1 && list.Count < 4 && !text.Trim().Contains(Environment.NewLine + Environment.NewLine))
                    {
                        // less than 4 lines of text, just insert into first selected
                        textBoxListViewText.Text = text.Trim();
                    }
                    else if (list.Count >= 1 && list.Count < 2000)
                    {
                        MakeHistoryForUndo(_language.BeforeInsertLine);
                        _makeHistoryPaused = true;
                        SubtitleListview1.BeginUpdate();
                        foreach (var line in list)
                        {
                            if (!string.IsNullOrWhiteSpace(line))
                            {
                                var s = line.Trim().Length > Configuration.Settings.General.SubtitleLineMaximumLength ? Utilities.AutoBreakLine(line) : line.Trim();
                                InsertAfter(s);
                            }
                        }
                        SubtitleListview1.EndUpdate();
                        RestartHistory();
                    }

                    if (_subtitleListViewIndex >= 0)
                    {
                        UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[_subtitleListViewIndex], textBoxListViewText);
                    }
                    else
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(0);
                    }
                }
                else if (Clipboard.ContainsFileDropList())
                {
                    var fileDropList = Clipboard.GetFileDropList();
                    if (fileDropList.Count == 1)
                    {
                        ShowStatus(Configuration.Settings.Language.General.PleaseWait, false);
                        OpenSubtitle(fileDropList[0], null);
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.X && e.Modifiers == Keys.Control) //Ctrl+X = Cut to clipboard
            {
                var tmp = new Subtitle();
                foreach (int i in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        tmp.Paragraphs.Add(new Paragraph(p));
                    }
                }

                e.SuppressKeyPress = true;
                _cutText = tmp.ToText(new SubRip());
                ToolStripMenuItemDeleteClick(null, null);
            }
            else if (e.KeyCode == Keys.A && e.Modifiers == Keys.Control)
            {
                SubtitleListview1.SelectAll();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.D && e.Modifiers == Keys.Control)
            {
                SubtitleListview1.SelectFirstSelectedItemOnly();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.Delete && SubtitleListview1.SelectedItems.Count > 0) //Delete
            {
                ToolStripMenuItemDeleteClick(null, null);
            }
            else if (e.KeyData == _shortcuts.MainInsertBefore)
            {
                InsertBefore();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainInsertAfter)
            {
                InsertAfter(string.Empty);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Control && e.KeyCode == Keys.Home)
            {
                SubtitleListview1.FirstVisibleIndex = -1;
                SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Control && e.KeyCode == Keys.End)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(SubtitleListview1.Items.Count - 1, true);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.Enter)
            {
                SubtitleListview1_MouseDoubleClick(null, null);
            }
        }

        private void RemoveTimeCodesFromSelectedLines()
        {
            MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Settings.RemoveTimeCodes));

            var indices = new List<int>();
            foreach (ListViewItem item in SubtitleListview1.SelectedItems)
            {
                indices.Add(item.Index);
            }
            foreach (int i in indices)
            {
                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                {
                    var original = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                        original.EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                    }
                }
                _subtitle.Paragraphs[i].StartTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
                _subtitle.Paragraphs[i].EndTime.TotalMilliseconds = TimeCode.MaxTimeTotalMilliseconds;
            }

            SaveSubtitleListviewIndices();
            _subtitleListViewIndex = -1;
            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            ShowSource();
            RestoreSubtitleListviewIndices();
        }

        private void SetAlignment(string tag, bool selectedLines)
        {
            if (selectedLines)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, tag));

                var indices = new List<int>();
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    indices.Add(item.Index);
                }

                bool first = true;
                SubtitleListview1.BeginUpdate();
                foreach (int i in indices)
                {
                    if (first)
                    {
                        if (_subtitle.Paragraphs[i].Text.StartsWith(tag, StringComparison.Ordinal))
                        {
                            tag = string.Empty;
                        }

                        if (_subtitle.Paragraphs[i].Text.StartsWith(tag.Replace("}", "\\"), StringComparison.Ordinal))
                        {
                            tag = string.Empty;
                        }

                        first = false;
                    }

                    if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                    {
                        var original = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            original.Text = SetAlignTag(original.Text, tag);
                            SubtitleListview1.SetAlternateText(i, original.Text);
                        }
                    }

                    _subtitle.Paragraphs[i].Text = SetAlignTag(_subtitle.Paragraphs[i].Text, tag);
                    SubtitleListview1.SetText(i, _subtitle.Paragraphs[i].Text);
                }

                SubtitleListview1.EndUpdate();

                ShowStatus(string.Format(_language.TagXAdded, tag));
                ShowSource();
                RefreshSelectedParagraph();
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            }
            else
            {
                var tb = GetFocusedTextBox();
                var pos = tb.SelectionStart;
                int oldLength = tb.Text.Length;
                bool atEnd = pos == oldLength;
                tb.Text = SetAlignTag(tb.Text, tag);
                if (atEnd)
                {
                    tb.SelectionStart = tb.Text.Length;
                }
                else if (pos == 0)
                {
                    tb.SelectionStart = 0;
                }
                else if (oldLength == tb.Text.Length)
                {
                    tb.SelectionStart = pos;
                }
                else if (pos + 5 <= tb.Text.Length)
                {
                    tb.SelectionStart = pos + 5;
                }
            }
        }

        private void GoToNextSyntaxError()
        {
            int idx = FirstSelectedIndex + 1;
            try
            {
                for (int i = idx; i < _subtitle.Paragraphs.Count; i++)
                {
                    var item = SubtitleListview1.Items[i];
                    if (item.SubItems[SubtitleListview1.ColumnIndexDuration].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor ||
                        item.SubItems[SubtitleListview1.ColumnIndexText].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor ||
                        item.SubItems[SubtitleListview1.ColumnIndexStart].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor ||
                        (SubtitleListview1.ColumnIndexCps >= 0 && item.SubItems[SubtitleListview1.ColumnIndexCps].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor) ||
                        (SubtitleListview1.ColumnIndexWpm >= 0 && item.SubItems[SubtitleListview1.ColumnIndexWpm].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor) ||
                        (SubtitleListview1.ColumnIndexGap >= 0 && item.SubItems[SubtitleListview1.ColumnIndexGap].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor))
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(i, true);
                        if (mediaPlayer.VideoPlayer != null)
                        {
                            mediaPlayer.VideoPlayer.CurrentPosition = _subtitle.Paragraphs[i].StartTime.TotalSeconds;
                        }

                        return;
                    }
                }
            }
            catch
            {
            }
        }

        private void RestartHistory()
        {
            _listViewTextUndoLast = null;
            _listViewTextUndoIndex = -1;
            _listViewTextTicks = -1;
            _listViewAlternateTextUndoLast = null;
            _listViewAlternateTextTicks = -1;
            _undoIndex = _subtitle.HistoryItems.Count - 1;
            _makeHistoryPaused = false;
        }

        private void AdjustDisplayTimeForSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            AdjustDisplayTime(true);
        }

        private void FixCommonErrorsInSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            FixCommonErrors(true);
        }

        private void FindDoubleWordsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            var regex = new Regex(@"\b(\w+)\s+\1\b");
            _clearLastFind = true;
            if (_findHelper != null)
            {
                _clearLastFindType = _findHelper.FindReplaceType.FindType;
                _clearLastFindText = _findHelper.FindText;
            }

            _findHelper = new FindReplaceDialogHelper(new ReplaceType { FindType = FindType.RegEx }, string.Format(_language.DoubleWordsViaRegEx, regex), regex, string.Empty, _subtitleListViewIndex);

            ReloadFromSourceView();
            FindNext();
        }

        private void ChangeCasingForSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            ChangeCasing(true);
        }

        private void CenterFormOnCurrentScreen()
        {
            var screen = Screen.FromControl(this);
            Left = screen.Bounds.X + ((screen.Bounds.Width - Width) / 2);
            Top = screen.Bounds.Y + ((screen.Bounds.Height - Height) / 2);
        }

        private void SortSubtitle(SubtitleSortCriteria subtitleSortCriteria, string description)
        {
            Paragraph firstSelectedParagraph = null;
            var firstSelectedIndex = 0;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                firstSelectedParagraph = _subtitle.Paragraphs[firstSelectedIndex];
            }

            _subtitleListViewIndex = -1;
            MakeHistoryForUndo(string.Format(_language.BeforeSortX, description));
            _subtitle.Sort(subtitleSortCriteria);
            if (descendingToolStripMenuItem.Checked)
            {
                _subtitle.Paragraphs.Reverse();
            }

            ShowSource();
            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            ShowStatus(string.Format(_language.SortedByX, description));
        }

        private void SortNumberToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Number, (sender as ToolStripItem).Text);
        }

        private void SortStartTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.StartTime, (sender as ToolStripItem).Text);
        }

        private void SortEndTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.EndTime, (sender as ToolStripItem).Text);
        }

        private void SortDisplayTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Duration, (sender as ToolStripItem).Text);
        }

        private void SortTextMaxLineLengthToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.TextMaxLineLength, (sender as ToolStripItem).Text);
        }

        private void SortTextTotalLengthToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.TextTotalLength, (sender as ToolStripItem).Text);
        }

        private void SortTextNumberOfLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.TextNumberOfLines, (sender as ToolStripItem).Text);
        }

        private void SortTextAlphabeticallytoolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Text, (sender as ToolStripItem).Text);
        }

        private void textCharssecToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.TextCharactersPerSeconds, (sender as ToolStripItem).Text);
        }

        private void ChangeLanguageToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var cl = new ChooseLanguage())
            {
                if (cl.ShowDialog(this) == DialogResult.OK)
                {
                    SetLanguage(cl.CultureName);
                    Configuration.Settings.Save();
                }
            }
        }

        private void SetLanguage(string cultureName)
        {
            if (string.IsNullOrEmpty(cultureName))
            {
                cultureName = "en-US";
            }

            if (cultureName != "en-US")
            {
                try
                {
                    Configuration.Settings.Language = Language.Load(Path.Combine(Configuration.BaseDirectory, "Languages", cultureName + ".xml"));
                }
                catch (Exception ex)
                {
                    var cap = "Language file load error";
                    var msg = "Could not load language file " + cultureName + ".xml" +
                              "\n\nError Message:\n" + ex.Message +
                              "\n\nStack Trace:\n" + ex.StackTrace;
                    MessageBox.Show(this, msg, cap);
                    cultureName = "en-US";
                }
            }

            if (cultureName == "en-US")
            {
                Configuration.Settings.Language = new Language(); // default is en-US
            }

            Configuration.Settings.General.Language = cultureName;
            _languageGeneral = Configuration.Settings.Language.General;
            _language = Configuration.Settings.Language.Main;
            InitializeLanguage();
        }

        private void ToolStripMenuItemCompareClick(object sender, EventArgs e)
        {
            var compareForm = new Compare();
            if (_subtitleAlternate != null && _subtitleAlternateFileName != null && SubtitleListview1.IsAlternateTextColumnVisible)
            {
                compareForm.Initialize(_subtitle, _fileName, _subtitleAlternate, _subtitleAlternateFileName);
            }
            else
            {
                compareForm.Initialize(_subtitle, _fileName, _languageGeneral.CurrentSubtitle);
            }

            compareForm.Show(this);
            compareForm.Activate();
        }

        private void ToolStripMenuItemAutoBreakLinesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var autoBreakUnbreakLines = new AutoBreakUnbreakLines())
            {
                var selectedLines = new Subtitle();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                }

                autoBreakUnbreakLines.Initialize(selectedLines, true);

                if (autoBreakUnbreakLines.ShowDialog() == DialogResult.OK && autoBreakUnbreakLines.FixedText.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeAutoBalanceSelectedLines);
                    SubtitleListview1.BeginUpdate();
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        var p = _subtitle.GetParagraphOrDefault(index);
                        if (autoBreakUnbreakLines.FixedText.ContainsKey(p.Id))
                        {
                            p.Text = autoBreakUnbreakLines.FixedText[p.Id];
                            SubtitleListview1.SetText(index, p.Text);
                            SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                        }
                    }

                    SubtitleListview1.EndUpdate();
                    RefreshSelectedParagraph();
                    ShowStatus(string.Format(_language.NumberOfLinesAutoBalancedX, autoBreakUnbreakLines.FixedText.Count));
                }
            }
        }

        private void ToolStripMenuItemUnbreakLinesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var autoBreakUnbreakLines = new AutoBreakUnbreakLines())
            {
                var selectedLines = new Subtitle();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                }

                autoBreakUnbreakLines.Initialize(selectedLines, false);

                if (autoBreakUnbreakLines.ShowDialog() == DialogResult.OK && autoBreakUnbreakLines.FixedText.Count > 0)
                {
                    MakeHistoryForUndo(_language.BeforeRemoveLineBreaksInSelectedLines);

                    SubtitleListview1.BeginUpdate();
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        var p = _subtitle.GetParagraphOrDefault(index);
                        if (autoBreakUnbreakLines.FixedText.ContainsKey(p.Id))
                        {
                            p.Text = autoBreakUnbreakLines.FixedText[p.Id];
                            SubtitleListview1.SetText(index, p.Text);
                            SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                        }
                    }

                    SubtitleListview1.EndUpdate();
                    RefreshSelectedParagraph();
                    ShowStatus(string.Format(_language.NumberOfWithRemovedLineBreakX, autoBreakUnbreakLines.FixedText.Count));
                }
            }
        }

        private void MultipleReplaceToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var multipleReplace = new MultipleReplace())
            {
                multipleReplace.Initialize(_subtitle);
                if (multipleReplace.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeMultipleReplace);
                    SaveSubtitleListviewIndices();

                    for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
                    {
                        _subtitle.Paragraphs[i].Text = multipleReplace.FixedSubtitle.Paragraphs[i].Text;
                    }

                    _subtitle.RemoveParagraphsByIndices(multipleReplace.DeleteIndices);
                    _subtitle.Renumber();

                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                    RefreshSelectedParagraph();
                    ShowSource();
                    ShowStatus(string.Format(_language.NumberOfLinesReplacedX, multipleReplace.FixCount));
                }
            }
        }

        private void ToolStripMenuItemImportDvdSubtitlesClick(object sender, EventArgs e)
        {
            if (!ContinueNewOrExit())
            {
                return;
            }

            ImportDvdSubtitle(null);
        }

        private void ImportDvdSubtitle(string fileName)
        {
            using (var formSubRip = new DvdSubRip(Handle, fileName))
            {
                if (formSubRip.ShowDialog(this) == DialogResult.OK)
                {
                    using (var showSubtitles = new DvdSubRipChooseLanguage())
                    {
                        showSubtitles.Initialize(formSubRip.MergedVobSubPacks, formSubRip.Palette, formSubRip.Languages, formSubRip.SelectedLanguage);
                        if (formSubRip.Languages.Count == 1 || showSubtitles.ShowDialog(this) == DialogResult.OK)
                        {
                            using (var formSubOcr = new VobSubOcr())
                            {
                                var subs = formSubRip.MergedVobSubPacks;
                                if (showSubtitles.SelectedVobSubMergedPacks != null)
                                {
                                    subs = showSubtitles.SelectedVobSubMergedPacks;
                                }

                                formSubOcr.Initialize(subs, formSubRip.Palette, Configuration.Settings.VobSubOcr, formSubRip.SelectedLanguage);
                                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                                {
                                    MakeHistoryForUndo(_language.BeforeImportingDvdSubtitle);
                                    FileNew();
                                    _subtitle.Paragraphs.Clear();
                                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                                    {
                                        _subtitle.Paragraphs.Add(p);
                                    }

                                    ShowSource();
                                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                                    _subtitleListViewIndex = -1;
                                    SubtitleListview1.FirstVisibleIndex = -1;
                                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                                    _fileName = string.Empty;
                                    SetTitle();

                                    Configuration.Settings.Save();
                                }
                            }
                        }
                    }
                }
            }
        }

        private void ToolStripMenuItemSubIdxClick1(object sender, EventArgs e)
        {
            if (ContinueNewOrExit())
            {
                openFileDialog1.Title = _language.OpenVobSubFile;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = _language.VobSubFiles + "|*.sub";
                if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    ImportAndOcrVobSubSubtitleNew(openFileDialog1.FileName, false);
                    openFileDialog1.InitialDirectory = Path.GetDirectoryName(openFileDialog1.FileName);
                }
            }
        }

        private void SubtitleListview1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (Configuration.Settings.General.ListViewDoubleClickAction == 1)
            {
                GotoSubPositionAndPause();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 2)
            {
                if (AutoRepeatContinueOn || AutoRepeatOn)
                {
                    PlayCurrent();
                }
                else
                {
                    buttonBeforeText_Click(null, null);
                }
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 3)
            {
                GotoSubPositionAndPause(-0.5);
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 4)
            {
                GotoSubPositionAndPause(-1.0);
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 5)
            {
                if (AutoRepeatContinueOn || AutoRepeatOn)
                {
                    PlayCurrent();
                }
                else
                {
                    if (SubtitleListview1.SelectedItems.Count > 0)
                    {
                        int index = SubtitleListview1.SelectedItems[0].Index;

                        mediaPlayer.Pause();
                        double pos = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                        if (pos > 1)
                        {
                            mediaPlayer.CurrentPosition = (_subtitle.Paragraphs[index].StartTime.TotalSeconds) - 1.0;
                        }
                        else
                        {
                            mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                        }

                        mediaPlayer.Play();
                    }
                }
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 6)
            {
                GotoSubPositionAndPause();
                textBoxListViewText.Focus();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 7)
            {
                textBoxListViewText.Focus();
            }
        }

        private void AddWordToNameListToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var addToNamesList = new AddToNameList())
            {
                addToNamesList.Initialize(_subtitle, textBoxListViewText.SelectedText);
                if (addToNamesList.ShowDialog(this) == DialogResult.OK)
                {
                    ShowStatus(string.Format(_language.NameXAddedToNameList, addToNamesList.NewName));
                }
                else if (!string.IsNullOrEmpty(addToNamesList.NewName))
                {
                    ShowStatus(string.Format(_language.NameXNotAddedToNameList, addToNamesList.NewName));
                }
            }
        }

        private bool IsUnicode
        {
            get
            {
                var enc = GetCurrentEncoding();
                return enc == Encoding.UTF8 || enc == Encoding.Unicode || enc == Encoding.UTF7 || enc == Encoding.UTF32 || enc == Encoding.BigEndianUnicode;
            }
        }

        private void EditToolStripMenuItemDropDownOpening(object sender, EventArgs e)
        {
            toolStripMenuItemRtlUnicodeControlChars.Visible = IsUnicode;
            if (!IsUnicode || _subtitleListViewIndex == -1)
            {
                toolStripMenuItemInsertUnicodeCharacter.Visible = false;
                toolStripSeparatorInsertUnicodeCharacter.Visible = false;
            }
            else
            {
                if (toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count == 0)
                {
                    foreach (var s in Configuration.Settings.Tools.UnicodeSymbolsToInsert.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Add(s, null, InsertUnicodeGlyphAllowMultiLine);
                        if (Environment.OSVersion.Version.Major < 6 && Configuration.Settings.General.SubtitleFontName == Utilities.WinXP2KUnicodeFontName) // 6 == Vista/Win2008Server/Win7
                        {
                            toolStripMenuItemInsertUnicodeCharacter.DropDownItems[toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count - 1].Font = new Font(Utilities.WinXP2KUnicodeFontName, toolStripMenuItemInsertUnicodeSymbol.Font.Size);
                        }
                    }
                }

                toolStripMenuItemInsertUnicodeCharacter.Visible = toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count > 0;
                toolStripSeparatorInsertUnicodeCharacter.Visible = toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count > 0;
            }

            lock (_syncUndo)
            {
                toolStripMenuItemUndo.Enabled = _subtitle != null && _subtitle.CanUndo && _undoIndex >= 0;
                toolStripMenuItemRedo.Enabled = _subtitle != null && _subtitle.CanUndo && _undoIndex < _subtitle.HistoryItems.Count - 1;
            }

            showHistoryforUndoToolStripMenuItem.Enabled = _subtitle != null && _subtitle.CanUndo;
            toolStripMenuItemShowOriginalInPreview.Visible = SubtitleListview1.IsAlternateTextColumnVisible;

            if (_networkSession != null)
            {
                toolStripMenuItemUndo.Enabled = false;
                toolStripMenuItemRedo.Enabled = false;
                showHistoryforUndoToolStripMenuItem.Enabled = false;
            }
        }

        private void InsertUnicodeGlyph(object sender, EventArgs e)
        {
            var item = sender as ToolStripItem;
            if (item != null)
            {
                PasteIntoActiveTextBox(item.Text);
            }
        }

        private void InsertUnicodeGlyphAllowMultiLine(object sender, EventArgs e)
        {
            var item = sender as ToolStripItem;
            if (item != null)
            {
                PasteIntoActiveTextBox(item.Text, true);
            }
        }

        private void ToolStripMenuItemAutoMergeShortLinesClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var formMergeShortLines = new MergeShortLines())
            {
                formMergeShortLines.Initialize(_subtitle);
                if (formMergeShortLines.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeMergeShortLines);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in formMergeShortLines.MergedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.MergedShortLinesX, formMergeShortLines.NumberOfMerges));
                    SaveSubtitleListviewIndices();
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void toolStripMenuItemAutoSplitLongLines_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var splitLongLines = new SplitLongLines())
            {
                splitLongLines.Initialize(_subtitle);
                if (splitLongLines.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeSplitLongLines);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in splitLongLines.SplitSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.LongLinesSplitX, splitLongLines.NumberOfSplits));
                    SaveSubtitleListviewIndices();
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void SetMinimalDisplayTimeDifferenceToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var setMinDisplayDiff = new SetMinimumDisplayTimeBetweenParagraphs())
            {
                setMinDisplayDiff.Initialize(_subtitle);
                if (setMinDisplayDiff.ShowDialog() == DialogResult.OK && setMinDisplayDiff.FixCount > 0)
                {
                    MakeHistoryForUndo(_language.BeforeSetMinimumDisplayTimeBetweenParagraphs);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in setMinDisplayDiff.FixedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.XMinimumDisplayTimeBetweenParagraphsChanged, setMinDisplayDiff.FixCount));
                    SaveSubtitleListviewIndices();
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void ToolStripMenuItemImportTextClick(object sender, EventArgs e)
        {
            ImportPlainText(null);
        }

        private void ImportPlainText(string fileName)
        {
            using (var importText = new ImportText(fileName, this))
            {
                if (importText.ShowDialog(this) == DialogResult.OK)
                {
                    if (ContinueNewOrExit())
                    {
                        MakeHistoryForUndo(_language.BeforeImportText);

                        ResetSubtitle();
                        if (!string.IsNullOrEmpty(importText.VideoFileName))
                        {
                            if (!Configuration.Settings.General.DisableVideoAutoLoading)
                            {
                                OpenVideo(importText.VideoFileName);
                            }

                            _fileName = importText.VideoFileName;
                            _converted = true;
                            SetTitle();
                        }

                        _subtitleListViewIndex = -1;
                        if (importText.Format != null)
                        {
                            SetCurrentFormat(importText.Format);
                        }

                        _subtitle = new Subtitle(importText.FixedSubtitle.Paragraphs, _subtitle.HistoryItems);
                        ShowStatus(_language.TextImported);
                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }
                }
            }
        }

        private void toolStripMenuItemPointSync_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var pointSync = new SyncPointsSync())
            {
                pointSync.Initialize(_subtitle, _fileName, _videoFileName, _videoAudioTrackNumber);
                mediaPlayer.Pause();
                if (pointSync.ShowDialog(this) == DialogResult.OK)
                {
                    _subtitleListViewIndex = -1;
                    MakeHistoryForUndo(_language.BeforePointSynchronization);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in pointSync.FixedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }
                    ShowStatus(_language.PointSynchronizationDone);
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                }

                Activate();
                _videoFileName = pointSync.VideoFileName;
            }
        }

        private void pointSyncViaOtherSubtitleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var pointSync = new SyncPointsSync())
            {
                openFileDialog1.Title = _language.OpenOtherSubtitle;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
                if (openFileDialog1.ShowDialog() == DialogResult.OK && File.Exists(openFileDialog1.FileName))
                {
                    var file = new FileInfo(openFileDialog1.FileName);
                    var fileName = file.FullName;
                    var extension = file.Extension.ToLowerInvariant();

                    // TODO: Check for mkv etc
                    if (extension == ".sub")
                    {
                        if (IsVobSubFile(fileName, false))
                        {
                            MessageBox.Show(_language.NoSupportHereVobSub);
                            return;
                        }
                    }

                    if (extension == ".sup")
                    {
                        if (FileUtil.IsBluRaySup(fileName))
                        {
                            MessageBox.Show(_language.NoSupportHereBluRaySup);
                            return;
                        }
                        else if (FileUtil.IsSpDvdSup(fileName))
                        {
                            MessageBox.Show(_language.NoSupportHereDvdSup);
                            return;
                        }
                    }

                    var sub = new Subtitle();
                    if (extension == ".mkv" || extension == ".mks")
                    {
                        using (var matroska = new MatroskaFile(fileName))
                        {
                            if (matroska.IsValid)
                            {
                                var subtitleList = matroska.GetTracks(true);
                                if (subtitleList.Count > 1)
                                {
                                    using (var subtitleChooser = new MatroskaSubtitleChooser("mkv"))
                                    {
                                        subtitleChooser.Initialize(subtitleList);
                                        if (_loading)
                                        {
                                            subtitleChooser.Icon = (Icon)Icon.Clone();
                                            subtitleChooser.ShowInTaskbar = true;
                                            subtitleChooser.ShowIcon = true;
                                        }

                                        if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                        {
                                            sub = LoadMatroskaSubtitleForSync(subtitleList[subtitleChooser.SelectedIndex], matroska);
                                        }
                                    }
                                }
                                else if (subtitleList.Count > 0)
                                {
                                    sub = LoadMatroskaSubtitleForSync(subtitleList[0], matroska);
                                }
                                else
                                {
                                    MessageBox.Show(_language.NoSubtitlesFound);
                                    return;
                                }
                            }
                        }
                    }

                    if (extension == ".divx" || extension == ".avi")
                    {
                        MessageBox.Show(_language.NoSupportHereDivx);
                        return;
                    }

                    if ((extension == ".mp4" || extension == ".m4v" || extension == ".3gp") && file.Length > 10000)
                    {
                        var mp4Parser = new MP4Parser(fileName);
                        var mp4SubtitleTracks = mp4Parser.GetSubtitleTracks();
                        if (mp4SubtitleTracks.Count == 0)
                        {
                            MessageBox.Show(_language.NoSubtitlesFound);
                            return;
                        }
                        else if (mp4SubtitleTracks.Count == 1)
                        {
                            sub = LoadMp4SubtitleForSync(mp4SubtitleTracks[0]);
                        }
                        else
                        {
                            using (var subtitleChooser = new MatroskaSubtitleChooser("mp4"))
                            {
                                subtitleChooser.Initialize(mp4SubtitleTracks);
                                if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                {
                                    sub = LoadMp4SubtitleForSync(mp4SubtitleTracks[0]);
                                }
                            }
                        }
                    }

                    if (file.Length > 1024 * 1024 * 10 && sub.Paragraphs.Count == 0) // max 10 mb
                    {
                        var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, fileName);
                        if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                        {
                            return;
                        }
                    }

                    sub.Renumber();
                    if (sub.Paragraphs.Count == 0)
                    {
                        Encoding enc;
                        SubtitleFormat f = sub.LoadSubtitle(fileName, out enc, null);
                        if (f == null)
                        {
                            ShowUnknownSubtitle(fileName);
                            return;
                        }
                    }

                    pointSync.Initialize(_subtitle, _fileName, _videoFileName, _videoAudioTrackNumber, fileName, sub);
                    mediaPlayer.Pause();
                    if (pointSync.ShowDialog(this) == DialogResult.OK)
                    {
                        _subtitleListViewIndex = -1;
                        MakeHistoryForUndo(_language.BeforePointSynchronization);
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in pointSync.FixedSubtitle.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(p);
                        }
                        ShowStatus(_language.PointSynchronizationDone);
                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    }

                    _videoFileName = pointSync.VideoFileName;
                }
            }
        }

        private void toolStripMenuItemImportTimeCodes_Click(object sender, EventArgs e)
        {
            if (_subtitle.Paragraphs.Count < 1)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                Encoding encoding;
                var timeCodeSubtitle = new Subtitle();
                SubtitleFormat format = null;

                if (format == null &&
                    openFileDialog1.FileName.EndsWith(".sup", StringComparison.OrdinalIgnoreCase) &&
                    FileUtil.IsBluRaySup(openFileDialog1.FileName))
                {
                    var log = new StringBuilder();
                    var subtitles = BluRaySupParser.ParseBluRaySup(openFileDialog1.FileName, log);
                    if (subtitles.Count > 0)
                    {
                        foreach (var sup in subtitles)
                        {
                            timeCodeSubtitle.Paragraphs.Add(new Paragraph(sup.StartTimeCode, sup.EndTimeCode, string.Empty));
                        }

                        format = new SubRip(); // just to set format to something
                    }
                }

                if (format == null)
                {
                    format = timeCodeSubtitle.LoadSubtitle(openFileDialog1.FileName, out encoding, null);
                }

                if (format == null)
                {
                    var formats = SubtitleFormat.GetBinaryFormats(true).Union(SubtitleFormat.GetTextOtherFormats()).Union(new SubtitleFormat[]
                    {
                        new TimeCodesOnly1(),
                        new TimeCodesOnly2()
                    }).ToArray();
                    format = SubtitleFormat.LoadSubtitleFromFile(formats, openFileDialog1.FileName, timeCodeSubtitle);
                }

                if (format == null)
                {
                    ShowUnknownSubtitle(openFileDialog1.FileName);
                    return;
                }

                if (timeCodeSubtitle.Paragraphs.Count != _subtitle.Paragraphs.Count)
                {
                    var text = string.Format(_language.ImportTimeCodesDifferentNumberOfLinesWarning, timeCodeSubtitle.Paragraphs.Count, _subtitle.Paragraphs.Count);
                    if (MessageBox.Show(this, text, _title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                MakeHistoryForUndo(_language.BeforeTimeCodeImport);

                int count = 0;
                for (int i = 0; i < timeCodeSubtitle.Paragraphs.Count; i++)
                {
                    var existing = _subtitle.GetParagraphOrDefault(i);

                    var newTimeCode = timeCodeSubtitle.GetParagraphOrDefault(i);
                    if (existing == null || newTimeCode == null)
                    {
                        break;
                    }

                    Paragraph original = null;
                    if (existing != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle &&
                        _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0 && SubtitleListview1.IsAlternateTextColumnVisible)
                    {
                        original = Utilities.GetOriginalParagraph(i, existing, _subtitleAlternate.Paragraphs);
                    }

                    existing.StartTime.TotalMilliseconds = newTimeCode.StartTime.TotalMilliseconds;
                    existing.EndTime.TotalMilliseconds = newTimeCode.EndTime.TotalMilliseconds;

                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = newTimeCode.StartTime.TotalMilliseconds;
                        original.EndTime.TotalMilliseconds = newTimeCode.EndTime.TotalMilliseconds;
                    }

                    count++;
                }

                ShowStatus(string.Format(_language.TimeCodeImportedFromXY, Path.GetFileName(openFileDialog1.FileName), count));
                SaveSubtitleListviewIndices();
                ShowSource();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                RestoreSubtitleListviewIndices();
            }
        }

        private void toolStripMenuItemTranslationMode_Click(object sender, EventArgs e)
        {
            if (_subtitle == null || _subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            if (SubtitleListview1.IsAlternateTextColumnVisible)
            {
                RemoveAlternate(true, true);
            }
            else
            {
                OpenAlternateSubtitle();
                SetTitle();
            }
        }

        private void OpenAlternateSubtitle()
        {
            if (ContinueNewOrExitAlternate())
            {
                SaveSubtitleListviewIndices();
                openFileDialog1.Title = _languageGeneral.OpenOriginalSubtitleFile;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
                if (openFileDialog1.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                if (!LoadAlternateSubtitleFile(openFileDialog1.FileName))
                {
                    return;
                }

                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                RestoreSubtitleListviewIndices();

                Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                Configuration.Settings.Save();
                UpdateRecentFilesUI();
                MainResize();
                if (SubtitleListview1.SelectedIndices.Count == 0)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                }
                RefreshSelectedParagraph();
            }
        }

        private bool LoadAlternateSubtitleFile(string fileName)
        {
            if (!File.Exists(fileName))
            {
                return false;
            }

            var file = new FileInfo(fileName);

            if (file.Extension.Equals(".sub", StringComparison.OrdinalIgnoreCase) && IsVobSubFile(fileName, false))
            {
                return false;
            }

            if (file.Length > 1024 * 1024 * 10) // max 10 mb
            {
                var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, fileName);
                if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return false;
                }
            }

            Encoding encoding;
            _subtitleAlternate = new Subtitle();
            _subtitleAlternateFileName = fileName;
            SubtitleFormat format = _subtitleAlternate.LoadSubtitle(fileName, out encoding, null);

            if (format == null)
            {
                foreach (var binaryFormat in SubtitleFormat.GetBinaryFormats(false))
                {
                    if (binaryFormat.IsMine(null, fileName))
                    {
                        binaryFormat.LoadSubtitle(_subtitleAlternate, null, fileName);
                        format = binaryFormat;
                        break;
                    }
                }
            }

            if (format == null)
            {
                var lines = FileUtil.ReadAllTextShared(fileName, LanguageAutoDetect.GetEncodingFromFile(fileName)).SplitToLines();
                foreach (var f in SubtitleFormat.GetTextOtherFormats())
                {
                    if (f.IsMine(lines, fileName))
                    {
                        f.LoadSubtitle(_subtitleAlternate, lines, fileName);
                        format = f;
                        break;
                    }
                }
            }

            if (format == null)
            {
                return false;
            }

            SetupAlternateEdit();
            FixRightToLeftDependingOnLanguage();
            return true;
        }

        private void SetupAlternateEdit()
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate.Paragraphs.Count > 1)
            {
                InsertMissingParagraphs(_subtitle, _subtitleAlternate);
                InsertMissingParagraphs(_subtitleAlternate, _subtitle);

                buttonUnBreak.Visible = false;
                buttonAutoBreak.Visible = false;
                buttonSplitLine.Visible = false;

                textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                textBoxListViewText.Width = (groupBoxEdit.Width - (textBoxListViewText.Left + 10)) / 2;
                textBoxListViewTextAlternate.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                textBoxListViewTextAlternate.Left = textBoxListViewText.Left + textBoxListViewText.Width + 3;
                textBoxListViewTextAlternate.Width = textBoxListViewText.Width;
                textBoxListViewTextAlternate.Visible = true;
                labelAlternateText.Text = _languageGeneral.OriginalText;
                labelAlternateText.Visible = true;
                labelAlternateCharactersPerSecond.Visible = true;
                labelTextAlternateLineLengths.Visible = true;
                labelAlternateSingleLine.Visible = true;
                labelAlternateSingleLinePixels.Visible = true;
                labelTextAlternateLineTotal.Visible = true;

                labelCharactersPerSecond.Left = textBoxListViewText.Left + (textBoxListViewText.Width - labelCharactersPerSecond.Width);
                labelTextLineTotal.Left = textBoxListViewText.Left + (textBoxListViewText.Width - labelTextLineTotal.Width);
                Main_Resize(null, null);
                _changeAlternateSubtitleHash = _subtitleAlternate.GetFastHashCode(GetCurrentEncoding().BodyName);

                SetTitle();
            }

            SubtitleListview1.ShowAlternateTextColumn(_languageGeneral.OriginalText);
            SubtitleListview1.AutoSizeAllColumns(this);
        }

        private static void InsertMissingParagraphs(Subtitle masterSubtitle, Subtitle insertIntoSubtitle)
        {
            int index = 0;
            foreach (var p in masterSubtitle.Paragraphs)
            {
                var insertParagraph = Utilities.GetOriginalParagraph(index, p, insertIntoSubtitle.Paragraphs);
                if (insertParagraph == null)
                {
                    insertParagraph = new Paragraph(p);
                    insertParagraph.Text = string.Empty;
                    if (p.StartTime.IsMaxTime)
                    {
                        insertIntoSubtitle.Paragraphs.Add(new Paragraph(p, true) { Text = string.Empty });
                    }
                    else
                    {
                        insertIntoSubtitle.InsertParagraphInCorrectTimeOrder(insertParagraph);
                    }
                }

                index++;
            }

            insertIntoSubtitle.Renumber();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void OpenVideo(string fileName)
        {
            if (!_resetVideo)
            {
                return;
            }

            if (!string.IsNullOrEmpty(fileName) && File.Exists(fileName))
            {
                if (_loading)
                {
                    _videoFileName = fileName;
                    return;
                }

                var fi = new FileInfo(fileName);
                if (fi.Length < 1000)
                {
                    return;
                }

                ShowSubtitleTimer.Stop();
                Cursor = Cursors.WaitCursor;
                VideoFileName = fileName;
                if (mediaPlayer.VideoPlayer != null)
                {
                    mediaPlayer.PauseAndDisposePlayer();
                }

                _endSeconds = -1;

                _videoInfo = UiUtil.GetVideoInfo(fileName);
                if (_videoInfo.FramesPerSecond > 0)
                {
                    toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", _videoInfo.FramesPerSecond);
                }

                string oldVideoPlayer = Configuration.Settings.General.VideoPlayer;
                var ok = UiUtil.InitializeVideoPlayerAndContainer(fileName, _videoInfo, mediaPlayer, VideoLoaded, VideoEnded);
                if (!ok && oldVideoPlayer != Configuration.Settings.General.VideoPlayer)
                {
                    CloseVideoToolStripMenuItemClick(null, null);
                    _videoFileName = fileName;
                    _videoInfo = UiUtil.GetVideoInfo(fileName);
                    UiUtil.InitializeVideoPlayerAndContainer(fileName, _videoInfo, mediaPlayer, VideoLoaded, VideoEnded);
                }

                mediaPlayer.Volume = 0;
                mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
                mediaPlayer.OnButtonClicked -= MediaPlayer_OnButtonClicked;
                mediaPlayer.OnButtonClicked += MediaPlayer_OnButtonClicked;

                if (_videoInfo.VideoCodec != null)
                {
                    labelVideoInfo.Text = Path.GetFileName(fileName) + " " + _videoInfo.Width + "x" + _videoInfo.Height + " " + _videoInfo.VideoCodec.Trim();
                }
                else
                {
                    labelVideoInfo.Text = Path.GetFileName(fileName) + " " + _videoInfo.Width + "x" + _videoInfo.Height;
                }

                if (_videoInfo.FramesPerSecond > 0)
                {
                    labelVideoInfo.Text = labelVideoInfo.Text + " " + string.Format("{0:0.0##}", _videoInfo.FramesPerSecond);
                }

                string peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(fileName);
                string spectrogramFolder = WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(fileName);
                if (File.Exists(peakWaveFileName))
                {
                    audioVisualizer.ZoomFactor = 1.0;
                    audioVisualizer.VerticalZoomFactor = 1.0;
                    SelectZoomTextInComboBox();
                    audioVisualizer.WavePeaks = WavePeakData.FromDisk(peakWaveFileName);
                    audioVisualizer.SetSpectrogram(SpectrogramData.FromDisk(spectrogramFolder));
                    audioVisualizer.SceneChanges = SceneChangeHelper.FromDisk(_videoFileName);
                    SetWaveformPosition(0, 0, 0);
                    timerWaveform.Start();
                }

                Cursor = Cursors.Default;

                SetUndockedWindowsTitle();
                ShowSubtitleTimer.Start();
            }
        }

        private void MediaPlayer_OnButtonClicked(object sender, EventArgs e)
        {
            var pb = sender as PictureBox;
            if (pb != null && pb.Name == "_pictureBoxFullscreenOver")
            {
                if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed && _videoPlayerUndocked.IsFullscreen)
                {
                    _videoPlayerUndocked.NoFullscreen();
                }
                else
                {
                    GoFullscreen(false);
                }
            }
        }

        private void SetWaveformPosition(double startPositionSeconds, double currentVideoPositionSeconds, int subtitleIndex)
        {
            if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                int index = -1;
                if (SubtitleListview1.SelectedItems.Count > 0 && _subtitle.Paragraphs.Count > 0)
                {
                    int i = SubtitleListview1.SelectedItems[0].Index;
                    var p = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleAlternate.Paragraphs);
                    index = _subtitleAlternate.GetIndex(p);
                }

                audioVisualizer.SetPosition(startPositionSeconds, _subtitleAlternate, currentVideoPositionSeconds, index, SubtitleListview1.SelectedIndices);
            }
            else
            {
                audioVisualizer.SetPosition(startPositionSeconds, _subtitle, currentVideoPositionSeconds, subtitleIndex, SubtitleListview1.SelectedIndices);
            }
        }

        private void VideoLoaded(object sender, EventArgs e)
        {
            if (_loading)
            {
                Application.DoEvents();
            }

            mediaPlayer.Volume = Configuration.Settings.General.VideoPlayerDefaultVolume;
            timer1.Start();

            trackBarWaveformPosition.Maximum = (int)mediaPlayer.Duration;

            if (_videoLoadedGoToSubPosAndPause)
            {
                Application.DoEvents();
                _videoLoadedGoToSubPosAndPause = false;
                GotoSubPositionAndPause();
            }

            mediaPlayer.Pause();
            mediaPlayer.UpdatePlayerName();

            // Keep current play rate
            for (var index = 0; index < toolStripSplitButtonPlayRate.DropDownItems.Count; index++)
            {
                var item = (ToolStripMenuItem)toolStripSplitButtonPlayRate.DropDownItems[index];
                if (item.Checked)
                {
                    SetPlayRate(item, null, true);
                    break;
                }
            }

            if (mediaPlayer.VideoPlayer is LibMpvDynamic && !Configuration.Settings.General.MpvHandlesPreviewText)
            {
                (mediaPlayer.VideoPlayer as LibMpvDynamic)?.RemoveSubtitle();
            }

            if (trackBarWaveformPosition.Maximum <= 0)
            {
                trackBarWaveformPosition.Maximum = (int)mediaPlayer.Duration;
            }
        }

        private void VideoEnded(object sender, EventArgs e)
        {
            mediaPlayer.Pause();
        }

        private void TryToFindAndOpenVideoFile(string fileNameNoExtension)
        {
            string movieFileName = null;

            foreach (var extension in Utilities.VideoFileExtensions)
            {
                var fileName = fileNameNoExtension + extension;
                if (File.Exists(fileName))
                {
                    bool skipLoad = false;
                    if (extension == ".m2ts" && new FileInfo(fileName).Length < 2000000)
                    {
                        var textSt = new TextST();
                        skipLoad = textSt.IsMine(null, fileName); // don't load TextST files as video/audio file
                    }

                    if (!skipLoad)
                    {
                        movieFileName = fileName;
                        break;
                    }
                }
            }

            if (movieFileName != null)
            {
                OpenVideo(movieFileName);
            }
            else
            {
                var index = fileNameNoExtension.LastIndexOf('.');
                if (index > 0)
                {
                    TryToFindAndOpenVideoFile(fileNameNoExtension.Remove(index));
                }
            }
        }

        internal void GoBackSeconds(double seconds)
        {
            if (mediaPlayer.CurrentPosition > seconds)
            {
                mediaPlayer.CurrentPosition -= seconds;
            }
            else
            {
                mediaPlayer.CurrentPosition = 0;
            }

            ShowSubtitle();
        }

        private void ButtonStartHalfASecondBackClick(object sender, EventArgs e)
        {
            GoBackSeconds(0.5);
        }

        private void ButtonStartThreeSecondsBackClick(object sender, EventArgs e)
        {
            GoBackSeconds(3.0);
        }

        private void ButtonStartOneMinuteBackClick(object sender, EventArgs e)
        {
            GoBackSeconds(60);
        }

        private void ButtonStartHalfASecondAheadClick(object sender, EventArgs e)
        {
            GoBackSeconds(-0.5);
        }

        private void ButtonStartThreeSecondsAheadClick(object sender, EventArgs e)
        {
            GoBackSeconds(-3);
        }

        private void ButtonStartOneMinuteAheadClick(object sender, EventArgs e)
        {
            GoBackSeconds(-60);
        }

        private void ShowSubtitleTimerTick(object sender, EventArgs e)
        {
            ShowSubtitleTimer.Stop();
            if (mediaPlayer.VideoPlayer != null)
            {
                int oldIndex = FirstSelectedIndex;
                int index = ShowSubtitle();
                if (index != -1 && checkBoxSyncListViewWithVideoWhilePlaying.Checked && oldIndex != index)
                {
                    if ((DateTime.UtcNow.Ticks - _lastTextKeyDownTicks) > 10000 * 700) // only if last typed char was entered > 700 milliseconds
                    {
                        if (_endSeconds <= 0 || !checkBoxAutoRepeatOn.Checked)
                        {
                            if (!timerAutoDuration.Enabled && !mediaPlayer.IsPaused && (mediaPlayer.CurrentPosition > 0.2 || index > 0))
                            {
                                SubtitleListview1.SelectIndexAndEnsureVisibleFaster(index);
                            }
                        }
                    }
                }
            }

            var currentChanged = _changeSubtitleHash != _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            var originalActive = Configuration.Settings.General.AllowEditOfOriginalSubtitle &&
                                 _subtitleAlternate != null &&
                                 _subtitleAlternate.Paragraphs.Count > 0;
            var originalChanged = originalActive &&
                                    _changeAlternateSubtitleHash != _subtitleAlternate.GetFastHashCode(GetCurrentEncoding().BodyName);
            if (currentChanged || originalChanged)
            {
                AddTitleBarChangeAsterisk(currentChanged, originalChanged, originalActive);
                AutoSave();
            }
            else if (Text.Contains('*'))
            {
                Text = Text.RemoveChar('*').TrimEnd();
            }

            ShowSubtitleTimer.Start();
        }

        private void AddTitleBarChangeAsterisk(bool currentChanged, bool originalChanged, bool originalActive)
        {
            if (Configuration.Settings.General.TitleBarAsterisk.Equals("before", StringComparison.Ordinal))
            {
                if (!Text.Contains('*'))
                {
                    Text = "*" + Text;
                }
            }
            else if (Configuration.Settings.General.TitleBarAsterisk.Equals("after", StringComparison.Ordinal))
            {
                var s = Text.RemoveChar('*').TrimEnd();
                if (currentChanged && !originalActive || originalChanged)
                {
                    var length = Title.Length;
                    if (s.Length > length)
                    {
                        s = s.Substring(0, s.Length - length).TrimEnd(' ', '*', '-') + "* - " + Title;
                    }
                }
                if (currentChanged)
                {
                    s = s.Replace(" + ", "* + ");
                }

                Text = s;
            }
        }

        private void HideVideoPlayer()
        {
            mediaPlayer.Pause();

            int textHeight = splitContainerListViewAndText.Height - splitContainerListViewAndText.SplitterDistance;

            splitContainer1.Panel2Collapsed = true;
            splitContainerMain.Panel2Collapsed = true;
            Main_Resize(null, null);

            splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - textHeight;
        }

        private void ShowVideoPlayer()
        {
            if (_isVideoControlsUndocked)
            {
                ShowHideUndockedVideoControls();
            }
            else
            {
                if (toolStripButtonToggleVideo.Checked && toolStripButtonToggleWaveform.Checked)
                {
                    splitContainer1.Panel2Collapsed = false;
                    MoveVideoUp();
                }
                else
                {
                    splitContainer1.Panel2Collapsed = true;
                    MoveVideoDown();
                }

                splitContainerMain.Panel2Collapsed = false;
                if (toolStripButtonToggleVideo.Checked)
                {
                    if (audioVisualizer.Visible)
                    {
                        audioVisualizer.Left = tabControlButtons.Left + tabControlButtons.Width + 5;
                    }
                    else
                    {
                        panelVideoPlayer.Left = tabControlButtons.Left + tabControlButtons.Width + 5;
                    }
                }
                else if (audioVisualizer.Visible)
                {
                    audioVisualizer.Left = tabControlButtons.Left + tabControlButtons.Width + 5;
                }

                audioVisualizer.Width = groupBoxVideo.Width - (audioVisualizer.Left + 10);

                checkBoxSyncListViewWithVideoWhilePlaying.Left = tabControlButtons.Left + tabControlButtons.Width + 5;
                panelWaveformControls.Left = audioVisualizer.Left;
                trackBarWaveformPosition.Left = panelWaveformControls.Left + panelWaveformControls.Width + 5;
                trackBarWaveformPosition.Width = audioVisualizer.Left + audioVisualizer.Width - trackBarWaveformPosition.Left + 5;
            }

            if (mediaPlayer.VideoPlayer == null && !string.IsNullOrEmpty(_fileName) && string.IsNullOrEmpty(_videoFileName) && !Configuration.Settings.General.DisableVideoAutoLoading)
            {
                TryToFindAndOpenVideoFile(Utilities.GetPathAndFileNameWithoutExtension(_fileName));
            }

            Main_Resize(null, null);
        }

        private void ShowHideUndockedVideoControls()
        {
            if (_videoPlayerUndocked == null || _videoPlayerUndocked.IsDisposed)
            {
                UnDockVideoPlayer();
            }

            _videoPlayerUndocked.Visible = false;
            if (toolStripButtonToggleVideo.Checked)
            {
                _videoPlayerUndocked.Show(this);
                if (_videoPlayerUndocked.WindowState == FormWindowState.Minimized)
                {
                    _videoPlayerUndocked.WindowState = FormWindowState.Normal;
                }
            }

            if (_waveformUndocked == null || _waveformUndocked.IsDisposed)
            {
                UnDockWaveform();
            }

            _waveformUndocked.Visible = false;
            if (toolStripButtonToggleWaveform.Checked)
            {
                _waveformUndocked.Show(this);
                if (_waveformUndocked.WindowState == FormWindowState.Minimized)
                {
                    _waveformUndocked.WindowState = FormWindowState.Normal;
                }
            }

            if (toolStripButtonToggleVideo.Checked || toolStripButtonToggleWaveform.Checked)
            {
                if (_videoControlsUndocked == null || _videoControlsUndocked.IsDisposed)
                {
                    UnDockVideoButtons();
                }

                _videoControlsUndocked.Visible = false;
                _videoControlsUndocked.Show(this);
            }
            else
            {
                if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
                {
                    _videoControlsUndocked.Visible = false;
                }
            }
        }

        private void MoveVideoUp()
        {
            if (splitContainer1.Panel2.Controls.Count == 0)
            {
                var control = panelVideoPlayer;
                groupBoxVideo.Controls.Remove(control);
                splitContainer1.Panel2.Controls.Add(control);
            }

            panelVideoPlayer.Top = 0;
            panelVideoPlayer.Left = 0;
            panelVideoPlayer.Height = splitContainer1.Panel2.Height - 2;
            panelVideoPlayer.Width = splitContainer1.Panel2.Width - 2;
        }

        private void MoveVideoDown()
        {
            if (splitContainer1.Panel2.Controls.Count > 0)
            {
                var control = panelVideoPlayer;
                splitContainer1.Panel2.Controls.Clear();
                groupBoxVideo.Controls.Add(control);
            }

            panelVideoPlayer.Top = 32;
            panelVideoPlayer.Left = tabControlButtons.Left + tabControlButtons.Width + 5;
            panelVideoPlayer.Height = groupBoxVideo.Height - (panelVideoPlayer.Top + 5);
            panelVideoPlayer.Width = groupBoxVideo.Width - (panelVideoPlayer.Left + 5);
        }

        private void FixLargeFonts()
        {
            using (var graphics = CreateGraphics())
            {
                var textSize = graphics.MeasureString(buttonPlayPrevious.Text, Font);
                if (textSize.Height > buttonPlayPrevious.Height - 4)
                {
                    int newButtonHeight = 23;
                    UiUtil.SetButtonHeight(this, newButtonHeight, -4);

                    // List view
                    SubtitleListview1.InitializeTimestampColumnWidths(this);
                    const int adjustUp = 8;
                    SubtitleListview1.Height = SubtitleListview1.Height - adjustUp;
                    groupBoxEdit.Top = groupBoxEdit.Top - adjustUp;
                    groupBoxEdit.Height = groupBoxEdit.Height + adjustUp;
                    numericUpDownDuration.Left = timeUpDownStartTime.Left + timeUpDownStartTime.Width;
                    numericUpDownDuration.Width = numericUpDownDuration.Width + 5;
                    labelDuration.Left = numericUpDownDuration.Left - 3;

                    // Video controls - Create
                    timeUpDownVideoPosition.Left = labelVideoPosition.Left + labelVideoPosition.Width;
                    int buttonWidth = labelVideoPosition.Width + timeUpDownVideoPosition.Width;
                    buttonInsertNewText.Width = buttonWidth;
                    buttonBeforeText.Width = buttonWidth;
                    buttonGotoSub.Width = buttonWidth;
                    buttonSetStartTime.Width = buttonWidth;
                    buttonSetEnd.Width = buttonWidth;
                    int FKeyLeft = buttonInsertNewText.Left + buttonInsertNewText.Width;
                    labelCreateF9.Left = FKeyLeft;
                    labelCreateF10.Left = FKeyLeft;
                    labelCreateF11.Left = FKeyLeft;
                    labelCreateF12.Left = FKeyLeft;
                    buttonForward1.Left = buttonInsertNewText.Left + buttonInsertNewText.Width - buttonForward1.Width;
                    numericUpDownSec1.Width = buttonInsertNewText.Width - (numericUpDownSec1.Left + buttonForward1.Width);
                    buttonForward2.Left = buttonInsertNewText.Left + buttonInsertNewText.Width - buttonForward2.Width;
                    numericUpDownSec2.Width = buttonInsertNewText.Width - (numericUpDownSec2.Left + buttonForward2.Width);

                    // Video controls - Adjust
                    timeUpDownVideoPositionAdjust.Left = labelVideoPosition2.Left + labelVideoPosition2.Width;
                    buttonSetStartAndOffsetRest.Width = buttonWidth;
                    buttonSetEndAndGoToNext.Width = buttonWidth;
                    buttonAdjustSetStartTime.Width = buttonWidth;
                    buttonAdjustSetEndTime.Width = buttonWidth;
                    buttonAdjustPlayBefore.Width = buttonWidth;
                    buttonAdjustGoToPosAndPause.Width = buttonWidth;
                    labelAdjustF9.Left = FKeyLeft;
                    labelAdjustF10.Left = FKeyLeft;
                    labelAdjustF11.Left = FKeyLeft;
                    labelAdjustF12.Left = FKeyLeft;
                    buttonAdjustSecForward1.Left = buttonInsertNewText.Left + buttonInsertNewText.Width - buttonAdjustSecForward1.Width;
                    numericUpDownSecAdjust1.Width = buttonInsertNewText.Width - (numericUpDownSecAdjust2.Left + buttonAdjustSecForward1.Width);
                    buttonAdjustSecForward2.Left = buttonInsertNewText.Left + buttonInsertNewText.Width - buttonAdjustSecForward2.Width;
                    numericUpDownSecAdjust2.Width = buttonInsertNewText.Width - (numericUpDownSecAdjust2.Left + buttonAdjustSecForward2.Width);

                    tabControl1_SelectedIndexChanged(null, null);
                }
            }
        }

        private void Main_Resize(object sender, EventArgs e)
        {
            if (_loading)
            {
                return;
            }

            if (WindowState == FormWindowState.Maximized)
            {
                Main_ResizeEnd(sender, e);
                return;
            }

            panelVideoPlayer.Invalidate();
        }

        private void Main_ResizeEnd(object sender, EventArgs e)
        {
            if (_loading)
            {
                return;
            }

            panelVideoPlayer.Invalidate();
            MainResize();

            // Due to strange bug in listview when maximizing
            SaveSubtitleListviewIndices();
            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            RestoreSubtitleListviewIndices();
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);

            panelVideoPlayer.Refresh();
        }

        private void MainResize()
        {
            var tbText = textBoxListViewText;
            var tbOriginal = textBoxListViewTextAlternate;
            int firstLeft = 236;

            var lbText = labelText;
            var lbTextOriginal = labelAlternateText;

            var lbSingleLine = labelTextLineLengths;
            var lbSingleLineOriginal = labelTextAlternateLineLengths;

            tbText.Left = firstLeft;
            tbOriginal.Left = firstLeft;
            lbText.Left = firstLeft;
            lbTextOriginal.Left = firstLeft;
            tbText.Width = groupBoxEdit.Width - (tbText.Left + 10 + (groupBoxEdit.Width - buttonUnBreak.Left));

            if (Configuration.Settings.General.RightToLeftMode && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                tbText = textBoxListViewTextAlternate;
                tbOriginal = textBoxListViewText;

                lbText = labelAlternateText;
                lbTextOriginal = labelText;

                lbSingleLine = labelTextAlternateLineLengths;
                lbSingleLineOriginal = labelTextLineLengths;
            }
            else
            {
                labelTextLineLengths.Left = firstLeft;
            }

            tbText.Left = firstLeft;
            lbText.Left = firstLeft;
            lbSingleLine.Left = firstLeft;

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0 &&
                textBoxListViewTextAlternate.Visible)
            {
                tbText.Width = (groupBoxEdit.Width - (tbText.Left + 10)) / 2;
                tbOriginal.Left = tbText.Left + tbText.Width + 3;
                lbTextOriginal.Left = tbOriginal.Left;

                tbOriginal.Width = tbText.Width;

                labelAlternateCharactersPerSecond.Left = tbOriginal.Left + (tbOriginal.Width - labelAlternateCharactersPerSecond.Width);
                lbSingleLineOriginal.Left = tbOriginal.Left;
                labelAlternateSingleLine.Left = labelTextAlternateLineLengths.Left + labelTextAlternateLineLengths.Width;
                labelAlternateSingleLinePixels.Left = labelAlternateSingleLine.Left + labelAlternateSingleLine.Width + 10;
                labelTextAlternateLineTotal.Left = tbOriginal.Left + (tbOriginal.Width - labelTextAlternateLineTotal.Width);
                if (textBoxListViewText.Width / 2.1 < labelTextLineLengths.Width)
                {
                    labelTextAlternateLineTotal.Visible = false;
                }
                else
                {
                    labelTextAlternateLineTotal.Visible = true;
                }

                if (textBoxListViewText.Width / 3 < labelTextLineLengths.Width)
                {
                    labelAlternateSingleLinePixels.Visible = false;
                }
                else
                {
                    labelAlternateSingleLinePixels.Visible = Configuration.Settings.Tools.ListViewSyntaxColorWideLines;
                }
            }

            labelAlternateCharactersPerSecond.Top = labelCharactersPerSecond.Top;
            labelCharactersPerSecond.Left = tbText.Left + (tbText.Width - labelCharactersPerSecond.Width);
            labelTextLineTotal.Left = tbText.Left + (tbText.Width - labelTextLineTotal.Width);
            SubtitleListview1.AutoSizeAllColumns(this);

            if (textBoxListViewText.Width / 2.1 < labelTextLineLengths.Width)
            {
                labelTextLineTotal.Visible = false;
            }
            else
            {
                labelTextLineTotal.Visible = true;
            }

            if (textBoxListViewText.Width / 3 < labelTextLineLengths.Width)
            {
                labelSingleLinePixels.Visible = false;
            }
            else
            {
                labelSingleLinePixels.Visible = Configuration.Settings.Tools.ListViewSyntaxColorWideLines;
            }

            FixRightToLeftDependingOnLanguage();
        }

        private void FixRightToLeftDependingOnLanguage()
        {
            if (Configuration.Settings.General.RightToLeftMode)
            {
                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    if (LanguageAutoDetect.CouldBeRightToLeftLanguage(_subtitleAlternate))
                    {
                        textBoxListViewTextAlternate.RightToLeft = RightToLeft.Yes;
                    }
                    else
                    {
                        textBoxListViewTextAlternate.RightToLeft = RightToLeft.No;
                    }
                }

                if (LanguageAutoDetect.CouldBeRightToLeftLanguage(_subtitle))
                {
                    textBoxListViewText.RightToLeft = RightToLeft.Yes;
                    textBoxSource.RightToLeft = RightToLeft.Yes;
                }
                else
                {

                    textBoxListViewText.RightToLeft = RightToLeft.No;
                    textBoxSource.RightToLeft = RightToLeft.No;
                }
            }
            else
            {
                textBoxListViewText.RightToLeft = RightToLeft.No;
                textBoxSource.RightToLeft = RightToLeft.No;
            }
        }

        private void PlayCurrent()
        {
            if (_subtitleListViewIndex >= 0)
            {
                GotoSubtitleIndex(_subtitleListViewIndex);
                textBoxListViewText.Focus();
                ReadyAutoRepeat();
                PlayPart(_subtitle.Paragraphs[_subtitleListViewIndex]);
            }
        }

        private void ReadyAutoRepeat()
        {
            if (checkBoxAutoRepeatOn.Checked)
            {
                _repeatCount = int.Parse(comboBoxAutoRepeat.Text);
            }
            else
            {
                _repeatCount = -1;
            }

            if (mediaPlayer.VideoPlayer != null)
            {
                labelStatus.Text = _language.VideoControls.Playing;
            }
        }

        private void PlayNext()
        {
            int newIndex = _subtitleListViewIndex + 1;
            if (newIndex < _subtitle.Paragraphs.Count)
            {
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    item.Selected = false;
                }

                SubtitleListview1.Items[newIndex].Selected = true;
                SubtitleListview1.Items[newIndex].EnsureVisible();
                SubtitleListview1.Items[newIndex].Focused = true;
                textBoxListViewText.Focus();
                textBoxListViewText.SelectAll();
                _subtitleListViewIndex = newIndex;
                GotoSubtitleIndex(newIndex);
                ShowSubtitle();
                PlayCurrent();
            }
        }

        private void PlayPrevious()
        {
            if (_subtitleListViewIndex > 0)
            {
                int newIndex = _subtitleListViewIndex - 1;
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    item.Selected = false;
                }

                SubtitleListview1.Items[newIndex].Selected = true;
                SubtitleListview1.Items[newIndex].EnsureVisible();
                SubtitleListview1.Items[newIndex].Focused = true;
                textBoxListViewText.Focus();
                textBoxListViewText.SelectAll();
                GotoSubtitleIndex(newIndex);
                ShowSubtitle();
                _subtitleListViewIndex = newIndex;
                PlayCurrent();
            }
        }

        private void GotoSubtitleIndex(int index)
        {
            if (mediaPlayer.VideoPlayer != null && mediaPlayer.Duration > 0)
            {
                mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
            }
        }

        private void PlayPart(Paragraph paragraph)
        {
            if (mediaPlayer.VideoPlayer != null)
            {
                double startSeconds = paragraph.StartTime.TotalSeconds;
                if (startSeconds > 0.05)
                {
                    startSeconds -= 0.05; // go a little back
                }

                _endSeconds = paragraph.EndTime.TotalSeconds;
                if (mediaPlayer.Duration > _endSeconds + 0.05)
                {
                    _endSeconds += 0.05; // go a little forward
                }

                mediaPlayer.CurrentPosition = startSeconds;
                ShowSubtitle();
                mediaPlayer.Play();
            }
        }

        private void buttonSetStartTime_Click(object sender, EventArgs e)
        {
            SetStartTime(false);
        }

        private void SetStartTime(bool adjustEndTime)
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                int index = SubtitleListview1.SelectedItems[0].Index;
                var p = _subtitle.Paragraphs[index];
                var oldParagraph = new Paragraph(p, false);
                if (oldParagraph.StartTime.IsMaxTime || oldParagraph.EndTime.IsMaxTime)
                {
                    adjustEndTime = true;
                }

                double videoPosition = mediaPlayer.CurrentPosition;
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));

                timeUpDownStartTime.TimeCode = TimeCode.FromSeconds(videoPosition);

                var duration = p.Duration.TotalMilliseconds;

                p.StartTime.TotalMilliseconds = videoPosition * TimeCode.BaseUnit;
                if (adjustEndTime)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
                }

                if (oldParagraph.StartTime.IsMaxTime)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(p.Text);
                }

                SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                timeUpDownStartTime.TimeCode = p.StartTime;
                timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;

                if (!adjustEndTime)
                {
                    SetDurationInSeconds(p.Duration.TotalSeconds);
                }

                UpdateOriginalTimeCodes(oldParagraph);
                ShowSource();
                RefreshSelectedParagraph();
            }
        }

        private void ButtonSetEndClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                double videoPosition = mediaPlayer.CurrentPosition;
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                int index = SubtitleListview1.SelectedItems[0].Index;
                MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + _subtitle.Paragraphs[index].Number + " " + _subtitle.Paragraphs[index].Text));

                if (_subtitle.Paragraphs[index].StartTime.IsMaxTime)
                {
                    timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                    _subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                    _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(_subtitle.Paragraphs[index].Text);
                    if (_subtitle.Paragraphs[index].StartTime.TotalMilliseconds < 0)
                    {
                        _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = 0;
                    }

                    timeUpDownStartTime.TimeCode = _subtitle.Paragraphs[index].StartTime;
                    SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                }
                else
                {
                    _subtitle.Paragraphs[index].EndTime = TimeCode.FromSeconds(videoPosition);
                }

                SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                SetDurationInSeconds(_subtitle.Paragraphs[index].Duration.TotalSeconds);
            }
        }

        private void ButtonInsertNewTextClick(object sender, EventArgs e)
        {
            mediaPlayer.Pause();

            var newParagraph = InsertNewTextAtVideoPosition();

            textBoxListViewText.Focus();
            timerAutoDuration.Start();

            ShowStatus(string.Format(_language.VideoControls.NewTextInsertAtX, newParagraph.StartTime.ToShortString()));
        }

        private Paragraph InsertNewTextAtVideoPosition()
        {
            // current movie Position
            double videoPositionInMilliseconds = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
            if (!mediaPlayer.IsPaused && videoPositionInMilliseconds > Configuration.Settings.General.SetStartEndHumanDelay)
            {
                videoPositionInMilliseconds -= Configuration.Settings.General.SetStartEndHumanDelay;
            }

            var tc = new TimeCode(videoPositionInMilliseconds);
            MakeHistoryForUndo(_language.BeforeInsertSubtitleAtVideoPosition + "  " + tc);

            // find index where to insert
            int index = 0;
            foreach (var p in _subtitle.Paragraphs)
            {
                if (p.StartTime.TotalMilliseconds > videoPositionInMilliseconds)
                {
                    break;
                }

                index++;
            }

            // create and insert
            var newParagraph = new Paragraph(string.Empty, videoPositionInMilliseconds, videoPositionInMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs);
            SetStyleForNewParagraph(newParagraph, index);
            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), index, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(index, newParagraph);

                // check if original is available - and insert new paragraph in the original too
                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                    _subtitleAlternate.Renumber();
                }

                _subtitleListViewIndex = -1;
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            return newParagraph;
        }

        private void timerAutoDuration_Tick(object sender, EventArgs e)
        {
            labelAutoDuration.Visible = !labelAutoDuration.Visible;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                try
                {
                    int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                    var currentParagraph = _subtitle.Paragraphs[firstSelectedIndex];
                    var nextParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1);
                    double duration = Utilities.GetOptimalDisplayMilliseconds(textBoxListViewText.Text);
                    if (currentParagraph.StartTime.TotalMilliseconds + duration + Configuration.Settings.General.MinimumMillisecondsBetweenLines > nextParagraph?.StartTime.TotalMilliseconds)
                    {
                        var newEndTime = nextParagraph.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                        if (newEndTime - currentParagraph.StartTime.TotalMilliseconds > 100)
                        {
                            duration = newEndTime - currentParagraph.StartTime.TotalMilliseconds;
                        }
                        else
                        {
                            return; // too close to next subtitle
                        }
                    }

                    SetDurationInSeconds(duration / TimeCode.BaseUnit);
                    currentParagraph.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + duration;
                    SubtitleListview1.SetDuration(firstSelectedIndex, currentParagraph, _subtitle.GetParagraphOrDefault(firstSelectedIndex + 1));
                }
                catch
                {
                    // ignore
                }
            }
        }

        private void buttonBeforeText_Click(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                int index = SubtitleListview1.SelectedItems[0].Index;

                mediaPlayer.Pause();
                double pos = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                if (pos > 1)
                {
                    mediaPlayer.CurrentPosition = (_subtitle.Paragraphs[index].StartTime.TotalSeconds) - 0.5;
                }
                else
                {
                    mediaPlayer.CurrentPosition = _subtitle.Paragraphs[index].StartTime.TotalSeconds;
                }

                mediaPlayer.Play();
            }
        }

        private void GotoSubPositionAndPause()
        {
            GotoSubPositionAndPause(0);
        }

        private void GotoSubPositionAndPause(double adjustSeconds)
        {
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                int index = SubtitleListview1.SelectedItems[0].Index;
                if (index == -1 || index >= _subtitle.Paragraphs.Count)
                {
                    return;
                }

                var p = _subtitle.Paragraphs[index];
                mediaPlayer.Pause();
                if (p.StartTime.IsMaxTime)
                {
                    return;
                }

                double newPos = p.StartTime.TotalSeconds + adjustSeconds;
                if (newPos < 0)
                {
                    newPos = 0;
                }

                mediaPlayer.CurrentPosition = newPos;
                ShowSubtitle();

                double startPos = mediaPlayer.CurrentPosition - 1;
                if (startPos < 0)
                {
                    startPos = 0;
                }

                SetWaveformPosition(startPos, mediaPlayer.CurrentPosition, index);
            }
        }

        private void buttonGotoSub_Click(object sender, EventArgs e)
        {
            GotoSubPositionAndPause();
        }

        private void buttonOpenVideo_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(openFileDialog1.InitialDirectory) && !string.IsNullOrEmpty(_fileName))
            {
                openFileDialog1.InitialDirectory = Path.GetDirectoryName(_fileName);
            }

            openFileDialog1.Title = _languageGeneral.OpenVideoFileTitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = Utilities.GetVideoFileFilter(true);

            openFileDialog1.FileName = string.Empty;
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                if (audioVisualizer.WavePeaks != null)
                {
                    audioVisualizer.WavePeaks = null;
                    audioVisualizer.SetSpectrogram(null);
                    audioVisualizer.SceneChanges = new List<double>();
                }

                openFileDialog1.InitialDirectory = Path.GetDirectoryName(openFileDialog1.FileName);
                if (!panelVideoPlayer.Visible)
                {
                    toolStripButtonToggleVideo_Click(null, null);
                }

                OpenVideo(openFileDialog1.FileName);
            }
        }

        private void toolStripButtonToggleVideo_Click(object sender, EventArgs e)
        {
            toolStripButtonToggleVideo.Checked = !toolStripButtonToggleVideo.Checked;
            panelVideoPlayer.Visible = toolStripButtonToggleVideo.Checked;
            mediaPlayer.BringToFront();
            if (!toolStripButtonToggleVideo.Checked && !toolStripButtonToggleWaveform.Checked)
            {
                if (_isVideoControlsUndocked)
                {
                    ShowHideUndockedVideoControls();
                }
                else
                {
                    HideVideoPlayer();
                }
            }
            else
            {
                ShowVideoPlayer();
            }

            Configuration.Settings.General.ShowVideoPlayer = toolStripButtonToggleVideo.Checked;
            if (!_loading)
            {
                Refresh();
            }
        }

        private void toolStripButtonToggleWaveform_Click(object sender, EventArgs e)
        {
            toolStripButtonToggleWaveform.Checked = !toolStripButtonToggleWaveform.Checked;
            audioVisualizer.Visible = toolStripButtonToggleWaveform.Checked;
            trackBarWaveformPosition.Visible = toolStripButtonToggleWaveform.Checked;
            panelWaveformControls.Visible = toolStripButtonToggleWaveform.Checked;
            if (!toolStripButtonToggleWaveform.Checked && !toolStripButtonToggleVideo.Checked)
            {
                if (_isVideoControlsUndocked)
                {
                    ShowHideUndockedVideoControls();
                }
                else
                {
                    HideVideoPlayer();
                }
            }
            else
            {
                ShowVideoPlayer();
            }

            Configuration.Settings.General.ShowAudioVisualizer = toolStripButtonToggleWaveform.Checked;
            Refresh();
        }

        public void ShowEarlierOrLater(double adjustMilliseconds, SelectionChoice selection)
        {
            var tc = new TimeCode(adjustMilliseconds);
            MakeHistoryForUndo(_language.BeforeShowSelectedLinesEarlierLater + ": " + tc);
            if (adjustMilliseconds < 0)
            {
                if (selection == SelectionChoice.AllLines)
                {
                    ShowStatus(string.Format(_language.ShowAllLinesXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionOnly)
                {
                    ShowStatus(string.Format(_language.ShowSelectedLinesXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionAndForward)
                {
                    ShowStatus(string.Format(_language.ShowSelectionAndForwardXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
            }
            else
            {
                if (selection == SelectionChoice.AllLines)
                {
                    ShowStatus(string.Format(_language.ShowAllLinesXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionOnly)
                {
                    ShowStatus(string.Format(_language.ShowSelectedLinesXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionAndForward)
                {
                    ShowStatus(string.Format(_language.ShowSelectionAndForwardXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
            }

            int startFrom = 0;
            if (selection == SelectionChoice.SelectionAndForward)
            {
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    startFrom = SubtitleListview1.SelectedItems[0].Index;
                }
                else
                {
                    startFrom = _subtitle.Paragraphs.Count;
                }
            }

            // don't overlap previous/next
            if (selection == SelectionChoice.SelectionOnly && SubtitleListview1.SelectedItems.Count == 1 &&
                !Configuration.Settings.VideoControls.WaveformAllowOverlap &&
                GetCurrentSubtitleFormat().GetType() != typeof(AdvancedSubStationAlpha))
            {
                var current = _subtitle.GetParagraphOrDefault(FirstSelectedIndex);
                if (current != null)
                {
                    if (adjustMilliseconds >= 0)
                    {
                        var next = _subtitle.GetParagraphOrDefault(FirstSelectedIndex + 1);
                        if (next != null && current.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines > next.StartTime.TotalMilliseconds - adjustMilliseconds)
                        {
                            var newAdjustMs = next.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines - current.EndTime.TotalMilliseconds;
                            if (newAdjustMs > 0)
                            {
                                adjustMilliseconds = newAdjustMs;
                            }
                            else
                            {
                                return;
                            }
                        }
                    }
                    else
                    {
                        var prev = _subtitle.GetParagraphOrDefault(FirstSelectedIndex - 1);
                        if (prev != null && current.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines + adjustMilliseconds < prev.EndTime.TotalMilliseconds)
                        {
                            var newAdjustMs = prev.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines - current.StartTime.TotalMilliseconds;
                            if (newAdjustMs < 0)
                            {
                                adjustMilliseconds = newAdjustMs;
                            }
                            else
                            {
                                return;
                            }
                        }
                    }
                }
            }

            SubtitleListview1.BeginUpdate();
            for (int i = startFrom; i < _subtitle.Paragraphs.Count; i++)
            {
                switch (selection)
                {
                    case SelectionChoice.SelectionOnly:
                        if (SubtitleListview1.Items[i].Selected)
                        {
                            ShowEarlierOrLaterParagraph(adjustMilliseconds, i);
                        }

                        break;
                    case SelectionChoice.AllLines:
                    case SelectionChoice.SelectionAndForward:
                        ShowEarlierOrLaterParagraph(adjustMilliseconds, i);
                        break;
                }
            }

            SubtitleListview1.EndUpdate();
            RefreshSelectedParagraph();
            UpdateSourceView();
            UpdateListSyntaxColoring();
        }

        private void ShowEarlierOrLaterParagraph(double adjustMilliseconds, int i)
        {
            var p = _subtitle.GetParagraphOrDefault(i);
            if (p != null && !p.StartTime.IsMaxTime)
            {
                if (_subtitleAlternate != null)
                {
                    var original = Utilities.GetOriginalParagraph(i, p, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds += adjustMilliseconds;
                        original.EndTime.TotalMilliseconds += adjustMilliseconds;
                    }
                }

                p.StartTime.TotalMilliseconds += adjustMilliseconds;
                p.EndTime.TotalMilliseconds += adjustMilliseconds;
                SubtitleListview1.SetStartTimeAndDuration(i, p, _subtitle.GetParagraphOrDefault(i + 1), _subtitle.GetParagraphOrDefault(i - 1));
            }
        }

        private void UpdateSourceView()
        {
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                ShowSource();
            }
        }

        private void toolStripMenuItemAdjustAllTimes_Click(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count > 1)
            {
                ShowSelectedLinesEarlierlaterToolStripMenuItemClick(null, null);
                return;
            }

            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            mediaPlayer.Pause();

            if (_showEarlierOrLater != null && !_showEarlierOrLater.IsDisposed)
            {
                _showEarlierOrLater.WindowState = FormWindowState.Normal;
                _showEarlierOrLater.Focus();
                return;
            }

            _showEarlierOrLater = new ShowEarlierLater();
            if (!_showEarlierOrLater.IsPositionAndSizeSaved)
            {
                _showEarlierOrLater.Top = Top + 100;
                _showEarlierOrLater.Left = Left + Width / 2 - _showEarlierOrLater.Width / 3;
            }

            SaveSubtitleListviewIndices();
            _showEarlierOrLater.Initialize(ShowEarlierOrLater, false);
            _showEarlierOrLater.Show(this);
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            if (mediaPlayer.VideoPlayer != null)
            {
                if (!mediaPlayer.IsPaused)
                {
                    timeUpDownVideoPosition.Enabled = false;
                    timeUpDownVideoPositionAdjust.Enabled = false;

                    if (_endSeconds >= 0 && mediaPlayer.CurrentPosition > _endSeconds && !(AutoRepeatContinueOn || AutoRepeatOn))
                    {
                        mediaPlayer.Pause();
                        if (_endSecondsNewPosition >= 0 && _endSecondsNewPositionTicks > DateTime.UtcNow.Ticks - (10000 * 900)) // 900 ms
                        {
                            mediaPlayer.CurrentPosition = _endSecondsNewPosition;
                        }
                        else
                        {
                            mediaPlayer.CurrentPosition = _endSeconds + EndDelay;
                        }

                        _endSeconds = -1;
                        _endSecondsNewPosition = -1;
                        _endSecondsNewPositionTicks = 0;
                    }

                    if (AutoRepeatContinueOn || AutoRepeatOn)
                    {
                        if (_endSeconds >= 0 && mediaPlayer.CurrentPosition > _endSeconds && checkBoxAutoRepeatOn.Checked)
                        {
                            mediaPlayer.Pause();
                            _endSeconds = -1;

                            if (checkBoxAutoRepeatOn.Checked && _repeatCount > 0)
                            {
                                if (_repeatCount == 1)
                                {
                                    labelStatus.Text = _language.VideoControls.RepeatingLastTime;
                                }
                                else
                                {
                                    labelStatus.Text = string.Format(_language.VideoControls.RepeatingXTimesLeft, _repeatCount);
                                }

                                _repeatCount--;
                                if (_subtitleListViewIndex >= 0 && _subtitleListViewIndex < _subtitle.Paragraphs.Count)
                                {
                                    PlayPart(_subtitle.Paragraphs[_subtitleListViewIndex]);
                                }
                            }
                            else if (checkBoxAutoContinue.Checked)
                            {
                                _autoContinueDelayCount = int.Parse(comboBoxAutoContinue.Text);
                                if (_repeatCount == 1)
                                {
                                    labelStatus.Text = _language.VideoControls.AutoContinueInOneSecond;
                                }
                                else
                                {
                                    labelStatus.Text = string.Format(_language.VideoControls.AutoContinueInXSeconds, _autoContinueDelayCount);
                                }

                                timerAutoContinue.Start();
                            }
                        }
                    }
                }
                else
                {
                    timeUpDownVideoPosition.Enabled = true;
                    timeUpDownVideoPositionAdjust.Enabled = true;
                }

                int index = ShowSubtitle();

                double pos = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
                if (!timeUpDownVideoPosition.MaskedTextBox.Focused && timeUpDownVideoPosition.TimeCode.TotalMilliseconds != pos)
                {
                    timeUpDownVideoPosition.TimeCode = new TimeCode(pos);
                }

                if (!timeUpDownVideoPositionAdjust.MaskedTextBox.Focused && timeUpDownVideoPositionAdjust.TimeCode.TotalMilliseconds != pos)
                {
                    timeUpDownVideoPositionAdjust.TimeCode = new TimeCode(pos);
                }

                mediaPlayer.RefreshProgressBar();

                trackBarWaveformPosition.ValueChanged -= trackBarWaveformPosition_ValueChanged;
                int value = (int)mediaPlayer.CurrentPosition;
                if (value > trackBarWaveformPosition.Maximum)
                {
                    value = trackBarWaveformPosition.Maximum;
                }

                if (value < trackBarWaveformPosition.Minimum)
                {
                    value = trackBarWaveformPosition.Minimum;
                }

                trackBarWaveformPosition.Value = value;
                trackBarWaveformPosition.ValueChanged += trackBarWaveformPosition_ValueChanged;

                if (labelNextWord.Visible && _labelNextTicks + 100000000 < DateTime.UtcNow.Ticks)
                {
                    labelNextWord.Visible = false;
                }
            }
        }

        private void StopAutoDuration()
        {
            timerAutoDuration.Stop();
            labelAutoDuration.Visible = false;
        }

        private void textBoxListViewText_Leave(object sender, EventArgs e)
        {
            StopAutoDuration();
        }

        private void timerAutoContinue_Tick(object sender, EventArgs e)
        {
            _autoContinueDelayCount--;

            if (_autoContinueDelayCount == 0)
            {
                timerAutoContinue.Stop();

                if (timerStillTyping.Enabled)
                {
                    labelStatus.Text = _language.VideoControls.StillTypingAutoContinueStopped;
                }
                else
                {
                    labelStatus.Text = string.Empty;
                    PlayNext();
                }
            }
            else
            {
                if (_repeatCount == 1)
                {
                    labelStatus.Text = _language.VideoControls.AutoContinueInOneSecond;
                }
                else
                {
                    labelStatus.Text = string.Format(_language.VideoControls.AutoContinueInXSeconds, _autoContinueDelayCount);
                }
            }
        }

        private void timerStillTyping_Tick(object sender, EventArgs e)
        {
            timerStillTyping.Stop();
        }

        private void textBoxListViewText_MouseMove(object sender, MouseEventArgs e)
        {
            if ((AutoRepeatContinueOn || AutoRepeatOn) && !textBoxSearchWord.Focused && textBoxListViewText.Focused)
            {
                string selectedText = textBoxListViewText.SelectedText;
                if (!string.IsNullOrEmpty(selectedText))
                {
                    selectedText = selectedText.Trim();
                    selectedText = selectedText.TrimEnd('.', ',', '!', '?');
                    selectedText = selectedText.TrimEnd();
                    if (!string.IsNullOrEmpty(selectedText) && selectedText != textBoxSearchWord.Text)
                    {
                        textBoxSearchWord.Text = HtmlUtil.RemoveHtmlTags(selectedText);
                    }
                }
            }
        }

        private void textBoxListViewText_KeyUp(object sender, KeyEventArgs e)
        {
            textBoxListViewText_MouseMove(sender, null);
            textBoxListViewText.ClearUndo();
            UpdatePositionAndTotalLength(labelTextLineTotal, textBoxListViewText);
        }

        public void RunTranslateSearch(Action<string> act)
        {
            var text = textBoxSearchWord.Text;
            if (tabControlButtons.SelectedTab != tabPageTranslate)
            {
                var tb = GetFocusedTextBox();
                if (tb.SelectionLength == 0)
                {
                    text = tb.Text;
                }
                else
                {
                    text = tb.SelectedText;
                }
            }

            if (!string.IsNullOrWhiteSpace(text))
            {
                act(text);
            }
        }

        private void buttonGoogleIt_Click(object sender, EventArgs e)
        {
            RunTranslateSearch((text) => { UiUtil.OpenURL("https://www.google.com/search?q=" + Utilities.UrlEncode(text)); });
        }

        private void buttonGoogleTranslateIt_Click(object sender, EventArgs e)
        {
            RunTranslateSearch((text) =>
            {
                string languageId = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                UiUtil.OpenURL("https://translate.google.com/#auto|" + languageId + "|" + Utilities.UrlEncode(text));
            });
        }

        private void ButtonPlayCurrentClick(object sender, EventArgs e)
        {
            PlayCurrent();
        }

        private void buttonPlayNext_Click(object sender, EventArgs e)
        {
            PlayNext();
        }

        private void buttonPlayPrevious_Click(object sender, EventArgs e)
        {
            PlayPrevious();
        }

        private void buttonStop_Click(object sender, EventArgs e)
        {
            _endSeconds = -1;
            timerAutoContinue.Stop();
            mediaPlayer.Pause();
            labelStatus.Text = string.Empty;
        }

        private void fileToolStripMenuItem_DropDownOpening(object sender, EventArgs e)
        {
            toolStripMenuItemOpenContainingFolder.Visible = !string.IsNullOrEmpty(_fileName) && File.Exists(_fileName);
            bool subtitleLoaded = IsSubtitleLoaded;
            toolStripMenuItemStatistics.Visible = subtitleLoaded;
            toolStripSeparator22.Visible = subtitleLoaded;
            toolStripMenuItemExport.Visible = subtitleLoaded;
            openOriginalToolStripMenuItem.Visible = subtitleLoaded;
            toolStripMenuItemOpenKeepVideo.Visible = _videoFileName != null;
            if (subtitleLoaded && Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                saveOriginalToolStripMenuItem.Visible = true;
                saveOriginalAstoolStripMenuItem.Visible = true;
                removeOriginalToolStripMenuItem.Visible = true;
            }
            else
            {
                saveOriginalToolStripMenuItem.Visible = false;
                saveOriginalAstoolStripMenuItem.Visible = false;
                if (subtitleLoaded && SubtitleListview1.IsAlternateTextColumnVisible && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    removeOriginalToolStripMenuItem.Visible = true;
                }
                else
                {
                    removeOriginalToolStripMenuItem.Visible = false;
                }
            }

            var format = GetCurrentSubtitleFormat();
            var ft = format.GetType();
            if (ft == typeof(AdvancedSubStationAlpha))
            {
                toolStripMenuItemSubStationAlpha.Visible = true;
                toolStripMenuItemSubStationAlpha.Text = _language.Menu.File.AdvancedSubStationAlphaProperties;
            }
            else if (ft == typeof(SubStationAlpha))
            {
                toolStripMenuItemSubStationAlpha.Visible = true;
                toolStripMenuItemSubStationAlpha.Text = _language.Menu.File.SubStationAlphaProperties;
            }
            else
            {
                toolStripMenuItemSubStationAlpha.Visible = false;
            }

            if (ft == typeof(Ebu))
            {
                toolStripMenuItemEbuProperties.Text = _language.Menu.File.EbuProperties;
                toolStripMenuItemEbuProperties.Visible = !string.IsNullOrEmpty(_language.Menu.File.EbuProperties);
            }
            else
            {
                toolStripMenuItemEbuProperties.Visible = false;
            }

            if (ft == typeof(DvdStudioPro) ||
                ft == typeof(DvdStudioProSpace) ||
                ft == typeof(DvdStudioProSpaceOne) ||
                ft == typeof(DvdStudioProSpaceOneSemicolon))
            {
                toolStripMenuItemDvdStudioProProperties.Text = _language.Menu.File.DvdStuioProProperties;
                toolStripMenuItemDvdStudioProProperties.Visible = true;
            }
            else
            {
                toolStripMenuItemDvdStudioProProperties.Visible = false;
            }

            if (ft == typeof(DCinemaInterop) || ft == typeof(DCinemaSmpte2014) || ft == typeof(DCinemaSmpte2010) || ft == typeof(DCinemaSmpte2007))
            {
                toolStripMenuItemDCinemaProperties.Visible = true;
            }
            else
            {
                toolStripMenuItemDCinemaProperties.Visible = false;
            }

            if (ft == typeof(TimedText10) || ft == typeof(ItunesTimedText))
            {
                toolStripMenuItemTTProperties.Visible = true;
            }
            else
            {
                toolStripMenuItemTTProperties.Visible = false;
            }

            toolStripMenuItemNuendoProperties.Visible = format.Name == "Nuendo";
            toolStripMenuItemFcpProperties.Visible = ft == typeof(FinalCutProXml);

            toolStripSeparator20.Visible = subtitleLoaded;
        }

        private void toolStripMenuItemOpenContainingFolder_Click(object sender, EventArgs e)
        {
            UiUtil.OpenFolderFromFileName(_fileName);
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (tabControlButtons.SelectedIndex == 0)
            {
                tabControlButtons.Width = groupBoxTranslateSearch.Left + groupBoxTranslateSearch.Width + 10;
                Configuration.Settings.VideoControls.LastActiveTab = "Translate";
            }
            else if (tabControlButtons.SelectedIndex == 1)
            {
                tabControlButtons.Width = buttonInsertNewText.Left + buttonInsertNewText.Width + 35;
                Configuration.Settings.VideoControls.LastActiveTab = "Create";
            }
            else if (tabControlButtons.SelectedIndex == 2)
            {
                tabControlButtons.Width = buttonInsertNewText.Left + buttonInsertNewText.Width + 35;
                Configuration.Settings.VideoControls.LastActiveTab = "Adjust";
            }

            if (!_isVideoControlsUndocked)
            {
                if (toolStripButtonToggleWaveform.Checked)
                {
                    audioVisualizer.Left = tabControlButtons.Left + tabControlButtons.Width + 5;
                }

                if (!toolStripButtonToggleWaveform.Checked && toolStripButtonToggleVideo.Checked)
                {
                    panelVideoPlayer.Left = tabControlButtons.Left + tabControlButtons.Width + 5;
                    panelVideoPlayer.Width = groupBoxVideo.Width - (panelVideoPlayer.Left + 10);
                }

                audioVisualizer.Width = groupBoxVideo.Width - (audioVisualizer.Left + 10);
                panelWaveformControls.Left = audioVisualizer.Left;
                trackBarWaveformPosition.Left = panelWaveformControls.Left + panelWaveformControls.Width + 5;
                trackBarWaveformPosition.Width = groupBoxVideo.Width - (trackBarWaveformPosition.Left + 10);
                Main_Resize(null, null);
                checkBoxSyncListViewWithVideoWhilePlaying.Left = tabControlButtons.Left + tabControlButtons.Width + 5;
                if (!_loading)
                {
                    Refresh();
                }
            }
            else if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
            {
                _videoControlsUndocked.Width = tabControlButtons.Width + 20;
                _videoControlsUndocked.Height = tabControlButtons.Height + 65;
            }
        }

        private void buttonSecBack1_Click(object sender, EventArgs e)
        {
            GoBackSeconds((double)numericUpDownSec1.Value);
        }

        private void buttonForward1_Click(object sender, EventArgs e)
        {
            GoBackSeconds(-(double)numericUpDownSec1.Value);
        }

        private void ButtonSetStartAndOffsetRestClick(object sender, EventArgs e)
        {
            SetStartAndOffsetTheRest(mediaPlayer.CurrentPosition);
        }

        private void SetStartAndOffsetTheRest(double videoPosition)
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                bool oldSync = checkBoxSyncListViewWithVideoWhilePlaying.Checked;
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = false;

                timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                int index = SubtitleListview1.SelectedItems[0].Index;
                var oldP = new Paragraph(_subtitle.Paragraphs[index]);
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                var tc = TimeCode.FromSeconds(videoPosition);
                timeUpDownStartTime.TimeCode = tc;

                MakeHistoryForUndo(_language.BeforeSetStartTimeAndOffsetTheRest + @"  " + oldP.Number + @" - " + tc);

                double offset = oldP.StartTime.TotalMilliseconds - tc.TotalMilliseconds;

                if (oldP.StartTime.IsMaxTime)
                {
                    _subtitle.Paragraphs[index].StartTime.TotalSeconds = videoPosition;
                    _subtitle.Paragraphs[index].EndTime.TotalMilliseconds = _subtitle.Paragraphs[index].StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(_subtitle.Paragraphs[index].Text);
                    SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                    timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                    RefreshSelectedParagraph();
                    return;
                }

                _subtitle.Paragraphs[index].StartTime = new TimeCode(_subtitle.Paragraphs[index].StartTime.TotalMilliseconds - offset);
                _subtitle.Paragraphs[index].EndTime = new TimeCode(_subtitle.Paragraphs[index].EndTime.TotalMilliseconds - offset);
                SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));

                for (int i = index + 1; i < SubtitleListview1.Items.Count; i++)
                {
                    if (!_subtitle.Paragraphs[i].StartTime.IsMaxTime)
                    {
                        _subtitle.Paragraphs[i].StartTime = new TimeCode(_subtitle.Paragraphs[i].StartTime.TotalMilliseconds - offset);
                        _subtitle.Paragraphs[i].EndTime = new TimeCode(_subtitle.Paragraphs[i].EndTime.TotalMilliseconds - offset);
                        SubtitleListview1.SetStartTimeAndDuration(i, _subtitle.Paragraphs[i], _subtitle.GetParagraphOrDefault(i + 1), _subtitle.GetParagraphOrDefault(i - 1));
                    }
                }

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    var original = Utilities.GetOriginalParagraph(index, oldP, _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        index = _subtitleAlternate.GetIndex(original);
                        for (int i = index; i < _subtitleAlternate.Paragraphs.Count; i++)
                        {
                            if (!_subtitleAlternate.Paragraphs[i].StartTime.IsMaxTime)
                            {
                                _subtitleAlternate.Paragraphs[i].StartTime = new TimeCode(_subtitleAlternate.Paragraphs[i].StartTime.TotalMilliseconds - offset);
                                _subtitleAlternate.Paragraphs[i].EndTime = new TimeCode(_subtitleAlternate.Paragraphs[i].EndTime.TotalMilliseconds - offset);
                            }
                        }
                    }
                }

                ShowSource();
                checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            }
        }

        private void ButtonSetEndAndGoToNextClick(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count == 1)
            {
                int index = SubtitleListview1.SelectedItems[0].Index;
                double videoPosition = mediaPlayer.CurrentPosition;
                if (!mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                string oldDuration = _subtitle.Paragraphs[index].Duration.ToString();
                var temp = new Paragraph(_subtitle.Paragraphs[index]);
                temp.EndTime.TotalMilliseconds = TimeCode.FromSeconds(videoPosition).TotalMilliseconds;
                MakeHistoryForUndo(string.Format(_language.DisplayTimeAdjustedX, "#" + _subtitle.Paragraphs[index].Number + ": " + oldDuration + " -> " + temp.Duration));
                _makeHistoryPaused = true;

                if (_subtitle.Paragraphs[index].StartTime.IsMaxTime)
                {
                    timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                    _subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                    _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = _subtitle.Paragraphs[index].EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(_subtitle.Paragraphs[index].Text);
                    if (_subtitle.Paragraphs[index].StartTime.TotalMilliseconds < 0)
                    {
                        _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = 0;
                    }

                    timeUpDownStartTime.TimeCode = _subtitle.Paragraphs[index].StartTime;
                    SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                    timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
                }
                else
                {
                    _subtitle.Paragraphs[index].EndTime = TimeCode.FromSeconds(videoPosition);
                }

                SubtitleListview1.SetDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1));
                SetDurationInSeconds(_subtitle.Paragraphs[index].Duration.TotalSeconds);

                if (index + 1 < _subtitle.Paragraphs.Count)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
                }

                _makeHistoryPaused = false;
            }
        }

        private void ButtonAdjustSecBackClick(object sender, EventArgs e)
        {
            GoBackSeconds((double)numericUpDownSecAdjust1.Value);
        }

        private void ButtonAdjustSecForwardClick(object sender, EventArgs e)
        {
            GoBackSeconds(-(double)numericUpDownSecAdjust1.Value);
        }

        private void StartOrStopAutoBackup()
        {
            _timerAutoBackup?.Dispose();
            if (Configuration.Settings.General.AutoBackupSeconds > 0)
            {
                _timerAutoBackup = new Timer();
                _timerAutoBackup.Tick += TimerAutoBackupTick;
                _timerAutoBackup.Interval = 1000 * Configuration.Settings.General.AutoBackupSeconds; // take backup every x second if changes were made
                _timerAutoBackup.Start();
            }
        }

        private void Main_Shown(object sender, EventArgs e)
        {
            imageListBookmarks.Images.Add(pictureBoxBookmark.Image);
            SetListViewStateImages();

            toolStripButtonToggleVideo.Checked = !Configuration.Settings.General.ShowVideoPlayer;
            toolStripButtonToggleVideo_Click(null, null);

            StartOrStopAutoBackup();

            SetPositionFromXYString(Configuration.Settings.General.UndockedVideoPosition, "VideoPlayerUndocked");
            SetPositionFromXYString(Configuration.Settings.General.UndockedWaveformPosition, "WaveformUndocked");
            SetPositionFromXYString(Configuration.Settings.General.UndockedVideoControlsPosition, "VideoControlsUndocked");
            if (Configuration.Settings.General.Undocked && Configuration.Settings.General.StartRememberPositionAndSize)
            {
                Configuration.Settings.General.Undocked = false;
                UndockVideoControlsToolStripMenuItemClick(null, null);
                if (Configuration.Settings.General.UndockedVideoFullscreen)
                {
                    GoFullscreen(true);
                }
            }

            Main_Resize(null, null);

            toolStripButtonLockCenter.Checked = Configuration.Settings.General.WaveformCenter;
            audioVisualizer.Locked = toolStripButtonLockCenter.Checked;

            numericUpDownSec1.Value = (decimal)(Configuration.Settings.General.SmallDelayMilliseconds / TimeCode.BaseUnit);
            numericUpDownSec2.Value = (decimal)(Configuration.Settings.General.LargeDelayMilliseconds / TimeCode.BaseUnit);

            numericUpDownSecAdjust1.Value = (decimal)(Configuration.Settings.General.SmallDelayMilliseconds / TimeCode.BaseUnit);
            numericUpDownSecAdjust2.Value = (decimal)(Configuration.Settings.General.LargeDelayMilliseconds / TimeCode.BaseUnit);

            SetShortcuts();
            MainResize();
            _loading = false;
            OpenVideo(_videoFileName);
            lock (_syncUndo)
            {
                timerTextUndo.Start();
                timerAlternateTextUndo.Start();
            }

            if (Configuration.IsRunningOnLinux)
            {
                numericUpDownDuration.Left = timeUpDownStartTime.Left + timeUpDownStartTime.Width + 10;
                numericUpDownDuration.Width += 10;
                numericUpDownSec1.Width += 10;
                numericUpDownSec2.Width += 10;
                numericUpDownSecAdjust1.Width += 10;
                numericUpDownSecAdjust2.Width += 10;
                labelDuration.Left = numericUpDownDuration.Left;
            }

            _timerDoSyntaxColoring.Interval = 100;
            _timerDoSyntaxColoring.Tick += _timerDoSyntaxColoring_Tick;

            var showBeta = Configuration.Settings.General.ShowBetaStuff;
            generateDatetimeInfoFromVideoToolStripMenuItem.Visible = showBeta;
            toolStripMenuItemExportCaptionInc.Visible = showBeta;
            toolStripMenuItemExportUltech130.Visible = showBeta;
            toolStripMenuItemInverseSelection.Visible = showBeta;
            toolStripMenuItemSpellCheckFromCurrentLine.Visible = showBeta;
            toolStripMenuItemImportOcrHardSub.Visible = showBeta;
            toolStripMenuItemMeasurementConverter.Visible = showBeta;
            toolStripMenuItemOpenDvd.Visible = showBeta;

            if (Configuration.Settings.General.StartRememberPositionAndSize &&
                Configuration.Settings.General.SplitContainerMainSplitterDistance > 0 &&
                Configuration.Settings.General.SplitContainer1SplitterDistance > 0 &&
                Configuration.Settings.General.SplitContainerListViewAndTextSplitterDistance > 0)
            {
                splitContainerMain.SplitterDistance = Configuration.Settings.General.SplitContainerMainSplitterDistance;
                splitContainer1.SplitterDistance = Configuration.Settings.General.SplitContainer1SplitterDistance;
                splitContainerListViewAndText.SplitterDistance = Configuration.Settings.General.SplitContainerListViewAndTextSplitterDistance;
            }

            mediaPlayer.InitializeVolume(Configuration.Settings.General.VideoPlayerDefaultVolume);
            tabControlSubtitle.Invalidate();

            if (string.IsNullOrEmpty(Configuration.Settings.Language.CheckForUpdates.CheckingForUpdates))
            {
                checkForUpdatesToolStripMenuItem.Visible = false;
                toolStripMenuItemSplitterCheckForUpdates.Visible = false;
            }
            else if (Configuration.Settings.General.CheckForUpdates && Configuration.Settings.General.LastCheckForUpdates < DateTime.Now.AddDays(-5))
            {
                _checkForUpdatesHelper = new CheckForUpdatesHelper();
                _checkForUpdatesHelper.CheckForUpdates();
                _timerCheckForUpdates = new Timer();
                _timerCheckForUpdates.Interval = 7000;
                _timerCheckForUpdates.Tick += TimerCheckForUpdatesTick;
                _timerCheckForUpdates.Start();
                Configuration.Settings.General.LastCheckForUpdates = DateTime.Now;
            }

            _dragAndDropTimer.Interval = 50;
            _dragAndDropTimer.Tick += DoSubtitleListview1Drop;

            _dragAndDropVideoTimer.Interval = 50;
            _dragAndDropVideoTimer.Tick += DropVideoTick;

            if (_exitWhenLoaded)
            {
                Application.Exit();
            }

            // Fix some large font issue
            if (numericUpDownDuration.Left + numericUpDownDuration.Width > textBoxListViewText.Left)
            {
                numericUpDownDuration.Left = timeUpDownStartTime.Left + timeUpDownStartTime.Width + 5;
                numericUpDownDuration.Width = textBoxListViewText.Left - numericUpDownDuration.Left - 5;
                labelDuration.Left = numericUpDownDuration.Left;
            }

            if (string.IsNullOrEmpty(_fileName) && (_subtitle == null || _subtitle.Paragraphs.Count == 0))
            {
                _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
            }

            comboBoxSubtitleFormats.AutoCompleteSource = AutoCompleteSource.ListItems;
            comboBoxSubtitleFormats.AutoCompleteMode = AutoCompleteMode.Append;
            InitializePlayRateDropDown();

            LoadPlugins();

            mediaPlayer.OnEmptyPlayerClicked += MediaPlayer_OnEmptyPlayerClicked;
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);
            if (Configuration.Settings.General.StartInSourceView)
            {
                textBoxSource.Focus();
            }
            else
            {
                SubtitleListview1.Focus();
            }

            UiUtil.FixFonts(toolStripComboBoxWaveform);
            UiUtil.FixFonts(toolStripComboBoxFrameRate);
            UiUtil.FixFonts(comboBoxSubtitleFormats);
            UiUtil.FixFonts(comboBoxEncoding);
            UiUtil.FixFonts(toolStripSplitButtonPlayRate);
            _lastTextKeyDownTicks = DateTime.UtcNow.Ticks;
            ShowSubtitleTimer.Start();

            if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                var idx = _subtitleListViewIndex;
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                SubtitleListview1.SelectIndexAndEnsureVisibleFaster(idx);
            }
            SetTitle();
            labelSingleLine.Left = labelTextLineLengths.Left + labelTextLineLengths.Width - 6;
        }

        private void InitializePlayRateDropDown()
        {
            toolStripSplitButtonPlayRate.DropDownItems.Clear();
            var foreColor = UiUtil.ForeColor;
            var backColor = UiUtil.BackColor;
            for (int i = 30; i <= 300; i += 10)
            {
                toolStripSplitButtonPlayRate.DropDownItems.Add(new ToolStripMenuItem(i + "%", null, SetPlayRate) { Checked = i == 100, BackColor = backColor, ForeColor = foreColor });
            }
        }

        private void MediaPlayer_OnEmptyPlayerClicked(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_videoFileName))
            {
                buttonOpenVideo_Click(sender, e);
            }
        }

        private void SetPlayRate(object sender, EventArgs e)
        {
            SetPlayRate(sender, e, false);
        }

        private void SetPlayRate(object sender, EventArgs e, bool skipStatusMessage)
        {
            var playRateDropDownItem = sender as ToolStripMenuItem;
            if (playRateDropDownItem == null || mediaPlayer == null || mediaPlayer.VideoPlayer == null)
            {
                return;
            }

            foreach (ToolStripMenuItem item in toolStripSplitButtonPlayRate.DropDownItems)
            {
                item.Checked = false;
            }

            playRateDropDownItem.Checked = true;
            var percentText = playRateDropDownItem.Text.TrimEnd('%');
            if (!skipStatusMessage)
            {
                ShowStatus(string.Format(_language.SetPlayRateX, percentText));
            }

            var factor = double.Parse(percentText) / 100.0;
            toolStripSplitButtonPlayRate.Image = Math.Abs(factor - 1) < 0.01 ? imageListPlayRate.Images[0] : imageListPlayRate.Images[1];
            mediaPlayer.VideoPlayer.PlayRate = factor;
        }

        private void TimerCheckForUpdatesTick(object sender, EventArgs e)
        {
            _timerCheckForUpdates.Stop();
            if (_checkForUpdatesHelper.IsUpdateAvailable())
            {
                using (var form = new CheckForUpdates(this, _checkForUpdatesHelper))
                {
                    form.ShowDialog(this);
                }
            }

            _checkForUpdatesHelper = null;
            _timerCheckForUpdates = null;
        }

        private void _timerDoSyntaxColoring_Tick(object sender, EventArgs e)
        {
            UpdateListSyntaxColoring();
            _timerDoSyntaxColoring.Stop();
        }

        private static void SetPositionFromXYString(string positionAndSize, string name)
        {
            var parts = positionAndSize.Split(';');
            if (parts.Length == 4)
            {
                int left, top, width, height;
                if (int.TryParse(parts[0], out left)
                    && int.TryParse(parts[1], out top)
                    && int.TryParse(parts[2], out width)
                    && int.TryParse(parts[3], out height))
                {
                    PositionAndSizeForm.SetPositionAndSize(name, new Rectangle(left, top, width, height));
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("Could not set position and size for '{0}'.", name);
                }
            }
        }

        private void SetShortcuts()
        {
            _shortcuts.SetShortcuts();
            newToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileNew);
            openToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileOpen);
            toolStripMenuItemOpenKeepVideo.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileOpenKeepVideo);
            saveToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSave);
            saveOriginalToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveOriginal);
            saveOriginalAstoolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveOriginalAs);
            saveAsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveAs);
            openOriginalToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileOpenOriginal);
            removeOriginalToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileCloseOriginal);
            toolStripMenuItemCompare.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileCompare);
            toolStripMenuItemImportText.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileImportPlainText);
            toolStripMenuItemImportTimeCodes.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileImportTimeCodes);
            eBUSTLToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExportEbu);
            pACScreenElectronicsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExportPac);
            plainTextToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainFileExportPlainText);

            toolStripMenuItemUndo.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditUndo);
            toolStripMenuItemRedo.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditRedo);
            findToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditFind);
            findNextToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditFindNext);
            replaceToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditReplace);
            multipleReplaceToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditMultipleReplace);
            gotoLineNumberToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditGoToLineNumber);
            toolStripMenuItemRightToLeftMode.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditRightToLeft);
            toolStripMenuItemShowOriginalInPreview.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditToggleTranslationOriginalInPreviews);
            toolStripMenuItemInverseSelection.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditInverseSelection);
            toolStripMenuItemModifySelection.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditModifySelection);

            fixToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsFixCommonErrors);
            toolStripMenuItemAutoMergeShortLines.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMergeShortLines);
            toolStripMenuItemMergeDuplicateText.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMergeDuplicateText);
            toolStripMenuItemMergeLinesWithSameTimeCodes.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMergeSameTimeCodes);
            toolStripMenuItemMakeEmptyFromCurrent.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMakeEmptyFromCurrent);
            toolStripMenuItemAutoSplitLongLines.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsSplitLongLines);
            toolStripMenuItemSubtitlesBridgeGaps.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsDurationsBridgeGap);
            setMinimumDisplayTimeBetweenParagraphsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsMinimumDisplayTimeBetweenParagraphs);
            startNumberingFromToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsRenumber);
            removeTextForHearImpairedToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsRemoveTextForHI);
            ChangeCasingToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsChangeCasing);
            toolStripMenuItemShowOriginalInPreview.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditToggleTranslationOriginalInPreviews);
            toolStripMenuItemBatchConvert.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsBatchConvert);
            splitToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsSplit);
            appendTextVisuallyToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsAppend);
            joinSubtitlesToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainToolsJoin);

            openVideoToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoOpen);
            closeVideoToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoClose);
            showhideVideoToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoShowHideVideo);
            toolStripMenuItemBookmark.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralToggleBookmarksWithText);

            spellCheckToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheck);
            findDoubleWordsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheckFindDoubleWords);
            addWordToNameListToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheckAddWordToNames);

            translateByGoogleToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainTranslateGoogleTranslate);

            toolStripMenuItemAdjustAllTimes.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationAdjustTimes);
            visualSyncToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationVisualSync);
            toolStripMenuItemPointSync.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationPointSync);
            pointSyncViaOtherSubtitleToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationPointSyncViaFile);
            toolStripMenuItemChangeFrameRate2.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationChangeFrameRate);
            italicToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewItalic);
            removeAllFormattingsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainRemoveFormatting);
            boldToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewBold);
            boldToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewBold);
            underlineToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewUnderline);
            underlineToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewUnderline);
            boxToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewBox);
            boxToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewBox);
            splitLineToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewSplit);
            toolStripMenuItemSurroundWithMusicSymbols.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewToggleMusicSymbols);
            toolStripMenuItemAlignment.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewAlignment);
            copyOriginalTextToCurrentToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewCopyTextFromOriginalToCurrent);
            columnDeleteTextOnlyToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnDeleteText);
            toolStripMenuItemColumnDeleteText.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnDeleteTextAndShiftUp);
            ShiftTextCellsDownToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnInsertText);
            toolStripMenuItemPasteSpecial.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnPaste);
            toolStripMenuItemRuby.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxSelectionToRuby);
            moveTextUpToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnTextUp);
            moveTextDownToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnTextDown);
            toolStripMenuItemReverseRightToLeftStartEnd.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainEditReverseStartAndEndingForRTL);
            italicToolStripMenuItem1.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxItalic);

            audioVisualizer.InsertAtVideoPositionShortcut = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainWaveformInsertAtCurrentPosition);
            audioVisualizer.Move100MsLeft = UiUtil.GetKeys(Configuration.Settings.Shortcuts.Waveform100MsLeft);
            audioVisualizer.Move100MsRight = UiUtil.GetKeys(Configuration.Settings.Shortcuts.Waveform100MsRight);
            audioVisualizer.MoveOneSecondLeft = UiUtil.GetKeys(Configuration.Settings.Shortcuts.Waveform1000MsLeft);
            audioVisualizer.MoveOneSecondRight = UiUtil.GetKeys(Configuration.Settings.Shortcuts.Waveform1000MsRight);

            UiUtil.HelpKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.GeneralHelp);
            helpToolStripMenuItem1.ShortcutKeys = UiUtil.HelpKeys;


            // shortcut hints
            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2) && Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2.Length < 5)
            {
                labelAdjustF9.Text = Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2;
            }
            else if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest) && Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest.Length < 5)
            {
                labelAdjustF9.Text = Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest;
            }
            else
            {
                labelAdjustF9.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext) && Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext.Length < 5)
            {
                labelAdjustF10.Text = Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext;
            }
            else
            {
                labelAdjustF10.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainCreateSetStart) && Configuration.Settings.Shortcuts.MainCreateSetStart.Length < 5)
            {
                labelAdjustF11.Text = Configuration.Settings.Shortcuts.MainCreateSetStart;
                labelCreateF11.Text = Configuration.Settings.Shortcuts.MainCreateSetStart;
            }
            else
            {
                labelAdjustF11.Text = string.Empty;
                labelCreateF11.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainCreateSetEnd) && Configuration.Settings.Shortcuts.MainCreateSetEnd.Length < 5)
            {
                labelAdjustF12.Text = Configuration.Settings.Shortcuts.MainCreateSetEnd;
                labelCreateF12.Text = Configuration.Settings.Shortcuts.MainCreateSetEnd;
            }
            else
            {
                labelAdjustF12.Text = string.Empty;
                labelCreateF12.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos) && Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos.Length < 5)
            {
                labelCreateF9.Text = Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos;
            }
            else
            {
                labelCreateF9.Text = string.Empty;
            }

            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore) && Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore.Length < 5)
            {
                labelCreateF10.Text = Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore;
            }
            else
            {
                labelCreateF10.Text = string.Empty;
            }
        }

        public static object GetPropertiesAndDoAction(string pluginFileName, out string name, out string text, out decimal version, out string description, out string actionType, out string shortcut, out System.Reflection.MethodInfo mi)
        {
            name = null;
            text = null;
            version = 0;
            description = null;
            actionType = null;
            shortcut = null;
            mi = null;
            Assembly assembly;
            try
            {
                assembly = Assembly.Load(File.ReadAllBytes(pluginFileName));
            }
            catch
            {
                return null;
            }

            // note: *objectName must not include path or file extension
            string objectName = Path.GetFileNameWithoutExtension(pluginFileName);
            if (assembly != null)
            {
                Type pluginType = assembly.GetType("Nikse.SubtitleEdit.PluginLogic." + objectName);
                if (pluginType == null)
                {
                    return null;
                }

                object pluginObject = Activator.CreateInstance(pluginType);

                // IPlugin
                var t = pluginType.GetInterface("IPlugin");
                if (t == null)
                {
                    return null;
                }

                PropertyInfo pi = t.GetProperty("Name");
                if (pi != null)
                {
                    name = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Text");
                if (pi != null)
                {
                    text = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Description");
                if (pi != null)
                {
                    description = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Version");
                if (pi != null)
                {
                    version = Convert.ToDecimal(pi.GetValue(pluginObject, null));
                }

                pi = t.GetProperty("ActionType");
                if (pi != null)
                {
                    actionType = (string)pi.GetValue(pluginObject, null);
                }

                mi = t.GetMethod("DoAction");

                pi = t.GetProperty("Shortcut");
                if (pi != null)
                {
                    shortcut = (string)pi.GetValue(pluginObject, null);
                }

                return pluginObject;
            }

            return null;
        }

        private void LoadPlugins()
        {
            var path = Configuration.PluginsDirectory;
            if (!Directory.Exists(path))
            {
                return;
            }

            UiUtil.CleanUpMenuItemPlugin(fileToolStripMenuItem);
            UiUtil.CleanUpMenuItemPlugin(toolsToolStripMenuItem);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemSpellCheckMain);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemSynchronization);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemAutoTranslate);
            UiUtil.CleanUpMenuItemPlugin(toolStripMenuItemTranslateSelected);

            var fileMenuItems = new List<ToolStripMenuItem>();
            var toolsMenuItems = new List<ToolStripMenuItem>();
            var translateMenuItems = new List<ToolStripMenuItem>();
            var translateSelectedLinesMenuItems = new List<ToolStripMenuItem>();
            var syncMenuItems = new List<ToolStripMenuItem>();
            var spellCheckMenuItems = new List<ToolStripMenuItem>();

            foreach (var pluginFileName in Directory.GetFiles(path, "*.DLL"))
            {
                try
                {
                    string name, description, text, shortcut, actionType;
                    decimal version;
                    MethodInfo mi;
                    GetPropertiesAndDoAction(pluginFileName, out name, out text, out version, out description, out actionType, out shortcut, out mi);
                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(actionType) && mi != null)
                    {
                        var item = new ToolStripMenuItem { Text = text, Tag = pluginFileName };
                        UiUtil.FixFonts(item);

                        if (!string.IsNullOrEmpty(shortcut))
                        {
                            item.ShortcutKeys = UiUtil.GetKeys(shortcut);
                        }

                        if (actionType.Equals("File", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(fileMenuItems.Count, fileToolStripMenuItem, 2);
                            item.Click += PluginToolClick;
                            fileMenuItems.Add(item);
                        }
                        else if (actionType.Equals("Tool", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(toolsMenuItems.Count, toolsToolStripMenuItem);
                            item.Click += PluginToolClick;
                            toolsMenuItems.Add(item);
                        }
                        else if (actionType.Equals("Sync", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(syncMenuItems.Count, toolStripMenuItemSynchronization);
                            item.Click += PluginToolClick;
                            syncMenuItems.Add(item);
                        }
                        else if (actionType.Equals("Translate", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(translateMenuItems.Count, toolStripMenuItemAutoTranslate);
                            item.Click += PluginClickTranslate;
                            translateMenuItems.Add(item);

                            // selected lines
                            item = new ToolStripMenuItem();
                            item.Text = text;
                            item.Tag = pluginFileName;
                            UiUtil.FixFonts(item);
                            AddSeparator(translateMenuItems.Count - 1, toolStripMenuItemTranslateSelected);
                            item.Click += PluginClickTranslateSelectedLines;
                            translateSelectedLinesMenuItems.Add(item);
                        }
                        else if (actionType.Equals("SpellCheck", StringComparison.OrdinalIgnoreCase))
                        {
                            AddSeparator(spellCheckMenuItems.Count, toolStripMenuItemSpellCheckMain);
                            item.Click += PluginClickNoFormatChange;
                            spellCheckMenuItems.Add(item);
                        }
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show(string.Format(_language.ErrorLoadingPluginXErrorY, pluginFileName, exception.Message));
                }
            }
            foreach (var fileMenuItem in fileMenuItems)
            {
                fileToolStripMenuItem.DropDownItems.Insert(fileToolStripMenuItem.DropDownItems.Count - 2, fileMenuItem);
            }
            toolsToolStripMenuItem.DropDownItems.AddRange(toolsMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemAutoTranslate.DropDownItems.AddRange(translateMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemTranslateSelected.DropDownItems.AddRange(translateSelectedLinesMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemSynchronization.DropDownItems.AddRange(syncMenuItems.OrderBy(p => p.Text).ToArray());
            toolStripMenuItemSpellCheckMain.DropDownItems.AddRange(spellCheckMenuItems.OrderBy(p => p.Text).ToArray());
        }

        private void AddSeparator(int pluginCount, ToolStripMenuItem parent, int? relativeOffset = null)
        {
            if (pluginCount == 0)
            {
                var tss = new ToolStripSeparator();
                if (relativeOffset == null)
                {
                    if (parent.DropDownItems.Count > 0 && parent.DropDownItems[parent.DropDownItems.Count - 1].GetType() == typeof(ToolStripSeparator))
                    {
                        return; // don't app separator after separator
                    }

                    parent.DropDownItems.Add(tss);
                }
                else
                {
                    if (parent.DropDownItems.Count - relativeOffset.Value >= 0 &&
                        relativeOffset.Value < parent.DropDownItems.Count &&
                        parent.DropDownItems.Count > 0 &&
                        parent.DropDownItems[parent.DropDownItems.Count - relativeOffset.Value].GetType() == typeof(ToolStripSeparator))
                    {
                        return; // don't app separator after separator
                    }

                    parent.DropDownItems.Insert(parent.DropDownItems.Count - relativeOffset.Value, tss);
                }

                UiUtil.FixFonts(tss);
            }
        }

        private void PluginToolClick(object sender, EventArgs e)
        {
            CallPlugin(sender, true, false);
        }

        private void PluginClickNoFormatChange(object sender, EventArgs e)
        {
            CallPlugin(sender, false, false);
        }

        private void PluginClickTranslate(object sender, EventArgs e)
        {
            CallPlugin(sender, false, true);
        }

        private void PluginClickTranslateSelectedLines(object sender, EventArgs e)
        {
            CallPluginTranslateSelectedLines(sender);
        }

        private void CallPlugin(object sender, bool allowChangeFormat, bool translate)
        {
            try
            {
                var item = (ToolStripItem)sender;
                var pluginObject = GetPropertiesAndDoAction(item.Tag.ToString(), out var name, out var text, out var version, out var description, out var actionType, out var shortcut, out var mi);
                if (mi == null)
                {
                    return;
                }

                string rawText = null;
                var format = GetCurrentSubtitleFormat();
                if (format != null)
                {
                    rawText = _subtitle.ToText(format);
                }

                string pluginResult = (string)mi.Invoke(pluginObject,
                    new object[]
                    {
                        this,
                        _subtitle.ToText(new SubRip()),
                        Configuration.Settings.General.CurrentFrameRate,
                        Configuration.Settings.General.ListViewLineSeparatorString,
                        _fileName,
                        _videoFileName,
                        rawText
                    });

                if (!string.IsNullOrEmpty(pluginResult) && pluginResult.Length > 10 && text != pluginResult)
                {
                    var lines = new List<string>(pluginResult.SplitToLines());

                    MakeHistoryForUndo(string.Format(_language.BeforeRunningPluginXVersionY, name, version));

                    var s = new Subtitle();
                    SubtitleFormat newFormat = null;
                    foreach (var subtitleFormat in SubtitleFormat.AllSubtitleFormats)
                    {
                        if (subtitleFormat.IsMine(lines, null))
                        {
                            subtitleFormat.LoadSubtitle(s, lines, null);
                            newFormat = subtitleFormat;
                            break;
                        }
                    }

                    if (translate)
                    {
                        _subtitleAlternate = new Subtitle(_subtitle);
                        _subtitleAlternateFileName = _fileName;

                        var language = LanguageAutoDetect.AutoDetectGoogleLanguageOrNull(s);
                        if (language != null && !string.IsNullOrEmpty(_fileName))
                        {
                            _fileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
                            var oldLang = "." + LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleAlternate);
                            if (oldLang.Length == 3 && _fileName.EndsWith(oldLang, StringComparison.OrdinalIgnoreCase))
                            {
                                _fileName = _fileName.Remove(_fileName.Length - 3);
                            }

                            _fileName += "." + language + GetCurrentSubtitleFormat().Extension;
                        }
                        else
                        {
                            _fileName = null;
                        }

                        _subtitle.Paragraphs.Clear();
                        foreach (var p in s.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        ShowStatus(_language.SubtitleTranslated);
                        ShowSource();
                        SubtitleListview1.ShowAlternateTextColumn(_languageGeneral.OriginalText);
                        SubtitleListview1.AutoSizeAllColumns(this);
                        SetupAlternateEdit();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        ResetHistory();
                        RestoreSubtitleListviewIndices();
                        _converted = true;
                        SetTitle();
                        return;
                    }

                    if (newFormat != null)
                    {
                        if (allowChangeFormat && newFormat.GetType() == typeof(SubRip) && IsOnlyTextChanged(_subtitle, s))
                        {
                            allowChangeFormat = false;
                        }

                        if (!allowChangeFormat && IsOnlyTextChanged(_subtitle, s))
                        {
                            for (int k = 0; k < s.Paragraphs.Count; k++)
                            {
                                _subtitle.Paragraphs[k].Text = s.Paragraphs[k].Text;
                            }
                        }
                        else
                        {
                            _subtitle.Paragraphs.Clear();
                            _subtitle.Header = s.Header;
                            _subtitle.Footer = s.Footer;
                            foreach (var p in s.Paragraphs)
                            {
                                _subtitle.Paragraphs.Add(p);
                            }
                        }

                        if (allowChangeFormat)
                        {
                            SetCurrentFormat(newFormat);
                        }

                        SaveSubtitleListviewIndices();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        RestoreSubtitleListviewIndices();
                        ShowSource();

                        ShowStatus(string.Format(_language.PluginXExecuted, name));
                    }
                    else
                    {
                        MessageBox.Show(_language.UnableToReadPluginResult);
                    }
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message + Environment.NewLine + exception.StackTrace);
                if (exception.InnerException != null)
                {
                    MessageBox.Show(exception.InnerException.Message + Environment.NewLine + exception.InnerException.StackTrace);
                }
            }
        }

        private void CallPluginTranslateSelectedLines(object sender)
        {
            try
            {
                var item = (ToolStripItem)sender;
                string name, description, text, shortcut, actionType;
                decimal version;
                MethodInfo mi;
                var pluginObject = GetPropertiesAndDoAction(item.Tag.ToString(), out name, out text, out version, out description, out actionType, out shortcut, out mi);
                if (mi == null)
                {
                    return;
                }

                SaveSubtitleListviewIndices();
                var selectedLines = new Subtitle();
                foreach (int index in SubtitleListview1.SelectedIndices)
                {
                    var p = _subtitle.Paragraphs[index];
                    if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                    {
                        var original = Utilities.GetOriginalParagraph(index, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            p = original;
                        }
                        else
                        {
                            p = new Paragraph(string.Empty, p.StartTime.TotalMilliseconds, p.EndTime.TotalMilliseconds);
                        }
                    }

                    selectedLines.Paragraphs.Add(p);
                }

                string rawText = null;
                SubtitleFormat format = GetCurrentSubtitleFormat();
                if (format != null)
                {
                    rawText = selectedLines.ToText(format);
                }

                string pluginResult = (string)mi.Invoke(pluginObject,
                    new object[]
                    {
                        this,
                        selectedLines.ToText(new SubRip()),
                        Configuration.Settings.General.CurrentFrameRate,
                        Configuration.Settings.General.ListViewLineSeparatorString,
                        _fileName,
                        _videoFileName,
                        rawText
                    });

                if (!string.IsNullOrEmpty(pluginResult) && pluginResult.Length > 10 && text != pluginResult)
                {
                    var lines = new List<string>(pluginResult.SplitToLines());
                    MakeHistoryForUndo(string.Format(_language.BeforeRunningPluginXVersionY, name, version));
                    var s = new Subtitle();
                    var f = new SubRip();
                    if (f.IsMine(lines, null))
                    {
                        f.LoadSubtitle(s, lines, null);

                        // we only update selected lines
                        int i = 0;
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index] = s.Paragraphs[i];
                            i++;
                        }

                        ShowSource();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        RestoreSubtitleListviewIndices();
                        ShowStatus(string.Format(_language.PluginXExecuted, name));
                    }
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message + Environment.NewLine + exception.StackTrace);
                if (exception.InnerException != null)
                {
                    MessageBox.Show(exception.InnerException.Message + Environment.NewLine + exception.InnerException.StackTrace);
                }
            }
        }

        private bool IsOnlyTextChanged(Subtitle s1, Subtitle s2)
        {
            if (s1.Paragraphs.Count != s2.Paragraphs.Count)
            {
                return false;
            }

            for (int i = 0; i < s1.Paragraphs.Count; i++)
            {
                var p1 = s1.Paragraphs[i];
                var p2 = s2.Paragraphs[i];
                if (Math.Abs(p1.StartTime.TotalMilliseconds - p2.StartTime.TotalMilliseconds) > 0.01)
                {
                    return false;
                }

                if (Math.Abs(p1.EndTime.TotalMilliseconds - p2.EndTime.TotalMilliseconds) > 0.01)
                {
                    return false;
                }
            }

            return true;
        }

        private string _lastWrittenAutoBackup = string.Empty;
        private bool _showAutoBackupError = true;

        private void TimerAutoBackupTick(object sender, EventArgs e)
        {
            string currentText = string.Empty;
            if (_subtitle != null && _subtitle.Paragraphs.Count > 0)
            {
                var saveFormat = GetCurrentSubtitleFormat();
                if (!saveFormat.IsTextBased)
                {
                    saveFormat = new SubRip();
                }

                currentText = _subtitle.ToText(saveFormat);
                if (_textAutoBackup == null)
                {
                    _textAutoBackup = currentText;
                }

                if ((Configuration.Settings.General.AutoSave ||
                     !string.IsNullOrEmpty(_textAutoBackup) && currentText.Trim() != _textAutoBackup.Trim() && !string.IsNullOrWhiteSpace(currentText)) &&
                    _lastWrittenAutoBackup != currentText)
                {
                    if (!Directory.Exists(Configuration.AutoBackupDirectory))
                    {
                        try
                        {
                            Directory.CreateDirectory(Configuration.AutoBackupDirectory);
                        }
                        catch (Exception exception)
                        {
                            MessageBox.Show(string.Format(_language.UnableToCreateBackupDirectory, Configuration.AutoBackupDirectory, exception.Message));
                            return;
                        }
                    }

                    string title = string.Empty;
                    if (!string.IsNullOrEmpty(_fileName))
                    {
                        title = "_" + Path.GetFileNameWithoutExtension(_fileName);
                    }

                    string fileName = string.Format("{0}{1:0000}-{2:00}-{3:00}_{4:00}-{5:00}-{6:00}{7}{8}", Configuration.AutoBackupDirectory, DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, title, saveFormat.Extension);
                    try
                    {
                        File.WriteAllText(fileName, currentText);
                        _lastWrittenAutoBackup = currentText;
                    }
                    catch (Exception exception)
                    {
                        if (_showAutoBackupError)
                        {
                            MessageBox.Show("Unable to save auto-backup to file: " + fileName + Environment.NewLine +
                                            Environment.NewLine +
                                            exception.Message + Environment.NewLine + exception.StackTrace);
                            _showAutoBackupError = false;
                        }
                    }

                    if (!_cleanupHasRun)
                    {
                        // let the cleanup process be handled by worker thread
                        System.Threading.Tasks.Task.Factory.StartNew(() => { RestoreAutoBackup.CleanAutoBackupFolder(Configuration.AutoBackupDirectory, Configuration.Settings.General.AutoBackupDeleteAfterMonths); });
                        _cleanupHasRun = true;
                    }
                }
            }

            _textAutoBackup = currentText;

            if (_subtitleAlternateFileName != null && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                var saveFormat = GetCurrentSubtitleFormat();
                if (!saveFormat.IsTextBased)
                {
                    saveFormat = new SubRip();
                }

                string currentTextAlternate = _subtitleAlternate.ToText(saveFormat);
                if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    if (_textAutoBackupOriginal == null)
                    {
                        _textAutoBackupOriginal = currentTextAlternate;
                    }

                    if (Configuration.Settings.General.AutoSave ||
                        !string.IsNullOrEmpty(_textAutoBackupOriginal) && currentTextAlternate.Trim() != _textAutoBackupOriginal.Trim() && !string.IsNullOrWhiteSpace(currentTextAlternate))
                    {
                        if (!Directory.Exists(Configuration.AutoBackupDirectory))
                        {
                            try
                            {
                                Directory.CreateDirectory(Configuration.AutoBackupDirectory);
                            }
                            catch (Exception exception)
                            {
                                MessageBox.Show(string.Format(_language.UnableToCreateBackupDirectory, Configuration.AutoBackupDirectory, exception.Message));
                                return;
                            }
                        }

                        string title = string.Empty;
                        if (!string.IsNullOrEmpty(_subtitleAlternateFileName))
                        {
                            title = "_" + Path.GetFileNameWithoutExtension(_subtitleAlternateFileName);
                        }

                        string fileName = string.Format("{0}{1:0000}-{2:00}-{3:00}_{4:00}-{5:00}-{6:00}{7}{8}", Configuration.AutoBackupDirectory, DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, "_Original" + title, saveFormat.Extension);
                        File.WriteAllText(fileName, currentTextAlternate);
                    }
                }

                _textAutoBackupOriginal = currentTextAlternate;
            }
        }

        private void DropVideoTick(object sender, EventArgs e)
        {
            _dragAndDropVideoTimer.Stop();
            OpenVideo(_videoFileName);
        }

        private void mediaPlayer_DragDrop(object sender, DragEventArgs e)
        {
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length == 1)
            {
                string fileName = files[0];
                string ext = Path.GetExtension(fileName).ToLowerInvariant();
                if (Utilities.GetVideoFileFilter(true).Contains(ext))
                {
                    if (string.IsNullOrEmpty(_fileName))
                    {
                        var dirName = Path.GetDirectoryName(fileName);
                        saveFileDialog1.InitialDirectory = dirName;
                        openFileDialog1.InitialDirectory = dirName;
                    }

                    _videoFileName = fileName;
                    _dragAndDropVideoTimer.Start();
                }
                else
                {
                    try
                    {
                        var fi = new FileInfo(fileName);
                        if (fi.Length < Subtitle.MaxFileSize)
                        {
                            var lines = new List<string>(File.ReadAllLines(fileName));
                            foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                            {
                                if (format.IsMine(lines, fileName))
                                {
                                    OpenSubtitle(fileName, null);
                                    return;
                                }
                            }
                        }
                    }
                    catch
                    {
                    }

                    MessageBox.Show(string.Format(_language.DropFileXNotAccepted, fileName));
                }
            }
            else
            {
                MessageBox.Show(_language.DropOnlyOneFile);
            }
        }

        private void mediaPlayer_DragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        private void buttonSecBack2_Click(object sender, EventArgs e)
        {
            GoBackSeconds((double)numericUpDownSec2.Value);
        }

        private void buttonForward2_Click(object sender, EventArgs e)
        {
            GoBackSeconds(-(double)numericUpDownSec2.Value);
        }

        private void buttonAdjustSecBack2_Click(object sender, EventArgs e)
        {
            GoBackSeconds((double)numericUpDownSecAdjust2.Value);
        }

        private void buttonAdjustSecForward2_Click(object sender, EventArgs e)
        {
            GoBackSeconds(-(double)numericUpDownSecAdjust2.Value);
        }

        private void translatepoweredByMicrosoftToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TranslateViaGoogle(false, false);
        }

        private void AudioWaveform_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks == null)
            {
                if (_videoFileName != null && (_videoFileName.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
                                               _videoFileName.StartsWith("https://", StringComparison.OrdinalIgnoreCase)))
                {
                    return;
                }

                if (string.IsNullOrEmpty(_videoFileName))
                {
                    buttonOpenVideo_Click(sender, e);
                    if (string.IsNullOrEmpty(_videoFileName))
                    {
                        return;
                    }

                    if (audioVisualizer.WavePeaks != null && File.Exists(WavePeakGenerator.GetPeakWaveFileName(_videoFileName)))
                    {
                        return; // waveform already exists and is loaded
                    }
                }

                mediaPlayer.Pause();
                using (var addWaveform = new AddWaveform())
                {
                    var peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(_videoFileName);
                    var spectrogramFolder = WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(_videoFileName);

                    if (WavePeakGenerator.IsFileValidForVisualizer(_videoFileName))
                    {
                        addWaveform.InitializeViaWaveFile(_videoFileName, peakWaveFileName, spectrogramFolder);
                    }
                    else
                    {
                        addWaveform.Initialize(_videoFileName, peakWaveFileName, spectrogramFolder, _videoAudioTrackNumber);
                    }

                    if (addWaveform.ShowDialog() == DialogResult.OK)
                    {
                        audioVisualizer.ZoomFactor = 1.0;
                        audioVisualizer.VerticalZoomFactor = 1.0;
                        SelectZoomTextInComboBox();
                        audioVisualizer.WavePeaks = addWaveform.Peaks;
                        audioVisualizer.SetSpectrogram(addWaveform.Spectrogram);
                        timerWaveform.Start();
                    }
                }
            }
        }

        private void timerWaveform_Tick(object sender, EventArgs e)
        {
            if (audioVisualizer.Visible && mediaPlayer.VideoPlayer != null && audioVisualizer.WavePeaks != null)
            {
                int index = -1;
                if (SubtitleListview1.SelectedItems.Count > 0)
                {
                    index = SubtitleListview1.SelectedItems[0].Index;
                }

                if (audioVisualizer.Locked)
                {
                    double startPos = mediaPlayer.CurrentPosition - ((audioVisualizer.EndPositionSeconds - audioVisualizer.StartPositionSeconds) / 2.0);
                    if (startPos < 0)
                    {
                        startPos = 0;
                    }

                    SetWaveformPosition(startPos, mediaPlayer.CurrentPosition, index);
                }
                else if (mediaPlayer.CurrentPosition > audioVisualizer.EndPositionSeconds || mediaPlayer.CurrentPosition < audioVisualizer.StartPositionSeconds)
                {
                    double startPos = mediaPlayer.CurrentPosition - 0.01;
                    if (startPos < 0)
                    {
                        startPos = 0;
                    }

                    audioVisualizer.ClearSelection();
                    SetWaveformPosition(startPos, mediaPlayer.CurrentPosition, index);
                }
                else
                {
                    SetWaveformPosition(audioVisualizer.StartPositionSeconds, mediaPlayer.CurrentPosition, index);
                }

                bool paused = mediaPlayer.IsPaused;
                toolStripButtonWaveformPause.Visible = !paused;
                toolStripButtonWaveformPlay.Visible = paused;
            }
            else
            {
                toolStripButtonWaveformPlay.Visible = true;
                toolStripButtonWaveformPause.Visible = false;
            }
        }

        private void addParagraphHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            audioVisualizer.ClearSelection();
            var newParagraph = new Paragraph(audioVisualizer.NewSelectionParagraph);

            mediaPlayer.Pause();

            // find index where to insert
            int index = 0;
            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                var p = _subtitle.Paragraphs[i];
                if (p.StartTime.TotalMilliseconds > newParagraph.StartTime.TotalMilliseconds &&
                    (!p.StartTime.IsMaxTime || !HasSmallerStartTimes(_subtitle, i + 1, newParagraph.StartTime.TotalMilliseconds)))
                {
                    break;
                }

                index++;
            }

            SetStyleForNewParagraph(newParagraph, index);

            MakeHistoryForUndo(_language.BeforeInsertLine);

            // create and insert
            var format = GetCurrentSubtitleFormat();
            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), index, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(index, newParagraph);

                if (_subtitleAlternate != null && SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                    _subtitleAlternate.Renumber();
                }

                _subtitleListViewIndex = -1;
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);

            textBoxListViewText.Focus();
            audioVisualizer.NewSelectionParagraph = null;

            ShowStatus(string.Format(_language.VideoControls.NewTextInsertAtX, newParagraph.StartTime.ToShortString()));
            audioVisualizer.Invalidate();
        }

        private static bool HasSmallerStartTimes(Subtitle subtitle, int startIndex, double startMs)
        {
            for (int i = startIndex; i < subtitle.Paragraphs.Count; i++)
            {
                var p = subtitle.Paragraphs[i];
                if (startMs > p.StartTime.TotalMilliseconds && !p.StartTime.IsMaxTime)
                {
                    return true;
                }
            }

            return false;
        }

        private void addParagraphAndPasteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            addParagraphHereToolStripMenuItem_Click(sender, e);
            textBoxListViewText.Text = Clipboard.GetText();
        }

        private void mergeWithPreviousToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                MergeBeforeToolStripMenuItemClick(null, null);
            }

            audioVisualizer.Invalidate();
        }

        private void deleteParagraphToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                ToolStripMenuItemDeleteClick(null, null);
            }

            audioVisualizer.Invalidate();
        }

        private void splitToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                if (audioVisualizer.RightClickedParagraph.StartTime.TotalMilliseconds == _subtitle.Paragraphs[i].StartTime.TotalMilliseconds &&
                    audioVisualizer.RightClickedParagraph.EndTime.TotalMilliseconds == _subtitle.Paragraphs[i].EndTime.TotalMilliseconds)
                {
                    SubtitleListview1.SelectIndexAndEnsureVisible(i, true);
                    SplitSelectedParagraph(_audioWaveformRightClickSeconds, null);
                    break;
                }
            }

            audioVisualizer.Invalidate();
        }

        private void mergeWithNextToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                MergeAfterToolStripMenuItemClick(null, null);
            }

            audioVisualizer.Invalidate();
        }

        private void extendToPreviousToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                ExtendSelectedLinesToPreviousLine();
            }

            audioVisualizer.Invalidate();
        }

        private void extendToNextToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                ExtendSelectedLinesToNextLine();
            }

            audioVisualizer.Invalidate();
        }

        private void goToPreviousSubtitleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.RightClickedParagraph != null)
            {
                GoToPreviousSubtitle(audioVisualizer.RightClickedParagraph.StartTime.TotalMilliseconds);
            }
            else
            {
                GoToPreviousSubtitle(mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
            }
        }

        private void goToNextSubtitleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.RightClickedParagraph != null)
            {
                GoToNextSubtitle(audioVisualizer.RightClickedParagraph.StartTime.TotalMilliseconds);
            }
            else
            {
                GoToNextSubtitle(mediaPlayer.CurrentPosition * TimeCode.BaseUnit);
            }
        }

        private void buttonWaveformZoomIn_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks != null && audioVisualizer.Visible)
            {
                audioVisualizer.ZoomFactor += 0.1;
            }
        }

        private void buttonWaveformZoomOut_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks != null && audioVisualizer.Visible)
            {
                audioVisualizer.ZoomFactor -= 0.1;
            }
        }

        private void buttonWaveformZoomReset_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks != null && audioVisualizer.Visible)
            {
                audioVisualizer.ZoomFactor = 1.0;
            }
        }

        private void toolStripMenuItemWaveformPlaySelection_Click(object sender, EventArgs e)
        {
            WaveformPlaySelection();
        }

        private void WaveformPlaySelection(bool nearEnd = false)
        {
            if (mediaPlayer.VideoPlayer != null)
            {
                var p =
                    audioVisualizer.NewSelectionParagraph ??
                    audioVisualizer.SelectedParagraph;

                if (p != null)
                {
                    double startSeconds = p.StartTime.TotalSeconds;
                    _endSeconds = p.EndTime.TotalSeconds;
                    if (nearEnd)
                    {
                        startSeconds = Math.Max(startSeconds, _endSeconds - 1.0);
                    }

                    mediaPlayer.CurrentPosition = startSeconds;
                    UiUtil.ShowSubtitle(_subtitle, mediaPlayer);
                    mediaPlayer.Play();
                }
            }
        }

        private void toolStripButtonWaveformZoomIn_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks != null && audioVisualizer.Visible)
            {
                audioVisualizer.ZoomFactor += 0.1;
                SelectZoomTextInComboBox();
            }
        }

        private void toolStripButtonWaveformZoomOut_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks != null && audioVisualizer.Visible)
            {
                audioVisualizer.ZoomFactor -= 0.1;
                SelectZoomTextInComboBox();
            }
        }

        private void toolStripComboBoxWaveform_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                ComboBoxZoomItem item = toolStripComboBoxWaveform.SelectedItem as ComboBoxZoomItem;
                if (item != null)
                {
                    audioVisualizer.ZoomFactor = item.ZoomFactor;
                }
            }
            catch
            {
            }
        }

        private void SelectZoomTextInComboBox()
        {
            int i = 0;
            foreach (ComboBoxZoomItem item in toolStripComboBoxWaveform.Items)
            {
                if (Math.Abs(audioVisualizer.ZoomFactor - item.ZoomFactor) < 0.001)
                {
                    toolStripComboBoxWaveform.SelectedIndex = i;
                    return;
                }

                i++;
            }
        }

        private void toolStripButtonWaveformPause_Click(object sender, EventArgs e)
        {
            mediaPlayer.Pause();
        }

        private void toolStripButtonWaveformPlay_Click(object sender, EventArgs e)
        {
            mediaPlayer.Play();
        }

        private void toolStripButtonLockCenter_Click(object sender, EventArgs e)
        {
            toolStripButtonLockCenter.Checked = !toolStripButtonLockCenter.Checked;
            audioVisualizer.Locked = toolStripButtonLockCenter.Checked;
            Configuration.Settings.General.WaveformCenter = audioVisualizer.Locked;
        }

        private void trackBarWaveformPosition_ValueChanged(object sender, EventArgs e)
        {
            mediaPlayer.CurrentPosition = trackBarWaveformPosition.Value;
        }

        private void buttonCustomUrl_Click(object sender, EventArgs e)
        {
            RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl1);
        }

        private void buttonCustomUrl2_Click(object sender, EventArgs e)
        {
            RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl2);
        }

        private void ShowhideWaveformToolStripMenuItemClick(object sender, EventArgs e)
        {
            toolStripButtonToggleWaveform_Click(null, null);
        }

        private void AudioWaveformDragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        private void AudioWaveformDragDrop(object sender, DragEventArgs e)
        {
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length != 1)
            {
                MessageBox.Show(_language.DropOnlyOneFile);
                return;
            }

            string fileName = files[0];
            string ext = Path.GetExtension(fileName).ToLowerInvariant();
            if (ext != ".wav" || !WavePeakGenerator.IsFileValidForVisualizer(fileName))
            {
                if (audioVisualizer.WavePeaks == null && (Utilities.VideoFileExtensions.Contains(ext) || Utilities.AudioFileExtensions.Contains(ext)))
                {
                    _videoFileName = fileName;
                    AudioWaveform_Click(null, null);
                    OpenVideo(_videoFileName);
                    return;
                }

                try
                {
                    var fi = new FileInfo(fileName);
                    if (fi.Length < 1024 * 500)
                    {
                        var lines = new List<string>(File.ReadAllLines(fileName));
                        foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                        {
                            if (format.IsMine(lines, fileName))
                            {
                                OpenSubtitle(fileName, null);
                                return;
                            }
                        }
                    }
                }
                catch
                {
                }
            }

            if (ext != ".wav")
            {
                MessageBox.Show(".wav only!");
                return;
            }

            if (_videoFileName == null)
            {
                OpenVideo(fileName);
                return;
            }

            using (var addWaveform = new AddWaveform())
            {
                string peakWaveFileName = WavePeakGenerator.GetPeakWaveFileName(_videoFileName);
                string spectrogramFolder = Nikse.SubtitleEdit.Core.WavePeakGenerator.SpectrogramDrawer.GetSpectrogramFolder(_videoFileName);
                addWaveform.InitializeViaWaveFile(fileName, peakWaveFileName, spectrogramFolder);
                if (addWaveform.ShowDialog() == DialogResult.OK)
                {
                    audioVisualizer.WavePeaks = addWaveform.Peaks;
                    audioVisualizer.SetSpectrogram(addWaveform.Spectrogram);
                    timerWaveform.Start();
                }
            }
        }

        private void toolStripMenuItemImportBluRaySup_Click(object sender, EventArgs e)
        {
            if (ContinueNewOrExit())
            {
                openFileDialog1.Title = _language.OpenBluRaySupFile;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = _language.BluRaySupFiles + "|*.sup";
                if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    if (!FileUtil.IsBluRaySup(openFileDialog1.FileName) && FileUtil.IsSpDvdSup(openFileDialog1.FileName))
                    {
                        ImportAndOcrSpDvdSup(openFileDialog1.FileName, false);
                        return;
                    }

                    ImportAndOcrBluRaySup(openFileDialog1.FileName, false);
                }
            }
        }

        private void ImportAndOcrBluRaySup(string fileName, bool showInTaskbar)
        {
            var log = new StringBuilder();
            var subtitles = BluRaySupParser.ParseBluRaySup(fileName, log);
            if (subtitles.Count == 0)
            {
                string msg = _language.BlurayNotSubtitlesFound + Environment.NewLine + Environment.NewLine + log.ToString();
                if (msg.Length > 800)
                {
                    msg = msg.Substring(0, 800);
                }

                MessageBox.Show(msg.Trim() + "...");
                return;
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                vobSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName);
                vobSubOcr.FileName = Path.GetFileName(fileName);
                if (vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeImportingBluRaySupFile);
                    FileNew();
                    _subtitle.Paragraphs.Clear();
                    SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    _subtitleListViewIndex = -1;
                    SubtitleListview1.FirstVisibleIndex = -1;
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                    _fileName = Path.ChangeExtension(fileName, GetCurrentSubtitleFormat().Extension);
                    SetTitle();
                    _converted = true;

                    Configuration.Settings.Save();
                }
                else
                {
                    _exitWhenLoaded = _loading;
                }
            }
        }

        private void selectAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            GetFocusedTextBox().SelectAll();
        }

        private void cutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            GetFocusedTextBox().Cut();
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            GetFocusedTextBox().Copy();
        }

        private void PasteToolStripMenuItemClick(object sender, EventArgs e)
        {
            GetFocusedTextBox().Paste();
        }

        private void DeleteToolStripMenuItemClick(object sender, EventArgs e)
        {
            GetFocusedTextBox().SelectedText = string.Empty;
        }

        private void NormalToolStripMenuItem1Click(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            if (tb.SelectionLength == 0)
            {
                var allText = HtmlUtil.RemoveHtmlTags(tb.Text);
                allText = NetflixImsc11Japanese.RemoveTags(allText);
                tb.Text = allText;
                return;
            }

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = HtmlUtil.RemoveHtmlTags(text);
            text = NetflixImsc11Japanese.RemoveTags(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        private TextBox GetFocusedTextBox()
        {
            if (!textBoxListViewTextAlternate.Visible)
            {
                return textBoxListViewText;
            }

            return textBoxListViewTextAlternate.Focused ? textBoxListViewTextAlternate : textBoxListViewText;
        }

        private void TextBoxListViewToggleTag(string tag)
        {
            var tb = GetFocusedTextBox();

            string text;
            int selectionStart = tb.SelectionStart;

            // No text selected.
            if (tb.SelectedText.Length == 0)
            {
                text = tb.Text;

                // Split lines (split a subtitle into its lines).
                var lines = text.SplitToLines();

                // Get current line index (the line where the cursor is current located).
                int numberOfNewLines = 0;
                for (int i = 0; i < tb.SelectionStart && i < text.Length; i++)
                {
                    if (text[i] == '\n')
                    {
                        numberOfNewLines++;
                    }
                }
                int selectedLineIdx = numberOfNewLines; // Do not use 'GetLineFromCharIndex' as it also counts when lines are wrapped

                // Get line from index.
                string selectedLine = lines[selectedLineIdx];

                // Test if line at where cursor is current at is a dialog.
                bool isDialog = selectedLine.StartsWith('-') ||
                                selectedLine.StartsWith("<" + tag + ">-", StringComparison.OrdinalIgnoreCase);

                // Will be used keep cursor in its previous location after toggle/untoggle.
                int textLen = text.Length;

                // 1st set the cursor position to zero.
                tb.SelectionStart = 0;

                // If is dialog, only toggle/Untoggle line where caret/cursor is current at.
                if (isDialog)
                {
                    lines[selectedLineIdx] = HtmlUtil.ToggleTag(selectedLine, tag);
                    text = string.Join(Environment.NewLine, lines);
                }
                else
                {
                    text = HtmlUtil.ToggleTag(text, tag);
                }

                tb.Text = text;
                // Note: Math.Max will prevent blowing if caret is at the begining and tag was untoggled.
                tb.SelectionStart = textLen > text.Length ? Math.Max(selectionStart - 3, 0) : selectionStart + 3;
            }
            else
            {
                string post = string.Empty;
                string pre = string.Empty;
                // There is text selected
                text = tb.SelectedText;
                while (text.EndsWith(' ') || text.EndsWith(Environment.NewLine, StringComparison.Ordinal) || text.StartsWith(' ') || text.StartsWith(Environment.NewLine, StringComparison.Ordinal))
                {
                    if (text.EndsWith(' '))
                    {
                        post += " ";
                        text = text.Remove(text.Length - 1);
                    }

                    if (text.EndsWith(Environment.NewLine, StringComparison.Ordinal))
                    {
                        post += Environment.NewLine;
                        text = text.Remove(text.Length - 2);
                    }

                    if (text.StartsWith(' '))
                    {
                        pre += " ";
                        text = text.Remove(0, 1);
                    }

                    if (text.StartsWith(Environment.NewLine, StringComparison.Ordinal))
                    {
                        pre += Environment.NewLine;
                        text = text.Remove(0, 2);
                    }
                }

                text = HtmlUtil.ToggleTag(text, tag);
                // Update text and maintain selection.
                if (pre.Length > 0)
                {
                    text = pre + text;
                    selectionStart += pre.Length;
                }

                if (post.Length > 0)
                {
                    text = text + post;
                }

                tb.SelectedText = text;
                tb.SelectionStart = selectionStart;
                tb.SelectionLength = text.Length;
            }
        }

        private void BoldToolStripMenuItem1Click(object sender, EventArgs e)
        {
            TextBoxListViewToggleTag(HtmlUtil.TagBold);
        }

        private void ItalicToolStripMenuItem1Click(object sender, EventArgs e)
        {
            TextBoxListViewToggleTag(HtmlUtil.TagItalic);
        }

        private void UnderlineToolStripMenuItem1Click(object sender, EventArgs e)
        {
            TextBoxListViewToggleTag(HtmlUtil.TagUnderline);
        }

        private void ColorToolStripMenuItem1Click(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();
            string text = tb.SelectedText;
            if (string.IsNullOrEmpty(text) && tb.Text.Length > 0)
            {
                text = tb.Text;
                tb.SelectAll();
            }
            int selectionStart = tb.SelectionStart;

            string color;
            var formatType = GetCurrentSubtitleFormat().GetType();
            if (formatType == typeof(Ebu))
            {
                using (var form = new EbuColorPicker(true))
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }

                    color = form.Color;
                }
            }
            else if (formatType == typeof(ScenaristClosedCaptions) || formatType == typeof(ScenaristClosedCaptionsDropFrame))
            {
                using (var form = new EbuColorPicker(false))
                {
                    if (form.ShowDialog(this) != DialogResult.OK)
                    {
                        return;
                    }

                    color = form.Color;
                }
            }
            else
            {
                if (colorDialog1.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                color = Utilities.ColorToHex(colorDialog1.Color);
            }

            bool done = false;
            string pre = string.Empty;
            if (selectionStart == 0 && text.StartsWith("{\\", StringComparison.Ordinal) && text.IndexOf('}') >= 0)
            {
                int endIndex = text.IndexOf('}') + 1;
                pre = text.Substring(0, endIndex);
                text = text.Remove(0, endIndex);
            }

            string s = text;
            if (s.StartsWith("<font ", StringComparison.OrdinalIgnoreCase))
            {
                int end = s.IndexOf('>');
                if (end > 0)
                {
                    string f = s.Substring(0, end);
                    if (f.Contains(" face=", StringComparison.OrdinalIgnoreCase) && !f.Contains(" color=", StringComparison.OrdinalIgnoreCase))
                    {
                        var start = s.IndexOf(" face=", StringComparison.OrdinalIgnoreCase);
                        s = s.Insert(start, string.Format(" color=\"{0}\"", color));
                        text = s;
                        done = true;
                    }
                    else if (f.Contains(" color=", StringComparison.OrdinalIgnoreCase))
                    {
                        int colorStart = f.IndexOf(" color=", StringComparison.OrdinalIgnoreCase);
                        if (s.IndexOf('"', colorStart + " color=".Length + 1) > 0)
                        {
                            end = s.IndexOf('"', colorStart + " color=".Length + 1);
                        }

                        s = s.Substring(0, colorStart) + string.Format(" color=\"{0}", color) + s.Substring(end);
                        text = s;
                        done = true;
                    }
                }
            }

            if (!done)
            {
                text = $"{pre}<font color=\"{color}\">{text}</font>";
            }
            else
            {
                text = pre + text;
            }

            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        private void FontNameToolStripMenuItemClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            // font name
            string text = tb.SelectedText;
            if (string.IsNullOrEmpty(text) && tb.Text.Length > 0)
            {
                text = tb.Text;
                tb.SelectAll();
            }
            int selectionStart = tb.SelectionStart;

            using (var form = new ChooseFontName())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    bool done = false;

                    string pre = string.Empty;
                    if (selectionStart == 0 && text.StartsWith("{\\", StringComparison.Ordinal) && text.IndexOf('}') >= 0)
                    {
                        int endIndex = text.IndexOf('}') + 1;
                        pre = text.Substring(0, endIndex);
                        text = text.Remove(0, endIndex);
                    }

                    if (text.StartsWith("<font ", StringComparison.OrdinalIgnoreCase))
                    {
                        int end = text.IndexOf('>');
                        if (end > 0)
                        {
                            string f = text.Substring(0, end);
                            if (f.Contains(" color=", StringComparison.OrdinalIgnoreCase) && !f.Contains(" face=", StringComparison.OrdinalIgnoreCase))
                            {
                                var start = text.IndexOf(" color=", StringComparison.OrdinalIgnoreCase);
                                text = text.Insert(start, string.Format(" face=\"{0}\"", form.FontName));
                                done = true;
                            }
                            else if (f.Contains(" face=", StringComparison.OrdinalIgnoreCase))
                            {
                                int faceStart = f.IndexOf(" face=", StringComparison.OrdinalIgnoreCase);
                                if (text.IndexOf('"', faceStart + " face=".Length + 1) > 0)
                                {
                                    end = text.IndexOf('"', faceStart + " face=".Length + 1);
                                }

                                text = text.Substring(0, faceStart) + string.Format(" face=\"{0}", form.FontName) + text.Substring(end);
                                done = true;
                            }
                        }
                    }

                    if (!done)
                    {
                        text = $"{pre}<font face=\"{form.FontName}\">{text}</font>";
                    }
                    else
                    {
                        text = pre + text;
                    }

                    tb.SelectedText = text;
                    tb.SelectionStart = selectionStart;
                    tb.SelectionLength = text.Length;
                }
            }
        }

        public void SetSubtitle(Subtitle subtitle, string message)
        {
            _subtitle = subtitle;
            SubtitleListview1.Fill(subtitle, _subtitleAlternate);
            ShowStatus(message);
        }

        #region Networking

        private void startServerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var networkNew = new NetworkStart())
            {
                _networkSession = new NikseWebServiceSession(_subtitle, _subtitleAlternate, TimerWebServiceTick, OnUpdateUserLogEntries);
                networkNew.Initialize(_networkSession, _fileName);
                if (networkNew.ShowDialog(this) == DialogResult.OK)
                {
                    _networkSession.AppendToLog(string.Format(_language.XStartedSessionYAtZ, _networkSession.CurrentUser.UserName, _networkSession.SessionId, DateTime.Now.ToLongTimeString()));
                    toolStripStatusNetworking.Visible = true;
                    toolStripStatusNetworking.Text = _language.NetworkMode;
                    EnableDisableControlsNotWorkingInNetworkMode(false);
                    SubtitleListview1.ShowNetworkColumn(_language.UserAndAction);
                    SubtitleListview1.AutoSizeAllColumns(this);
                    TimerWebServiceTick(null, null);
                }
                else
                {
                    _networkSession = null;
                }
            }
        }

        private void joinSessionToolStripMenuItem_Click(object sender, EventArgs e)
        {
            _networkSession = new NikseWebServiceSession(_subtitle, _subtitleAlternate, TimerWebServiceTick, OnUpdateUserLogEntries);
            using (var networkJoin = new NetworkJoin())
            {
                networkJoin.Initialize(_networkSession);

                if (networkJoin.ShowDialog(this) == DialogResult.OK)
                {
                    _subtitle = _networkSession.Subtitle;
                    _subtitleAlternate = _networkSession.OriginalSubtitle;
                    if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                    {
                        SubtitleListview1.ShowAlternateTextColumn(_languageGeneral.OriginalText);
                    }

                    _fileName = networkJoin.FileName;
                    SetTitle();
                    toolStripStatusNetworking.Visible = true;
                    toolStripStatusNetworking.Text = _language.NetworkMode;
                    EnableDisableControlsNotWorkingInNetworkMode(false);
                    _networkSession.AppendToLog(string.Format(_language.XStartedSessionYAtZ, _networkSession.CurrentUser.UserName, _networkSession.SessionId, DateTime.Now.ToLongTimeString()));
                    SubtitleListview1.ShowNetworkColumn(_language.UserAndAction);
                    SubtitleListview1.AutoSizeAllColumns(this);
                    _subtitleListViewIndex = -1;
                    _oldSelectedParagraph = null;

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                    {
                        buttonUnBreak.Visible = false;
                        buttonAutoBreak.Visible = false;
                        buttonSplitLine.Visible = false;

                        textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                        textBoxListViewText.Width = (groupBoxEdit.Width - (textBoxListViewText.Left + 10)) / 2;
                        textBoxListViewTextAlternate.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                        textBoxListViewTextAlternate.Left = textBoxListViewText.Left + textBoxListViewText.Width + 3;
                        textBoxListViewTextAlternate.Width = textBoxListViewText.Width;
                        textBoxListViewTextAlternate.Visible = true;
                        labelAlternateText.Text = _languageGeneral.OriginalText;
                        labelAlternateText.Visible = true;
                        labelAlternateCharactersPerSecond.Visible = true;
                        labelTextAlternateLineLengths.Visible = true;
                        labelAlternateSingleLine.Visible = true;
                        labelAlternateSingleLinePixels.Visible = true;
                        labelTextAlternateLineTotal.Visible = true;

                        labelCharactersPerSecond.Left = textBoxListViewText.Left + (textBoxListViewText.Width - labelCharactersPerSecond.Width);
                        labelTextLineTotal.Left = textBoxListViewText.Left + (textBoxListViewText.Width - labelTextLineTotal.Width);
                        AddAlternate();
                        Main_Resize(null, null);
                        _changeAlternateSubtitleHash = _subtitleAlternate.GetFastHashCode(GetCurrentEncoding().BodyName);
                    }
                    else
                    {
                        RemoveAlternate(false, true);
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    TimerWebServiceTick(null, null);
                }
                else
                {
                    _networkSession = null;
                }
            }
        }

        private void EnableDisableControlsNotWorkingInNetworkMode(bool enabled)
        {
            //Top menu
            newToolStripMenuItem.Enabled = enabled;
            openToolStripMenuItem.Enabled = enabled;
            reopenToolStripMenuItem.Enabled = enabled;
            toolStripMenuItemOpenContainingFolder.Enabled = enabled;
            toolStripMenuItemCompare.Enabled = enabled;
            toolStripMenuItemImportDvdSubtitles.Enabled = enabled;
            toolStripMenuItemSubIdx.Enabled = enabled;
            toolStripMenuItemImportBluRaySup.Enabled = enabled;
            matroskaImportStripMenuItem.Enabled = enabled;
            toolStripMenuItemManualAnsi.Enabled = enabled;
            toolStripMenuItemImportText.Enabled = enabled;
            toolStripMenuItemImportTimeCodes.Enabled = enabled;

            showHistoryforUndoToolStripMenuItem.Enabled = enabled;
            multipleReplaceToolStripMenuItem.Enabled = enabled;

            toolsToolStripMenuItem.Enabled = enabled;

            toolStripMenuItemSynchronization.Enabled = enabled;

            toolStripMenuItemAutoTranslate.Enabled = enabled;

            //Toolbar
            toolStripButtonFileNew.Enabled = enabled;
            toolStripButtonFileOpen.Enabled = enabled;
            toolStripMenuItemOpenKeepVideo.Enabled = enabled;
            toolStripMenuItemRestoreAutoBackup.Enabled = enabled;
            toolStripButtonVisualSync.Enabled = enabled;

            // textbox source
            textBoxSource.ReadOnly = !enabled;
        }

        internal void TimerWebServiceTick(object sender, EventArgs e)
        {
            if (_networkSession == null)
            {
                return;
            }

            List<int> deleteIndices = new List<int>();
            NetworkGetSendUpdates(deleteIndices, 0, null);
        }

        private void NetworkGetSendUpdates(List<int> deleteIndices, int insertIndex, Paragraph insertParagraph)
        {
            _networkSession.TimerStop();

            bool doReFill = false;
            bool updateListViewStatus = false;
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            string message = string.Empty;

            int numberOfLines = 0;
            List<SeNetworkService.SeUpdate> updates = null;
            int numberOfRetries = 10;
            while (numberOfRetries > 0)
            {
                numberOfRetries--;
                try
                {
                    updates = _networkSession.GetUpdates(out message, out numberOfLines);
                    numberOfRetries = 0;
                }
                catch (Exception exception)
                {
                    if (numberOfRetries <= 0)
                    {
                        if (exception.InnerException != null)
                        {
                            MessageBox.Show(string.Format(_language.NetworkUnableToConnectToServer, exception.InnerException.Message + Environment.NewLine + exception.InnerException.StackTrace));
                        }
                        else
                        {
                            MessageBox.Show(string.Format(_language.NetworkUnableToConnectToServer, exception.Message + Environment.NewLine + exception.StackTrace));
                        }

                        _networkSession.TimerStop();
                        if (_networkChat != null && !_networkChat.IsDisposed)
                        {
                            _networkChat.Close();
                            _networkChat = null;
                        }

                        _networkSession = null;
                        EnableDisableControlsNotWorkingInNetworkMode(true);
                        toolStripStatusNetworking.Visible = false;
                        SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Network);
                        _networkChat = null;
                        return;
                    }

                    Application.DoEvents();
                    System.Threading.Thread.Sleep(250);
                }
            }

            int currentSelectedIndex = -1;
            if (SubtitleListview1.SelectedItems.Count > 0)
            {
                currentSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            }

            int oldCurrentSelectedIndex = currentSelectedIndex;
            if (message == "OK")
            {
                foreach (var update in updates)
                {
                    if (!string.IsNullOrEmpty(update.Text))
                    {
                        if (!update.Text.Contains(Environment.NewLine))
                        {
                            update.Text = update.Text.Replace("\n", Environment.NewLine);
                        }

                        update.Text = WebUtility.HtmlDecode(update.Text).Replace("<br />", Environment.NewLine);
                    }

                    if (update.User.Ip != _networkSession.CurrentUser.Ip || update.User.UserName != _networkSession.CurrentUser.UserName)
                    {
                        if (update.Action == "USR")
                        {
                            _networkSession.Users.Add(update.User);
                            if (_networkChat != null && !_networkChat.IsDisposed)
                            {
                                _networkChat.AddUser(update.User);
                            }

                            _networkSession.AppendToLog(string.Format(_language.NetworkNewUser, update.User.UserName, update.User.Ip));
                        }
                        else if (update.Action == "MSG")
                        {
                            _networkSession.ChatLog.Add(new NikseWebServiceSession.ChatEntry { User = update.User, Message = update.Text });
                            if (_networkChat == null || _networkChat.IsDisposed)
                            {
                                _networkChat = new NetworkChat();
                                _networkChat.Initialize(_networkSession);
                                _networkChat.Show(this);
                            }
                            else
                            {
                                _networkChat.AddChatMessage(update.User, update.Text);
                            }

                            if (!string.IsNullOrEmpty(Configuration.Settings.NetworkSettings.NewMessageSound) && File.Exists(Configuration.Settings.NetworkSettings.NewMessageSound))
                            {
                                try
                                {
                                    using (var soundPlayer = new System.Media.SoundPlayer(Configuration.Settings.NetworkSettings.NewMessageSound))
                                    {
                                        soundPlayer.Play();
                                    }
                                }
                                catch
                                {
                                }
                            }

                            _networkSession.AppendToLog(string.Format(_language.NetworkMessage, update.User.UserName, update.User.Ip, update.Text));
                        }
                        else if (update.Action == "DEL")
                        {
                            doReFill = true;
                            _subtitle.Paragraphs.RemoveAt(update.Index);
                            if (_networkSession.LastSubtitle != null)
                            {
                                _networkSession.LastSubtitle.Paragraphs.RemoveAt(update.Index);
                            }

                            _networkSession.AppendToLog(string.Format(_language.NetworkDelete, update.User.UserName, update.User.Ip, update.Index));
                            _networkSession.AdjustUpdateLogToDelete(update.Index);

                            if (deleteIndices.Count > 0)
                            {
                                for (int i = deleteIndices.Count - 1; i >= 0; i--)
                                {
                                    int index = deleteIndices[i];
                                    if (index == update.Index)
                                    {
                                        deleteIndices.RemoveAt(i);
                                    }
                                    else if (index > update.Index)
                                    {
                                        deleteIndices[i] = index - 1;
                                    }
                                }
                            }

                            if (insertIndex > update.Index)
                            {
                                insertIndex--;
                            }

                            if (currentSelectedIndex >= 0 && currentSelectedIndex > update.Index)
                            {
                                currentSelectedIndex--;
                            }
                        }
                        else if (update.Action == "INS")
                        {
                            doReFill = true;
                            var p = new Paragraph(update.Text, update.StartMilliseconds, update.EndMilliseconds);
                            _subtitle.Paragraphs.Insert(update.Index, p);
                            if (_networkSession.LastSubtitle != null)
                            {
                                _networkSession.LastSubtitle.Paragraphs.Insert(update.Index, new Paragraph(p));
                            }

                            _networkSession.AppendToLog(string.Format(_language.NetworkInsert, update.User.UserName, update.User.Ip, update.Index, UiUtil.GetListViewTextFromString(update.Text)));
                            _networkSession.AddToWsUserLog(update.User, update.Index, update.Action, false);
                            updateListViewStatus = true;
                            _networkSession.AdjustUpdateLogToInsert(update.Index);

                            if (deleteIndices.Count > 0)
                            {
                                for (int i = deleteIndices.Count - 1; i >= 0; i--)
                                {
                                    int index = deleteIndices[i];
                                    if (index > update.Index)
                                    {
                                        deleteIndices[i] = index + 1;
                                    }
                                }
                            }

                            if (insertIndex > update.Index)
                            {
                                insertIndex++;
                            }

                            if (currentSelectedIndex >= 0 && currentSelectedIndex > update.Index)
                            {
                                currentSelectedIndex++;
                            }
                        }
                        else if (update.Action == "UPD")
                        {
                            updateListViewStatus = true;
                            var p = _subtitle.GetParagraphOrDefault(update.Index);
                            if (p != null)
                            {
                                p.StartTime.TotalMilliseconds = update.StartMilliseconds;
                                p.EndTime.TotalMilliseconds = update.EndMilliseconds;
                                p.Text = update.Text;
                                SubtitleListview1.SetTimeAndText(update.Index, p, _subtitle.GetParagraphOrDefault(update.Index + 1));
                                _networkSession.AppendToLog(string.Format(_language.NetworkUpdate, update.User.UserName, update.User.Ip, update.Index, UiUtil.GetListViewTextFromString(update.Text)));
                                _networkSession.AddToWsUserLog(update.User, update.Index, update.Action, true);
                                updateListViewStatus = true;
                            }

                            if (_networkSession.LastSubtitle != null)
                            {
                                p = _networkSession.LastSubtitle.GetParagraphOrDefault(update.Index);
                                if (p != null)
                                {
                                    p.StartTime.TotalMilliseconds = update.StartMilliseconds;
                                    p.EndTime.TotalMilliseconds = update.EndMilliseconds;
                                    p.Text = update.Text;
                                }
                            }
                        }
                        else if (update.Action == "BYE")
                        {
                            if (_networkChat != null && !_networkChat.IsDisposed)
                            {
                                _networkChat.RemoveUser(update.User);
                            }

                            SeNetworkService.SeUser removeUser = null;
                            foreach (var user in _networkSession.Users)
                            {
                                if (user.UserName == update.User.UserName)
                                {
                                    removeUser = user;
                                    break;
                                }
                            }

                            if (removeUser != null)
                            {
                                _networkSession.Users.Remove(removeUser);
                            }

                            _networkSession.AppendToLog(string.Format(_language.NetworkByeUser, update.User.UserName, update.User.Ip));
                        }
                        else
                        {
                            _networkSession.AppendToLog("UNKNOWN ACTION: " + update.Action + " by " + update.User.UserName + " (" + update.User.Ip + ")");
                        }
                    }
                }

                if (numberOfLines != _subtitle.Paragraphs.Count)
                {
                    _subtitle = _networkSession.ReloadSubtitle();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    UpdateListviewWithUserLogEntries();
                    _networkSession.LastSubtitle = new Subtitle(_subtitle);
                    _oldSelectedParagraph = null;
                    SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                    _networkSession.TimerStart();
                    RefreshSelectedParagraph();
                    return;
                }

                if (deleteIndices.Count > 0)
                {
                    deleteIndices.Sort();
                    deleteIndices.Reverse();
                    foreach (int i in deleteIndices)
                    {
                        _subtitle.Paragraphs.RemoveAt(i);
                        if (_networkSession.LastSubtitle != null && i < _networkSession.LastSubtitle.Paragraphs.Count)
                        {
                            _networkSession.LastSubtitle.Paragraphs.RemoveAt(i);
                        }
                    }

                    _networkSession.DeleteLines(deleteIndices);
                    doReFill = true;
                }

                if (insertIndex >= 0 && insertParagraph != null)
                {
                    _subtitle.Paragraphs.Insert(insertIndex, insertParagraph);
                    if (_networkSession.LastSubtitle != null && insertIndex < _networkSession.LastSubtitle.Paragraphs.Count)
                    {
                        _networkSession.LastSubtitle.Paragraphs.Insert(insertIndex, insertParagraph);
                    }

                    _networkSession.InsertLine(insertIndex, insertParagraph);
                    doReFill = true;
                }

                _networkSession.CheckForAndSubmitUpdates(); // updates only (no inserts/deletes)
            }
            else
            {
                if (message == "Session not found!")
                {
                    message = _networkSession.Restart();
                    if (message == "Reload")
                    {
                        _subtitle = _networkSession.ReloadSubtitle();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        UpdateListviewWithUserLogEntries();
                        _networkSession.LastSubtitle = new Subtitle(_subtitle);
                        _oldSelectedParagraph = null;
                        SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                        _networkSession.TimerStart();
                        RefreshSelectedParagraph();
                        return;
                    }

                    if (message == "OK")
                    {
                        _networkSession.TimerStart();
                        RefreshSelectedParagraph();
                        return;
                    }
                }
                else if (message == "User not found!")
                {
                    message = _networkSession.ReJoin();
                    if (message == "Reload")
                    {
                        _subtitle = _networkSession.ReloadSubtitle();
                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        UpdateListviewWithUserLogEntries();
                        _networkSession.LastSubtitle = new Subtitle(_subtitle);
                        _oldSelectedParagraph = null;
                        SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                        _networkSession.TimerStart();
                        RefreshSelectedParagraph();
                        return;
                    }
                }

                MessageBox.Show(message);
                LeaveSessionToolStripMenuItemClick(null, null);
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
                return;
            }

            if (doReFill)
            {
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                UpdateListviewWithUserLogEntries();

                if (oldCurrentSelectedIndex != currentSelectedIndex)
                {
                    _oldSelectedParagraph = null;
                    _subtitleListViewIndex = currentSelectedIndex;
                    SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex);
                }
                else if (_oldSelectedParagraph != null)
                {
                    var p = _subtitle.GetFirstAlike(_oldSelectedParagraph);
                    if (p == null)
                    {
                        var tmp = new Paragraph(_oldSelectedParagraph);
                        tmp.Text = textBoxListViewText.Text;
                        p = _subtitle.GetFirstAlike(tmp);
                    }

                    if (p == null)
                    {
                        int idx = oldCurrentSelectedIndex;
                        if (idx >= _subtitle.Paragraphs.Count)
                        {
                            idx = _subtitle.Paragraphs.Count - 1;
                        }

                        if (idx >= 0 && idx < _subtitle.Paragraphs.Count)
                        {
                            SubtitleListview1.SelectIndexAndEnsureVisible(idx);
                            _listViewTextUndoIndex = -1;
                            SubtitleListView1SelectedIndexChange();
                            textBoxListViewText.Text = _subtitle.Paragraphs[idx].Text;
                        }
                    }
                    else
                    {
                        _subtitleListViewIndex = _subtitle.GetIndex(p);
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex);
                        _listViewTextUndoIndex = -1;
                        SubtitleListView1SelectedIndexChange();
                    }
                }
            }
            else if (updateListViewStatus)
            {
                UpdateListviewWithUserLogEntries();
            }

            _networkSession.LastSubtitle = new Subtitle(_subtitle);
            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            _networkSession.TimerStart();
        }

        private void UpdateListviewWithUserLogEntries()
        {
            SubtitleListview1.BeginUpdate();
            foreach (UpdateLogEntry entry in _networkSession.UpdateLog)
            {
                SubtitleListview1.SetNetworkText(entry.Index, entry.ToString(), Utilities.GetColorFromUserName(entry.UserName));
            }

            SubtitleListview1.EndUpdate();
        }

        private void LeaveSessionToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                _networkSession.Leave();
            }

            if (_networkChat != null && !_networkChat.IsDisposed)
            {
                _networkChat.Close();
                _networkChat = null;
            }

            _networkSession = null;
            EnableDisableControlsNotWorkingInNetworkMode(true);
            toolStripStatusNetworking.Visible = false;
            SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.Network);
            _networkChat = null;
        }

        private void toolStripMenuItemNetworking_DropDownOpening(object sender, EventArgs e)
        {
            startServerToolStripMenuItem.Visible = _networkSession == null;
            joinSessionToolStripMenuItem.Visible = _networkSession == null;
            showSessionKeyLogToolStripMenuItem.Visible = _networkSession != null;
            leaveSessionToolStripMenuItem.Visible = _networkSession != null;
            chatToolStripMenuItem.Visible = _networkSession != null;
        }

        internal void OnUpdateUserLogEntries(object sender, EventArgs e)
        {
            UpdateListviewWithUserLogEntries();
        }

        private void toolStripStatusNetworking_Click(object sender, EventArgs e)
        {
            showSessionKeyLogToolStripMenuItem_Click(null, null);
        }

        private void showSessionKeyLogToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var networkLog = new NetworkLogAndInfo())
            {
                networkLog.Initialize(_networkSession);
                networkLog.ShowDialog(this);
            }
        }

        private void chatToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (_networkSession != null)
            {
                if (_networkChat == null || _networkChat.IsDisposed)
                {
                    _networkChat = new NetworkChat();
                    _networkChat.Initialize(_networkSession);
                    _networkChat.Show(this);
                }
                else
                {
                    _networkChat.WindowState = FormWindowState.Normal;
                }
            }
        }

        #endregion Networking

        private void UnDockVideoPlayer()
        {
            bool firstUndock = _videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed;

            _videoPlayerUndocked = new VideoPlayerUndocked(this, mediaPlayer);

            if (firstUndock)
            {
                Configuration.Settings.General.UndockedVideoPosition = _videoPlayerUndocked.Left + @";" + _videoPlayerUndocked.Top + @";" + _videoPlayerUndocked.Width + @";" + _videoPlayerUndocked.Height;
            }

            Control control = null;
            if (splitContainer1.Panel2.Controls.Count == 0)
            {
                control = panelVideoPlayer;
                groupBoxVideo.Controls.Remove(control);
            }
            else
            {
                control = panelVideoPlayer;
                splitContainer1.Panel2.Controls.Clear();
            }

            if (control != null)
            {
                control.Top = 0;
                control.Left = 0;
                control.Width = _videoPlayerUndocked.PanelContainer.Width;
                control.Height = _videoPlayerUndocked.PanelContainer.Height;
                _videoPlayerUndocked.PanelContainer.Controls.Add(control);
            }
        }

        public void ReDockVideoPlayer(Control control)
        {
            groupBoxVideo.Controls.Add(control);
            mediaPlayer.FontSizeFactor = 1.0F;
            mediaPlayer.SetSubtitleFont();
            mediaPlayer.SubtitleText = string.Empty;
        }

        private void UnDockWaveform()
        {
            _waveformUndocked = new WaveformUndocked(this);

            var control = audioVisualizer;
            groupBoxVideo.Controls.Remove(control);
            control.Top = 0;
            control.Left = 0;
            control.Width = _waveformUndocked.PanelContainer.Width;
            control.Height = _waveformUndocked.PanelContainer.Height - panelWaveformControls.Height;
            _waveformUndocked.PanelContainer.Controls.Add(control);

            var control2 = (Control)panelWaveformControls;
            groupBoxVideo.Controls.Remove(control2);
            control2.Top = control.Height;
            control2.Left = 0;
            _waveformUndocked.PanelContainer.Controls.Add(control2);

            var control3 = (Control)trackBarWaveformPosition;
            groupBoxVideo.Controls.Remove(control3);
            control3.Top = control.Height;
            control3.Left = control2.Width + 2;
            control3.Width = _waveformUndocked.PanelContainer.Width - control3.Left;
            _waveformUndocked.PanelContainer.Controls.Add(control3);
        }

        public void ReDockWaveform(Control waveform, Control buttons, Control trackBar)
        {
            groupBoxVideo.Controls.Add(waveform);
            waveform.Top = 30;
            waveform.Height = groupBoxVideo.Height - (waveform.Top + buttons.Height + 10);

            groupBoxVideo.Controls.Add(buttons);
            buttons.Top = waveform.Top + waveform.Height + 5;

            groupBoxVideo.Controls.Add(trackBar);
            trackBar.Top = buttons.Top;
        }

        private void UnDockVideoButtons()
        {
            _videoControlsUndocked = new VideoControlsUndocked(this);
            var control = tabControlButtons;
            groupBoxVideo.Controls.Remove(control);
            control.Top = 25;
            control.Left = 0;
            _videoControlsUndocked.PanelContainer.Controls.Add(control);

            groupBoxVideo.Controls.Remove(checkBoxSyncListViewWithVideoWhilePlaying);
            _videoControlsUndocked.PanelContainer.Controls.Add(checkBoxSyncListViewWithVideoWhilePlaying);
            checkBoxSyncListViewWithVideoWhilePlaying.Top = 5;
            checkBoxSyncListViewWithVideoWhilePlaying.Left = 5;

            splitContainerMain.Panel2Collapsed = true;
            splitContainer1.Panel2Collapsed = true;
        }

        public void ReDockVideoButtons(Control videoButtons, Control checkBoxSyncSubWithVideo)
        {
            groupBoxVideo.Controls.Add(videoButtons);
            videoButtons.Top = 12;
            videoButtons.Left = 5;

            groupBoxVideo.Controls.Add(checkBoxSyncSubWithVideo);
            checkBoxSyncSubWithVideo.Top = 11;
            checkBoxSyncSubWithVideo.Left = videoButtons.Left + videoButtons.Width + 5;
        }

        private void UndockVideoControlsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (Configuration.Settings.General.Undocked)
            {
                return;
            }

            Configuration.Settings.General.Undocked = true;
            if (!_loading)
            {
                Configuration.Settings.General.SplitContainerMainSplitterDistance = splitContainerMain.SplitterDistance;
                Configuration.Settings.General.SplitContainer1SplitterDistance = splitContainer1.SplitterDistance;
                Configuration.Settings.General.SplitContainerListViewAndTextSplitterDistance = splitContainerListViewAndText.SplitterDistance;
            }

            var top = Math.Max(Top, 0);
            var left = Math.Max(Left, 0);
            UnDockVideoPlayer();
            splitContainerListViewAndText.SplitterDistance = splitContainerListViewAndText.Height - 109;
            if (toolStripButtonToggleVideo.Checked)
            {
                _videoPlayerUndocked.Show(this);
                if (_videoPlayerUndocked.Top < 0 || _videoPlayerUndocked.Left < 0)
                {
                    _videoPlayerUndocked.WindowState = FormWindowState.Normal;
                    _videoPlayerUndocked.Top = top + 40;
                    _videoPlayerUndocked.Left = Math.Abs(left - 20);
                    _videoPlayerUndocked.Width = 600;
                    _videoPlayerUndocked.Height = 400;
                }
            }

            UnDockWaveform();
            if (toolStripButtonToggleWaveform.Checked)
            {
                _waveformUndocked.Show(this);
                if (_waveformUndocked.Top < 0 || _waveformUndocked.Left < 0)
                {
                    _waveformUndocked.WindowState = FormWindowState.Normal;
                    _waveformUndocked.Top = top + 60;
                    _waveformUndocked.Left = Math.Abs(left - 15);
                    _waveformUndocked.Width = 600;
                    _waveformUndocked.Height = 200;
                }
            }

            UnDockVideoButtons();
            _videoControlsUndocked.Show(this);
            if (_videoControlsUndocked.Top < 0 || _videoControlsUndocked.Left < 0)
            {
                _videoControlsUndocked.WindowState = FormWindowState.Normal;
                _videoControlsUndocked.Top = top + 40;
                _videoControlsUndocked.Left = Math.Abs(left - 10);
                _videoControlsUndocked.Width = tabControlButtons.Width + 20;
                _videoControlsUndocked.Height = tabControlButtons.Height + 65;
            }

            _isVideoControlsUndocked = true;
            SetUndockedWindowsTitle();

            undockVideoControlsToolStripMenuItem.Visible = false;
            redockVideoControlsToolStripMenuItem.Visible = true;

            tabControl1_SelectedIndexChanged(null, null);
            _videoControlsUndocked.Refresh();
        }

        public void RedockVideoControlsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!Configuration.Settings.General.Undocked)
            {
                return;
            }

            mediaPlayer.ShowNonFullScreenControls();

            SaveUndockedPositions();

            Configuration.Settings.General.Undocked = false;

            if (_videoControlsUndocked != null && !_videoControlsUndocked.IsDisposed)
            {
                var control = _videoControlsUndocked.PanelContainer.Controls[0];
                var controlCheckBox = _videoControlsUndocked.PanelContainer.Controls[1];
                _videoControlsUndocked.PanelContainer.Controls.Clear();
                ReDockVideoButtons(control, controlCheckBox);
                _videoControlsUndocked.Close();
                _videoControlsUndocked = null;
            }

            if (_waveformUndocked != null && !_waveformUndocked.IsDisposed)
            {
                var controlWaveform = _waveformUndocked.PanelContainer.Controls[0];
                var controlButtons = _waveformUndocked.PanelContainer.Controls[1];
                var controlTrackBar = _waveformUndocked.PanelContainer.Controls[2];
                _waveformUndocked.PanelContainer.Controls.Clear();
                ReDockWaveform(controlWaveform, controlButtons, controlTrackBar);
                _waveformUndocked.Close();
                _waveformUndocked = null;
            }

            if (_videoPlayerUndocked != null && !_videoPlayerUndocked.IsDisposed)
            {
                var control = _videoPlayerUndocked.PanelContainer.Controls[0];
                _videoPlayerUndocked.PanelContainer.Controls.Remove(control);
                ReDockVideoPlayer(control);
                _videoPlayerUndocked.Close();
                _videoPlayerUndocked = null;
                mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
            }

            _isVideoControlsUndocked = false;
            _videoPlayerUndocked = null;
            _waveformUndocked = null;
            _videoControlsUndocked = null;
            ShowVideoPlayer();

            audioVisualizer.Visible = toolStripButtonToggleWaveform.Checked;
            trackBarWaveformPosition.Visible = toolStripButtonToggleWaveform.Checked;
            panelWaveformControls.Visible = toolStripButtonToggleWaveform.Checked;
            if (!toolStripButtonToggleVideo.Checked)
            {
                HideVideoPlayer();
            }

            mediaPlayer.Invalidate();
            Refresh();

            undockVideoControlsToolStripMenuItem.Visible = true;
            redockVideoControlsToolStripMenuItem.Visible = false;
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);

            splitContainerMain.SplitterDistance = Configuration.Settings.General.SplitContainerMainSplitterDistance;
            splitContainer1.SplitterDistance = Configuration.Settings.General.SplitContainer1SplitterDistance;
            splitContainerListViewAndText.SplitterDistance = Configuration.Settings.General.SplitContainerListViewAndTextSplitterDistance;
        }

        private void Bw_DoWork(object sender, DoWorkEventArgs e)
        {
            System.Threading.Thread.Sleep(1200);
        }

        internal void SetWaveformToggleOff()
        {
            toolStripButtonToggleWaveform.Checked = false;
        }

        internal void SetVideoPlayerToggleOff()
        {
            toolStripButtonToggleVideo.Checked = false;
        }

        private void ToolStripMenuItemInsertSubtitleClick(object sender, EventArgs e)
        {
            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                if (!File.Exists(openFileDialog1.FileName))
                {
                    return;
                }

                var fi = new FileInfo(openFileDialog1.FileName);
                if (fi.Length > 1024 * 1024 * 10) // max 10 mb
                {
                    var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, openFileDialog1.FileName);
                    if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                MakeHistoryForUndo(string.Format(_language.BeforeInsertLine, openFileDialog1.FileName));

                Encoding encoding;
                var subtitle = new Subtitle();
                SubtitleFormat format = subtitle.LoadSubtitle(openFileDialog1.FileName, out encoding, null);

                if (format != null)
                {
                    SaveSubtitleListviewIndices();
                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        subtitle.RemoveEmptyLines();
                    }

                    int index = FirstSelectedIndex + 1;
                    if (index < 0)
                    {
                        index = 0;
                    }

                    var last = _subtitle.GetParagraphOrDefault(index - 1);
                    var newFirst = subtitle.GetParagraphOrDefault(0);
                    if (last != null && newFirst != null && newFirst.StartTime.TotalMilliseconds < last.EndTime.TotalMilliseconds)
                    {
                        var addMilliseconds = last.EndTime.TotalMilliseconds - newFirst.StartTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                        subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(addMilliseconds));
                    }

                    foreach (var p in subtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Insert(index, new Paragraph(p));
                        index++;
                    }

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                    {
                        index = FirstSelectedIndex;
                        if (index < 0)
                        {
                            index = 0;
                        }

                        var current = _subtitle.GetParagraphOrDefault(index);
                        if (current != null)
                        {
                            var original = Utilities.GetOriginalParagraph(index, current, _subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                index = _subtitleAlternate.GetIndex(original);
                                foreach (var p in subtitle.Paragraphs)
                                {
                                    _subtitleAlternate.Paragraphs.Insert(index, new Paragraph(p));
                                    index++;
                                }

                                if (subtitle.Paragraphs.Count > 0)
                                {
                                    _subtitleAlternate.Renumber();
                                }
                            }
                        }
                    }

                    _subtitle.Renumber();
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void InsertLineToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitle == null || _subtitle.Paragraphs.Count == 0)
            {
                InsertBefore();
            }
            else
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.Count - 1, true);
                InsertAfter(string.Empty);
                SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.Paragraphs.Count - 1, true);
            }
        }

        private void CloseVideoToolStripMenuItemClick(object sender, EventArgs e)
        {
            timer1.Stop();
            if (mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.PauseAndDisposePlayer();
            }

            mediaPlayer.SetPlayerName(string.Empty);
            mediaPlayer.ResetTimeLabel();
            mediaPlayer.VideoPlayer = null;
            _videoFileName = null;
            _videoInfo = null;
            _videoAudioTrackNumber = -1;
            labelVideoInfo.Text = _languageGeneral.NoVideoLoaded;
            audioVisualizer.WavePeaks = null;
            audioVisualizer.SetSpectrogram(null);
            audioVisualizer.SceneChanges = new List<double>();
            mediaPlayer.CurrentPosition = 0;
        }

        private void ToolStripMenuItemVideoDropDownOpening(object sender, EventArgs e)
        {
            if (_isVideoControlsUndocked)
            {
                redockVideoControlsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoToggleVideoControls);
                undockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            }
            else
            {
                undockVideoControlsToolStripMenuItem.ShortcutKeys = UiUtil.GetKeys(Configuration.Settings.Shortcuts.MainVideoToggleVideoControls);
                redockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            }

            closeVideoToolStripMenuItem.Visible = !string.IsNullOrEmpty(_videoFileName);
            setVideoOffsetToolStripMenuItem.Visible = !string.IsNullOrEmpty(_videoFileName);
            smpteTimeModedropFrameToolStripMenuItem.Visible = !string.IsNullOrEmpty(_videoFileName);
            if (!string.IsNullOrEmpty(_videoFileName))
            {
                if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
                {
                    setVideoOffsetToolStripMenuItem.Text = string.Format("{0} [{1}]", _language.Menu.Video.SetVideoOffset, new TimeCode(Configuration.Settings.General.CurrentVideoOffsetInMs).ToShortDisplayString());
                }
                else
                {
                    setVideoOffsetToolStripMenuItem.Text = _language.Menu.Video.SetVideoOffset;
                }

                smpteTimeModedropFrameToolStripMenuItem.Checked = mediaPlayer.SmpteMode;
            }

            toolStripMenuItemOpenVideoFromUrl.Visible = Configuration.Settings.General.VideoPlayer.Trim().Equals("MPV", StringComparison.OrdinalIgnoreCase) &&
                                                        LibMpvDynamic.IsInstalled &&
                                                        File.Exists(Path.Combine(Configuration.DataDirectory, "youtube-dl.exe"));

            toolStripMenuItemSetAudioTrack.Visible = false;
            var libVlc = mediaPlayer.VideoPlayer as LibVlcDynamic;
            var libMpv = mediaPlayer.VideoPlayer as LibMpvDynamic;
            if (libVlc != null)
            {
                var audioTracks = libVlc.GetAudioTracks();
                _videoAudioTrackNumber = libVlc.AudioTrackNumber;
                if (audioTracks.Count > 1)
                {
                    toolStripMenuItemSetAudioTrack.DropDownItems.Clear();
                    for (int i = 0; i < audioTracks.Count; i++)
                    {
                        var at = audioTracks[i];
                        toolStripMenuItemSetAudioTrack.DropDownItems.Add(string.IsNullOrWhiteSpace(at.Value) ? at.Key.ToString(CultureInfo.InvariantCulture) : at.Value, null, ChooseAudioTrack);
                        toolStripMenuItemSetAudioTrack.DropDownItems[toolStripMenuItemSetAudioTrack.DropDownItems.Count - 1].Tag = at.Key.ToString(CultureInfo.InvariantCulture);
                        if (at.Key == _videoAudioTrackNumber)
                        {
                            toolStripMenuItemSetAudioTrack.DropDownItems[toolStripMenuItemSetAudioTrack.DropDownItems.Count - 1].Select();
                        }
                    }

                    toolStripMenuItemSetAudioTrack.Visible = true;
                }
            }
            else if (libMpv != null)
            {
                int numberOfTracks = libMpv.AudioTrackCount;
                _videoAudioTrackNumber = libMpv.AudioTrackNumber;
                if (numberOfTracks > 1)
                {
                    toolStripMenuItemSetAudioTrack.DropDownItems.Clear();
                    for (int i = 0; i < numberOfTracks; i++)
                    {
                        toolStripMenuItemSetAudioTrack.DropDownItems.Add((i + 1).ToString(CultureInfo.InvariantCulture), null, ChooseAudioTrack);
                        if (i == _videoAudioTrackNumber)
                        {
                            toolStripMenuItemSetAudioTrack.DropDownItems[toolStripMenuItemSetAudioTrack.DropDownItems.Count - 1].Select();
                        }
                    }

                    toolStripMenuItemSetAudioTrack.Visible = true;
                }
            }

            if (mediaPlayer.VideoPlayer != null && audioVisualizer.WavePeaks != null && audioVisualizer.WavePeaks.Peaks.Count > 0)
            {
                toolStripMenuItemImportSceneChanges.Visible = true;
                toolStripMenuItemRemoveSceneChanges.Visible = audioVisualizer.SceneChanges.Count > 0;
            }
            else
            {
                toolStripMenuItemImportSceneChanges.Visible = false;
                toolStripMenuItemRemoveSceneChanges.Visible = false;
            }

            generateTextFromCurrentVideoToolStripMenuItem.Visible = Directory.Exists(Path.Combine(Configuration.DataDirectory, "pocketsphinx"));
        }

        private void ChooseAudioTrack(object sender, EventArgs e)
        {
            var libVlc = mediaPlayer.VideoPlayer as LibVlcDynamic;
            var libMpv = mediaPlayer.VideoPlayer as LibMpvDynamic;
            if (libVlc != null)
            {
                var item = sender as ToolStripItem;
                int number = int.Parse(item.Tag.ToString());
                libVlc.AudioTrackNumber = number;
                _videoAudioTrackNumber = number;
            }
            else if (libMpv != null)
            {
                var item = sender as ToolStripItem;
                int number = int.Parse(item.Text);
                number--;
                libMpv.AudioTrackNumber = number;
                _videoAudioTrackNumber = number;
            }
        }

        private void textBoxListViewTextAlternate_TextChanged(object sender, EventArgs e)
        {
            if (_subtitleAlternate == null || _subtitleAlternate.Paragraphs.Count < 1)
            {
                return;
            }

            if (_subtitleListViewIndex >= 0)
            {
                var original = Utilities.GetOriginalParagraph(_subtitleListViewIndex, _subtitle.Paragraphs[_subtitleListViewIndex], _subtitleAlternate.Paragraphs);
                if (original != null)
                {
                    string text = textBoxListViewTextAlternate.Text.TrimEnd();

                    // update _subtitle + listview
                    original.Text = text;
                    UpdateListViewTextInfo(labelTextAlternateLineLengths, labelAlternateSingleLine, labelAlternateSingleLinePixels, labelTextAlternateLineTotal, labelAlternateCharactersPerSecond, original, textBoxListViewTextAlternate);
                    SubtitleListview1.SetAlternateText(_subtitleListViewIndex, text);
                    FixVerticalScrollBars(textBoxListViewTextAlternate, ref _lastNumberOfNewLinesAlternate);
                }
            }
        }

        private void TextBoxListViewTextAlternateKeyDown(object sender, KeyEventArgs e)
        {
            _listViewAlternateTextTicks = DateTime.UtcNow.Ticks;
            if (_subtitleAlternate == null || _subtitleAlternate.Paragraphs.Count < 1)
            {
                return;
            }

            if (e.Modifiers == Keys.Shift && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == (Keys.LButton | Keys.ShiftKey))
            { // surround ctrl+v action with history (for undo)
                _listViewAlternateTextTicks = 0;
                TimerAlternateTextUndoTick(sender, e);
                Application.DoEvents();
                System.Threading.Thread.Sleep(50);
                Application.DoEvents();
                _listViewAlternateTextTicks = 0;
                TimerAlternateTextUndoTick(sender, e);
                return;
            }

            int numberOfLines = Utilities.GetNumberOfLines(textBoxListViewTextAlternate.Text);

            if (e.Modifiers == Keys.None && e.KeyCode == Keys.Enter && numberOfLines > Configuration.Settings.General.MaxNumberOfLines)
            {
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxAutoBreak)
            {
                BreakUnbreakTextBox(false, textBoxListViewTextAlternate);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxUnbreak)
            {
                BreakUnbreakTextBox(true, textBoxListViewTextAlternate);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == _shortcuts.MainTextBoxBreakAtCursorPosition)
            {
                textBoxListViewTextAlternate.Text = Utilities.ReSplit(textBoxListViewTextAlternate.Text, textBoxListViewTextAlternate.SelectionStart);
                var lines = textBoxListViewTextAlternate.Text.SplitToLines();
                if (lines.Count > 0)
                {
                    textBoxListViewTextAlternate.SelectionStart = lines[0].Length;
                }

                e.SuppressKeyPress = true;
            }

            else if (e.KeyData == _shortcuts.MainTextBoxBreakAtCursorPosition)
            {
                textBoxListViewText.Text = Utilities.ReSplit(textBoxListViewText.Text, textBoxListViewText.SelectionStart);
                ButtonNextClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.I)
            {
                if (textBoxListViewTextAlternate.SelectionLength == 0)
                {
                    if (textBoxListViewTextAlternate.Text.Contains("<i>"))
                    {
                        textBoxListViewTextAlternate.Text = HtmlUtil.RemoveOpenCloseTags(textBoxListViewTextAlternate.Text, HtmlUtil.TagItalic);
                    }
                    else
                    {
                        textBoxListViewTextAlternate.Text = string.Format("<i>{0}</i>", textBoxListViewTextAlternate.Text);
                    }
                }
                else
                {
                    TextBoxListViewToggleTag(HtmlUtil.TagItalic);
                    e.SuppressKeyPress = true;
                }
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                textBoxListViewTextAlternate.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSelectionToLower == e.KeyData) // selection to lowercase
            {
                if (textBoxListViewTextAlternate.SelectionLength > 0)
                {
                    int start = textBoxListViewTextAlternate.SelectionStart;
                    int length = textBoxListViewTextAlternate.SelectionLength;
                    textBoxListViewTextAlternate.SelectedText = textBoxListViewTextAlternate.SelectedText.ToLowerInvariant();
                    textBoxListViewTextAlternate.SelectionStart = start;
                    textBoxListViewTextAlternate.SelectionLength = length;
                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainTextBoxSelectionToUpper == e.KeyData) // selection to uppercase
            {
                if (textBoxListViewTextAlternate.SelectionLength > 0)
                {
                    int start = textBoxListViewTextAlternate.SelectionStart;
                    int length = textBoxListViewTextAlternate.SelectionLength;
                    textBoxListViewTextAlternate.SelectedText = textBoxListViewTextAlternate.SelectedText.ToUpperInvariant();
                    textBoxListViewTextAlternate.SelectionStart = start;
                    textBoxListViewTextAlternate.SelectionLength = length;
                    e.SuppressKeyPress = true;
                }
            }
            else if (_shortcuts.MainTextBoxSplitAtCursor == e.KeyData && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
            {
                ToolStripMenuItemSplitTextAtCursorClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (_shortcuts.MainTextBoxSplitAtCursorAndVideoPos == e.KeyData && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
            {
                toolStripMenuItemSplitViaWaveform_Click(null, null);
                e.SuppressKeyPress = true;
            }

            // last key down in text
            _lastTextKeyDownTicks = DateTime.UtcNow.Ticks;

            UpdatePositionAndTotalLength(labelTextAlternateLineTotal, textBoxListViewTextAlternate);
        }

        private void OpenOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            OpenAlternateSubtitle();
        }

        private void SaveOriginalAstoolStripMenuItemClick(object sender, EventArgs e)
        {
            if (_subtitleAlternate == null || _subtitleAlternate.Paragraphs.Count == 0)
            {
                return;
            }

            SubtitleFormat currentFormat = GetCurrentSubtitleFormat();
            if (currentFormat == null)
            {
                currentFormat = new SubRip();
            }

            UiUtil.SetSaveDialogFilter(saveFileDialog1, currentFormat);

            saveFileDialog1.Title = _language.SaveOriginalSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else if (!string.IsNullOrEmpty(_subtitleAlternateFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_subtitleAlternateFileName);
            }
            else
            {
                saveFileDialog1.FileName = string.Empty;
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                _subtitleAlternateFileName = saveFileDialog1.FileName;
                SaveOriginalSubtitle(currentFormat);
                SetTitle();
                if (_fileName != null)
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                }
            }
        }

        private void SaveOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_subtitleAlternateFileName))
            {
                SaveOriginalAstoolStripMenuItemClick(null, null);
                return;
            }

            try
            {
                SaveOriginalSubtitle(GetCurrentSubtitleFormat());
            }
            catch
            {
                MessageBox.Show(string.Format(_language.UnableToSaveSubtitleX, _subtitleAlternateFileName));
            }
        }

        private void RemoveOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (ContinueNewOrExitAlternate())
            {
                RemoveAlternate(true, true);
            }
        }

        private void RemoveAlternate(bool removeFromListView, bool updateRecentFiles)
        {
            if (removeFromListView)
            {
                SubtitleListview1.HideColumn(SubtitleListView.SubtitleColumn.TextAlternate);
                SubtitleListview1.AutoSizeAllColumns(this);
                _subtitleAlternate = new Subtitle();
                _subtitleAlternateFileName = null;

                if (_fileName != null && updateRecentFiles)
                {
                    Configuration.Settings.RecentFiles.Add(_fileName, FirstVisibleIndex, FirstSelectedIndex, _videoFileName, _subtitleAlternateFileName, Configuration.Settings.General.CurrentVideoOffsetInMs);
                    Configuration.Settings.Save();
                    UpdateRecentFilesUI();
                }
            }

            buttonUnBreak.Visible = true;
            buttonAutoBreak.Visible = true;
            textBoxListViewTextAlternate.Visible = false;
            labelAlternateText.Visible = false;
            labelAlternateCharactersPerSecond.Visible = false;
            labelTextAlternateLineLengths.Visible = false;
            labelAlternateSingleLine.Visible = false;
            labelAlternateSingleLinePixels.Visible = false;
            labelTextAlternateLineTotal.Visible = false;
            textBoxListViewText.Width = (groupBoxEdit.Width - (textBoxListViewText.Left + 8 + buttonUnBreak.Width));
            textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom;
            labelTextLineTotal.Left = 236;
            labelTextAlternateLineTotal.Left = 236;

            MainResize();
            SetTitle();
            SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex, true);
        }

        private void ToolStripMenuItemSpellCheckMainDropDownOpening(object sender, EventArgs e)
        {
            addWordToNameListToolStripMenuItem.Visible = true;
        }

        private void SplitContainer1SplitterMoved(object sender, SplitterEventArgs e)
        {
            Main_Resize(null, null);
        }

        private void ButtonSplitLineClick(object sender, EventArgs e)
        {
            SplitSelectedParagraph(null, null);
        }

        private void ToolStripMenuItemCopySourceTextClick(object sender, EventArgs e)
        {
            var selectedLines = new Subtitle(_subtitle);
            selectedLines.Paragraphs.Clear();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                selectedLines.Paragraphs.Add(new Paragraph(_subtitle.Paragraphs[index]));
            }

            if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
            {
                selectedLines.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(Configuration.Settings.General.CurrentVideoOffsetInMs));
            }

            Clipboard.SetText(selectedLines.ToText(GetCurrentSubtitleFormat()).TrimEnd());
        }

        public void PlayPause()
        {
            mediaPlayer.TogglePlayPause();
        }

        public void SetCurrentViaEndPositionAndGotoNext(int index, bool goToNext)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            if (mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            var oldParagraph = new Paragraph(p, false);

            //if (autoDuration)
            //{
            //    // TODO: auto duration
            //    // TODO: Search for start via wave file (must only be minor adjustment)
            //}

            // current movie Position
            double durationTotalMilliseconds = p.Duration.TotalMilliseconds;
            double totalMillisecondsEnd = mediaPlayer.CurrentPosition * TimeCode.BaseUnit;

            var tc = new TimeCode(totalMillisecondsEnd - durationTotalMilliseconds);
            MakeHistoryForUndo(_language.BeforeSetEndAndVideoPosition + "  " + tc);
            _makeHistoryPaused = true;

            if (p.StartTime.IsMaxTime)
            {
                p.EndTime.TotalSeconds = mediaPlayer.CurrentPosition;
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }
            else
            {
                p.StartTime.TotalMilliseconds = totalMillisecondsEnd - durationTotalMilliseconds;
                p.EndTime.TotalMilliseconds = totalMillisecondsEnd;
            }

            timeUpDownStartTime.TimeCode = p.StartTime;
            var durationInSeconds = (decimal)(p.Duration.TotalSeconds);
            if (durationInSeconds >= numericUpDownDuration.Minimum && durationInSeconds <= numericUpDownDuration.Maximum)
            {
                SetDurationInSeconds((double)durationInSeconds);
            }

            UpdateOriginalTimeCodes(oldParagraph);
            RestartHistory();

            if (goToNext)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
            }

            ShowStatus(string.Format(_language.VideoControls.AdjustedViaEndTime, p.StartTime.ToShortString()));
            audioVisualizer.Invalidate();
        }

        public void SetCurrentStartAutoDurationAndGotoNext(int index)
        {
            var prev = _subtitle.GetParagraphOrDefault(index - 1);
            var p = _subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            double videoPosition = mediaPlayer.CurrentPosition;
            if (prev != null && Math.Abs(prev.StartTime.TotalSeconds - videoPosition) < 0.3)
            {
                ShowStatus("Subtitle already here");
                return;
            }

            ShowNextSubtitleLabel();

            if (mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));

            timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
            var oldParagraph = new Paragraph(_subtitle.Paragraphs[index], false);
            if (!mediaPlayer.IsPaused)
            {
                videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
            }

            timeUpDownStartTime.TimeCode = TimeCode.FromSeconds(videoPosition);

            double duration = Utilities.GetOptimalDisplayMilliseconds(textBoxListViewText.Text);

            _subtitle.Paragraphs[index].StartTime.TotalMilliseconds = TimeSpan.FromSeconds(videoPosition).TotalMilliseconds;
            if (prev != null && prev.EndTime.TotalMilliseconds > _subtitle.Paragraphs[index].StartTime.TotalMilliseconds)
            {
                int minDiff = Configuration.Settings.General.MinimumMillisecondsBetweenLines + 1;
                if (minDiff < 1)
                {
                    minDiff = 1;
                }

                prev.EndTime.TotalMilliseconds = _subtitle.Paragraphs[index].StartTime.TotalMilliseconds - minDiff;
            }

            _subtitle.Paragraphs[index].EndTime.TotalMilliseconds = _subtitle.Paragraphs[index].StartTime.TotalMilliseconds + duration;
            SubtitleListview1.SetStartTimeAndDuration(index, _subtitle.Paragraphs[index], _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
            timeUpDownStartTime.TimeCode = _subtitle.Paragraphs[index].StartTime;
            timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            UpdateOriginalTimeCodes(oldParagraph);
            _subtitleListViewIndex = -1;
            SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
            audioVisualizer.Invalidate();
        }

        public void SetCurrentEndNextStartAndGoToNext(int index)
        {
            var p = _subtitle.GetParagraphOrDefault(index);
            var next = _subtitle.GetParagraphOrDefault(index + 1);
            if (p == null)
            {
                return;
            }

            if (mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(_videoFileName))
            {
                MessageBox.Show(_languageGeneral.NoVideoLoaded);
                return;
            }

            MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));
            var p1 = new Paragraph(p, false);
            Paragraph p2 = null;
            if (next != null)
            {
                p2 = new Paragraph(next, false);
            }

            double videoPosition = mediaPlayer.CurrentPosition;
            if (!mediaPlayer.IsPaused)
            {
                videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
            }

            p.EndTime = TimeCode.FromSeconds(videoPosition);
            if (p.StartTime.IsMaxTime)
            {
                timeUpDownStartTime.MaskedTextBox.TextChanged -= MaskedTextBoxTextChanged;
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
                if (p.StartTime.TotalMilliseconds < 0)
                {
                    p.StartTime.TotalMilliseconds = 0;
                }

                timeUpDownStartTime.TimeCode = p.StartTime;
                SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));
                timeUpDownStartTime.MaskedTextBox.TextChanged += MaskedTextBoxTextChanged;
            }

            if (p.Duration.TotalSeconds < 0 || p.Duration.TotalSeconds > 10)
            {
                p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }

            SubtitleListview1.SetStartTimeAndDuration(index, p, _subtitle.GetParagraphOrDefault(index + 1), _subtitle.GetParagraphOrDefault(index - 1));

            SetDurationInSeconds(_subtitle.Paragraphs[index].Duration.TotalSeconds + 0.001);
            if (next != null)
            {
                int addMilliseconds = Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                if (addMilliseconds < 1 || addMilliseconds > 500)
                {
                    addMilliseconds = 1;
                }

                var oldDuration = next.Duration.TotalMilliseconds;
                if (next.StartTime.IsMaxTime || next.EndTime.IsMaxTime)
                {
                    oldDuration = Utilities.GetOptimalDisplayMilliseconds(p.Text);
                }

                next.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + addMilliseconds;
                next.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds + oldDuration;
                SubtitleListview1.SetStartTimeAndDuration(index + 1, next, _subtitle.GetParagraphOrDefault(index + 2), _subtitle.GetParagraphOrDefault(index));
                SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
            }

            UpdateOriginalTimeCodes(p1, p2);
            audioVisualizer.Invalidate();
        }

        private void EditSelectAllToolStripMenuItemClick(object sender, EventArgs e)
        {
            for (int i = 0; i < SubtitleListview1.Items.Count; i++)
            {
                SubtitleListview1.Items[i].Selected = true;
            }
        }

        private void ToolStripMenuItemSplitTextAtCursorClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            int? pos = null;
            if (tb.SelectionStart > 1 && tb.SelectionStart < tb.Text.Length - 1)
            {
                pos = tb.SelectionStart;
            }

            SplitSelectedParagraph(null, pos);
            tb.Focus();
            tb.SelectionStart = tb.Text.Length;
        }

        private void toolStripMenuItemSplitViaWaveform_Click(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();
            if (tb.SelectionStart > 1 && tb.SelectionStart < tb.Text.Length - 1)
            {
                int? pos = tb.SelectionStart;
                SplitSelectedParagraph(mediaPlayer.CurrentPosition, pos);
                tb.Focus();
                tb.SelectionStart = tb.Text.Length;
            }
        }

        private void ContextMenuStripTextBoxListViewOpening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            var tb = GetFocusedTextBox();
            toolStripMenuItemSplitTextAtCursor.Visible = tb.Text.Length > 1;

            if (IsUnicode)
            {
                if (toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count == 0)
                {
                    foreach (var s in Configuration.Settings.Tools.UnicodeSymbolsToInsert.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Add(s, null, InsertUnicodeGlyph);
                        if (Environment.OSVersion.Version.Major < 6 && Configuration.Settings.General.SubtitleFontName == Utilities.WinXP2KUnicodeFontName) // 6 == Vista/Win2008Server/Win7
                        {
                            toolStripMenuItemInsertUnicodeSymbol.DropDownItems[toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count - 1].Font = new Font(Utilities.WinXP2KUnicodeFontName, toolStripMenuItemInsertUnicodeSymbol.Font.Size);
                        }
                    }
                }

                toolStripMenuItemInsertUnicodeSymbol.Visible = toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count > 0;
                toolStripSeparator26.Visible = toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count > 0;

                superscriptToolStripMenuItem.Visible = tb.SelectionLength > 0;
                subscriptToolStripMenuItem.Visible = tb.SelectionLength > 0;
                toolStripMenuItemInsertUnicodeControlCharacters.Visible = true;
            }
            else
            {
                toolStripMenuItemInsertUnicodeSymbol.Visible = false;
                toolStripSeparator26.Visible = false;
                superscriptToolStripMenuItem.Visible = false;
                subscriptToolStripMenuItem.Visible = false;
                toolStripMenuItemInsertUnicodeControlCharacters.Visible = false;
            }

            var formatType = GetCurrentSubtitleFormat().GetType();
            if (formatType == typeof(WebVTT) && tb.SelectionLength > 0)
            {
                toolStripSeparatorWebVTT.Visible = true;
                toolStripMenuItemWebVttVoice.Visible = true;
                var voices = WebVTT.GetVoices(_subtitle);
                toolStripMenuItemWebVttVoice.DropDownItems.Clear();
                foreach (var style in voices)
                {
                    toolStripMenuItemWebVttVoice.DropDownItems.Add(style, null, WebVTTSetVoiceTextBox);
                }

                toolStripMenuItemWebVttVoice.DropDownItems.Add(_language.Menu.ContextMenu.WebVTTSetNewVoice, null, WebVTTSetNewVoiceTextBox);
            }
            else
            {
                toolStripSeparatorWebVTT.Visible = false;
                toolStripMenuItemWebVttVoice.Visible = false;
                toolStripMenuItemWebVttVoice.Visible = false;
            }

            if (formatType == typeof(NetflixImsc11Japanese))
            {
                boldToolStripMenuItem1.Visible = false;
                underlineToolStripMenuItem1.Visible = false;
                colorToolStripMenuItem1.Visible = false;
                fontNameToolStripMenuItem.Visible = false;
                toolStripMenuItemHorizontalDigits.Visible = true;
                if (tb.SelectionLength > 0)
                {
                    toolStripMenuItemBouten.Visible = true;
                    toolStripMenuItemRuby.Visible = true;
                }
                else
                {
                    toolStripMenuItemBouten.Visible = false;
                    toolStripMenuItemRuby.Visible = true;
                }

                if (tb.SelectionLength > 1 && tb.SelectionLength < 8)
                {
                    toolStripMenuItemHorizontalDigits.Visible = true;
                }
                else
                {
                    toolStripMenuItemHorizontalDigits.Visible = false;
                }
            }
            else if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
            {
                boldToolStripMenuItem1.Visible = true;
                underlineToolStripMenuItem1.Visible = true;
                colorToolStripMenuItem1.Visible = true;
                fontNameToolStripMenuItem.Visible = true;
                toolStripMenuItemHorizontalDigits.Visible = false;
                toolStripMenuItemBouten.Visible = false;
                if (tb.SelectionLength > 0)
                {
                    toolStripMenuItemRuby.Visible = true;
                }
                else
                {
                    toolStripMenuItemRuby.Visible = true;
                }
            }
            else if (formatType == typeof(Ebu))
            {
                Ebu.EbuGeneralSubtitleInformation header;
                if (_subtitle != null && _subtitle.Header != null && (_subtitle.Header.Contains("STL2") || _subtitle.Header.Contains("STL3")))
                {
                    header = Ebu.ReadHeader(Encoding.UTF8.GetBytes(_subtitle.Header));
                }
                else
                {
                    header = new Ebu.EbuGeneralSubtitleInformation();
                }

                var open = header.DisplayStandardCode != "1" && header.DisplayStandardCode != "2";
                boxToolStripMenuItem.Visible = open;
            }
            else
            {
                boxToolStripMenuItem1.Visible = false;
                boldToolStripMenuItem1.Visible = true;
                underlineToolStripMenuItem1.Visible = true;
                colorToolStripMenuItem1.Visible = true;
                fontNameToolStripMenuItem.Visible = true;
                toolStripMenuItemBouten.Visible = false;
                toolStripMenuItemRuby.Visible = false;
                toolStripMenuItemHorizontalDigits.Visible = false;
            }

            if (tb.SelectionStart > 1 && tb.SelectionStart < tb.Text.Length - 1 && !string.IsNullOrEmpty(_videoFileName) && mediaPlayer != null &&
                _subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                int firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
                var currentParagraph = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                var splitSeconds = mediaPlayer.CurrentPosition;
                if (splitSeconds > (currentParagraph.StartTime.TotalSeconds + 0.2) && splitSeconds < (currentParagraph.EndTime.TotalSeconds - 0.2))
                {
                    toolStripMenuItemSplitViaWaveform.Visible = true;
                }
                else
                {
                    toolStripMenuItemSplitViaWaveform.Visible = false;
                }
            }
            else
            {
                toolStripMenuItemSplitViaWaveform.Visible = false;
            }
        }

        private void ToolStripMenuItemExportPngXmlClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), "BDNXML", _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void TabControlSubtitleSelecting(object sender, TabControlCancelEventArgs e)
        {
            if (tabControlSubtitle.SelectedIndex != TabControlSourceView && textBoxSource.Text.Trim().Length > 1)
            {
                var currentFormat = GetCurrentSubtitleFormat();
                if (currentFormat != null && !currentFormat.IsTextBased)
                {
                    return;
                }

                var frameRate = CurrentFrameRate;
                var format = new Subtitle().ReloadLoadSubtitle(textBoxSource.Lines.ToList(), null, currentFormat);
                if (format == null)
                {
                    e.Cancel = true;
                }
                Configuration.Settings.General.DefaultFrameRate = frameRate;
            }
        }

        private void ToolStripComboBoxFrameRateTextChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.CurrentFrameRate = CurrentFrameRate;
            if (_loading)
            {
                return;
            }

            SubtitleListview1.UpdateFrames(_subtitle);
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                ShowSource();
            }
        }

        private void ToolStripMenuItemGoogleMicrosoftTranslateSelLineClick(object sender, EventArgs e)
        {
            int firstSelectedIndex = FirstSelectedIndex;
            if (firstSelectedIndex >= 0)
            {
                var p = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (p != null)
                {
                    string defaultFromLanguage = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
                    if (_subtitleAlternate != null)
                    {
                        var o = Utilities.GetOriginalParagraph(firstSelectedIndex, p, _subtitleAlternate.Paragraphs);
                        if (o != null)
                        {
                            p = o;
                            defaultFromLanguage = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitleAlternate);
                        }
                    }

                    Cursor = Cursors.WaitCursor;
                    if (_googleOrMicrosoftTranslate == null || _googleOrMicrosoftTranslate.IsDisposed)
                    {
                        _googleOrMicrosoftTranslate = new GoogleOrMicrosoftTranslate();
                        _googleOrMicrosoftTranslate.InitializeFromLanguage(defaultFromLanguage);
                    }

                    _googleOrMicrosoftTranslate.Initialize(p);
                    Cursor = Cursors.Default;
                    if (_googleOrMicrosoftTranslate.ShowDialog() == DialogResult.OK)
                    {
                        textBoxListViewText.Text = _googleOrMicrosoftTranslate.TranslatedText;
                    }
                }
            }
        }

        private void NumericUpDownSec1ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.SmallDelayMilliseconds = (int)(numericUpDownSec1.Value * 1000);
        }

        private void NumericUpDownSec2ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.LargeDelayMilliseconds = (int)(numericUpDownSec2.Value * 1000);
        }

        private void NumericUpDownSecAdjust1ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.SmallDelayMilliseconds = (int)(numericUpDownSecAdjust1.Value * 1000);
        }

        private void NumericUpDownSecAdjust2ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.LargeDelayMilliseconds = (int)(numericUpDownSecAdjust2.Value * 1000);
        }

        private void ToolStripMenuItemMakeEmptyFromCurrentClick(object sender, EventArgs e)
        {
            if (ContinueNewOrExit())
            {
                bool isAlternateVisible = SubtitleListview1.IsAlternateTextColumnVisible;
                _subtitleAlternate = new Subtitle(_subtitle);
                _subtitleAlternateFileName = null;
                int oldIndex = FirstSelectedIndex;
                if (oldIndex < 0)
                {
                    oldIndex = 0;
                }

                foreach (var p in _subtitle.Paragraphs)
                {
                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening && string.IsNullOrEmpty(Configuration.Settings.Tools.NewEmptyTranslationText))
                    {
                        p.Text = "-";
                    }
                    else if (Configuration.Settings.Tools.NewEmptyTranslationText != null)
                    {
                        p.Text = Configuration.Settings.Tools.NewEmptyTranslationText;
                    }
                    else
                    {
                        p.Text = string.Empty;
                    }
                }

                SubtitleListview1.ShowAlternateTextColumn(_languageGeneral.OriginalText);
                _subtitleListViewIndex = -1;
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                SubtitleListview1.SelectIndexAndEnsureVisible(oldIndex, true);
                textBoxListViewText.Focus();
                Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = true;

                _subtitleAlternateFileName = _fileName;
                _fileName = null;
                SetupAlternateEdit();
                ResetHistory();

                if (!isAlternateVisible || toolStripMenuItemShowOriginalInPreview.Checked)
                {
                    toolStripMenuItemShowOriginalInPreview.Checked = false;
                    Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = false;
                    audioVisualizer.Invalidate();
                }
            }
        }

        private void ToolStripMenuItemShowOriginalInPreviewClick(object sender, EventArgs e)
        {
            toolStripMenuItemShowOriginalInPreview.Checked = !toolStripMenuItemShowOriginalInPreview.Checked;
            Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = toolStripMenuItemShowOriginalInPreview.Checked;
        }

        private void ToolStripMenuItemVideoDropDownClosed(object sender, EventArgs e)
        {
            redockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            undockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
        }

        private void ToolsToolStripMenuItemDropDownOpening(object sender, EventArgs e)
        {
            if (_subtitle?.Paragraphs.Count > 0 && _networkSession == null)
            {
                toolStripSeparator23.Visible = true;
                toolStripMenuItemMakeEmptyFromCurrent.Visible = !SubtitleListview1.IsAlternateTextColumnVisible;
                toolStripMenuItemShowOriginalInPreview.Checked = Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable;
            }
            else
            {
                toolStripSeparator23.Visible = false;
                toolStripMenuItemMakeEmptyFromCurrent.Visible = false;
                toolStripMenuItemShowOriginalInPreview.Checked = false;
            }

            var f = GetCurrentSubtitleFormat();
            styleToolStripMenuItem.Visible = f.HasStyleSupport;
            var formatType = f.GetType();
            actorToolStripMenuItem.Visible = formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha);
        }

        private void ContextMenuStripWaveformOpening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (audioVisualizer.IsSpectrogramAvailable)
            {
                if (audioVisualizer.ShowSpectrogram && audioVisualizer.ShowWaveform)
                {
                    showWaveformAndSpectrogramToolStripMenuItem.Visible = false;
                    showOnlyWaveformToolStripMenuItem.Visible = true;
                    showOnlySpectrogramToolStripMenuItem.Visible = true;
                    toolStripSeparatorGuessTimeCodes.Visible = true;
                }
                else if (audioVisualizer.ShowSpectrogram)
                {
                    showWaveformAndSpectrogramToolStripMenuItem.Visible = true;
                    showOnlyWaveformToolStripMenuItem.Visible = true;
                    showOnlySpectrogramToolStripMenuItem.Visible = false;
                    toolStripSeparatorGuessTimeCodes.Visible = true;
                }
                else
                {
                    showWaveformAndSpectrogramToolStripMenuItem.Visible = true;
                    showOnlyWaveformToolStripMenuItem.Visible = false;
                    showOnlySpectrogramToolStripMenuItem.Visible = true;
                    toolStripSeparatorGuessTimeCodes.Visible = true;
                }
            }
            else
            {
                toolStripSeparator24.Visible = false;
                showWaveformAndSpectrogramToolStripMenuItem.Visible = false;
                showOnlyWaveformToolStripMenuItem.Visible = false;
                showOnlySpectrogramToolStripMenuItem.Visible = false;
                toolStripSeparatorGuessTimeCodes.Visible = false;
            }

            insertSubtitleHereToolStripMenuItem.Visible = !_subtitle.Paragraphs.Any(p => p.StartTime.TotalSeconds <= mediaPlayer.CurrentPosition + 1.0 &&
                                                                                         p.EndTime.TotalSeconds <= mediaPlayer.CurrentPosition + 1.0 &&
                                                                                         p.EndTime.TotalSeconds >= mediaPlayer.CurrentPosition);
        }

        private void ShowWaveformAndSpectrogramToolStripMenuItemClick(object sender, EventArgs e)
        {
            audioVisualizer.ShowSpectrogram = true;
            audioVisualizer.ShowWaveform = true;
        }

        private void ShowOnlyWaveformToolStripMenuItemClick(object sender, EventArgs e)
        {
            audioVisualizer.ShowSpectrogram = false;
            audioVisualizer.ShowWaveform = true;
        }

        private void ShowOnlySpectrogramToolStripMenuItemClick(object sender, EventArgs e)
        {
            audioVisualizer.ShowSpectrogram = true;
            audioVisualizer.ShowWaveform = false;
        }

        private void SplitContainerMainSplitterMoved(object sender, SplitterEventArgs e)
        {
            mediaPlayer.Refresh();
        }

        private void FindDoubleLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            for (int i = FirstSelectedIndex + 1; i < _subtitle.Paragraphs.Count; i++)
            {
                var current = _subtitle.GetParagraphOrDefault(i);
                var next = _subtitle.GetParagraphOrDefault(i + 1);
                if (current != null && next != null)
                {
                    if (current.Text.Trim().Equals(next.Text.Trim(), StringComparison.OrdinalIgnoreCase))
                    {
                        SubtitleListview1.SelectIndexAndEnsureVisible(i, true);
                        SubtitleListview1.Items[i + 1].Selected = true;
                        break;
                    }
                }
            }
        }

        private void TextBoxListViewTextAlternateMouseMove(object sender, MouseEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && MouseButtons == MouseButtons.Left)
            {
                if (!string.IsNullOrEmpty(textBoxListViewTextAlternate.SelectedText))
                {
                    textBoxListViewTextAlternate.DoDragDrop(textBoxListViewTextAlternate.SelectedText, DragDropEffects.Copy);
                }
                else
                {
                    textBoxListViewTextAlternate.DoDragDrop(textBoxListViewTextAlternate.Text, DragDropEffects.Copy);
                }
            }
            else if ((AutoRepeatContinueOn || AutoRepeatOn) && !textBoxSearchWord.Focused && textBoxListViewTextAlternate.Focused)
            {
                string selectedText = textBoxListViewTextAlternate.SelectedText;
                if (!string.IsNullOrEmpty(selectedText))
                {
                    selectedText = selectedText.Trim();
                    selectedText = selectedText.TrimEnd('.', ',', '!', '?').TrimEnd();
                    if (!string.IsNullOrEmpty(selectedText) && selectedText != textBoxSearchWord.Text)
                    {
                        textBoxSearchWord.Text = HtmlUtil.RemoveHtmlTags(selectedText);
                    }
                }
            }
        }

        private void EBustlToolStripMenuItemClick(object sender, EventArgs e)
        {
            var ebu = new Ebu();
            saveFileDialog1.Filter = ebu.Name + "|*" + ebu.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + ebu.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(ebu.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += ebu.Extension;
                }

                new Ebu().Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void ToolStripMenuItemCavena890Click(object sender, EventArgs e)
        {
            var cavena890 = new Cavena890();
            saveFileDialog1.Filter = cavena890.Name + "|*" + cavena890.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + cavena890.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(cavena890.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += cavena890.Extension;
                }

                using (var form = new Cavena890SaveOptions(_subtitle, _fileName))
                {
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        cavena890.Save(fileName, GetSaveSubtitle(_subtitle));
                    }
                }
            }
        }

        private void PacScreenElectronicsToolStripMenuItemClick(object sender, EventArgs e)
        {
            var pac = new Pac();
            saveFileDialog1.Filter = pac.Name + "|*" + pac.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + pac.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(pac.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += pac.Extension;
                }

                pac.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void uniPacExportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var uniPac = new PacUnicode();
            saveFileDialog1.Filter = uniPac.Name + "|*" + uniPac.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + uniPac.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(uniPac.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += uniPac.Extension;
                }

                uniPac.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void toolStripMenuItemExportAyato_Click(object sender, EventArgs e)
        {
            var ayato = new Ayato();
            saveFileDialog1.Filter = ayato.Name + "|*" + ayato.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + ayato.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(ayato.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += ayato.Extension;
                }

                ayato.Save(fileName, _videoFileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void TextBoxListViewTextEnter(object sender, EventArgs e)
        {
            if (_findHelper != null)
            {
                _findHelper.MatchInOriginal = false;
            }
        }

        private void TextBoxListViewTextAlternateEnter(object sender, EventArgs e)
        {
            if (_findHelper != null)
            {
                _findHelper.MatchInOriginal = true;
            }
        }

        private void PlainTextToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var exportText = new ExportText())
            {
                exportText.Initialize(GetSaveSubtitle(_subtitle), _fileName);
                if (exportText.ShowDialog() == DialogResult.OK)
                {
                    ShowStatus(_language.SubtitleExported);
                }
            }
        }

        private void BluraySupToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.BluraySup, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void VobSubsubidxToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.VobSub, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void TextBoxListViewTextAlternateKeyUp(object sender, KeyEventArgs e)
        {
            textBoxListViewTextAlternate.ClearUndo();
            UpdatePositionAndTotalLength(labelTextAlternateLineTotal, textBoxListViewTextAlternate);
        }

        private void TimerTextUndoTick(object sender, EventArgs e)
        {
            // progress check
            ShowTranslationProgress();

            // text undo
            int index = _listViewTextUndoIndex;
            if (index == -1)
            {
                index = _subtitleListViewIndex;
            }

            if (_listViewTextTicks == -1 || !CanFocus || _subtitle == null || _subtitle.Paragraphs.Count == 0 || index < 0 || index >= _subtitle.Paragraphs.Count)
            {
                return;
            }

            if ((DateTime.UtcNow.Ticks - _listViewTextTicks) > 10000 * 700) // only if last typed char was entered > 700 milliseconds
            {
                if (index < 0 || index >= _subtitle.Paragraphs.Count)
                {
                    return;
                }

                string newText = _subtitle.Paragraphs[index].Text.TrimEnd();
                string oldText = _listViewTextUndoLast;
                if (oldText == null)
                {
                    return;
                }

                if (_listViewTextUndoLast != newText)
                {
                    MakeHistoryForUndo(_languageGeneral.Text + ": " + _listViewTextUndoLast.TrimEnd() + " -> " + newText, false);
                    int hidx = _subtitle.HistoryItems.Count - 1;
                    if (hidx >= 0 && hidx < _subtitle.HistoryItems.Count)
                    {
                        _subtitle.HistoryItems[hidx].Subtitle.Paragraphs[index].Text = _listViewTextUndoLast;
                    }

                    _listViewTextUndoLast = newText;
                    _listViewTextUndoIndex = -1;
                }
            }
        }

        private void ShowTranslationProgress()
        {
            if (Configuration.Settings.General.ShowProgress)
            {
                if (_subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
                {
                    int numberOfNonBlankLines = 0;
                    foreach (var paragraph in _subtitle.Paragraphs)
                    {
                        if (!string.IsNullOrWhiteSpace(paragraph.Text))
                        {
                            numberOfNonBlankLines++;
                        }
                    }

                    int percent = (int)Math.Round(numberOfNonBlankLines * 100.0 / _subtitle.Paragraphs.Count);
                    toolStripStatusLabelProgress.Text = string.Format("{0}% completed", percent);
                    if (!toolStripStatusLabelProgress.Visible)
                    {
                        toolStripStatusLabelProgress.Visible = true;
                    }
                }
                else if (_subtitle.Paragraphs.Count > 0 && !string.IsNullOrWhiteSpace(_videoFileName) && mediaPlayer != null && mediaPlayer.VideoPlayer != null && mediaPlayer.VideoPlayer.Duration > 0)
                {
                    var last = _subtitle.Paragraphs.LastOrDefault();
                    if (last != null)
                    {
                        var subtitleEndSeconds = last.EndTime.TotalSeconds;
                        var videoEndSeconds = mediaPlayer.VideoPlayer.Duration;
                        int percent = (int)Math.Round(subtitleEndSeconds * 100.0 / videoEndSeconds);
                        toolStripStatusLabelProgress.Text = string.Format("{0}% completed", percent);
                        if (!toolStripStatusLabelProgress.Visible)
                        {
                            toolStripStatusLabelProgress.Visible = true;
                        }
                    }
                }
                else
                {
                    toolStripStatusLabelProgress.Visible = false;
                }
            }
        }

        private void TimerAlternateTextUndoTick(object sender, EventArgs e)
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                int index = _listViewTextUndoIndex;
                if (index == -1)
                {
                    index = _subtitleListViewIndex;
                }

                if (_listViewAlternateTextTicks == -1 || !CanFocus || _subtitleAlternate == null || _subtitleAlternate.Paragraphs.Count == 0 || index < 0 || index >= _subtitleAlternate.Paragraphs.Count)
                {
                    return;
                }

                if ((DateTime.UtcNow.Ticks - _listViewAlternateTextTicks) > 10000 * 700) // only if last typed char was entered > 700 milliseconds
                {
                    var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index], _subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        index = _subtitleAlternate.Paragraphs.IndexOf(original);
                    }
                    else
                    {
                        return;
                    }

                    string newText = _subtitleAlternate.Paragraphs[index].Text.TrimEnd();
                    string oldText = _listViewAlternateTextUndoLast;
                    if (oldText == null || index < 0)
                    {
                        return;
                    }

                    if (_listViewAlternateTextUndoLast != newText && _subtitle.HistoryItems.Count > 0 &&
                        index < _subtitle.HistoryItems[_subtitle.HistoryItems.Count - 1].OriginalSubtitle.Paragraphs.Count)
                    {
                        MakeHistoryForUndo(_languageGeneral.Text + ": " + _listViewAlternateTextUndoLast.TrimEnd() + " -> " + newText, false);
                        _subtitle.HistoryItems[_subtitle.HistoryItems.Count - 1].OriginalSubtitle.Paragraphs[index].Text = _listViewAlternateTextUndoLast;

                        _listViewAlternateTextUndoLast = newText;
                        _listViewTextUndoIndex = -1;
                    }
                }
            }
        }

        private void UpdatePositionAndTotalLength(Label lineTotal, TextBox textBox)
        {
            if (string.IsNullOrEmpty(textBox.Text))
            {
                lineTotal.Text = string.Empty;
                return;
            }

            int extraNewLineLength = Environment.NewLine.Length - 1;
            int lineBreakPos = textBox.Text.IndexOf(Environment.NewLine, StringComparison.Ordinal);
            int pos = textBox.SelectionStart;
            var s = HtmlUtil.RemoveHtmlTags(textBox.Text, true).Replace(Environment.NewLine, string.Empty); // we don't count new line in total length... correct?
            int totalLength = s.Length;
            string totalL;

            if (Configuration.Settings.Tools.ListViewSyntaxColorWideLines)
            {
                var totalLengthPixels = TextWidth.CalcPixelWidth(s);
                totalL = "     " + string.Format(_languageGeneral.TotalLengthX, string.Format("{0}     {1}", totalLength, totalLengthPixels));
            }
            else
            {
                totalL = "     " + string.Format(_languageGeneral.TotalLengthX, totalLength);
            }

            if (lineBreakPos < 0 || pos <= lineBreakPos)
            {
                lineTotal.Text = "1," + (pos + 1) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int secondLineBreakPos = textBox.Text.IndexOf(Environment.NewLine, lineBreakPos + 1, StringComparison.Ordinal);
            if (secondLineBreakPos < 0 || pos <= secondLineBreakPos + extraNewLineLength)
            {
                lineTotal.Text = "2," + (pos - (lineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int thirdLineBreakPos = textBox.Text.IndexOf(Environment.NewLine, secondLineBreakPos + 1, StringComparison.Ordinal);
            if (thirdLineBreakPos < 0 || pos < thirdLineBreakPos + (extraNewLineLength * 2))
            {
                lineTotal.Text = "3," + (pos - (secondLineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int forthLineBreakPos = textBox.Text.IndexOf(Environment.NewLine, thirdLineBreakPos + 1, StringComparison.Ordinal);
            if (forthLineBreakPos < 0 || pos < forthLineBreakPos + (extraNewLineLength * 3))
            {
                lineTotal.Text = "4," + (pos - (thirdLineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            lineTotal.Text = string.Empty;
        }

        private void TextBoxListViewTextMouseClick(object sender, MouseEventArgs e)
        {
            UpdatePositionAndTotalLength(labelTextLineTotal, textBoxListViewText);
        }

        private void TextBoxListViewTextAlternateMouseClick(object sender, MouseEventArgs e)
        {
            UpdatePositionAndTotalLength(labelTextAlternateLineTotal, textBoxListViewTextAlternate);
        }

        private void TabControlButtonsDrawItem(object sender, DrawItemEventArgs e)
        {
            var tc = (TabControl)sender;
            var textBrush = new SolidBrush(ForeColor);
            var tabFont = new Font(tc.Font, FontStyle.Regular);
            if (e.State == DrawItemState.Selected)
            {
                tabFont = new Font(tc.Font, FontStyle.Bold);
                e.Graphics.FillRectangle(new SolidBrush(SystemColors.Window), e.Bounds);
            }

            Rectangle tabBounds = tc.GetTabRect(e.Index);
            var stringFlags = new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center };
            e.Graphics.DrawString(tc.TabPages[e.Index].Text.Trim(), tabFont, textBrush, tabBounds, new StringFormat(stringFlags));
        }

        public void GotoNextSubPosFromVideoPos()
        {
            if (mediaPlayer.VideoPlayer != null && _subtitle != null)
            {
                double ms = mediaPlayer.VideoPlayer.CurrentPosition * TimeCode.BaseUnit;
                foreach (var p in _subtitle.Paragraphs)
                {
                    if (p.EndTime.TotalMilliseconds > ms && p.StartTime.TotalMilliseconds < ms)
                    {
                        // current sub
                    }
                    else if (p.Duration.TotalSeconds < 10 && p.StartTime.TotalMilliseconds > ms)
                    {
                        mediaPlayer.VideoPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(p), true);
                        return;
                    }
                }
            }
        }

        public void GotoPrevSubPosFromvideoPos()
        {
            if (mediaPlayer.VideoPlayer != null && _subtitle != null)
            {
                double ms = mediaPlayer.VideoPlayer.CurrentPosition * TimeCode.BaseUnit;
                int i = _subtitle.Paragraphs.Count - 1;
                while (i >= 0)
                {
                    var p = _subtitle.Paragraphs[i];
                    if (p.EndTime.TotalMilliseconds > ms && p.StartTime.TotalMilliseconds < ms)
                    {
                        // current sub
                    }
                    else if (p.Duration.TotalSeconds < 10 && p.StartTime.TotalMilliseconds < ms)
                    {
                        mediaPlayer.VideoPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        SubtitleListview1.SelectIndexAndEnsureVisible(_subtitle.GetIndex(p), true);
                        return;
                    }

                    i--;
                }
            }
        }

        private void AdobeEncoreFabImageScriptToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Fab, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemMergeDialogClick(object sender, EventArgs e)
        {
            MergeDialogs();
        }

        private void MainKeyUp(object sender, KeyEventArgs e)
        {
            if (_mainCreateStartDownEndUpParagraph != null)
            {
                var p = _subtitle.Paragraphs[_subtitleListViewIndex];
                if (p.ToString() == _mainCreateStartDownEndUpParagraph.ToString())
                {
                    ButtonSetEndClick(null, null);
                }

                _mainCreateStartDownEndUpParagraph = null;
            }
            else if (_mainAdjustStartDownEndUpAndGoToNextParagraph != null)
            {
                var p = _subtitle.Paragraphs[_subtitleListViewIndex];
                if (p.ToString() == _mainAdjustStartDownEndUpAndGoToNextParagraph.ToString())
                {
                    double videoPositionInSeconds = mediaPlayer.CurrentPosition;
                    if (p.StartTime.TotalSeconds + 0.1 < videoPositionInSeconds)
                    {
                        ButtonSetEndClick(null, null);
                    }

                    SubtitleListview1.SelectIndexAndEnsureVisible(_subtitleListViewIndex + 1, true);
                }

                _mainAdjustStartDownEndUpAndGoToNextParagraph = null;
            }
        }

        private void ToolStripMenuItemSurroundWithMusicSymbolsClick(object sender, EventArgs e)
        {
            string tag = Configuration.Settings.Tools.MusicSymbol;
            if (string.IsNullOrWhiteSpace(tag))
            {
                return;
            }

            if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
            {
                SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
                MakeHistoryForUndo(string.Format(_language.BeforeAddingTagX, tag));

                var indices = new List<int>();
                foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                {
                    indices.Add(item.Index);
                }

                SubtitleListview1.BeginUpdate();
                foreach (int i in indices)
                {
                    if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(i, _subtitle.Paragraphs[i], _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            original.Text = ToogleMusicSymbols(tag, original.Text);
                            SubtitleListview1.SetAlternateText(i, original.Text);
                        }
                    }

                    _subtitle.Paragraphs[i].Text = ToogleMusicSymbols(tag, _subtitle.Paragraphs[i].Text);
                    SubtitleListview1.SetText(i, _subtitle.Paragraphs[i].Text);
                }

                SubtitleListview1.EndUpdate();

                ShowStatus(string.Format(_language.TagXAdded, tag));
                ShowSource();
                RefreshSelectedParagraph();
                SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            }
        }

        private string ToogleMusicSymbols(string tag, string text)
        {
            string pre = string.Empty;
            string post = string.Empty;
            var indexOfEndBracket = text.IndexOf('}');
            if (text.StartsWith("{\\", StringComparison.Ordinal) && indexOfEndBracket > 1)
            {
                pre = text.Substring(0, indexOfEndBracket + 1);
                text = text.Remove(0, indexOfEndBracket + 1);
            }

            bool updated = true;
            while (updated)
            {
                updated = false;
                if (text.StartsWith(' '))
                {
                    pre += ' ';
                    text = text.Remove(0, 1);
                    updated = true;
                }
                else if (text.StartsWith("<font", StringComparison.OrdinalIgnoreCase))
                {
                    int endFont = text.IndexOf('>');
                    if (endFont > 0)
                    {
                        pre += text.Substring(0, endFont + 1);
                        text = text.Remove(0, endFont + 1);
                        updated = true;
                    }

                    if (text.EndsWith("</font>", StringComparison.OrdinalIgnoreCase))
                    {
                        var endTag = "</font>";
                        post += endTag;
                        text = text.Remove(text.Length - endTag.Length, endTag.Length);
                    }
                }
            }

            if (text.Contains(tag))
            {
                text = pre + text.Replace(tag, string.Empty).Replace(Environment.NewLine + " ", Environment.NewLine).Replace(" " + Environment.NewLine, Environment.NewLine).Trim() + post;
            }
            else
            {
                if (Configuration.Settings.Tools.MusicSymbolStyle.Equals("single", StringComparison.OrdinalIgnoreCase))
                {
                    text = string.Format("{0}{1} {2}{3}", pre, tag, text.Replace(Environment.NewLine, Environment.NewLine + tag + " "), post);
                }
                else
                {
                    text = string.Format("{0}{1} {2} {1}{3}", pre, tag, text.Replace(Environment.NewLine, " " + tag + Environment.NewLine + tag + " "), post);
                }
            }

            return text;
        }

        private void SuperscriptToolStripMenuItemClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = Utilities.ToSuperscript(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        private void SubscriptToolStripMenuItemClick(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = Utilities.ToSubscript(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        private void ToolStripMenuItemImagePerFrameClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.ImageFrame, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void toolStripMenuItemApplyDisplayTimeLimits_Click(object sender, EventArgs e)
        {
            ApplyDisplayTimeLimits(false);
        }

        private void ApplyDisplayTimeLimits(bool onlySelectedLines)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var applyDurationLimits = new ApplyDurationLimits())
            {
                if (onlySelectedLines)
                {
                    var selectedLines = new Subtitle();
                    foreach (int index in SubtitleListview1.SelectedIndices)
                    {
                        selectedLines.Paragraphs.Add(_subtitle.Paragraphs[index]);
                    }

                    applyDurationLimits.Initialize(selectedLines);
                }
                else
                {
                    applyDurationLimits.Initialize(_subtitle);
                }

                if (applyDurationLimits.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);

                    if (onlySelectedLines)
                    { // we only update selected lines
                        int i = 0;
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            _subtitle.Paragraphs[index] = applyDurationLimits.FixedSubtitle.Paragraphs[i];
                            i++;
                        }

                        ShowStatus(_language.VisualSyncPerformedOnSelectedLines);
                        SubtitleListview1.SyntaxColorAllLines(_subtitle);
                    }
                    else
                    {
                        SaveSubtitleListviewIndices();
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in applyDurationLimits.FixedSubtitle.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        RestoreSubtitleListviewIndices();
                    }
                    ShowSource();
                }
            }
        }

        private void generateDatetimeInfoFromVideoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            using (var extractDateTimeInfo = new ExtractDateTimeInfo())
            {
                if (extractDateTimeInfo.ShowDialog(this) == DialogResult.OK)
                {
                    if (ContinueNewOrExit())
                    {
                        MakeHistoryForUndo(_language.BeforeDisplayTimeAdjustment);

                        ResetSubtitle();
                        _subtitle.Paragraphs.Clear();
                        foreach (var p in extractDateTimeInfo.DateTimeSubtitle.Paragraphs)
                        {
                            _subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                        SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                        ShowSource();
                        OpenVideo(extractDateTimeInfo.VideoFileName);
                    }
                }
            }
        }

        private void ToolStripMenuItemRightToLeftModeClick(object sender, EventArgs e)
        {
            var focusedItem = SubtitleListview1.FocusedItem;
            toolStripMenuItemRightToLeftMode.Checked = !toolStripMenuItemRightToLeftMode.Checked;
            if (!toolStripMenuItemRightToLeftMode.Checked)
            {
                RightToLeft = RightToLeft.No;
                textBoxListViewText.RightToLeft = RightToLeft.No;
                textBoxListViewTextAlternate.RightToLeft = RightToLeft.No;
                SubtitleListview1.RightToLeft = RightToLeft.No;
                SubtitleListview1.RightToLeftLayout = false;
                textBoxSource.RightToLeft = RightToLeft.No;
                mediaPlayer.TextRightToLeft = RightToLeft.No;
                textBoxSearchWord.RightToLeft = RightToLeft.No;
                Configuration.Settings.General.RightToLeftMode = false;
            }
            else
            {
                //RightToLeft = RightToLeft.Yes; - is this better? TimeUpDown custom control needs to support RTL before enabling this
                textBoxListViewText.RightToLeft = RightToLeft.Yes;
                textBoxListViewTextAlternate.RightToLeft = RightToLeft.Yes;
                SubtitleListview1.RightToLeft = RightToLeft.Yes;
                SubtitleListview1.RightToLeftLayout = true;
                textBoxSource.RightToLeft = RightToLeft.Yes;
                mediaPlayer.TextRightToLeft = RightToLeft.Yes;
                textBoxSearchWord.RightToLeft = RightToLeft.Yes;
                Configuration.Settings.General.RightToLeftMode = true;
            }

            MainResize();
            TextBoxListViewTextTextChanged(null, null);
            textBoxListViewTextAlternate_TextChanged(null, null);
            if (focusedItem != null)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(focusedItem.Index, true);
            }
        }

        private void joinSubtitlesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ReloadFromSourceView();
            using (var joinSubtitles = new JoinSubtitles())
            {
                if (joinSubtitles.ShowDialog(this) == DialogResult.OK && joinSubtitles.JoinedSubtitle != null && joinSubtitles.JoinedSubtitle.Paragraphs.Count > 0 && ContinueNewOrExit())
                {
                    MakeHistoryForUndo(_language.BeforeDisplaySubtitleJoin);

                    ResetSubtitle();
                    _subtitle = joinSubtitles.JoinedSubtitle;
                    SetCurrentFormat(joinSubtitles.JoinedFormat);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    ShowSource();
                    ShowStatus(_language.SubtitlesJoined);
                }
            }
        }

        private void toolStripMenuItemReverseRightToLeftStartEnd_Click(object sender, EventArgs e)
        {
            ReverseStartAndEndingForRtl();
        }

        private void toolStripMenuItemExportCapMakerPlus_Click(object sender, EventArgs e)
        {
            var capMakerPlus = new CapMakerPlus();
            saveFileDialog1.Filter = capMakerPlus.Name + "|*" + capMakerPlus.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + capMakerPlus.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(capMakerPlus.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += capMakerPlus.Extension;
                }

                CapMakerPlus.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void toolStripMenuItemExportCheetahCap_Click(object sender, EventArgs e)
        {
            var cheetahCaption = new CheetahCaption();
            saveFileDialog1.Filter = cheetahCaption.Name + "|*" + cheetahCaption.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + cheetahCaption.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(cheetahCaption.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += cheetahCaption.Extension;
                }

                CheetahCaption.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void toolStripMenuItemExportCaptionInc_Click(object sender, EventArgs e)
        {
            var captionInc = new CaptionsInc();
            saveFileDialog1.Filter = captionInc.Name + "|*" + captionInc.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + captionInc.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(captionInc.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += captionInc.Extension;
                }

                CaptionsInc.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void toolStripMenuItemExportUltech130_Click(object sender, EventArgs e)
        {
            var ultech130 = new Ultech130();
            saveFileDialog1.Filter = ultech130.Name + "|*" + ultech130.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + ultech130.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(ultech130.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += ultech130.Extension;
                }

                Ultech130.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private void toolStripMenuItemAssStyles_Click(object sender, EventArgs e)
        {
            StylesForm styles = null;
            try
            {
                var format = GetCurrentSubtitleFormat();
                var formatType = format.GetType();
                if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
                {
                    styles = new SubStationAlphaStyles(_subtitle, format);
                    if (styles.ShowDialog(this) == DialogResult.OK)
                    {
                        if (_subtitle.Header != styles.Header)
                        {
                            MakeHistoryForUndo(styles.Text);
                        }

                        _subtitle.Header = styles.Header;
                        var styleList = AdvancedSubStationAlpha.GetStylesFromHeader(_subtitle.Header);
                        if ((styles as SubStationAlphaStyles).RenameActions.Count > 0)
                        {
                            foreach (var renameAction in (styles as SubStationAlphaStyles).RenameActions)
                            {
                                for (var i = 0; i < _subtitle.Paragraphs.Count; i++)
                                {
                                    var p = _subtitle.Paragraphs[i];
                                    if (p.Extra == renameAction.OldName)
                                    {
                                        p.Extra = renameAction.NewName;
                                    }
                                }
                            }

                            CleanRemovedStyles(styleList);
                            SaveSubtitleListviewIndices();
                            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                            RestoreSubtitleListviewIndices();
                        }
                        else
                        {
                            CleanRemovedStyles(styleList);
                        }
                    }
                }
                else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText))
                {
                    styles = new TimedTextStyles(_subtitle);
                    if (styles.ShowDialog(this) == DialogResult.OK)
                    {
                        if (_subtitle.Header != styles.Header)
                        {
                            MakeHistoryForUndo(styles.Text);
                        }

                        _subtitle.Header = styles.Header;
                    }
                }
            }
            finally
            {
                mediaPlayer.LastParagraph = null;
                UiUtil.ShowSubtitle(_subtitle, mediaPlayer);
                styles?.Dispose();
            }
        }

        private void CleanRemovedStyles(List<string> styleList)
        {
            for (var i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                var p = _subtitle.Paragraphs[i];
                if (p.Extra == null || !styleList.Any(s => s.Equals(p.Extra == "*Default" ? "Default" : p.Extra, StringComparison.OrdinalIgnoreCase)))
                {
                    p.Extra = styleList[0];
                    SubtitleListview1.SetExtraText(i, p.Extra, SubtitleListview1.ForeColor);
                }
            }
        }

        private void toolStripMenuItemSubStationAlpha_Click(object sender, EventArgs e)
        {
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                ReloadFromSourceView();
            }

            using (var properties = new SubStationAlphaProperties(_subtitle, GetCurrentSubtitleFormat(), _videoFileName, _fileName))
            {
                if (properties.ShowDialog(this) == DialogResult.OK && tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    ShowSource();
                }
            }
        }

        private static string RemoveAssAlignmentTags(string s)
        {
            return s.Replace("{\\an1}", string.Empty) // ASS tags alone
                .Replace("{\\an2}", string.Empty)
                .Replace("{\\an3}", string.Empty)
                .Replace("{\\an4}", string.Empty)
                .Replace("{\\an5}", string.Empty)
                .Replace("{\\an6}", string.Empty)
                .Replace("{\\an7}", string.Empty)
                .Replace("{\\an8}", string.Empty)
                .Replace("{\\an9}", string.Empty)

                .Replace("{an1\\", "{") // ASS multi tags (start)
                .Replace("{an2\\", "{")
                .Replace("{an3\\", "{")
                .Replace("{an4\\", "{")
                .Replace("{an5\\", "{")
                .Replace("{an6\\", "{")
                .Replace("{an7\\", "{")
                .Replace("{an8\\", "{")
                .Replace("{an9\\", "{")

                .Replace("\\an1\\", "\\") // ASS multi tags (middle)
                .Replace("\\an2\\", "\\")
                .Replace("\\an3\\", "\\")
                .Replace("\\an4\\", "\\")
                .Replace("\\an5\\", "\\")
                .Replace("\\an6\\", "\\")
                .Replace("\\an7\\", "\\")
                .Replace("\\an8\\", "\\")
                .Replace("\\an9\\", "\\")

                .Replace("\\an1}", "}") // ASS multi tags (end)
                .Replace("\\an2}", "}")
                .Replace("\\an3}", "}")
                .Replace("\\an4}", "}")
                .Replace("\\an5}", "}")
                .Replace("\\an6}", "}")
                .Replace("\\an7}", "}")
                .Replace("\\an8}", "}")
                .Replace("\\an9}", "}")

                .Replace("{\\a1}", string.Empty) // SSA tags
                .Replace("{\\a2}", string.Empty)
                .Replace("{\\a3}", string.Empty)
                .Replace("{\\a4}", string.Empty)
                .Replace("{\\a5}", string.Empty)
                .Replace("{\\a6}", string.Empty)
                .Replace("{\\a7}", string.Empty)
                .Replace("{\\a8}", string.Empty)
                .Replace("{\\a9}", string.Empty);
        }

        private static string SetAlignTag(string s, string tag)
        {
            var text = RemoveAssAlignmentTags(s);
            if (text.StartsWith("{\\", StringComparison.Ordinal) && text.Contains('}'))
            {
                if (!string.IsNullOrEmpty(tag))
                {
                    return text.Insert(1, "\\" + tag.TrimStart('{').TrimStart('\\').TrimEnd('}'));
                }

                return text;
            }
            else
            {
                return string.Format(@"{0}{1}", tag, text);
            }
        }

        private void toolStripMenuItemAlignment_Click(object sender, EventArgs e)
        {
            var formatType = GetCurrentSubtitleFormat().GetType();

            if (formatType == typeof(NetflixImsc11Japanese))
            {
                using (var f = new AlignmentPickerJapanese(textBoxListViewText.Text))
                {
                    if (f.ShowDialog(this) == DialogResult.OK)
                    {
                        SetAlignment(f.ContentAlignment, true);
                    }
                }

                return;
            }

            using (var f = new AlignmentPicker())
            {
                f.TopMost = true;
                f.StartPosition = FormStartPosition.Manual;
                f.Left = Cursor.Position.X - 150;
                f.Top = Cursor.Position.Y - 75;
                if (f.ShowDialog(this) == DialogResult.OK)
                {
                    string tag = string.Empty;
                    if (formatType == typeof(SubStationAlpha))
                    {
                        //1: Bottom left
                        //2: Bottom center
                        //3: Bottom right
                        //9: Middle left
                        //10: Middle center
                        //11: Middle right
                        //5: Top left
                        //6: Top center
                        //7: Top right
                        switch (f.Alignment)
                        {
                            case ContentAlignment.BottomLeft:
                                tag = "{\\a1}";
                                break;
                            case ContentAlignment.BottomCenter:
                                tag = "{\\a2}";
                                break;
                            case ContentAlignment.BottomRight:
                                tag = "{\\a3}";
                                break;
                            case ContentAlignment.MiddleLeft:
                                tag = "{\\a9}";
                                break;
                            case ContentAlignment.MiddleCenter:
                                tag = "{\\a10}";
                                break;
                            case ContentAlignment.MiddleRight:
                                tag = "{\\a11}";
                                break;
                            case ContentAlignment.TopLeft:
                                tag = "{\\a5}";
                                break;
                            case ContentAlignment.TopCenter:
                                tag = "{\\a6}";
                                break;
                            case ContentAlignment.TopRight:
                                tag = "{\\a7}";
                                break;
                        }
                    }
                    else
                    {
                        //1: Bottom left
                        //2: Bottom center
                        //3: Bottom right
                        //4: Middle left
                        //5: Middle center
                        //6: Middle right
                        //7: Top left
                        //8: Top center
                        //9: Top right
                        switch (f.Alignment)
                        {
                            case ContentAlignment.BottomLeft:
                                tag = "{\\an1}";
                                break;
                            case ContentAlignment.BottomCenter:
                                if (formatType == typeof(SubRip))
                                {
                                    tag = string.Empty;
                                }
                                else
                                {
                                    tag = "{\\an2}";
                                }

                                break;
                            case ContentAlignment.BottomRight:
                                tag = "{\\an3}";
                                break;
                            case ContentAlignment.MiddleLeft:
                                tag = "{\\an4}";
                                break;
                            case ContentAlignment.MiddleCenter:
                                tag = "{\\an5}";
                                break;
                            case ContentAlignment.MiddleRight:
                                tag = "{\\an6}";
                                break;
                            case ContentAlignment.TopLeft:
                                tag = "{\\an7}";
                                break;
                            case ContentAlignment.TopCenter:
                                tag = "{\\an8}";
                                break;
                            case ContentAlignment.TopRight:
                                tag = "{\\an9}";
                                break;
                        }
                    }

                    if (_subtitle.Paragraphs.Count > 0 && SubtitleListview1.SelectedItems.Count > 0)
                    {
                        SetAlignment(tag, true);
                    }
                }
            }
        }

        private void toolStripMenuItemRestoreAutoBackup_Click(object sender, EventArgs e)
        {
            _lastDoNotPrompt = -1;
            using (var restoreAutoBackup = new RestoreAutoBackup())
            {
                if (restoreAutoBackup.ShowDialog(this) == DialogResult.OK && !string.IsNullOrEmpty(restoreAutoBackup.AutoBackupFileName))
                {
                    if (ContinueNewOrExit())
                    {
                        OpenSubtitle(restoreAutoBackup.AutoBackupFileName, null);
                        _fileName = _fileName.Remove(0, Configuration.AutoBackupDirectory.Length).TrimStart(Path.DirectorySeparatorChar);
                        _converted = true;
                        SetTitle();
                    }
                }
            }
        }

        private void labelStatus_Click(object sender, EventArgs e)
        {
            if (_statusLog.Count == 0)
            {
                return;
            }

            if (_statusLogForm == null || _statusLogForm.IsDisposed)
            {
                _statusLogForm = new StatusLog(_statusLog);
                _statusLogForm.Show(this);
            }
            else
            {
                _statusLogForm.Show();
            }
        }

        private void toolStripMenuItemStatistics_Click(object sender, EventArgs e)
        {
            using (var stats = new Statistics(_subtitle, _fileName, GetCurrentSubtitleFormat()))
            {
                stats.ShowDialog(this);
            }
        }

        private void toolStripMenuItemDCinemaProperties_Click(object sender, EventArgs e)
        {
            PositionAndSizeForm properties = null;
            try
            {
                if (GetCurrentSubtitleFormat().GetType() == typeof(DCinemaInterop))
                {
                    properties = new DCinema.DCinemaPropertiesInterop();
                }
                else
                {
                    properties = new DCinema.DCinemaPropertiesSmpte();
                }

                properties.ShowDialog(this);
            }
            finally
            {
                properties?.Dispose();
            }
        }

        private void toolStripMenuItemTextTimeCodePair_Click(object sender, EventArgs e)
        {
            if (saveFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                saveFileDialog1.Filter = _language.TextFiles + "|*.txt";
                saveFileDialog1.Title = _language.SaveSubtitleAs;
                saveFileDialog1.DefaultExt = "*.txt";
                saveFileDialog1.AddExtension = true;

                string fname = saveFileDialog1.FileName;
                if (string.IsNullOrEmpty(fname))
                {
                    fname = "ATS";
                }

                if (!fname.EndsWith(".txt", StringComparison.Ordinal))
                {
                    fname += ".txt";
                }

                string fileNameTimeCode = fname.Insert(fname.Length - 4, "_timecode");
                string fileNameText = fname.Insert(fname.Length - 4, "_text");

                var timeCodeLines = new StringBuilder();
                var textLines = new StringBuilder();

                const string timeCodeWriteFormat = "{0:00}:{1:00}:{2:00}:{3:00}";
                foreach (var p in GetSaveSubtitle(_subtitle).Paragraphs)
                {
                    timeCodeLines.AppendLine(string.Format(timeCodeWriteFormat, p.StartTime.Hours, p.StartTime.Minutes, p.StartTime.Seconds, SubtitleFormat.MillisecondsToFramesMaxFrameRate(p.StartTime.Milliseconds)));
                    timeCodeLines.AppendLine(string.Format(timeCodeWriteFormat, p.EndTime.Hours, p.EndTime.Minutes, p.EndTime.Seconds, SubtitleFormat.MillisecondsToFramesMaxFrameRate(p.EndTime.Milliseconds)));

                    textLines.AppendLine(HtmlUtil.RemoveHtmlTags(p.Text).Replace(Environment.NewLine, "|"));
                    textLines.AppendLine();
                }

                File.WriteAllText(fileNameTimeCode, timeCodeLines.ToString(), Encoding.UTF8);
                File.WriteAllText(fileNameText, textLines.ToString(), Encoding.UTF8);
            }
        }

        private void textWordsPerMinutewpmToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.WordsPerMinute, (sender as ToolStripItem).Text);
        }

        private void toolStripMenuItemTTPropertiesClick(object sender, EventArgs e)
        {
            var subtitleFormatType = GetCurrentSubtitleFormat().GetType();
            if (subtitleFormatType != typeof(TimedText10) && subtitleFormatType != typeof(ItunesTimedText))
            {
                return;
            }

            using (var properties = new TimedTextProperties(_subtitle))
            {
                properties.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemSaveSelectedLinesClick(object sender, EventArgs e)
        {
            var newSub = new Subtitle(_subtitle);
            newSub.Header = _subtitle.Header;
            newSub.Paragraphs.Clear();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                newSub.Paragraphs.Add(_subtitle.Paragraphs[index]);
            }

            SubtitleFormat currentFormat = GetCurrentSubtitleFormat();
            UiUtil.SetSaveDialogFilter(saveFileDialog1, currentFormat);
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            saveFileDialog1.AddExtension = true;
            if (!string.IsNullOrEmpty(_fileName))
            {
                saveFileDialog1.InitialDirectory = Path.GetDirectoryName(_fileName);
            }

            if (saveFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                int index = 0;
                foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                {
                    if (saveFileDialog1.FilterIndex == index + 1)
                    {
                        // only allow current extension or ".txt"
                        string fileName = saveFileDialog1.FileName;
                        string ext = Path.GetExtension(fileName).ToLowerInvariant();
                        bool extOk = ext.Equals(format.Extension, StringComparison.OrdinalIgnoreCase) || format.AlternateExtensions.Contains(ext) || ext == ".txt";
                        if (!extOk)
                        {
                            if (fileName.EndsWith('.'))
                            {
                                fileName = fileName.TrimEnd('.');
                            }

                            fileName += format.Extension;
                        }

                        if (format.IsTextBased)
                        {
                            string allText = GetSaveSubtitle(newSub).ToText(format);
                            File.WriteAllText(fileName, allText, GetCurrentEncoding());
                            ShowStatus(string.Format(_language.XLinesSavedAsY, newSub.Paragraphs.Count, fileName));
                            return;
                        }
                        else if (format.GetType() == typeof(Ebu))
                        {
                            new Ebu().Save(fileName, GetSaveSubtitle(newSub));
                            ShowStatus(string.Format(_language.XLinesSavedAsY, newSub.Paragraphs.Count, fileName));
                            return;
                        }
                    }

                    index++;
                }
            }
        }

        private void GuessTimeCodesToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var form = new WaveformGenerateTimeCodes())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndoOnlyIfNotResent(string.Format(_language.BeforeGuessingTimeCodes));

                    double startFromSeconds = 0;
                    if (form.StartFromVideoPosition)
                    {
                        startFromSeconds = mediaPlayer.CurrentPosition;
                    }

                    if (form.DeleteAll)
                    {
                        _subtitle.Paragraphs.Clear();
                    }
                    else if (form.DeleteForward)
                    {
                        for (int i = _subtitle.Paragraphs.Count - 1; i > 0; i--)
                        {
                            if (_subtitle.Paragraphs[i].EndTime.TotalSeconds + 1 > startFromSeconds)
                            {
                                _subtitle.Paragraphs.RemoveAt(i);
                            }
                        }
                    }

                    audioVisualizer.GenerateTimeCodes(_subtitle, startFromSeconds, form.BlockSize, form.VolumeMinimum, form.VolumeMaximum, form.DefaultMilliseconds);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RefreshSelectedParagraph();
                }
            }
        }

        private void DvdStudioProStl_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), "STL", _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void toolStripMenuItemPlugins_Click(object sender, EventArgs e)
        {
            using (var form = new PluginsGet())
            {
                form.ShowDialog(this);
                LoadPlugins();
            }
        }

        private void toolStripMenuItemUndo_Click(object sender, EventArgs e)
        {
            UndoToIndex(true);
        }

        private void toolStripMenuItemRedo_Click(object sender, EventArgs e)
        {
            UndoToIndex(false);
        }

        private void seekSilenceToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.WavePeaks == null)
            {
                return;
            }

            using (var form = new SeekSilence())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    if (form.SeekForward)
                    {
                        audioVisualizer.FindDataBelowThreshold(form.VolumeBelow, form.SecondsDuration);
                    }
                    else
                    {
                        audioVisualizer.FindDataBelowThresholdBack(form.VolumeBelow, form.SecondsDuration);
                    }
                }
            }
        }

        private void toolStripMenuItemPasteSpecial_Click(object sender, EventArgs e)
        {
            string text = Clipboard.GetText();
            var tmp = new Subtitle();
            var list = new List<string>(text.SplitToLines());
            new SubRip().LoadSubtitle(tmp, list, null);
            if (tmp.Paragraphs.Count == 0)
            {
                tmp = SubtitleFormat.LoadSubtitleFromLines(list, null) ?? new Subtitle();
            }

            if (SubtitleListview1.SelectedItems.Count == 1 && text.Length > 0)
            {
                var form = new ColumnPaste(SubtitleListview1.IsAlternateTextColumnVisible && _subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle, tmp.Paragraphs.Count == 0);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeColumnPaste);

                    if (tmp.Paragraphs.Count == 0)
                    {
                        foreach (var line in text.SplitToLines())
                        {
                            tmp.Paragraphs.Add(new Paragraph(line, 0, 0));
                        }
                    }

                    int index = FirstSelectedIndex;

                    if (!form.PasteOverwrite)
                    {
                        for (int i = 0; i < tmp.Paragraphs.Count; i++)
                        {
                            if (form.PasteAll)
                            {
                                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                                {
                                    _subtitle.Paragraphs[k + 1] = new Paragraph(_subtitle.Paragraphs[k]);
                                }

                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    _subtitle.Paragraphs[index + i].Text = string.Empty;
                                }
                            }
                            else if (form.PasteTimeCodesOnly)
                            {
                                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                                {
                                    _subtitle.Paragraphs[k + 1].StartTime.TotalMilliseconds = _subtitle.Paragraphs[k].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[k + 1].EndTime.TotalMilliseconds = _subtitle.Paragraphs[k].EndTime.TotalMilliseconds;
                                }
                            }
                            else if (form.PasteTextOnly)
                            {
                                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                                {
                                    _subtitle.Paragraphs[k + 1].Text = _subtitle.Paragraphs[k].Text;
                                }
                            }
                            else if (form.PasteOriginalTextOnly)
                            {
                                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                                {
                                    var original = Utilities.GetOriginalParagraph(k, _subtitle.Paragraphs[k], _subtitleAlternate.Paragraphs);
                                    var originalNext = Utilities.GetOriginalParagraph(k + 1, _subtitle.Paragraphs[k + 1], _subtitleAlternate.Paragraphs);
                                    if (original != null)
                                    {
                                        originalNext.Text = original.Text;
                                    }
                                }

                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index + i], _subtitleAlternate.Paragraphs);
                                    if (original != null)
                                    {
                                        original.Text = string.Empty;
                                    }
                                }
                            }
                        }
                    }

                    if (form.PasteOverwrite)
                    {
                        for (int i = 0; i < tmp.Paragraphs.Count; i++)
                        {
                            if (form.PasteAll)
                            {
                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                                    _subtitle.Paragraphs[index + i].StartTime.TotalMilliseconds = tmp.Paragraphs[i].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[index + i].EndTime.TotalMilliseconds = tmp.Paragraphs[i].EndTime.TotalMilliseconds;
                                }
                            }
                            else if (form.PasteTimeCodesOnly)
                            {
                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    _subtitle.Paragraphs[index + i].StartTime.TotalMilliseconds = tmp.Paragraphs[i].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[index + i].EndTime.TotalMilliseconds = tmp.Paragraphs[i].EndTime.TotalMilliseconds;
                                }
                            }
                            else if (form.PasteTextOnly)
                            {
                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                                }
                            }
                            else if (form.PasteOriginalTextOnly)
                            {
                                if (index + i < _subtitle.Paragraphs.Count)
                                {
                                    var original = Utilities.GetOriginalParagraph(index + i, _subtitle.Paragraphs[index + i], _subtitleAlternate.Paragraphs);
                                    if (original != null)
                                    {
                                        original.Text = tmp.Paragraphs[i].Text;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        for (int i = 0; i + index < _subtitle.Paragraphs.Count && i < tmp.Paragraphs.Count; i++)
                        {
                            if (index + i < _subtitle.Paragraphs.Count)
                            {
                                if (form.PasteAll)
                                {
                                    _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                                    _subtitle.Paragraphs[index + i].StartTime.TotalMilliseconds = tmp.Paragraphs[i].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[index + i].EndTime.TotalMilliseconds = tmp.Paragraphs[i].EndTime.TotalMilliseconds;
                                }
                                else if (form.PasteTimeCodesOnly)
                                {
                                    _subtitle.Paragraphs[index + i].StartTime.TotalMilliseconds = tmp.Paragraphs[i].StartTime.TotalMilliseconds;
                                    _subtitle.Paragraphs[index + i].EndTime.TotalMilliseconds = tmp.Paragraphs[i].EndTime.TotalMilliseconds;
                                }
                                else if (form.PasteTextOnly)
                                {
                                    _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                                }
                                else if (form.PasteOriginalTextOnly)
                                {
                                    var original = Utilities.GetOriginalParagraph(index + i, _subtitle.Paragraphs[index + i], _subtitleAlternate.Paragraphs);
                                    if (original != null)
                                    {
                                        original.Text = tmp.Paragraphs[i].Text;
                                    }
                                }
                            }
                        }
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    RefreshSelectedParagraph();
                }

                form.Dispose();
            }
        }

        private void deleteAndShiftCellsUpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            int first = FirstSelectedIndex;
            List<int> list = new List<int>();
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                list.Add(index);
            }

            list.Sort();
            list.Reverse();

            MakeHistoryForUndo(_language.BeforeColumnDelete);
            foreach (int index in list)
            {
                for (int k = index; k < _subtitle.Paragraphs.Count - 1; k++)
                {
                    _subtitle.Paragraphs[k].Text = _subtitle.Paragraphs[k + 1].Text;
                }

                _subtitle.Paragraphs[_subtitle.Paragraphs.Count - 1].Text = string.Empty;
            }

            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            SubtitleListview1.SelectIndexAndEnsureVisible(first, true);
            RefreshSelectedParagraph();
        }

        private void toolStripMenuItemColumnImportText_Click(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            using (var importText = new ImportText())
            {
                if (importText.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeColumnImportText);
                    int index = FirstSelectedIndex;
                    for (int i = 0; i < importText.FixedSubtitle.Paragraphs.Count; i++)
                    {
                        for (int k = _subtitle.Paragraphs.Count - 2; k > index; k--)
                        {
                            _subtitle.Paragraphs[k + 1].Text = _subtitle.Paragraphs[k].Text;
                        }

                        if (index + i < _subtitle.Paragraphs.Count)
                        {
                            _subtitle.Paragraphs[index + i].Text = string.Empty;
                        }
                    }

                    for (int i = 0; i + index < _subtitle.Paragraphs.Count && i < importText.FixedSubtitle.Paragraphs.Count; i++)
                    {
                        _subtitle.Paragraphs[index + i].Text = importText.FixedSubtitle.Paragraphs[i].Text;
                    }

                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    RefreshSelectedParagraph();
                }
            }
        }

        private void ShiftTextCellsDownToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            int index = FirstSelectedIndex;
            int count = SubtitleListview1.SelectedIndices.Count;
            MakeHistoryForUndo(_language.BeforeColumnShiftCellsDown);
            for (int i = 0; i < count; i++)
            {
                for (int k = _subtitle.Paragraphs.Count - 2; k >= index; k--)
                {
                    _subtitle.Paragraphs[k + 1].Text = _subtitle.Paragraphs[k].Text;
                }

                if (index + i < _subtitle.Paragraphs.Count)
                {
                    _subtitle.Paragraphs[index + i].Text = string.Empty;
                }
            }

            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            RefreshSelectedParagraph();
        }

        private void toolStripMenuItemInsertTextFromSub_Click(object sender, EventArgs e)
        {
            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                if (!File.Exists(openFileDialog1.FileName))
                {
                    return;
                }

                var fi = new FileInfo(openFileDialog1.FileName);
                if (fi.Length > 1024 * 1024 * 10) // max 10 mb
                {
                    var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, openFileDialog1.FileName);
                    if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                Encoding encoding;
                var tmp = new Subtitle();
                SubtitleFormat format = tmp.LoadSubtitle(openFileDialog1.FileName, out encoding, null);

                if (format != null)
                {
                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        tmp.RemoveEmptyLines();
                    }

                    if (SubtitleListview1.SelectedIndices.Count < 1)
                    {
                        return;
                    }

                    MakeHistoryForUndo(_language.BeforeColumnShiftCellsDown);

                    int index = FirstSelectedIndex;
                    for (int i = 0; i < tmp.Paragraphs.Count; i++)
                    {
                        {
                            for (int k = _subtitle.Paragraphs.Count - 2; k > index; k--)
                            {
                                _subtitle.Paragraphs[k + 1].Text = _subtitle.Paragraphs[k].Text;
                            }
                        }
                    }

                    for (int i = 0; i + index < _subtitle.Paragraphs.Count && i < tmp.Paragraphs.Count; i++)
                    {
                        _subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                    }
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    RefreshSelectedParagraph();
                }
            }
        }

        private void toolStripMenuItemOpenKeepVideo_Click(object sender, EventArgs e)
        {
            openToolStripMenuItem.Enabled = false;
            ReloadFromSourceView();
            _resetVideo = false;
            OpenNewFile();
            _resetVideo = true;
            openToolStripMenuItem.Enabled = true;
        }

        private void changeSpeedInPercentToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var form = new ChangeSpeedInPercent(SubtitleListview1.SelectedItems.Count))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeAdjustSpeedInPercent);
                    SaveSubtitleListviewIndices();
                    if (form.AdjustAllLines)
                    {
                        _subtitle = form.AdjustAllParagraphs(_subtitle);
                        if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                        {
                            _subtitleAlternate = form.AdjustAllParagraphs(_subtitleAlternate);
                        }
                    }
                    else
                    {
                        foreach (int index in SubtitleListview1.SelectedIndices)
                        {
                            var p = _subtitle.GetParagraphOrDefault(index);
                            if (p != null)
                            {
                                form.AdjustParagraph(p);
                                if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && SubtitleListview1.IsAlternateTextColumnVisible)
                                {
                                    var original = Utilities.GetOriginalParagraph(index, p, _subtitle.Paragraphs);
                                    if (original != null)
                                    {
                                        form.AdjustParagraph(original);
                                    }
                                }
                            }
                        }
                    }

                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void toolStripMenuItemAvidStl_Click(object sender, EventArgs e)
        {
            var avidStl = new AvidStl();
            saveFileDialog1.Filter = avidStl.Name + "|*" + avidStl.Extension;
            saveFileDialog1.Title = _language.SaveSubtitleAs;
            saveFileDialog1.DefaultExt = "*" + avidStl.Extension;
            saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(_videoFileName))
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_videoFileName);
            }
            else
            {
                saveFileDialog1.FileName = Utilities.GetPathAndFileNameWithoutExtension(_fileName);
            }

            if (!string.IsNullOrEmpty(openFileDialog1.InitialDirectory))
            {
                saveFileDialog1.InitialDirectory = openFileDialog1.InitialDirectory;
            }

            DialogResult result = saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                openFileDialog1.InitialDirectory = saveFileDialog1.InitialDirectory;
                string fileName = saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(avidStl.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += avidStl.Extension;
                }

                AvidStl.Save(fileName, GetSaveSubtitle(_subtitle));
            }
        }

        private Subtitle GetSaveSubtitle(Subtitle subtitle)
        {
            var sub = new Subtitle(subtitle);
            if (string.IsNullOrEmpty(sub.FileName))
            {
                sub.FileName = "Untitled";
            }

            if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
            {
                sub.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(Configuration.Settings.General.CurrentVideoOffsetInMs));
            }

            return sub;
        }

        private void columnDeleteTextOnlyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            MakeHistoryForUndo(_language.BeforeColumnDelete);
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                _subtitle.Paragraphs[index].Text = string.Empty;
                SubtitleListview1.SetText(index, string.Empty);
                SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, _subtitle.Paragraphs[index]);
            }

            RefreshSelectedParagraph();
        }

        private void toolStripMenuItemBatchConvert_Click(object sender, EventArgs e)
        {
            Visible = false;
            using (var form = new BatchConvert(Icon))
            {
                form.ShowDialog(this);
            }

            Visible = true;
        }

        private void copyOriginalTextToCurrentToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (_subtitleAlternate == null || !SubtitleListview1.IsAlternateTextColumnVisible || SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            bool first = true;
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var original = Utilities.GetOriginalParagraph(index, _subtitle.Paragraphs[index], _subtitleAlternate.Paragraphs);
                if (original != null)
                {
                    if (first)
                    {
                        MakeHistoryForUndo(_language.BeforeColumnPaste);
                    }

                    SubtitleListview1.SetText(index, original.Text);
                    _subtitle.Paragraphs[index].Text = original.Text;
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, _subtitle.Paragraphs[index]);
                    first = false;
                }
            }

            RefreshSelectedParagraph();
        }

        private void toolStripMenuItemColumn_DropDownOpening(object sender, EventArgs e)
        {
            copyOriginalTextToCurrentToolStripMenuItem.Visible = !string.IsNullOrEmpty(copyOriginalTextToCurrentToolStripMenuItem.Text) &&
                                                                 SubtitleListview1.IsAlternateTextColumnVisible &&
                                                                 _subtitleAlternate != null;
        }

        private void toolStripMenuItemMergeDuplicateText_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var form = new MergeDoubleLines())
            {
                form.Initialize(_subtitle);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeMergeLinesWithSameText);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in form.MergedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.MergedShortLinesX, form.NumberOfMerges));
                    SaveSubtitleListviewIndices();
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void toolStripMenuItemMergeLinesWithSameTimeCodes_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            ReloadFromSourceView();
            using (var form = new MergeTextWithSameTimeCodes())
            {
                form.Initialize(_subtitle);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    MakeHistoryForUndo(_language.BeforeMergeLinesWithSameText);
                    _subtitle.Paragraphs.Clear();
                    foreach (var p in form.MergedSubtitle.Paragraphs)
                    {
                        _subtitle.Paragraphs.Add(p);
                    }

                    ShowStatus(string.Format(_language.MergedShortLinesX, form.NumberOfMerges));
                    SaveSubtitleListviewIndices();
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Spumux, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void toolStripMenuItemModifySelection_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var form = new ModifySelection(_subtitle, GetCurrentSubtitleFormat(), SubtitleListview1))
            {
                form.ShowDialog(this);
            }
        }

        private void toolStripMenuItemInverseSelection_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            foreach (ListViewItem item in SubtitleListview1.Items)
            {
                item.Selected = !item.Selected;
            }
        }

        private void toolStripMenuItemSpellCheckFromCurrentLine_Click(object sender, EventArgs e)
        {
            _spellCheckForm = null;
            SpellCheck(true, FirstSelectedIndex);
        }

        private void toolStripMenuItemImportXSub_Click(object sender, EventArgs e)
        {
            if (ContinueNewOrExit())
            {
                openFileDialog1.Title = _language.OpenXSubFiles;
                openFileDialog1.FileName = string.Empty;
                openFileDialog1.Filter = _language.XSubFiles + "|*.divx;*.avi";
                if (openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    ShowStatus(_languageGeneral.PleaseWait);
                    if (ImportSubtitleFromDivX(openFileDialog1.FileName))
                    {
                        ShowStatus(string.Format(_language.LoadedSubtitleX, openFileDialog1.FileName));
                    }
                    else
                    {
                        ShowStatus(string.Empty);
                        MessageBox.Show(_language.NotAValidXSubFile);
                    }
                }
            }
        }

        private void toolStripMenuItemImportOcrHardSub_Click(object sender, EventArgs e)
        {
            using (var form = new HardSubExtract(_videoFileName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    if (!string.IsNullOrEmpty(form.OcrFileName))
                    {
                        MakeHistoryForUndo(_language.BeforeAutoBalanceSelectedLines);
                        OpenSubtitle(form.OcrFileName, null);
                    }
                }
            }
        }

        private void toolStripMenuItemExportFcpIImage_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Fcp, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemNuendoPropertiesClick(object sender, EventArgs e)
        {
            using (var form = new NuendoProperties())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    Configuration.Settings.SubtitleSettings.NuendoCharacterListFile = form.CharacterListFile;
                }
            }
        }

        private void toolStripMenuItemDost_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Dost, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void toolStripMenuItemMeasurementConverter_Click(object sender, EventArgs e)
        {
            var form = new MeasurementConverter();
            form.Show(this);
        }

        private void toolStripMenuItemImportSceneChanges_Click(object sender, EventArgs e)
        {
            using (var form = new ImportSceneChanges(_videoInfo, _videoFileName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    audioVisualizer.SceneChanges = form.SceneChangesInSeconds;
                    SceneChangeHelper.SaveSceneChanges(_videoFileName, audioVisualizer.SceneChanges);
                    ShowStatus(string.Format(_language.XSceneChangesImported, form.SceneChangesInSeconds.Count));
                }
            }
        }

        private void toolStripMenuItemRemoveSceneChanges_Click(object sender, EventArgs e)
        {
            if (audioVisualizer.SceneChanges != null)
            {
                audioVisualizer.SceneChanges = new List<double>();
                SceneChangeHelper.DeleteSceneChanges(_videoFileName);
            }
        }

        private void toolStripMenuItemBridgeGapsBetweenSubtitles_Click(object sender, EventArgs e)
        {
            if (!IsSubtitleLoaded)
            {
                DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var form = new DurationsBridgeGaps(_subtitle))
            {
                if (form.ShowDialog(this) == DialogResult.OK && form.FixedCount > 0)
                {
                    int index = FirstSelectedIndex;
                    if (index < 0)
                    {
                        index = 0;
                    }

                    MakeHistoryForUndo(_language.BeforeDurationsBridgeGap);
                    SaveSubtitleListviewIndices();
                    _subtitle.Paragraphs.Clear();
                    _subtitle.Paragraphs.AddRange(form.FixedSubtitle.Paragraphs);

                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void toolStripMenuItemOpenDvd_Click(object sender, EventArgs e)
        {
            using (var form = new OpenVideoDvd())
            {
                if (form.ShowDialog(this) == DialogResult.OK && !string.IsNullOrEmpty(form.DvdPath))
                {
                    VideoFileName = form.DvdPath;
                    if (mediaPlayer.VideoPlayer != null)
                    {
                        mediaPlayer.PauseAndDisposePlayer();
                    }

                    _endSeconds = -1;

                    _videoInfo = new VideoInfo();
                    _videoInfo.Width = 720;
                    _videoInfo.Height = 576;
                    _videoInfo.FramesPerSecond = 25;
                    _videoInfo.VideoCodec = "MPEG2";
                    toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", _videoInfo.FramesPerSecond);

                    var oldVideoPlayer = Configuration.Settings.General.VideoPlayer;
                    try
                    {
                        Configuration.Settings.General.VideoPlayer = "VLC";
                        UiUtil.InitializeVideoPlayerAndContainer(VideoFileName, _videoInfo, mediaPlayer, VideoLoaded, VideoEnded);
                        mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
                        mediaPlayer.OnButtonClicked -= MediaPlayer_OnButtonClicked;
                        mediaPlayer.OnButtonClicked += MediaPlayer_OnButtonClicked;
                        mediaPlayer.Volume = 0;
                        labelVideoInfo.Text = string.Format("DVD {0}x{1} {2}", _videoInfo.Width, _videoInfo.Height, _videoInfo.VideoCodec.Trim());
                        if (_videoInfo.FramesPerSecond > 0)
                        {
                            labelVideoInfo.Text += string.Format(" {0:0.0##}", _videoInfo.FramesPerSecond);
                        }
                    }
                    finally
                    {
                        Configuration.Settings.General.VideoPlayer = oldVideoPlayer;
                    }
                }
            }
        }

        private void toolStripMenuItemFcpProperties_Click(object sender, EventArgs e)
        {
            using (var form = new FcpProperties())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    Configuration.Settings.SubtitleSettings.FcpFontSize = form.FcpFontSize;
                    Configuration.Settings.SubtitleSettings.FcpFontName = form.FcpFontName;
                }
            }
        }

        private void styleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Style, (sender as ToolStripItem).Text);
        }

        private void toolStripMenuItemFocusTextbox_Click(object sender, EventArgs e)
        {
            int index = _subtitle.GetIndex(audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            }

            textBoxListViewText.Focus();
            textBoxListViewText.SelectAll();
        }

        private void AscendingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            descendingToolStripMenuItem.Checked = false;
            AscendingToolStripMenuItem.Checked = true;
            toolsToolStripMenuItem.ShowDropDown();
            toolStripMenuItemSortBy.ShowDropDown();
        }

        private void descendingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AscendingToolStripMenuItem.Checked = false;
            descendingToolStripMenuItem.Checked = true;
            toolsToolStripMenuItem.ShowDropDown();
            toolStripMenuItemSortBy.ShowDropDown();
        }

        private void exportCustomTextFormatToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var form = new ExportCustomText(GetSaveSubtitle(_subtitle), GetSaveSubtitle(_subtitleAlternate), _fileName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    ShowStatus(form.LogMessage);
                }
            }
        }

        private void PasteIntoActiveTextBox(string s, bool allowMultiLine = false)
        {
            if (tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                textBoxSource.SelectedText = s;
            }
            else
            {
                if (textBoxListViewTextAlternate.Visible && textBoxListViewTextAlternate.Enabled && textBoxListViewTextAlternate.Focused)
                {
                    textBoxListViewTextAlternate.SelectedText = s;
                    textBoxListViewTextAlternate.Text = textBoxListViewTextAlternate.Text.Insert(textBoxListViewTextAlternate.SelectionStart, s);
                }
                else
                {
                    if (SubtitleListview1.SelectedItems.Count > 1 && !textBoxListViewText.Focused && allowMultiLine)
                    {
                        foreach (ListViewItem item in SubtitleListview1.SelectedItems)
                        {
                            var p = _subtitle.GetParagraphOrDefault(item.Index);
                            if (p == null)
                            {
                                continue;
                            }

                            p.Text = s + " " + p.Text;
                            SubtitleListview1.SetText(item.Index, p.Text);
                        }
                    }
                    else
                    {
                        textBoxListViewText.SelectedText = s;
                    }

                    ShowSource();
                    RefreshSelectedParagraph();
                }
            }
        }

        private void leftToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u200E"); // LRM, Left-to-Right Mark, acts as a Latin character.
        }

        private void righttoleftMarkToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u200F"); // RLM, Right-to-Left Mark, acts as an Arabic character.
        }

        private void startOfLefttorightEmbeddingLREToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u202A");
        }

        private void startOfRighttoleftEmbeddingRLEToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u202B");
        }

        private void startOfLefttorightOverrideLROToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u202D");
        }

        private void startOfRighttoleftOverrideRLOToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PasteIntoActiveTextBox("\u202E");
        }

        private void toolStripMenuItemRtlUnicodeControlChar_Click(object sender, EventArgs e)
        {
            int selectedIndex = FirstSelectedIndex;
            foreach (int index in SubtitleListview1.SelectedIndices)
            {
                var p = _subtitle.Paragraphs[index];
                p.Text = Utilities.FixRtlViaUnicodeChars(p.Text);
                SubtitleListview1.SetText(index, p.Text);
                if (index == selectedIndex)
                {
                    textBoxListViewText.Text = p.Text;
                }
            }

            RefreshSelectedParagraph();
        }

        private void toolStripMenuItemImportImages_Click(object sender, EventArgs e)
        {
            if (!ContinueNewOrExit())
            {
                return;
            }

            if (!string.IsNullOrEmpty(_videoFileName) && mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.Pause();
            }

            using (var form = new ImportImages())
            {
                if (form.ShowDialog(this) == DialogResult.OK && form.Subtitle.Paragraphs.Count > 0)
                {
                    ImportAndOcrSrt(form.Subtitle);
                }
            }
        }

        private void audioVisualizer_MouseEnter(object sender, EventArgs e)
        {
            if (Configuration.Settings.VideoControls.WaveformFocusOnMouseEnter && audioVisualizer.WavePeaks != null && !audioVisualizer.Focused && audioVisualizer.CanFocus)
            {
                if (Math.Abs(_lastWaveformMenuCloseTicks - DateTime.UtcNow.Ticks) > 10000 * 500) // only if last change was longer ago than 500 milliseconds
                {
                    audioVisualizer.Focus();
                }
            }
        }

        private void SubtitleListview1_MouseEnter(object sender, EventArgs e)
        {
            if (Configuration.Settings.VideoControls.WaveformFocusOnMouseEnter && Configuration.Settings.VideoControls.WaveformListViewFocusOnMouseEnter && SubtitleListview1.CanFocus)
            {
                SubtitleListview1.Focus();
            }
        }

        private void toolStripButtonFixCommonErrors_Click(object sender, EventArgs e)
        {
            FixCommonErrors(false);
        }

        private void toolStripButtonRemoveTextForHi_Click(object sender, EventArgs e)
        {
            RemoveTextForHearImpairedToolStripMenuItemClick(sender, e);
        }

        private void toolStripMenuItemExportDcinemaInteropClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.DCinemaInterop, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void dCinemaSMPTE2014ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.DCinemaInterop, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        internal Subtitle UndoFromSpellCheck(Subtitle subtitle)
        {
            var idx = FirstSelectedIndex;
            for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
            {
                if (_subtitle.Paragraphs[i].Text != subtitle.Paragraphs[i].Text)
                {
                    _subtitle.Paragraphs[i].Text = subtitle.Paragraphs[i].Text;
                    SubtitleListview1.SetText(i, _subtitle.Paragraphs[i].Text);
                }

                if (idx == i)
                {
                    SubtitleListview1.SetText(idx, _subtitle.Paragraphs[idx].Text);
                }
            }

            RefreshSelectedParagraph();
            return _subtitle;
        }

        private void checkForUpdatesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (_timerCheckForUpdates != null)
                {
                    _timerCheckForUpdates.Stop();
                }
            }
            catch
            {
            }

            using (var form = new CheckForUpdates(this))
            {
                form.ShowDialog(this);
            }

            Configuration.Settings.General.LastCheckForUpdates = DateTime.Now;
        }

        private void setVideoOffsetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(_videoFileName) && mediaPlayer.VideoPlayer != null)
            {
                mediaPlayer.Pause();
            }

            using (var form = new SetVideoOffset())
            {
                form.VideoOffset = new TimeCode(10, 0, 0, 0);
                if (Configuration.Settings.General.CurrentVideoOffsetInMs != 0)
                {
                    form.VideoOffset = new TimeCode(Configuration.Settings.General.CurrentVideoOffsetInMs);
                }

                var oldVideoOffset = Configuration.Settings.General.CurrentVideoOffsetInMs;
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    var change = _changeSubtitleHash != _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
                    if (form.FromCurrentVideoPosition && mediaPlayer.VideoPlayer != null)
                    {
                        Configuration.Settings.General.CurrentVideoOffsetInMs = (long)(Math.Round((form.VideoOffset.TotalSeconds - mediaPlayer.VideoPlayer.CurrentPosition) * 1000.0));
                        change = true;
                    }
                    else
                    {
                        Configuration.Settings.General.CurrentVideoOffsetInMs = (long)(Math.Round(form.VideoOffset.TotalSeconds * 1000.0));
                    }

                    if (form.DoNotaddVideoOffsetToTimeCodes)
                    {
                        if (form.Reset)
                        {
                            _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(oldVideoOffset));
                            _subtitleAlternate?.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(oldVideoOffset));
                        }
                        else
                        {
                            _subtitle.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                            _subtitleAlternate?.AddTimeToAllParagraphs(TimeSpan.FromMilliseconds(-Configuration.Settings.General.CurrentVideoOffsetInMs));
                        }
                    }
                    else
                    {
                        change = true;
                    }

                    if (!change)
                    {
                        _changeSubtitleHash = _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName);
                    }
                    else if (change && _changeSubtitleHash == _subtitle.GetFastHashCode(GetCurrentEncoding().BodyName))
                    {
                        _changeSubtitleHash = -1;
                    }

                    SaveSubtitleListviewIndices();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RefreshSelectedParagraph();
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void toolStripMenuItemEbuProperties_Click(object sender, EventArgs e)
        {
            using (var properties = new EbuSaveOptions())
            {
                if (_subtitle != null && _subtitle.Header != null && (_subtitle.Header.Contains("STL2") || _subtitle.Header.Contains("STL3")))
                {
                    var header = Ebu.ReadHeader(Encoding.UTF8.GetBytes(_subtitle.Header));
                    properties.Initialize(header, Ebu.EbuUiHelper.JustificationCode, null, _subtitle);
                }
                else
                {
                    var header = new Ebu.EbuGeneralSubtitleInformation();
                    if (!string.IsNullOrEmpty(_fileName) && new Ebu().IsMine(null, _fileName))
                    {
                        properties.Initialize(header, Ebu.EbuUiHelper.JustificationCode, _fileName, _subtitle);
                    }
                    else
                    {
                        properties.Initialize(header, Ebu.EbuUiHelper.JustificationCode, null, _subtitle);
                    }
                }

                if (properties.ShowDialog(this) == DialogResult.OK)
                {
                    Ebu.EbuUiHelper.JustificationCode = properties.JustificationCode;
                }
            }
        }

        private void ExportToEdlWithClipName(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.EdlClipName, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ExportToEdl(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(_subtitle, GetCurrentSubtitleFormat(), ExportPngXml.ExportFormats.Edl, _fileName, _videoInfo, _videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        private void ToolStripMenuItemAddWaveformBatchClick(object sender, EventArgs e)
        {
            using (var form = new AddWaveformBatch())
            {
                form.ShowDialog(this);
            }
        }

        private void DisplaySubtitleNotLoadedMessage()
        {
            MessageBox.Show(this, _language.NoSubtitleLoaded, Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }

        private void toolStripMenuItemExportBdTextSt_Click(object sender, EventArgs e)
        {
            using (var form = new ExportTextST(_subtitle))
            {
                form.ShowDialog(this);
            }
        }

        private void ChooseProfile()
        {
            using (var form = new ProfileChoose(Configuration.Settings.General.Profiles, Configuration.Settings.General.CurrentProfile))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    SubtitleListview1.BeginUpdate();
                    for (int i = 0; i < _subtitle.Paragraphs.Count; i++)
                    {
                        SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, i, _subtitle.Paragraphs[i]);
                    }

                    SubtitleListview1.EndUpdate();
                    if (_subtitleListViewIndex >= 0)
                    {
                        UpdateListViewTextInfo(labelTextLineLengths, labelSingleLine, labelSingleLinePixels, labelTextLineTotal, labelCharactersPerSecond, _subtitle.Paragraphs[_subtitleListViewIndex], textBoxListViewText);
                    }

                    ShowLineInformationListView();
                    ShowSourceLineNumber();
                }
            }
        }

        private void DuplicateLine()
        {
            if (SubtitleListview1.SelectedItems.Count != 1)
            {
                return;
            }

            var firstSelectedIndex = SubtitleListview1.SelectedItems[0].Index;
            MakeHistoryForUndo(_language.BeforeInsertLine);
            var newParagraph = new Paragraph();
            SetStyleForNewParagraph(newParagraph, firstSelectedIndex);
            var cur = _subtitle.GetParagraphOrDefault(firstSelectedIndex);
            newParagraph.StartTime.TotalMilliseconds = cur.StartTime.TotalMilliseconds;
            newParagraph.EndTime.TotalMilliseconds = cur.EndTime.TotalMilliseconds;
            newParagraph.Text = cur.Text;

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && _subtitleAlternate != null && _subtitleAlternate.Paragraphs.Count > 0)
            {
                var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex, _subtitle.Paragraphs[firstSelectedIndex], _subtitleAlternate.Paragraphs);
                if (currentOriginal != null)
                {
                    _subtitleAlternate.Paragraphs.Insert(_subtitleAlternate.Paragraphs.IndexOf(currentOriginal) + 1, new Paragraph(currentOriginal));
                }
                else
                {
                    _subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                }
                _subtitleAlternate.Renumber();
            }

            if (_networkSession != null)
            {
                _networkSession.TimerStop();
                NetworkGetSendUpdates(new List<int>(), firstSelectedIndex, newParagraph);
            }
            else
            {
                _subtitle.Paragraphs.Insert(firstSelectedIndex, newParagraph);
                _subtitle.Renumber();
                SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            }

            SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            ShowSource();
            ShowStatus(_language.LineInserted);
        }

        private void toolStripSelected_Click(object sender, EventArgs e)
        {
            if (!ShowProfileInStatusBar)
            {
                labelStatus_Click(sender, e);
                return;
            }

            var x = statusStrip1.PointToClient(Cursor.Position).X;
            var textWidth = TextRenderer.MeasureText(toolStripSelected.Text, toolStripSelected.Font).Width;
            if (toolStripStatusLabelProgress.Visible)
            {
                textWidth += toolStripStatusLabelProgress.Width + 5;
            }

            var min = statusStrip1.Width - textWidth - 20;
            var max = min + TextRenderer.MeasureText(Configuration.Settings.General.CurrentProfile, toolStripSelected.Font).Width + 10;
            if (x >= min && x <= max)
            {
                ChooseProfile(); // profile name in status bar clicked
            }
            else
            {
                labelStatus_Click(sender, e);
            }
        }

        private void contextMenuStripWaveform_Closing(object sender, ToolStripDropDownClosingEventArgs e)
        {
            _lastWaveformMenuCloseTicks = DateTime.UtcNow.Ticks;
        }

        private void MenuOpened(object sender, EventArgs e)
        {
            IsMenuOpen = true;
        }

        private void MenuClosed(object sender, ToolStripDropDownClosedEventArgs e)
        {
            IsMenuOpen = false;
        }

        private void MenuClosed(object sender, EventArgs e)
        {
            IsMenuOpen = false;
        }

        private void UpdateNetflixGlyphCheckToolsVisibility()
        {
            bool showTools = IsNetflixGlyphCheckAvailable();
            toolStripButtonNetflixQualityCheck.Visible = showTools && Configuration.Settings.General.ShowToolbarNetflixGlyphCheck;
        }

        private bool IsNetflixGlyphCheckAvailable()
        {
            var formatType = GetCurrentSubtitleFormat().GetType();
            return formatType == typeof(TimedText10) || formatType == typeof(NetflixTimedText) || formatType == typeof(NetflixImsc11Japanese) || formatType == typeof(Ebu);
        }

        private void NetflixGlyphCheck(bool isSaving)
        {
            ReloadFromSourceView();

            string fileName = string.IsNullOrEmpty(_fileName) ? "UntitledSubtitle" : Path.GetFileNameWithoutExtension(_fileName);
            string language = LanguageAutoDetect.AutoDetectGoogleLanguage(_subtitle);
            var messages = new List<string>();
            var reportFiles = new List<string>();

            var netflixController = new NetflixQualityController { Language = language };
            if (!string.IsNullOrEmpty(_videoFileName) && _videoInfo != null && _videoInfo.FramesPerSecond > 20)
            {
                netflixController.FrameRate = _videoInfo.FramesPerSecond;
            }

            netflixController.RunChecks(_subtitle);

            if (netflixController.Records.Count > 0)
            {
                string reportPath = Path.GetTempPath() + fileName + "_NetflixQualityCheck.csv";
                netflixController.SaveCsv(reportPath);
                string msgFormat = string.Format("{0}\r\n\r\n{1}", string.Format(Configuration.Settings.Language.NetflixQualityCheck.FoundXIssues, netflixController.Records.Count),
                    Configuration.Settings.Language.NetflixQualityCheck.ReportPrompt);
                messages.Add(string.Format(msgFormat, reportPath));
                reportFiles.Add(reportPath);
                using (var dialog = new NetflixQCResult(string.Join(Environment.NewLine, messages), reportFiles))
                {
                    if (!isSaving)
                    {
                        if (Configuration.Settings.General.ShowBetaStuff)
                        {
                            using (var form = new NetflixFixErrors(_subtitle, GetCurrentSubtitleFormat(), _fileName))
                            {
                                if (form.ShowDialog(this) == DialogResult.OK)
                                {

                                }
                            }
                        }
                        else
                        {
                            dialog.ShowDialog(this);
                        }
                    }
                    else
                    {
                        ShowStatus(string.Format(_language.SavedSubtitleX, _fileName) + " - " +
                                   string.Format(Configuration.Settings.Language.NetflixQualityCheck.FoundXIssues, netflixController.Records.Count));
                    }
                }
            }
            else if (!isSaving)
            {
                messages.Add(Configuration.Settings.Language.NetflixQualityCheck.CheckOk);
                using (var dialog = new NetflixQCResult(string.Join(Environment.NewLine, messages), reportFiles))
                {
                    dialog.ShowDialog(this);
                }
            }
        }

        private void netflixGlyphCheckToolStripMenuItem_Click(object sender, EventArgs e)
        {
            NetflixGlyphCheck(false);
        }

        private void toolStripButtonNetflixGlyphCheck_Click(object sender, EventArgs e)
        {
            NetflixGlyphCheck(false);
        }

        private void insertSubtitleHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openFileDialog1.Title = _languageGeneral.OpenSubtitle;
            openFileDialog1.FileName = string.Empty;
            openFileDialog1.Filter = UiUtil.SubtitleExtensionFilter.Value;
            if (openFileDialog1.ShowDialog(this) == DialogResult.OK && File.Exists(openFileDialog1.FileName))
            {
                var fi = new FileInfo(openFileDialog1.FileName);
                if (fi.Length > 1024 * 1024 * 10) // max 10 mb
                {
                    var text = string.Format(_language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + _language.ContinueAnyway, openFileDialog1.FileName);
                    if (MessageBox.Show(this, text, Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                Encoding encoding;
                var subtitle = new Subtitle();
                SubtitleFormat format = subtitle.LoadSubtitle(openFileDialog1.FileName, out encoding, null);
                if (format != null && subtitle.Paragraphs.Count > 0)
                {
                    SaveSubtitleListviewIndices();

                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        subtitle.RemoveEmptyLines();
                    }

                    var adjustment = mediaPlayer.CurrentPosition - subtitle.Paragraphs[0].StartTime.TotalSeconds;
                    if (adjustment < 0)
                    {
                        adjustment = 0;
                    }

                    foreach (Paragraph newP in subtitle.Paragraphs)
                    {
                        newP.Adjust(1.0d, adjustment);
                        if (_subtitle.Paragraphs.Any(p => newP.StartTime.TotalMilliseconds >= p.StartTime.TotalMilliseconds &&
                                                          newP.StartTime.TotalMilliseconds <= p.EndTime.TotalMilliseconds ||
                                                          newP.EndTime.TotalMilliseconds >= p.StartTime.TotalMilliseconds &&
                                                          newP.EndTime.TotalMilliseconds <= p.EndTime.TotalMilliseconds))
                        {
                            // new subs will overlap existing subs
                            if (MessageBox.Show(_language.PromptInsertSubtitleOverlap, _languageGeneral.Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                            {
                                return;
                            }

                            break;
                        }
                    }

                    MakeHistoryForUndo(string.Format(_language.BeforeInsertSubtitleAtVideoPosition, openFileDialog1.FileName));

                    foreach (var p in subtitle.Paragraphs)
                    {
                        _subtitle.InsertParagraphInCorrectTimeOrder(p);
                    }

                    _subtitle.Renumber();
                    ShowSource();
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    RestoreSubtitleListviewIndices();
                }
            }
        }

        private void actorToolStripMenuItemClick(object sender, EventArgs e)
        {
            SortSubtitle(SubtitleSortCriteria.Actor, (sender as ToolStripItem).Text);
        }

        private void toolStripMenuItemFcpXmlAdvanced_Click(object sender, EventArgs e)
        {
            using (var dialog = new ExportFcpXmlAdvanced(_subtitle, _videoFileName))
            {
                dialog.ShowDialog(this);
            }
        }

        private void toolStripMenuItemOpenVideoFromUrl_Click(object sender, EventArgs e)
        {
            using (var form = new TextPrompt(Configuration.Settings.Language.Main.OpenVideoFile, "Url"))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string url = form.InputText;
                    if (!string.IsNullOrEmpty(url))
                    {
                        if (audioVisualizer.WavePeaks != null)
                        {
                            audioVisualizer.WavePeaks = null;
                            audioVisualizer.SetSpectrogram(null);
                            audioVisualizer.SceneChanges = new List<double>();
                        }

                        if (!panelVideoPlayer.Visible)
                        {
                            toolStripButtonToggleVideo_Click(null, null);
                        }

                        ShowSubtitleTimer.Stop();
                        Cursor = Cursors.WaitCursor;
                        VideoFileName = url;
                        if (mediaPlayer.VideoPlayer != null)
                        {
                            mediaPlayer.PauseAndDisposePlayer();
                        }

                        _endSeconds = -1;
                        UiUtil.InitializeVideoPlayerAndContainer(url, _videoInfo, mediaPlayer, VideoLoaded, VideoEnded);
                        mediaPlayer.Volume = 0;
                        mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
                        mediaPlayer.OnButtonClicked -= MediaPlayer_OnButtonClicked;
                        mediaPlayer.OnButtonClicked += MediaPlayer_OnButtonClicked;
                        labelVideoInfo.Text = url;
                        Cursor = Cursors.Default;
                        SetUndockedWindowsTitle();
                        ShowSubtitleTimer.Start();
                    }
                }
            }
        }

        private void SmpteTimeModedropFrameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            smpteTimeModedropFrameToolStripMenuItem.Checked = !smpteTimeModedropFrameToolStripMenuItem.Checked;
            mediaPlayer.SmpteMode = smpteTimeModedropFrameToolStripMenuItem.Checked;
        }

        private void moveTextUpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var indices = SubtitleListview1.SelectedIndices.OfType<int>().OrderBy(p => p).ToList();
            if (indices.Count == 0 || indices[0] - 1 < 0)
            {
                return;
            }

            MakeHistoryForUndo(string.Format(_language.BeforeX, _language.Menu.ContextMenu.ColumnTextUp));
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.BeginUpdate();
            foreach (int index in indices)
            {
                if (index - 1 >= 0)
                {
                    var p = _subtitle.Paragraphs[index];
                    var prev = _subtitle.Paragraphs[index - 1];
                    var prevText = prev.Text;
                    prev.Text = p.Text;
                    p.Text = prevText;
                    SubtitleListview1.Items[index - 1].Selected = true;
                    SubtitleListview1.Items[index].Selected = false;
                    SubtitleListview1.SetText(index - 1, prev.Text);
                    SubtitleListview1.SetText(index, p.Text);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index - 1, prev);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                }
            }

            SubtitleListview1.EndUpdate();
            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.EnsureVisible(FirstSelectedIndex);
            _subtitleListViewIndex = -1;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private void moveTextDownToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var indices = SubtitleListview1.SelectedIndices.OfType<int>().OrderByDescending(p => p).ToList();
            if (indices.Count == 0 || indices[0] + 1 >= _subtitle.Paragraphs.Count)
            {
                return;
            }

            MakeHistoryForUndo(string.Format(_language.BeforeX, _language.Menu.ContextMenu.ColumnTextDown));
            SubtitleListview1.SelectedIndexChanged -= SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.BeginUpdate();
            foreach (int index in indices)
            {
                if (index + 1 < _subtitle.Paragraphs.Count)
                {
                    var p = _subtitle.Paragraphs[index];
                    var next = _subtitle.Paragraphs[index + 1];
                    var nextText = next.Text;
                    next.Text = p.Text;
                    p.Text = nextText;
                    SubtitleListview1.Items[index + 1].Selected = true;
                    SubtitleListview1.Items[index].Selected = false;
                    SubtitleListview1.SetText(index, p.Text);
                    SubtitleListview1.SetText(index + 1, next.Text);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index, p);
                    SubtitleListview1.SyntaxColorLine(_subtitle.Paragraphs, index + 1, next);
                }
            }

            SubtitleListview1.EndUpdate();
            SubtitleListview1.SelectedIndexChanged += SubtitleListview1_SelectedIndexChanged;
            SubtitleListview1.EnsureVisible(FirstSelectedIndex);
            SubtitleListview1.EnsureVisible(indices[0]);
            _subtitleListViewIndex = -1;
            SubtitleListview1_SelectedIndexChanged(null, null);
        }

        private void generateTextFromCurrentVideoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var form = new AudioToText(_videoFileName, _videoInfo))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    _subtitle.Paragraphs.Clear();
                    _subtitle.Paragraphs.AddRange(form.Subtitle.Paragraphs);
                    SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
                    if (_subtitle.Paragraphs.Count > 1)
                    {
                        ToolStripMenuItemAutoMergeShortLinesClick(sender, e);
                    }
                }
            }
        }

        private void toolStripMenuDvdStudioProperties_Click(object sender, EventArgs e)
        {
            using (var form = new DvdStudioProProperties())
            {
                form.ShowDialog(this);
            }
        }

        private void boxToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewToggleTag("box");
        }

        private void ShowHideBookmark(Paragraph p)
        {
            if (!string.IsNullOrWhiteSpace(p.Bookmark))
            {
                pictureBoxBookmark.Show();
                if (_showBookmarkLabel)
                {
                    panelBookmark.Show();
                    using (var graphics = CreateGraphics())
                    {
                        var textSize = graphics.MeasureString(p.Bookmark, Font);
                        labelBookmark.Text = p.Bookmark;
                        panelBookmark.Left = pictureBoxBookmark.Left;
                        panelBookmark.Top = pictureBoxBookmark.Top + pictureBoxBookmark.Height + 9;
                        panelBookmark.Width = (int)textSize.Width + 20;
                        panelBookmark.Height = (int)textSize.Height + 20;
                        panelBookmark.Show();
                    }
                }
                else
                {
                    panelBookmark.Hide();
                }
            }
            else if (p.Bookmark != null)
            {
                pictureBoxBookmark.Show();
                panelBookmark.Hide();
            }
            else if (panelBookmark.Visible || pictureBoxBookmark.Visible)
            {
                panelBookmark.Hide();
                pictureBoxBookmark.Hide();
            }
        }

        private void pictureBoxBookmark_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                if (panelBookmark.Visible)
                {
                    panelBookmark.Hide();
                    _showBookmarkLabel = false;
                }
                else
                {
                    _showBookmarkLabel = true;
                    var p = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                    if (p != null)
                    {
                        ShowHideBookmark(p);
                    }
                }
            }
        }

        private void pictureBoxBookmark_MouseEnter(object sender, EventArgs e)
        {
            if (_bookmarkContextMenu != null)
            {
                return;
            }

            _bookmarkContextMenu = new ContextMenu();

            // edit bookmark
            var menuItem = new MenuItem(Configuration.Settings.Language.Main.Menu.ContextMenu.EditBookmark);
            menuItem.Click += (sender2, e2) => { labelBookmark_DoubleClick(null, null); };
            _bookmarkContextMenu.MenuItems.Add(menuItem);

            // remove bookmark
            menuItem = new MenuItem(Configuration.Settings.Language.Main.Menu.ContextMenu.RemoveBookmark);
            menuItem.Click += (sender2, e2) =>
            {
                var p2 = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
                if (p2 != null)
                {
                    MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Main.Menu.ContextMenu.RemoveBookmark));
                    p2.Bookmark = null;
                    SubtitleListview1.ShowState(_subtitleListViewIndex, p2);
                    ShowHideBookmark(p2);
                    SetListViewStateImages();
                    new BookmarkPersistence(_subtitle, _fileName).Save();
                }
            };
            _bookmarkContextMenu.MenuItems.Add(menuItem);

            _bookmarkContextMenu.MenuItems.Add("-");

            // go to bookmark
            menuItem = new MenuItem(Configuration.Settings.Language.Settings.GoToBookmark);
            menuItem.Click += (sender2, e2) => { GoToBookmark(); };
            _bookmarkContextMenu.MenuItems.Add(menuItem);

            // clear all bookmarks
            menuItem = new MenuItem(Configuration.Settings.Language.Settings.ClearBookmarks);
            menuItem.Click += (sender2, e2) => { ClearBookmarks(); };
            _bookmarkContextMenu.MenuItems.Add(menuItem);

            pictureBoxBookmark.ContextMenu = _bookmarkContextMenu;
        }

        private void labelBookmark_DoubleClick(object sender, EventArgs e)
        {
            var p1 = _subtitle.GetParagraphOrDefault(_subtitleListViewIndex);
            if (p1 != null)
            {
                using (var form = new BookmarkAdd(p1))
                {
                    var result = form.ShowDialog(this);
                    if (result == DialogResult.OK)
                    {
                        MakeHistoryForUndo(string.Format(_language.BeforeX, Configuration.Settings.Language.Main.Menu.ContextMenu.EditBookmark));
                        p1.Bookmark = form.Comment;
                        SubtitleListview1.ShowState(_subtitleListViewIndex, p1);
                        ShowHideBookmark(p1);
                        SetListViewStateImages();
                        new BookmarkPersistence(_subtitle, _fileName).Save();
                    }
                }
            }
        }

        private void googleTranslateToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TranslateViaGoogle(true, true);
        }

        private void microsoftBingTranslateToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TranslateViaGoogle(true, false);
        }

        private void toolStripMenuItemBookmark_Click(object sender, EventArgs e)
        {
            ToggleBookmarks(true);
        }

        private void RunActionOnAllParagraphs(Func<Paragraph, string> action, string historyMessage)
        {
            if (_subtitle.Paragraphs.Count <= 0 || SubtitleListview1.SelectedItems.Count <= 0)
            {
                return;
            }

            int linesUpdated = 0;
            var selectedIndices = SubtitleListview1.GetSelectedIndices();
            for (int i = selectedIndices.Length - 1; i >= 0; i--)
            {
                int idx = selectedIndices[i];
                var p = _subtitle.GetParagraphOrDefault(idx);
                if (p != null)
                {
                    var newText = action.Invoke(p);
                    if (newText != p.Text)
                    {
                        if (linesUpdated == 0)
                        {
                            MakeHistoryForUndo(historyMessage);
                        }
                        if (newText.IsOnlyControlCharactersOrWhiteSpace())
                        {
                            _subtitle.Paragraphs.RemoveAt(idx);
                        }
                        else
                        {
                            p.Text = newText;
                        }
                        linesUpdated++;
                    }

                    if (_subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(idx, p, _subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            newText = action.Invoke(original);
                            if (newText != original.Text)
                            {
                                if (linesUpdated == 0)
                                {
                                    MakeHistoryForUndo(historyMessage);
                                }
                                if (newText.IsOnlyControlCharactersOrWhiteSpace())
                                {
                                    _subtitleAlternate.Paragraphs.RemoveAt(idx);
                                }
                                else
                                {
                                    original.Text = newText;
                                }
                                linesUpdated++;
                            }
                        }
                    }
                }
            }

            if (linesUpdated == 0)
            {
                return; // nothing changed
            }

            var firstIdx = FirstSelectedIndex;
            _subtitle.Renumber();
            _subtitleAlternate?.Renumber();
            SubtitleListview1.Fill(_subtitle, _subtitleAlternate);
            ShowSource();
            SubtitleListview1.SelectIndexAndEnsureVisibleFaster(firstIdx);
            RefreshSelectedParagraph();
            ShowStatus(string.Format(_language.LinesUpdatedX, linesUpdated));
        }

        private void removeAllFormattingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                var s = p.Text.Replace("♪", string.Empty).Replace("♫", string.Empty);
                s = NetflixImsc11Japanese.RemoveTags(s);
                return HtmlUtil.RemoveHtmlTags(s, true).Trim();
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingAll));
        }

        private void removeBoldToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                return p.Text.Replace("<b>", string.Empty)
                    .Replace("<B>", string.Empty)
                    .Replace("</b>", string.Empty)
                    .Replace("</B>", string.Empty);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingBold));
        }

        private void removeItalicToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                return p.Text.Replace("<i>", string.Empty)
                    .Replace("<I>", string.Empty)
                    .Replace("</i>", string.Empty)
                    .Replace("</I>", string.Empty);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingItalic));
        }

        private void removeUnderlineToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                return p.Text.Replace("<u>", string.Empty)
                    .Replace("<U>", string.Empty)
                    .Replace("</u>", string.Empty)
                    .Replace("</U>", string.Empty);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingUnderline));
        }

        private void removeColorToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                if (!p.Text.Contains("<font", StringComparison.OrdinalIgnoreCase))
                {
                    return p.Text;
                }

                var r = new Regex("[ ]*(COLOR|color|Color)=[\"']*[#\\dA-Za-z]*[\"']*[ ]*");
                var s = p.Text;
                var match = r.Match(s);
                while (match.Success)
                {
                    s = s.Remove(match.Index, match.Value.Length).Insert(match.Index, " ");
                    if (match.Index > 4)
                    {
                        var font = s.Substring(match.Index - 5);
                        if (font.StartsWith("<font >", StringComparison.OrdinalIgnoreCase))
                        {
                            s = s.Remove(match.Index - 5, 7);
                            var endIndex = s.IndexOf("</font>", match.Index - 5, StringComparison.OrdinalIgnoreCase);
                            if (endIndex >= 0)
                            {
                                s = s.Remove(endIndex, 7);
                            }
                        }
                        else if (s.Length > match.Index + 1 && s[match.Index + 1] == '>')
                        {
                            s = s.Remove(match.Index, 1);
                        }
                    }

                    match = r.Match(s);
                }

                return s.Trim();
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingColor));
        }

        private void removeFontNameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                if (!p.Text.Contains("<font", StringComparison.OrdinalIgnoreCase))
                {
                    return p.Text;
                }

                var r = new Regex("[ ]*(FACE|face|Face)=[\"']*[\\d\\p{L} ]*[\"']*[ ]*");
                var s = p.Text;
                var match = r.Match(s);
                while (match.Success)
                {
                    s = s.Remove(match.Index, match.Value.Length).Insert(match.Index, " ");
                    if (match.Index > 4)
                    {
                        var font = s.Substring(match.Index - 5);
                        if (font.StartsWith("<font >", StringComparison.OrdinalIgnoreCase))
                        {
                            s = s.Remove(match.Index - 5, 7);
                            var endIndex = s.IndexOf("</font>", match.Index - 5, StringComparison.OrdinalIgnoreCase);
                            if (endIndex >= 0)
                            {
                                s = s.Remove(endIndex, 7);
                            }
                        }
                        else if (s.Length > match.Index + 1 && s[match.Index + 1] == '>')
                        {
                            s = s.Remove(match.Index, 1);
                        }
                    }

                    match = r.Match(s);
                }

                return s;
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingFontName));
        }

        private void removeAlignmentToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RunActionOnAllParagraphs((p) =>
            {
                if (!p.Text.Contains('{'))
                {
                    return p.Text;
                }

                return RemoveAssAlignmentTags(p.Text);
            }, string.Format(_language.BeforeX, _language.Menu.ContextMenu.RemoveFormattingAlignment));
        }

        private void BoutenToolStripMenuItemClick(object sender, EventArgs e)
        {
            MakeHistoryForUndo(string.Format(_language.BeforeX, (sender as ToolStripMenuItem).Text));
            TextBoxListViewToggleTag((sender as ToolStripMenuItem).Text);
        }

        private void toolStripMenuItemHorizontalDigits_Click(object sender, EventArgs e)
        {
            MakeHistoryForUndo(string.Format(_language.BeforeX, "horizontalDigit"));
            TextBoxListViewToggleTag("horizontalDigit");
        }

        private void toolStripMenuItemSetParagraphAsSelection_Click(object sender, EventArgs e)
        {
            if (SubtitleListview1.SelectedItems.Count == 1 && audioVisualizer != null && audioVisualizer.NewSelectionParagraph != null)
            {
                var idx = SubtitleListview1.SelectedItems[0].Index;
                var p = _subtitle.Paragraphs[idx];
                ButtonSetEndAndGoToNextClick(null, null);
                p.StartTime.TotalMilliseconds = audioVisualizer.NewSelectionParagraph.StartTime.TotalMilliseconds;
                p.EndTime.TotalMilliseconds = audioVisualizer.NewSelectionParagraph.EndTime.TotalMilliseconds;
                SubtitleListview1.SetStartTimeAndDuration(idx, p, _subtitle.GetParagraphOrDefault(idx - 1), _subtitle.GetParagraphOrDefault(idx + 1));
                mediaPlayer.CurrentPosition = audioVisualizer.NewSelectionParagraph.EndTime.TotalSeconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines / 1000.0;
                audioVisualizer.NewSelectionParagraph = null;
            }
        }

        private void toolStripMenuItemRuby_Click(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();
            string before = string.Empty;
            string text = tb.SelectedText;
            string after = string.Empty;

            int selectionStart = tb.SelectionStart;
            if (selectionStart > 0)
            {
                before = tb.Text.Substring(0, selectionStart);
            }

            if (tb.Text.Length > selectionStart + text.Length)
            {
                after = tb.Text.Remove(0, selectionStart + text.Length);
            }

            if (text.StartsWith(' '))
            {
                before += " ";
                text = text.TrimStart();
            }

            if (text.EndsWith(' '))
            {
                after = " " + after;
            }

            using (var form = new RubyJapanese(before, text, after))
            {
                if (form.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                var rubyText = form.RubyText;
                if (form.RubyItalic)
                {
                    rubyText = "<ruby-text-italic>" + rubyText + "</ruby-text-italic>";
                }
                else
                {
                    rubyText = "<ruby-text>" + rubyText + "</ruby-text>";
                }
                var rubyHtml = before + "<ruby-container><ruby-base>" + form.RubyBaseText + "</ruby-base>" + rubyText + "</ruby-container>" + after;  // sami ruby tag fix
                var formatType = GetCurrentSubtitleFormat().GetType();
                if (formatType == typeof(Sami)) // sami ruby tag fix
                {
                    rubyHtml = rubyHtml.Replace("ruby-container", "ruby")
                        .Replace("ruby-text", "rt")
                        .Replace("<ruby-base>", string.Empty)
                        .Replace("</ruby-base>", string.Empty) // sami ruby tag fix rp remove
                        .Replace("<ruby-base-italic>", string.Empty) // sami ruby tag fix italic remove
                        .Replace("</ruby-base-italic>", string.Empty)
                        .Replace("<ruby-text-italic>", string.Empty)
                        .Replace("</ruby-text-italic>", string.Empty);
                }
                tb.Text = rubyHtml;
            }
        }

        private void toolStripMenuItemAutoTranslate_DropDownOpening(object sender, EventArgs e)
        {
            translatepoweredByMicrosoftToolStripMenuItem.Visible =
                !string.IsNullOrEmpty(Configuration.Settings.Tools.MicrosoftTranslatorApiKey) &&
                !string.IsNullOrEmpty(Configuration.Settings.Tools.MicrosoftTranslatorTokenEndpoint);
        }

        private void comboBoxSubtitleFormats_DropDownClosed(object sender, EventArgs e)
        {
            MenuClosed(sender, e);
            if (_oldSubtitleFormat.FriendlyName != GetCurrentSubtitleFormat().FriendlyName)
            {
                ComboBoxSubtitleFormatsSelectedIndexChanged(sender, e);
            }
        }

        private void comboBoxSubtitleFormats_DropDown(object sender, EventArgs e)
        {
            _oldSubtitleFormat = GetCurrentSubtitleFormat();
            MenuOpened(sender, e);
        }

        private void toolStripSplitButtonPlayRate_ButtonClick(object sender, EventArgs e)
        {
            toolStripSplitButtonPlayRate.ShowDropDown();
        }

        private void ShowButtonShortcut(string shortcut)
        {
            if (string.IsNullOrEmpty(shortcut))
            {
                ShowStatus(string.Empty, false);
            }
            else
            {
                ShowStatus(string.Format(Configuration.Settings.Language.General.ShortcutX, shortcut), false);
            }
        }

        private void buttonSetStartAndOffsetRest_MouseEnter(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2))
            {
                ShowButtonShortcut(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest2);
            }
            else
            {
                ShowButtonShortcut(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest);
            }
        }

        private void buttonSetEndAndGoToNext_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext);
        }

        private void buttonAdjustSetStartTime_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateSetStart);
        }

        private void buttonAdjustSetEndTime_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateSetEnd);
        }

        private void buttonInsertNewText_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos);
        }

        private void buttonAdjustPlayBefore_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore);
        }

        private void buttonAdjustGoToPosAndPause_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainVideoGoToStartCurrent);
        }

        private void buttonBeforeText_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainVideoPlayFromJustBefore);
        }

        private void buttonGotoSub_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainVideoGoToStartCurrent);
        }

        private void buttonSetStartTime_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateSetStart);
        }

        private void buttonSetEnd_MouseEnter(object sender, EventArgs e)
        {
            ShowButtonShortcut(Configuration.Settings.Shortcuts.MainCreateSetEnd);
        }

        private void boxToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            var tb = GetFocusedTextBox();
            tb.Text = HtmlUtil.ToggleTag(tb.Text, "box");
        }

        private void toolStripMenuItemPreview_Click(object sender, EventArgs e)
        {
            var htmlFileName = Path.Combine(Path.GetTempPath(), $"WebVttPreview_{Guid.NewGuid()}.html");
            var subText = Encoding.UTF8.GetBytes(new WebVTT().ToText(_subtitle, "preview"));
            File.WriteAllText(htmlFileName, @"<!doctype html>
<html lang='en'>
<head>
  <meta charset='utf-8'>
  <title>WebVTT preview</title>
</head>
  <body>
    <video controls preload='metadata'>
      <source src='[VIDEO]' type ='video/[EXT]' />
      <track label='English' kind='subtitles' srclang='en' src='data:text/vtt;base64, [BASE64]' default>
    </video>
  </body>
</html>"
                .Replace('\'', '"')
                .Replace("[BASE64]", Convert.ToBase64String(subText))
                .Replace("[VIDEO]", "file://" + _videoFileName)
                .Replace("[EXT]", Path.GetExtension(_videoFileName).TrimStart('.').ToLowerInvariant()), Encoding.UTF8);
            UiUtil.OpenFile(htmlFileName);
        }
    }
}
